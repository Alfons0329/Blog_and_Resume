{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to alfons0329's Blog\n\n\n\n\n\n\nAbout Me\n\n\n\n\nUndergraduate student major in Dept. of Computer Science at National Chaio Tung University Taiwan\n\n\nStarted to learn programming in Oct. 2015\n\n\nTime stamp of learning programming language\n\n\n\n\nOct. 2015 C in Intro to Computer Science and Programming\n\nFeb. 2016 C++ in Object-Oriented programming \nGitHub repository of this course\n\nMar. 2016 Verilog in Digital Circuit Lab \nGitHub repository of this course\n\nJun. 2017 JavaScript, processing simple HTML and CSS in my own website practice\nGitHub repository of this course\n\nSep. 2017 Python in Intro to Machine Learning \nGitHub repository of this course\n\nSep. 2017 ARM Assembly in Microprocessor Lab \nGitHub repository of this course\n\n\n\n\nFavorite extracurricular activities\n\n\nLanguage abilities\n\n\n\n\nTOEIC 925 and TOEFL iBT102(26/28/23/25) both on First try \n\nWant to try on Japanese JLPT N3(Intermediate level) on Jul. 2018\n\n\nMy GitHub personal page\n\n\nCheck here",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-alfons0329s-blog",
            "text": "",
            "title": "Welcome to alfons0329's Blog"
        },
        {
            "location": "/#about-me",
            "text": "Undergraduate student major in Dept. of Computer Science at National Chaio Tung University Taiwan  Started to learn programming in Oct. 2015  Time stamp of learning programming language   Oct. 2015 C in Intro to Computer Science and Programming \nFeb. 2016 C++ in Object-Oriented programming  GitHub repository of this course \nMar. 2016 Verilog in Digital Circuit Lab  GitHub repository of this course \nJun. 2017 JavaScript, processing simple HTML and CSS in my own website practice GitHub repository of this course \nSep. 2017 Python in Intro to Machine Learning  GitHub repository of this course \nSep. 2017 ARM Assembly in Microprocessor Lab  GitHub repository of this course   Favorite extracurricular activities  Language abilities   TOEIC 925 and TOEFL iBT102(26/28/23/25) both on First try  \nWant to try on Japanese JLPT N3(Intermediate level) on Jul. 2018",
            "title": "About Me"
        },
        {
            "location": "/#my-github-personal-page",
            "text": "Check here",
            "title": "My GitHub personal page"
        },
        {
            "location": "/univ_notes/intro_ml/intro_ml/",
            "text": "",
            "title": "Junior 1st sem. Intro. to Machine Learning"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/",
            "text": "Microprocessor Lab\n\n\nFall 2017\n\nLecturer: \nS.L. Tsao\n in CS@NCTU \n\nTime: 5EF @EDB27_NCTU 3IJK @EC222_NCTU\n\n\nMicroprocessor Lab Final Project\n\n\n\n\n\n\nCourse Introduction \n\nThis course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester.\n\n\n\n\n\n\nGoal of this course \n\nTo briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own.\n\n\n\n\n\n\nEmbedded board spec:\n\n1.Nucleo STM32L476RG ARM Microarchitecture \n\n2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided) \n\n3.GPIO Available \n\n\nDetailed specs\n \n\n\n\n\n\n\nIDE for this course\n\nEclipse  AC6 System Workbench for STM32 where JRE7 is required in your system\n\n\n\n\n\n\n1.Download from \nHere for Linux version\n\n\n\n\nLab project and final project \n\nThere are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are\ntypically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language.\n\n\n\n\nAbout my final project\n\n\n\n\nProject name: The RGB Ambient light. \n\n\nFeatures: \n\n1.Fully-customizable RGB proportion control. \n\n2.Color cycle speed controller (faster->original)\n\n3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings\n\n\nGitHub repo for this final project\n\n\n\n\nPart0. Origin of this idea and preparation\n\n\n\n\n\n\nOrigin of this idea\nI once have the fully-customizable dynamic RGB LED backlit keyboard \nSteelSeries APEXM 650\non account of having not much time in the end of semester(machine learning final project + compiler design final project.)\nMy \nteammate\n and I decided to do it.\n\n\n\n\n\n\nPreparation of materials and tools for this project\n1.A STM32L476RG Embedded board\n2.Breadboard\n3.4pin RGB LED*5 \nClick here\n\n4.R1000 Resistor\n5.Some jumper lines\n\n\n\n\n\n\nPart1. Circuit connection\n\n\n1.Parallel connection of 5 RGB LEDs on the breadboard.\n\n2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output.\n\n3.Connect the keypad to the STM32.\n\n4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter).\n\n5.The GPIO Connection is like.\n\n6.Overall GPIO port configuration.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\nGPIOB\n->\nASCR\n \n|=\n \n0\nb1\n;\n \n//turn on the analog controller in PB0\n\n\n\nvoid\n \nkeypad_init\n()\n//keypad along with GPIO Init together\n\n\n{\n\n\n    \nRCC\n->\nAHB2ENR\n   \n|=\n \n0\nb00000000000000000000000000000111\n;\n \n//open port A,B,C\n\n                      \n//10987654321098765432109876543210\n\n    \nGPIOC\n->\nMODER\n   \n&=\n \n0\nb11111111111111111111111100000000\n;\n \n//pc 3 2 1 0 as input of keypad\n\n    \nGPIOC\n->\nMODER\n   \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n->\nPUPDR\n   \n&=\n \n0\nb11111111111111111111111100000000\n;\n\n    \nGPIOC\n->\nPUPDR\n   \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n->\nOSPEEDR\n \n&=\n \n0\nb11111111111111111111111100000000\n;\n\n    \nGPIOC\n->\nOSPEEDR\n \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n->\nODR\n     \n|=\n \n0\nb00000000000000000000000000001111\n;\n\n                      \n//10987654321098765432109876543210\n\n    \nGPIOB\n->\nMODER\n   \n&=\n \n0\nb11111111111111110000000011111111\n;\n \n//pb 7 6 5 4 as output of keypad\n\n    \nGPIOB\n->\nPUPDR\n   \n&=\n \n0\nb11111111111111110000000011111111\n;\n\n    \nGPIOB\n->\nPUPDR\n   \n|=\n \n0\nb00000000000000001010101000000000\n;\n\n\n\n\n}\n\n\n\nvoid\n \nGPIO_init_AF\n()\n \n//GPIO Alternate Function Init\n\n\n{\n\n    \n/***************pin and alternate function***************\n\n\n     * PB3 + AF1 which is corresponding to TIM2_CH2 RED\n\n\n     * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN\n\n\n     * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE\n\n\n     ********************************************************/\n\n                       \n//10987654321098765432109876543210\n\n    \nGPIOA\n->\nMODER\n    \n&=\n \n0\nb11111111111111111100111111110011\n;\n\n    \nGPIOA\n->\nMODER\n    \n|=\n \n0\nb00000000000000000010000000001000\n;\n\n    \n//PortA Pin        //10987654321098765432109876543210\n\n    \nGPIOA\n->\nAFR\n[\n0\n]\n   \n=\n  \n0\nb00000010000100000000000000100000\n;\n\n\n    \n//PB3 TIM2_CH2\n\n    \nGPIOB\n->\nAFR\n[\n0\n]\n   \n&=\n \n~\nGPIO_AFRL_AFSEL3\n;\n//AFR[0] LOW\n\n    \nGPIOB\n->\nAFR\n[\n0\n]\n   \n|=\n \n(\n0\nb0001\n<<\nGPIO_AFRL_AFSEL3_Pos\n);\n//PB3 Alternate function mode\n\n\n}\n\n\n\n\n\n\n\nPart2. Key idea of this project\n\n\nThe PWM(Pulse Width Modulation) \nWiki\n\n(c code here)\n\n\nPart3. It's time to change the color.\n\n\nPart4. More idea: the ADC of light-sensitive resistor",
            "title": "Junior 1st sem. STM32 Microprocessor Embedded Lab"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#microprocessor-lab",
            "text": "Fall 2017 \nLecturer:  S.L. Tsao  in CS@NCTU  \nTime: 5EF @EDB27_NCTU 3IJK @EC222_NCTU",
            "title": "Microprocessor Lab"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#microprocessor-lab-final-project",
            "text": "Course Introduction  \nThis course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester.    Goal of this course  \nTo briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own.    Embedded board spec: \n1.Nucleo STM32L476RG ARM Microarchitecture  \n2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided)  \n3.GPIO Available   Detailed specs      IDE for this course Eclipse  AC6 System Workbench for STM32 where JRE7 is required in your system    1.Download from  Here for Linux version   Lab project and final project  \nThere are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are\ntypically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language.",
            "title": "Microprocessor Lab Final Project"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#about-my-final-project",
            "text": "Project name: The RGB Ambient light.   Features:  \n1.Fully-customizable RGB proportion control.  \n2.Color cycle speed controller (faster->original) \n3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings  GitHub repo for this final project",
            "title": "About my final project"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part0-origin-of-this-idea-and-preparation",
            "text": "Origin of this idea\nI once have the fully-customizable dynamic RGB LED backlit keyboard  SteelSeries APEXM 650 on account of having not much time in the end of semester(machine learning final project + compiler design final project.)\nMy  teammate  and I decided to do it.    Preparation of materials and tools for this project\n1.A STM32L476RG Embedded board\n2.Breadboard\n3.4pin RGB LED*5  Click here \n4.R1000 Resistor\n5.Some jumper lines",
            "title": "Part0. Origin of this idea and preparation"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part1-circuit-connection",
            "text": "1.Parallel connection of 5 RGB LEDs on the breadboard. \n2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output. \n3.Connect the keypad to the STM32. \n4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter). \n5.The GPIO Connection is like. \n6.Overall GPIO port configuration.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 GPIOB -> ASCR   |=   0 b1 ;   //turn on the analog controller in PB0  void   keypad_init () //keypad along with GPIO Init together  { \n\n     RCC -> AHB2ENR     |=   0 b00000000000000000000000000000111 ;   //open port A,B,C \n                       //10987654321098765432109876543210 \n     GPIOC -> MODER     &=   0 b11111111111111111111111100000000 ;   //pc 3 2 1 0 as input of keypad \n     GPIOC -> MODER     |=   0 b00000000000000000000000001010101 ; \n     GPIOC -> PUPDR     &=   0 b11111111111111111111111100000000 ; \n     GPIOC -> PUPDR     |=   0 b00000000000000000000000001010101 ; \n     GPIOC -> OSPEEDR   &=   0 b11111111111111111111111100000000 ; \n     GPIOC -> OSPEEDR   |=   0 b00000000000000000000000001010101 ; \n     GPIOC -> ODR       |=   0 b00000000000000000000000000001111 ; \n                       //10987654321098765432109876543210 \n     GPIOB -> MODER     &=   0 b11111111111111110000000011111111 ;   //pb 7 6 5 4 as output of keypad \n     GPIOB -> PUPDR     &=   0 b11111111111111110000000011111111 ; \n     GPIOB -> PUPDR     |=   0 b00000000000000001010101000000000 ;  }  void   GPIO_init_AF ()   //GPIO Alternate Function Init  { \n     /***************pin and alternate function***************       * PB3 + AF1 which is corresponding to TIM2_CH2 RED       * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN       * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE       ********************************************************/ \n                        //10987654321098765432109876543210 \n     GPIOA -> MODER      &=   0 b11111111111111111100111111110011 ; \n     GPIOA -> MODER      |=   0 b00000000000000000010000000001000 ; \n     //PortA Pin        //10987654321098765432109876543210 \n     GPIOA -> AFR [ 0 ]     =    0 b00000010000100000000000000100000 ; \n\n     //PB3 TIM2_CH2 \n     GPIOB -> AFR [ 0 ]     &=   ~ GPIO_AFRL_AFSEL3 ; //AFR[0] LOW \n     GPIOB -> AFR [ 0 ]     |=   ( 0 b0001 << GPIO_AFRL_AFSEL3_Pos ); //PB3 Alternate function mode  }",
            "title": "Part1. Circuit connection"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part2-key-idea-of-this-project",
            "text": "The PWM(Pulse Width Modulation)  Wiki \n(c code here)",
            "title": "Part2. Key idea of this project"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part3-its-time-to-change-the-color",
            "text": "",
            "title": "Part3. It's time to change the color."
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part4-more-idea-the-adc-of-light-sensitive-resistor",
            "text": "",
            "title": "Part4. More idea: the ADC of light-sensitive resistor"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/",
            "text": "UAV Drone autopilot, computer vision and image processing.\n\n\nSpring 2018\n\nLecturer: \nK.W. Chen\n in CS@NCTU \n\nTime: 4IJK @EC330_NCTU\n\n\nLab1. Introduction to Open CV and installation Mar 01, 2018\n\n\nLab1 pdf\n\n\nInstall Open CV\n\n\n\n\nIn the Ubuntu 16.04 64bit\nRequired dependencies are the followings \n\n1.Git \n\n2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) \n\n3.CMake 2.6 or higher \n\n4.GCC 4.4.x or later \n\n\n\n\n1\nsudo apt-get install libopencv-dev python-opencv\n\n\n\n\n\n\nOnce installed\n\n\n1\npkg-config --modversion opencv\n\n\n\n\n\n\nIf the version is shown, then we're good to rock with opencv. \n\n\n\n\nBuild your opencv_file.cpp with CMake or g++ standards\n\n\n\n\n1.With CMake (Don't forget to add CMakeLists.txt)\n\n\n1\n2\n3\n4\n5\ncmake_minimum_required(VERSION\n \n2.8)\n\n\nproject(\n \n<project_name>\n \n)\n\n\nfind_package(\n \nOpenCV\n \nREQUIRED\n \n)\n\n\nadd_executable(\n \n<project_name>\n \n<project_name>.cpp\n \n)\n\n\ntarget_link_libraries(\n \n<project_name>\n \n${OpenCV_LIBS}\n \n)\n\n\n\n\n\n\n\n2.With g++ and flags for opencv libraries\n\n\n1\ng++ lab1-2.cpp `pkg-config --cflags --libs opencv`\n\n\n\n\n\n\nToday's course contents\n\n\nBasic understanding of image processing and image data format.\n\nCourse week1 pdf\n\n\nBilinear Interpolation\n\nBasically ,this is an algorithm aimed for image transformation in this lab. \n\nThe interpolated value of a point is a reversely-weighted average of the neighboring points, \n\nsuch method is quite useful in the image transformation.",
            "title": "Junior 2nd sem. UAV Autopilot and Image Processing"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#uav-drone-autopilot-computer-vision-and-image-processing",
            "text": "Spring 2018 \nLecturer:  K.W. Chen  in CS@NCTU  \nTime: 4IJK @EC330_NCTU",
            "title": "UAV Drone autopilot, computer vision and image processing."
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab1-introduction-to-open-cv-and-installation-mar-01-2018",
            "text": "Lab1 pdf",
            "title": "Lab1. Introduction to Open CV and installation Mar 01, 2018"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#install-open-cv",
            "text": "In the Ubuntu 16.04 64bit\nRequired dependencies are the followings  \n1.Git  \n2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy)  \n3.CMake 2.6 or higher  \n4.GCC 4.4.x or later    1 sudo apt-get install libopencv-dev python-opencv   Once installed  1 pkg-config --modversion opencv   If the version is shown, then we're good to rock with opencv.    Build your opencv_file.cpp with CMake or g++ standards   1.With CMake (Don't forget to add CMakeLists.txt)  1\n2\n3\n4\n5 cmake_minimum_required(VERSION   2.8)  project(   <project_name>   )  find_package(   OpenCV   REQUIRED   )  add_executable(   <project_name>   <project_name>.cpp   )  target_link_libraries(   <project_name>   ${OpenCV_LIBS}   )    2.With g++ and flags for opencv libraries  1 g++ lab1-2.cpp `pkg-config --cflags --libs opencv`",
            "title": "Install Open CV"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-course-contents",
            "text": "Basic understanding of image processing and image data format. Course week1 pdf  Bilinear Interpolation \nBasically ,this is an algorithm aimed for image transformation in this lab.  \nThe interpolated value of a point is a reversely-weighted average of the neighboring points,  \nsuch method is quite useful in the image transformation.",
            "title": "Today's course contents"
        },
        {
            "location": "/univ_notes/internet_security/internet_security/",
            "text": "",
            "title": "Junior 2nd sem. Internet Security"
        }
    ]
}
{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to alfons0329's Blog\n\n\n\n\nAbout Me\n\n\nEducation\n\n\n\n\nBS in Dept. of Computer Science at National Chaio Tung University Taiwan (Sep 2015 - Jun 2019)\n    --- Successfully Applied to Exchange Student Program in Dept. of Computer Science in Carnegie Mellon University (Jan 2019 - May 2019) \n\n\nOverall GPA 3.91/4.3, Major 4.07/4.3 \n\n\nMost Relevant Courses: Intro to Machine Learning, Operating System, STM32 Embedded Microprocessor Lab, Network Security, UAVAutopilot and Computer Vision\n\n\nFavorite area in CS: Machine Learning, Computer Security and Computer Vision\n\n\nStarted to learn programming in Oct. 2015 from zero\n\n\nTime stamp of learning programming language \n\nOct. 2015 C in Intro to Computer Science and Programming\n\nFeb. 2016 C++ in Object-Oriented programming \nGitHub repository of this course\n\nMar. 2016 Verilog in Digital Circuit Lab \nGitHub repository of this course\n\nJun. 2017 JavaScript, processing simple HTML and CSS in my own website practice\nGitHub repository of this course\n\nSep. 2017 Python in Intro to Machine Learning \nGitHub repository of this course\n\nSep. 2017 ARM Assembly in Microprocessor Lab \nGitHub repository of this course\n\n\n\n\nMy GitHub personal page\n\n\nCheck here\n\n\nExperience and achievements in professional area \n\n\n2016 NTU Hackathon Winner, Category: Smart Life \nGitHub repo\n , we build an eye-care sensor which notifies user to set a period for easing one's eyes along with some game-like feature to make it more interesting\nParticipated in 2017 MakeNTU Hackthon, a hackathon mainly focus on software-hardware integration \nGitHub repo\n, we build a dog house with weight-sensor, once someone throw in a garbage, the feeder will work in order to feed the dog, want to make the balance between recycling and animal caring \n\n\nLeadership and extracurricular activities\n\n\nAug. 2015 - Sep. 2016 Swimming Team in National Chiao Tung University, Participated in 2 inter-collegiate swimming competition \n\n\nUniversity graduation projcts\n\n\nLanguage abilities \n\n\nTOEIC 925 and TOEFL iBT102(26/28/23/25) both on First try \n\nWant to try on Japanese JLPT N3(Intermediate level) on Jul. 2018", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-alfons0329s-blog", 
            "text": "", 
            "title": "Welcome to alfons0329's Blog"
        }, 
        {
            "location": "/#about-me", 
            "text": "", 
            "title": "About Me"
        }, 
        {
            "location": "/#education", 
            "text": "BS in Dept. of Computer Science at National Chaio Tung University Taiwan (Sep 2015 - Jun 2019)\n    --- Successfully Applied to Exchange Student Program in Dept. of Computer Science in Carnegie Mellon University (Jan 2019 - May 2019)   Overall GPA 3.91/4.3, Major 4.07/4.3   Most Relevant Courses: Intro to Machine Learning, Operating System, STM32 Embedded Microprocessor Lab, Network Security, UAVAutopilot and Computer Vision  Favorite area in CS: Machine Learning, Computer Security and Computer Vision  Started to learn programming in Oct. 2015 from zero  Time stamp of learning programming language  \nOct. 2015 C in Intro to Computer Science and Programming \nFeb. 2016 C++ in Object-Oriented programming  GitHub repository of this course \nMar. 2016 Verilog in Digital Circuit Lab  GitHub repository of this course \nJun. 2017 JavaScript, processing simple HTML and CSS in my own website practice GitHub repository of this course \nSep. 2017 Python in Intro to Machine Learning  GitHub repository of this course \nSep. 2017 ARM Assembly in Microprocessor Lab  GitHub repository of this course", 
            "title": "Education"
        }, 
        {
            "location": "/#my-github-personal-page", 
            "text": "Check here", 
            "title": "My GitHub personal page"
        }, 
        {
            "location": "/#experience-and-achievements-in-professional-area", 
            "text": "2016 NTU Hackathon Winner, Category: Smart Life  GitHub repo  , we build an eye-care sensor which notifies user to set a period for easing one's eyes along with some game-like feature to make it more interesting\nParticipated in 2017 MakeNTU Hackthon, a hackathon mainly focus on software-hardware integration  GitHub repo , we build a dog house with weight-sensor, once someone throw in a garbage, the feeder will work in order to feed the dog, want to make the balance between recycling and animal caring", 
            "title": "Experience and achievements in professional area "
        }, 
        {
            "location": "/#leadership-and-extracurricular-activities", 
            "text": "Aug. 2015 - Sep. 2016 Swimming Team in National Chiao Tung University, Participated in 2 inter-collegiate swimming competition", 
            "title": "Leadership and extracurricular activities"
        }, 
        {
            "location": "/#university-graduation-projcts", 
            "text": "", 
            "title": "University graduation projcts"
        }, 
        {
            "location": "/#language-abilities", 
            "text": "TOEIC 925 and TOEFL iBT102(26/28/23/25) both on First try  \nWant to try on Japanese JLPT N3(Intermediate level) on Jul. 2018", 
            "title": "Language abilities "
        }, 
        {
            "location": "/univ_notes/intro_ml/intro_ml/", 
            "text": "", 
            "title": "Junior 1st sem. Intro. to Machine Learning"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/", 
            "text": "Microprocessor Lab\n\n\nFall 2017\n\nLecturer: \nS.L. Tsao\n in CS@NCTU \n\nTime: 5EF @EDB27_NCTU 3IJK @EC222_NCTU\n\n\nMicroprocessor Lab Final Project\n\n\n\n\n\n\nCourse Introduction \n\nThis course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester.\n\n\n\n\n\n\nGoal of this course \n\nTo briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own.\n\n\n\n\n\n\nEmbedded board spec:\n\n1.Nucleo STM32L476RG ARM Microarchitecture \n\n2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided) \n\n3.GPIO Available \n\n\nDetailed specs\n \n\n\n\n\n\n\nIDE for this course\n\nEclipse  AC6 System Workbench for STM32 where JRE7 is required in your system\n\n\n\n\n\n\n1.Download from \nHere for Linux version\n\n\n\n\nLab project and final project \n\nThere are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are\ntypically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language.\n\n\n\n\nAbout my final project\n\n\n\n\nProject name: The RGB Ambient light. \n\n\nFeatures: \n\n1.Fully-customizable RGB proportion control. \n\n2.Color cycle speed controller (faster-\noriginal)\n\n3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings\n\n\nGitHub repo for this final project\n\n\nProject demo video\n\n\n\n\nPart0. Origin of this idea and preparation\n\n\n\n\n\n\nOrigin of this idea \n\nI once have the fully-customizable dynamic RGB LED backlit keyboard \nSteelSeries APEXM 650\n \n On account of having not much time in the end of semester(machine learning final project + compiler design final project.)\nMy \nteammate\n and I decided to do it.\n\n\n\n\n\n\nPreparation of materials and tools for this project \n\n1.A STM32L476RG Embedded board\n\n2.Breadboard\n\n3.4pin RGB LED*5 \nClick here\n\n4.R1000 Resistor\n\n5.Some Dupont cables\n\n\n\n\n\n\nPart1. Circuit connection\n\n\n1.Parallel connection of 5 RGB LEDs on the breadboard.\n\n2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output.\n\n3.Connect the keypad to the STM32.\n\n4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter).\n\n5.The GPIO Connection is like.\n\n6.Overall GPIO port configuration.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\nGPIOB\n-\nASCR\n \n|=\n \n0\nb1\n;\n \n//turn on the analog controller in PB0\n\n\n\nvoid\n \nkeypad_init\n()\n//keypad along with GPIO Init together\n\n\n{\n\n\n    \nRCC\n-\nAHB2ENR\n   \n|=\n \n0\nb00000000000000000000000000000111\n;\n \n//open port A,B,C\n\n                      \n//10987654321098765432109876543210\n\n    \nGPIOC\n-\nMODER\n   \n=\n \n0\nb11111111111111111111111100000000\n;\n \n//pc 3 2 1 0 as input of keypad\n\n    \nGPIOC\n-\nMODER\n   \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n-\nPUPDR\n   \n=\n \n0\nb11111111111111111111111100000000\n;\n\n    \nGPIOC\n-\nPUPDR\n   \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n-\nOSPEEDR\n \n=\n \n0\nb11111111111111111111111100000000\n;\n\n    \nGPIOC\n-\nOSPEEDR\n \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n-\nODR\n     \n|=\n \n0\nb00000000000000000000000000001111\n;\n\n                      \n//10987654321098765432109876543210\n\n    \nGPIOB\n-\nMODER\n   \n=\n \n0\nb11111111111111110000000011111111\n;\n \n//pb 7 6 5 4 as output of keypad\n\n    \nGPIOB\n-\nPUPDR\n   \n=\n \n0\nb11111111111111110000000011111111\n;\n\n    \nGPIOB\n-\nPUPDR\n   \n|=\n \n0\nb00000000000000001010101000000000\n;\n\n\n\n\n}\n\n\n\nvoid\n \nGPIO_init_AF\n()\n \n//GPIO Alternate Function Init\n\n\n{\n\n    \n/***************pin and alternate function***************\n\n\n     * PB3 + AF1 which is corresponding to TIM2_CH2 RED\n\n\n     * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN\n\n\n     * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE\n\n\n     ********************************************************/\n\n                       \n//10987654321098765432109876543210\n\n    \nGPIOA\n-\nMODER\n    \n=\n \n0\nb11111111111111111100111111110011\n;\n\n    \nGPIOA\n-\nMODER\n    \n|=\n \n0\nb00000000000000000010000000001000\n;\n\n    \n//PortA Pin        //10987654321098765432109876543210\n\n    \nGPIOA\n-\nAFR\n[\n0\n]\n   \n=\n  \n0\nb00000010000100000000000000100000\n;\n\n\n    \n//PB3 TIM2_CH2\n\n    \nGPIOB\n-\nAFR\n[\n0\n]\n   \n=\n \n~\nGPIO_AFRL_AFSEL3\n;\n//AFR[0] LOW\n\n    \nGPIOB\n-\nAFR\n[\n0\n]\n   \n|=\n \n(\n0\nb0001\nGPIO_AFRL_AFSEL3_Pos\n);\n//PB3 Alternate function mode\n\n\n}\n\n\n\n\n\n\n\nPart2. Key idea of this project\n\n\nThe PWM(Pulse Width Modulation) \nWiki\n\nPWM cycle (HV/ALL) = The proportion where light lights, the longer HV lasts, the brighter of the certain part of RGB(either one) will do.\n\nThe Pulse Width can be used to simulate the analog output like this.\n\n\nPWM Video\n\nThe same is true of other 3 colors, configuring with the following code and expanations.\n\n\n Basic logic for this project \n\nInitialize system -\n PWM and timer configuration -\n Presskey -\n Color changing scheme along with ADC light intensity detection for power saving.\n\n1\n2\n3\n4\nint\n \nkeypad_value\n[\n4\n][\n4\n]\n \n=\n \n{{\n0\n,\n1\n,\n2\n,\n3\n},\n\n                          \n{\n4\n,\n5\n,\n6\n,\n7\n},\n\n                          \n{\n8\n,\n9\n,\n10\n,\n11\n},\n\n                          \n{\n12\n,\n13\n,\n14\n,\n15\n}};\n\n\n\n\n\nkeypad explanation \n\n0 red+\n\n1 green+\n\n2 blue+\n\n3 cycle_speed+\n\n4 red-\n\n5 green-\n\n6 blue-\n\n7 customize mode(0 1 2 4 5 6 applicable)\n\n8 only red\n\n9 only green\n\n10 only blue\n\n11 light ADC mode\n\n12 red+greren\n\n13 green+blue\n\n14 red+blue\n\n15 off system, remember the last state, s.t. user configuration is not lost after shut down\n\n\n Setup the PWM channel\n\nRefer to \nthis pdf\n for PWM channel-GPIO port configuration, each port has its corresponding PWM channel and built-in system clock, be sure to make it right! \n\n\nMore understanding and details are written in comments of the following source code.\n\nPlease refer to \np.1006-1039\n of \nthis pdf\n to see how to config the PWM cycle with certain registers in timer.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\nvoid\n \nTimer_init\n()\n \n//Use 3\n\n\n{\n\n    \n// PA3 + AF1 which is corresponding to TIM2_CH1\n\n    \n// PA1 + AF2 which is corresponding to TIM5_CH2\n\n    \n// PA6 + AF2 which is corresponding to TIM3_CH1\n\n    \nRCC\n-\nAPB1ENR1\n \n|=\n \nRCC_APB1ENR1_TIM2EN\n;\n\n    \nRCC\n-\nAPB1ENR1\n \n|=\n \nRCC_APB1ENR1_TIM3EN\n;\n\n    \nRCC\n-\nAPB1ENR1\n \n|=\n \nRCC_APB1ENR1_TIM5EN\n;\n\n\n    \n//setting for timer 2\n\n    \nTIM2\n-\nCR1\n \n=\n \n0x0000\n;\n \n//p1027 Turned on the counter as the count up mode\n\n    \nTIM2\n-\nARR\n \n=\n \n(\nuint32_t\n)\nSECOND_SLICE\n;\n//Reload value\n\n    \nTIM2\n-\nPSC\n \n=\n \n(\nuint32_t\n)\nCOUNT_UP\n;\n//Prescaler\n\n    \nTIM2\n-\nEGR\n \n=\n \nTIM_EGR_UG\n;\n     \n//update the counter again p1035\n\n\n    \n//setting for timer 3\n\n    \nTIM3\n-\nCR1\n \n=\n \n0x0000\n;\n \n//p1027 Turned on the counter as the count up mode\n\n    \nTIM3\n-\nARR\n \n=\n \n(\nuint32_t\n)\nSECOND_SLICE\n;\n//Reload value\n\n    \nTIM3\n-\nPSC\n \n=\n \n(\nuint32_t\n)\nCOUNT_UP\n;\n//Prescaler\n\n    \nTIM3\n-\nEGR\n \n=\n \nTIM_EGR_UG\n;\n//Reinitialize the counter\n\n\n    \n//setting for timer 5\n\n    \nTIM5\n-\nCR1\n \n=\n \n0x0000\n;\n \n//p1027 Turned on the counter as the count up mode\n\n    \nTIM5\n-\nARR\n \n=\n \n(\nuint32_t\n)\nSECOND_SLICE\n;\n//Reload value\n\n    \nTIM5\n-\nPSC\n \n=\n \n(\nuint32_t\n)\nCOUNT_UP\n;\n//Prescaler\n\n    \nTIM5\n-\nEGR\n \n=\n \nTIM_EGR_UG\n;\n//Reinitialize the counter\n\n\n}\n\n\n\n\nvoid\n \nPWM_channel_init\n()\n\n\n{\n\n    \n/***********************setting for the TIM2_CH2 RED**************************/\n\n    \n// PB3 + AF1 which is corresponding to TIM2_CH2 RED\n\n    \n//Output compare 2 mode\n\n    \nTIM2\n-\nCCMR1\n \n=\n \n~\nTIM_CCMR1_OC2M\n;\n\n    \n//110: PWM mode 1: TIMx_CNT\nTIMx_CCR2--\nactive, or inactive\n\n    \nTIM2\n-\nCCMR1\n \n|=\n \n(\n0\nb0110\n \n \nTIM_CCMR1_OC2M_Pos\n);\n\n\n    \n//Output Compare 2 Preload Enable\n\n    \nTIM2\n-\nCCMR1\n \n=\n \n~\nTIM_CCMR1_OC2PE\n;\n//OCxPE\n\n    \n//1: enable TIMx_CCR1 Preload\n\n    \nTIM2\n-\nCCMR1\n \n|=\n \n(\n0\nb1\n \n \nTIM_CCMR1_OC2PE_Pos\n);\n\n    \n//enable auto reload pre-load\n\n    \nTIM2\n-\nCR1\n \n|=\n \nTIM_CR1_ARPE\n;\n\n\n    \n//duty cycle initial 50 (CCR2/ARR)\n\n    \n//TIM2-\nCCR2 = duty_cycle_R;\n\n    \n//enable output compare\n\n    \nTIM2\n-\nCCER\n \n|=\n \nTIM_CCER_CC2E\n;\n\n\n    \n/***********************setting for the TIM5_CH2 GREEN**************************/\n\n    \n// PA1 + AF2 which is corresponding to TIM5_CH2 GREEN\n\n    \n//Output compare 2 mode\n\n    \nTIM5\n-\nCCMR1\n \n=\n \n~\nTIM_CCMR1_OC2M\n;\n\n    \n//110: PWM mode 1: TIMx_CNT\nTIMx_CCR2--\nactive, or inactive\n\n    \nTIM5\n-\nCCMR1\n \n|=\n \n(\n0\nb0110\n \n \nTIM_CCMR1_OC2M_Pos\n);\n\n\n    \n//Output Compare 2 Preload Enable\n\n    \nTIM5\n-\nCCMR1\n \n=\n \n~\nTIM_CCMR1_OC2PE\n;\n//OCxPE\n\n    \n//1: enable TIMx_CCR1 Preload\n\n    \nTIM5\n-\nCCMR1\n \n|=\n \n(\n0\nb1\n \n \nTIM_CCMR1_OC2PE_Pos\n);\n\n    \n//enable auto reload pre-load\n\n    \nTIM5\n-\nCR1\n \n|=\n \nTIM_CR1_ARPE\n;\n\n\n    \n//duty cycle initial 50 (CCR2/ARR)\n\n    \n//TIM5-\nCCR2 = duty_cycle_G;\n\n    \n//enable output compare\n\n    \nTIM5\n-\nCCER\n \n|=\n \nTIM_CCER_CC2E\n;\n\n\n    \n/***********************setting for the TIM3_CH1 BLUE**************************/\n\n    \n// PA6 + AF2 which is corresponding to TIM3_CH1 BLUE\n\n    \n//Output compare 2 mode\n\n    \nTIM3\n-\nCCMR1\n \n=\n \n~\nTIM_CCMR1_OC1M\n;\n\n    \n//110: PWM mode 1: TIMx_CNT\nTIMx_CCR2--\nactive, or inactive\n\n    \nTIM3\n-\nCCMR1\n \n|=\n \n(\n0\nb0110\n \n \nTIM_CCMR1_OC1M_Pos\n);\n\n\n    \n//Output Compare 2 Preload Enable\n\n    \nTIM3\n-\nCCMR1\n \n=\n \n~\nTIM_CCMR1_OC1PE\n;\n//OCxPE\n\n    \n//1: enable TIMx_CCR1 Preload\n\n    \nTIM3\n-\nCCMR1\n \n|=\n \n(\n0\nb1\n \n \nTIM_CCMR1_OC1PE_Pos\n);\n\n    \n//enable auto reload pre-load\n\n    \nTIM3\n-\nCR1\n \n|=\n \nTIM_CR1_ARPE\n;\n\n\n    \n//duty cycle initial 50 (CCR2/ARR)\n\n    \n//TIM3-\nCCR1 = duty_cycle_B;\n\n    \n//enable output compare\n\n    \nTIM3\n-\nCCER\n \n|=\n \nTIM_CCER_CC1E\n;\n\n\n\n}\n\n\n\n\n\n*\n\n\nPart3. It's time to change the color.\n\n\n\n\n\n\nInitialize to different duty cycle. \n\nEach color has its own PWM cycle, by setting the PWM cycle differently, we will be able to interleave 3 colors\nand mixing them together since there pulse waves have \"time shifting (or say phase shifting)\" to each other. \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n#define RED_START 10\n\n\n#define GREEN_START 91\n\n\n#define BLUE_START 172\n\n\n\nduty_cycle_R\n \n=\n \nRED_START\n;\n\n\nduty_cycle_G\n \n=\n \nGREEN_START\n;\n\n\nduty_cycle_B\n \n=\n \nBLUE_START\n;\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \n//use the time delay mode to make the interleaving and the color changing scheme\n\n    \nfpu_enable\n();\n\n    \nkeypad_init\n();\n\n    \nGPIO_init_AF\n();\n\n    \nTimer_init\n();\n\n    \nconfigureADC\n();\n\n    \nstartADC\n();\n\n    \nduty_cycle_R\n \n=\n \nRED_START\n;\n\n    \nduty_cycle_G\n \n=\n \nGREEN_START\n;\n\n    \nduty_cycle_B\n \n=\n \nBLUE_START\n;\n\n    \ncur_state\n \n=\n \nCYCLE_MODE\n;\n\n    \nwhile\n(\n1\n)\n\n    \n{\n\n        \nPWM_channel_init\n();\n\n        \nchromatic_scheme\n(\nkeypad_scan\n());\n\n    \n}\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\n\n\n\nIncrease, decrease and cycle. \n\nstate_color is the state indicating whether to increase the pulse cycle or decrease, with an view to simulating the sin-wave-like phase wave. \n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nvoid\n \ncycle_mode\n(\nint\n \ndelay_time\n){\n\n    \nPWM_channel_init\n();\n\n    \nif\n \n(\nstate_R\n){\n\n        \nif\n \n(\nduty_cycle_R\n \n \nSECOND_SLICE\n){\n\n            \nstate_R\n \n=\n \n0\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_R\n \n+=\n \n20\n;\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nduty_cycle_R\n \n \n20\n){\n\n            \nstate_R\n \n=\n \n1\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_R\n \n-=\n \n20\n;\n\n        \n}\n\n    \n}\n\n\n    \nif\n \n(\nstate_G\n){\n\n        \nif\n \n(\nduty_cycle_G\n \n \nSECOND_SLICE\n){\n\n            \nstate_G\n \n=\n \n0\n;\n\n    \n}\n \nelse\n \n{\n\n        \nduty_cycle_G\n \n+=\n \n40\n;\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nduty_cycle_G\n \n \n40\n){\n\n            \nstate_G\n \n=\n \n1\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_G\n \n-=\n \n40\n;\n\n        \n}\n\n    \n}\n\n\n    \nif\n \n(\nstate_B\n){\n\n        \nif\n \n(\nduty_cycle_B\n \n \nSECOND_SLICE\n){\n\n            \nstate_B\n \n=\n \n0\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_B\n \n+=\n \n50\n;\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nduty_cycle_B\n \n \n50\n){\n\n            \nstate_B\n \n=\n \n1\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_B\n \n-=\n \n50\n;\n\n        \n}\n\n    \n}\n\n    \nset_timer\n();\n\n    \nstart_timer\n();\n\n    \ndelay_ms\n(\ndelay_time\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nCustomizable mode \n\nIf it is in the customize mode, we are able to increase the proportion of color, to achieve that, just increase/decrease the duty cycle of that color. DELTA_VALUE is used to adjust the amount of duty cycle applied in PWM mode.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ncase\n \n4\n:\n\n\n{\n\n    \nif\n(\nduty_cycle_R\n \n \nDELTA_VALUE\n)\n\n        \nduty_cycle_R\n \n-=\n \nDELTA_VALUE\n;\n \n(\nor\n \nadd\n \nthe\n \nDELTA_VALUE\n)\n\n    \nelse\n\n        \nduty_cycle_R\n \n=\n \n0\n;\n\n    \nbreak\n;\n\n\n}\n\n\n\n\n\n\n\nPart4. More idea: the ADC of light-sensitive resistor\n\n\nThe Earth is now facing the serve global warming, it is vital for us to construct a power saving model, consequently Alice and I came out the idea of using the\nADC to detect the light intensity.\n\nConcept of ADC configuration credit to \nmy classmate's hackMD\n (Add later)\nThe stronger the intensity, the dimmer the light to be to saving the energy since this module is aimed for atmosphere night light. \n\n\nADC Code is here\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\ncase\n \n11\n:\n\n\n{\n\n    \n// light ADC mode for keypad key11\n\n    \ncur_state\n \n=\n \nLIGHT_MODE\n;\n\n    \nbreak\n;\n\n\n}\n\n\n\nif\n(\ncur_state\n \n==\n \nLIGHT_MODE\n)\n\n\n{\n\n    \nget_light_resistor\n();\n\n    \nlight\n \n=\n \n255\n-\n((\nresistor_value\n-\nREF_LIGHT\n)\n/\n10\n);\n\n    \nduty_cycle_R\n \n=\n \nlight\n;\n\n    \nduty_cycle_G\n \n=\n \nlight\n;\n\n    \nduty_cycle_B\n \n=\n \nlight\n;\n\n    \nset_timer\n();\n\n    \nstart_timer\n();\n\n\n}\n\n\n\n\n\n\n\nPart5. Done all.\n\n\nReally thanks to my teammate \nchialice123\n who helps me alot during the semester and in the final project making the project score over 90 and overall semester score to be 95 (93 original and +2 adjust), and \nvava24680\n for teaching me some concepts of ADC configuration.\n\n\nProject demo video", 
            "title": "Junior 1st sem. STM32 Microprocessor Embedded Lab"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#microprocessor-lab", 
            "text": "Fall 2017 \nLecturer:  S.L. Tsao  in CS@NCTU  \nTime: 5EF @EDB27_NCTU 3IJK @EC222_NCTU", 
            "title": "Microprocessor Lab"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#microprocessor-lab-final-project", 
            "text": "Course Introduction  \nThis course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester.    Goal of this course  \nTo briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own.    Embedded board spec: \n1.Nucleo STM32L476RG ARM Microarchitecture  \n2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided)  \n3.GPIO Available   Detailed specs      IDE for this course Eclipse  AC6 System Workbench for STM32 where JRE7 is required in your system    1.Download from  Here for Linux version   Lab project and final project  \nThere are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are\ntypically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language.", 
            "title": "Microprocessor Lab Final Project"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#about-my-final-project", 
            "text": "Project name: The RGB Ambient light.   Features:  \n1.Fully-customizable RGB proportion control.  \n2.Color cycle speed controller (faster- original) \n3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings  GitHub repo for this final project  Project demo video", 
            "title": "About my final project"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#part0-origin-of-this-idea-and-preparation", 
            "text": "Origin of this idea  \nI once have the fully-customizable dynamic RGB LED backlit keyboard  SteelSeries APEXM 650    On account of having not much time in the end of semester(machine learning final project + compiler design final project.)\nMy  teammate  and I decided to do it.    Preparation of materials and tools for this project  \n1.A STM32L476RG Embedded board \n2.Breadboard \n3.4pin RGB LED*5  Click here \n4.R1000 Resistor \n5.Some Dupont cables", 
            "title": "Part0. Origin of this idea and preparation"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#part1-circuit-connection", 
            "text": "1.Parallel connection of 5 RGB LEDs on the breadboard. \n2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output. \n3.Connect the keypad to the STM32. \n4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter). \n5.The GPIO Connection is like. \n6.Overall GPIO port configuration.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 GPIOB - ASCR   |=   0 b1 ;   //turn on the analog controller in PB0  void   keypad_init () //keypad along with GPIO Init together  { \n\n     RCC - AHB2ENR     |=   0 b00000000000000000000000000000111 ;   //open port A,B,C \n                       //10987654321098765432109876543210 \n     GPIOC - MODER     =   0 b11111111111111111111111100000000 ;   //pc 3 2 1 0 as input of keypad \n     GPIOC - MODER     |=   0 b00000000000000000000000001010101 ; \n     GPIOC - PUPDR     =   0 b11111111111111111111111100000000 ; \n     GPIOC - PUPDR     |=   0 b00000000000000000000000001010101 ; \n     GPIOC - OSPEEDR   =   0 b11111111111111111111111100000000 ; \n     GPIOC - OSPEEDR   |=   0 b00000000000000000000000001010101 ; \n     GPIOC - ODR       |=   0 b00000000000000000000000000001111 ; \n                       //10987654321098765432109876543210 \n     GPIOB - MODER     =   0 b11111111111111110000000011111111 ;   //pb 7 6 5 4 as output of keypad \n     GPIOB - PUPDR     =   0 b11111111111111110000000011111111 ; \n     GPIOB - PUPDR     |=   0 b00000000000000001010101000000000 ;  }  void   GPIO_init_AF ()   //GPIO Alternate Function Init  { \n     /***************pin and alternate function***************       * PB3 + AF1 which is corresponding to TIM2_CH2 RED       * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN       * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE       ********************************************************/ \n                        //10987654321098765432109876543210 \n     GPIOA - MODER      =   0 b11111111111111111100111111110011 ; \n     GPIOA - MODER      |=   0 b00000000000000000010000000001000 ; \n     //PortA Pin        //10987654321098765432109876543210 \n     GPIOA - AFR [ 0 ]     =    0 b00000010000100000000000000100000 ; \n\n     //PB3 TIM2_CH2 \n     GPIOB - AFR [ 0 ]     =   ~ GPIO_AFRL_AFSEL3 ; //AFR[0] LOW \n     GPIOB - AFR [ 0 ]     |=   ( 0 b0001 GPIO_AFRL_AFSEL3_Pos ); //PB3 Alternate function mode  }", 
            "title": "Part1. Circuit connection"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#part2-key-idea-of-this-project", 
            "text": "The PWM(Pulse Width Modulation)  Wiki \nPWM cycle (HV/ALL) = The proportion where light lights, the longer HV lasts, the brighter of the certain part of RGB(either one) will do. \nThe Pulse Width can be used to simulate the analog output like this.  PWM Video \nThe same is true of other 3 colors, configuring with the following code and expanations.   Basic logic for this project  \nInitialize system -  PWM and timer configuration -  Presskey -  Color changing scheme along with ADC light intensity detection for power saving. 1\n2\n3\n4 int   keypad_value [ 4 ][ 4 ]   =   {{ 0 , 1 , 2 , 3 }, \n                           { 4 , 5 , 6 , 7 }, \n                           { 8 , 9 , 10 , 11 }, \n                           { 12 , 13 , 14 , 15 }};   \nkeypad explanation  \n0 red+ \n1 green+ \n2 blue+ \n3 cycle_speed+ \n4 red- \n5 green- \n6 blue- \n7 customize mode(0 1 2 4 5 6 applicable) \n8 only red \n9 only green \n10 only blue \n11 light ADC mode \n12 red+greren \n13 green+blue \n14 red+blue \n15 off system, remember the last state, s.t. user configuration is not lost after shut down   Setup the PWM channel \nRefer to  this pdf  for PWM channel-GPIO port configuration, each port has its corresponding PWM channel and built-in system clock, be sure to make it right!   More understanding and details are written in comments of the following source code. \nPlease refer to  p.1006-1039  of  this pdf  to see how to config the PWM cycle with certain registers in timer.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89 void   Timer_init ()   //Use 3  { \n     // PA3 + AF1 which is corresponding to TIM2_CH1 \n     // PA1 + AF2 which is corresponding to TIM5_CH2 \n     // PA6 + AF2 which is corresponding to TIM3_CH1 \n     RCC - APB1ENR1   |=   RCC_APB1ENR1_TIM2EN ; \n     RCC - APB1ENR1   |=   RCC_APB1ENR1_TIM3EN ; \n     RCC - APB1ENR1   |=   RCC_APB1ENR1_TIM5EN ; \n\n     //setting for timer 2 \n     TIM2 - CR1   =   0x0000 ;   //p1027 Turned on the counter as the count up mode \n     TIM2 - ARR   =   ( uint32_t ) SECOND_SLICE ; //Reload value \n     TIM2 - PSC   =   ( uint32_t ) COUNT_UP ; //Prescaler \n     TIM2 - EGR   =   TIM_EGR_UG ;       //update the counter again p1035 \n\n     //setting for timer 3 \n     TIM3 - CR1   =   0x0000 ;   //p1027 Turned on the counter as the count up mode \n     TIM3 - ARR   =   ( uint32_t ) SECOND_SLICE ; //Reload value \n     TIM3 - PSC   =   ( uint32_t ) COUNT_UP ; //Prescaler \n     TIM3 - EGR   =   TIM_EGR_UG ; //Reinitialize the counter \n\n     //setting for timer 5 \n     TIM5 - CR1   =   0x0000 ;   //p1027 Turned on the counter as the count up mode \n     TIM5 - ARR   =   ( uint32_t ) SECOND_SLICE ; //Reload value \n     TIM5 - PSC   =   ( uint32_t ) COUNT_UP ; //Prescaler \n     TIM5 - EGR   =   TIM_EGR_UG ; //Reinitialize the counter  }  void   PWM_channel_init ()  { \n     /***********************setting for the TIM2_CH2 RED**************************/ \n     // PB3 + AF1 which is corresponding to TIM2_CH2 RED \n     //Output compare 2 mode \n     TIM2 - CCMR1   =   ~ TIM_CCMR1_OC2M ; \n     //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive \n     TIM2 - CCMR1   |=   ( 0 b0110     TIM_CCMR1_OC2M_Pos ); \n\n     //Output Compare 2 Preload Enable \n     TIM2 - CCMR1   =   ~ TIM_CCMR1_OC2PE ; //OCxPE \n     //1: enable TIMx_CCR1 Preload \n     TIM2 - CCMR1   |=   ( 0 b1     TIM_CCMR1_OC2PE_Pos ); \n     //enable auto reload pre-load \n     TIM2 - CR1   |=   TIM_CR1_ARPE ; \n\n     //duty cycle initial 50 (CCR2/ARR) \n     //TIM2- CCR2 = duty_cycle_R; \n     //enable output compare \n     TIM2 - CCER   |=   TIM_CCER_CC2E ; \n\n     /***********************setting for the TIM5_CH2 GREEN**************************/ \n     // PA1 + AF2 which is corresponding to TIM5_CH2 GREEN \n     //Output compare 2 mode \n     TIM5 - CCMR1   =   ~ TIM_CCMR1_OC2M ; \n     //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive \n     TIM5 - CCMR1   |=   ( 0 b0110     TIM_CCMR1_OC2M_Pos ); \n\n     //Output Compare 2 Preload Enable \n     TIM5 - CCMR1   =   ~ TIM_CCMR1_OC2PE ; //OCxPE \n     //1: enable TIMx_CCR1 Preload \n     TIM5 - CCMR1   |=   ( 0 b1     TIM_CCMR1_OC2PE_Pos ); \n     //enable auto reload pre-load \n     TIM5 - CR1   |=   TIM_CR1_ARPE ; \n\n     //duty cycle initial 50 (CCR2/ARR) \n     //TIM5- CCR2 = duty_cycle_G; \n     //enable output compare \n     TIM5 - CCER   |=   TIM_CCER_CC2E ; \n\n     /***********************setting for the TIM3_CH1 BLUE**************************/ \n     // PA6 + AF2 which is corresponding to TIM3_CH1 BLUE \n     //Output compare 2 mode \n     TIM3 - CCMR1   =   ~ TIM_CCMR1_OC1M ; \n     //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive \n     TIM3 - CCMR1   |=   ( 0 b0110     TIM_CCMR1_OC1M_Pos ); \n\n     //Output Compare 2 Preload Enable \n     TIM3 - CCMR1   =   ~ TIM_CCMR1_OC1PE ; //OCxPE \n     //1: enable TIMx_CCR1 Preload \n     TIM3 - CCMR1   |=   ( 0 b1     TIM_CCMR1_OC1PE_Pos ); \n     //enable auto reload pre-load \n     TIM3 - CR1   |=   TIM_CR1_ARPE ; \n\n     //duty cycle initial 50 (CCR2/ARR) \n     //TIM3- CCR1 = duty_cycle_B; \n     //enable output compare \n     TIM3 - CCER   |=   TIM_CCER_CC1E ;  }   \n*", 
            "title": "Part2. Key idea of this project"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#part3-its-time-to-change-the-color", 
            "text": "Initialize to different duty cycle.  \nEach color has its own PWM cycle, by setting the PWM cycle differently, we will be able to interleave 3 colors\nand mixing them together since there pulse waves have \"time shifting (or say phase shifting)\" to each other.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 #define RED_START 10  #define GREEN_START 91  #define BLUE_START 172  duty_cycle_R   =   RED_START ;  duty_cycle_G   =   GREEN_START ;  duty_cycle_B   =   BLUE_START ;  int   main ()  { \n     //use the time delay mode to make the interleaving and the color changing scheme \n     fpu_enable (); \n     keypad_init (); \n     GPIO_init_AF (); \n     Timer_init (); \n     configureADC (); \n     startADC (); \n     duty_cycle_R   =   RED_START ; \n     duty_cycle_G   =   GREEN_START ; \n     duty_cycle_B   =   BLUE_START ; \n     cur_state   =   CYCLE_MODE ; \n     while ( 1 ) \n     { \n         PWM_channel_init (); \n         chromatic_scheme ( keypad_scan ()); \n     } \n     return   0 ;  }      Increase, decrease and cycle.  \nstate_color is the state indicating whether to increase the pulse cycle or decrease, with an view to simulating the sin-wave-like phase wave.      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 void   cycle_mode ( int   delay_time ){ \n     PWM_channel_init (); \n     if   ( state_R ){ \n         if   ( duty_cycle_R     SECOND_SLICE ){ \n             state_R   =   0 ; \n         }   else   { \n             duty_cycle_R   +=   20 ; \n         } \n     }   else   { \n         if   ( duty_cycle_R     20 ){ \n             state_R   =   1 ; \n         }   else   { \n             duty_cycle_R   -=   20 ; \n         } \n     } \n\n     if   ( state_G ){ \n         if   ( duty_cycle_G     SECOND_SLICE ){ \n             state_G   =   0 ; \n     }   else   { \n         duty_cycle_G   +=   40 ; \n         } \n     }   else   { \n         if   ( duty_cycle_G     40 ){ \n             state_G   =   1 ; \n         }   else   { \n             duty_cycle_G   -=   40 ; \n         } \n     } \n\n     if   ( state_B ){ \n         if   ( duty_cycle_B     SECOND_SLICE ){ \n             state_B   =   0 ; \n         }   else   { \n             duty_cycle_B   +=   50 ; \n         } \n     }   else   { \n         if   ( duty_cycle_B     50 ){ \n             state_B   =   1 ; \n         }   else   { \n             duty_cycle_B   -=   50 ; \n         } \n     } \n     set_timer (); \n     start_timer (); \n     delay_ms ( delay_time );  }     Customizable mode  \nIf it is in the customize mode, we are able to increase the proportion of color, to achieve that, just increase/decrease the duty cycle of that color. DELTA_VALUE is used to adjust the amount of duty cycle applied in PWM mode.   1\n2\n3\n4\n5\n6\n7\n8 case   4 :  { \n     if ( duty_cycle_R     DELTA_VALUE ) \n         duty_cycle_R   -=   DELTA_VALUE ;   ( or   add   the   DELTA_VALUE ) \n     else \n         duty_cycle_R   =   0 ; \n     break ;  }", 
            "title": "Part3. It's time to change the color."
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#part4-more-idea-the-adc-of-light-sensitive-resistor", 
            "text": "The Earth is now facing the serve global warming, it is vital for us to construct a power saving model, consequently Alice and I came out the idea of using the\nADC to detect the light intensity. \nConcept of ADC configuration credit to  my classmate's hackMD  (Add later)\nThe stronger the intensity, the dimmer the light to be to saving the energy since this module is aimed for atmosphere night light.   ADC Code is here   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 case   11 :  { \n     // light ADC mode for keypad key11 \n     cur_state   =   LIGHT_MODE ; \n     break ;  }  if ( cur_state   ==   LIGHT_MODE )  { \n     get_light_resistor (); \n     light   =   255 - (( resistor_value - REF_LIGHT ) / 10 ); \n     duty_cycle_R   =   light ; \n     duty_cycle_G   =   light ; \n     duty_cycle_B   =   light ; \n     set_timer (); \n     start_timer ();  }", 
            "title": "Part4. More idea: the ADC of light-sensitive resistor"
        }, 
        {
            "location": "/univ_notes/mpslab/mpslab/#part5-done-all", 
            "text": "Really thanks to my teammate  chialice123  who helps me alot during the semester and in the final project making the project score over 90 and overall semester score to be 95 (93 original and +2 adjust), and  vava24680  for teaching me some concepts of ADC configuration.  Project demo video", 
            "title": "Part5. Done all."
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/", 
            "text": "UAV Drone autopilot, computer vision and image processing.\n\n\nSpring 2018\n\nLecturer: \nK.W. Chen\n in CS@NCTU \n\nTime: 4IJK @EC330_NCTU\n\n\nLab1. Introduction to Open CV and installation Mar 01, 2018\n\n\nLab1 pdf\n\n\nInstall Open CV\n\n\n\n\nIn the Ubuntu 16.04 64bit\nRequired dependencies are the followings \n\n1.Git \n\n2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) \n\n3.CMake 2.6 or higher \n\n4.GCC 4.4.x or later \n\n\n\n\n1\nsudo apt-get install libopencv-dev python-opencv\n\n\n\n\nOnce installed\n\n1\npkg-config --modversion opencv\n\n\n\n\nIf the version is shown, then we're good to rock with opencv. \n\n\n\n\nBuild your opencv_file.cpp with CMake or g++ standards\n\n\n\n\n1.With CMake (Don't forget to add CMakeLists.txt)\n\n\n1\n2\n3\n4\n5\ncmake_minimum_required(VERSION\n \n2.8)\n\n\nproject(\n \nproject_name\n \n)\n\n\nfind_package(\n \nOpenCV\n \nREQUIRED\n \n)\n\n\nadd_executable(\n \nproject_name\n \nproject_name\n.cpp\n \n)\n\n\ntarget_link_libraries(\n \nproject_name\n \n${OpenCV_LIBS}\n \n)\n\n\n\n\n\n\n\n2.With g++ and flags for opencv libraries\n\n1\ng++ lab1-2.cpp `pkg-config --cflags --libs opencv`\n\n\n\n\n\nToday's course contents\n\n\nBasic understanding of image processing and image data format.\n\nCourse week1 pdf\n\n\nBilinear Interpolation\n\nBasically ,this is an algorithm aimed for image transformation in this lab. \n\nThe interpolated value of a point is a reversely-weighted average of the neighboring points, \n\nsuch method is quite useful in the image transformation.\n\n\nLab2. Image processing in spacial domain, linear and non-linear transformation Mar 08, 2018\n\n\n\n\nSpacial-domain image processing.\n\n\nHistogram equalization and mask processing    \n\n\nEdge detection algorithm: Sobel filter, Laplician smoothing (W.J.Tsai OS Fall2017 HW3) ,sharpening and dege detection.\n\n\nComputer vision \n\n1.Low level measurement such as brightness,Enhancements,Region segments,Features\n\n\n\n\nToday's course contents\n\n\nCourse pdf\n\n\nToday's lab, Spacial Domain histogram equalization.\n\n\n\n\nProblem1 Histogram equalization\n1.We may use the vector to implement the map for statistical data.\n\n2.Accumulate using another vector \n\n3.Count and mapping to the relative proportion * max_value, then that's all \n\n\n\n\nNOTE!!!! THE DEFAULT IMG MAT IS 3-CHANNEL TYPE, NOT ONE CHANNEL GREY-SCALE, SO IF WE DONT DO THE GREY SCALE CONVERSION, ONLY \n OF THE IMAGE WILL BE PROCESSED, THUS THE FOLLOWING CODE IS NEEDED\n\n1\n2\n3\n4\n5\nMat\n \ninput_img\n \n=\n \nimread\n(\nargv\n[\n1\n]);\n\n\n//since the bgr channel is used for default action, then the BGR 3 channel image must be converted to GREY channel\n\n\ncvtColor\n(\ninput_img\n,\n \ninput_img\n,\n \nCV_BGR2GRAY\n);\n\n\nMat\n \noutput_img\n \n=\n \ninput_img\n.\nclone\n();\n\n\nhistogram_equal\n(\ninput_img\n,\n \noutput_img\n);\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nvoid\n \nhistogram_equal\n(\nMat\n \ninput\n,\n \nMat\n \noutput\n)\n\n\n{\n\n    \nvector\nint\n \nhash_distribution\n;\n\n    \nvector\ndouble\n \nintensity_cdf\n;\n\n    \nhash_distribution\n.\nresize\n(\n256\n);\n\n    \nintensity_cdf\n.\nresize\n(\n256\n);\n\n    \nfor\n(\nint\n \ni\n=\n0\n;\ni\ninput\n.\nrows\n;\ni\n++\n)\n\n    \n{\n\n        \nfor\n(\nint\n \nj\n=\n0\n;\nj\ninput\n.\ncols\n;\nj\n++\n)\n\n        \n{\n\n            \nhash_distribution\n[(\nint\n)\n \ninput\n.\nat\nuchar\n(\ni\n,\nj\n)]\n++\n;\n\n        \n}\n\n    \n}\n\n\n    \n//search the maxium value\n\n    \nint\n \nmax_value\n \n=\n \n0\n,\n \ncnt\n=\n0\n;\n\n    \ndouble\n \ncumulative_cnt\n \n=\n \n0.0f\n;\n\n    \nfor\n(\nint\n \ni\n=\n0\n;\ni\nhash_distribution\n.\nsize\n();\ni\n++\n)\n\n    \n{\n\n        \nif\n(\nhash_distribution\n[\ni\n]\n!=\n0\n)\n\n        \n{\n\n            \nmax_value\n \n=\n \nmax\n(\nmax_value\n,\n \ni\n);\n\n            \ncumulative_cnt\n \n+=\n \n(\ndouble\n)\n \nhash_distribution\n[\ni\n]\n \n/\n \n(\ndouble\n)(\ninput\n.\nrows\n \n*\n \ninput\n.\ncols\n);\n\n            \ncnt\n \n+=\n \nhash_distribution\n[\ni\n];\n\n            \nintensity_cdf\n[\ni\n]\n \n=\n \ncumulative_cnt\n;\n\n            \ncout\ncnt \ncnt\n at \n \ni\n Cumulate to \ncumulative_cnt\n where intensity is now \nintensity_cdf\n[\ni\n]\nendl\n;\n\n        \n}\n\n    \n}\n\n    \nfor\n(\nint\n \ni\n=\n0\n;\ni\ninput\n.\nrows\n;\ni\n++\n)\n\n    \n{\n\n        \nfor\n(\nint\n \nj\n=\n0\n;\nj\ninput\n.\ncols\n;\nj\n++\n)\n\n        \n{\n\n            \noutput\n.\nat\nuchar\n(\ni\n,\nj\n)\n \n=\n \n(\nintensity_cdf\n[\ninput\n.\nat\nuchar\n(\ni\n,\nj\n)]\n \n*\n \nmax_value\n \n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nLab3. Brief introduction to Computer Vision  Mar 15, 2018\n\n\nBinary Machine Vision\n\n\nToday's lab, connected component labeling\n\n\nCheck here\n\n\nLab4. Camera Calibration Mar 29, 2018\n\n\nCourse pdf\n\n\nCamera Calibration\n\n\n\n\n(From official openCV document)Basically, you need to take snapshots of these patterns with your camera and let OpenCV find them. Each found pattern results in a new equation. To solve the equation you need at least a predetermined number of pattern snapshots to form a well-posed equation system. This number is higher for the chessboard pattern and less for the circle ones. For example, in theory the chessboard pattern requires at least two snapshots. However, in practice we have a good amount of noise present in our input images, so for good results you will probably need at least 10 good snapshots of the input pattern in different positions.\n\n\nFirst, download \n, measure the size of those square\n\n\nTake many photos (approx 50 images ) of this grid and save it as jpg file\n\n\nIterate all the point on the\n\n\n\n\nToday's lab, camera calibration and wraping\n\n\nLab4.pdf", 
            "title": "Junior 2nd sem. UAV Autopilot and Image Processing"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#uav-drone-autopilot-computer-vision-and-image-processing", 
            "text": "Spring 2018 \nLecturer:  K.W. Chen  in CS@NCTU  \nTime: 4IJK @EC330_NCTU", 
            "title": "UAV Drone autopilot, computer vision and image processing."
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab1-introduction-to-open-cv-and-installation-mar-01-2018", 
            "text": "Lab1 pdf", 
            "title": "Lab1. Introduction to Open CV and installation Mar 01, 2018"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#install-open-cv", 
            "text": "In the Ubuntu 16.04 64bit\nRequired dependencies are the followings  \n1.Git  \n2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy)  \n3.CMake 2.6 or higher  \n4.GCC 4.4.x or later    1 sudo apt-get install libopencv-dev python-opencv  \nOnce installed 1 pkg-config --modversion opencv  \nIf the version is shown, then we're good to rock with opencv.    Build your opencv_file.cpp with CMake or g++ standards   1.With CMake (Don't forget to add CMakeLists.txt)  1\n2\n3\n4\n5 cmake_minimum_required(VERSION   2.8)  project(   project_name   )  find_package(   OpenCV   REQUIRED   )  add_executable(   project_name   project_name .cpp   )  target_link_libraries(   project_name   ${OpenCV_LIBS}   )    2.With g++ and flags for opencv libraries 1 g++ lab1-2.cpp `pkg-config --cflags --libs opencv`", 
            "title": "Install Open CV"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-course-contents", 
            "text": "Basic understanding of image processing and image data format. Course week1 pdf  Bilinear Interpolation \nBasically ,this is an algorithm aimed for image transformation in this lab.  \nThe interpolated value of a point is a reversely-weighted average of the neighboring points,  \nsuch method is quite useful in the image transformation.", 
            "title": "Today's course contents"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab2-image-processing-in-spacial-domain-linear-and-non-linear-transformation-mar-08-2018", 
            "text": "Spacial-domain image processing.  Histogram equalization and mask processing      Edge detection algorithm: Sobel filter, Laplician smoothing (W.J.Tsai OS Fall2017 HW3) ,sharpening and dege detection.  Computer vision  \n1.Low level measurement such as brightness,Enhancements,Region segments,Features", 
            "title": "Lab2. Image processing in spacial domain, linear and non-linear transformation Mar 08, 2018"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-course-contents_1", 
            "text": "Course pdf", 
            "title": "Today's course contents"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-lab-spacial-domain-histogram-equalization", 
            "text": "Problem1 Histogram equalization\n1.We may use the vector to implement the map for statistical data. \n2.Accumulate using another vector  \n3.Count and mapping to the relative proportion * max_value, then that's all    NOTE!!!! THE DEFAULT IMG MAT IS 3-CHANNEL TYPE, NOT ONE CHANNEL GREY-SCALE, SO IF WE DONT DO THE GREY SCALE CONVERSION, ONLY   OF THE IMAGE WILL BE PROCESSED, THUS THE FOLLOWING CODE IS NEEDED 1\n2\n3\n4\n5 Mat   input_img   =   imread ( argv [ 1 ]);  //since the bgr channel is used for default action, then the BGR 3 channel image must be converted to GREY channel  cvtColor ( input_img ,   input_img ,   CV_BGR2GRAY );  Mat   output_img   =   input_img . clone ();  histogram_equal ( input_img ,   output_img );     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 void   histogram_equal ( Mat   input ,   Mat   output )  { \n     vector int   hash_distribution ; \n     vector double   intensity_cdf ; \n     hash_distribution . resize ( 256 ); \n     intensity_cdf . resize ( 256 ); \n     for ( int   i = 0 ; i input . rows ; i ++ ) \n     { \n         for ( int   j = 0 ; j input . cols ; j ++ ) \n         { \n             hash_distribution [( int )   input . at uchar ( i , j )] ++ ; \n         } \n     } \n\n     //search the maxium value \n     int   max_value   =   0 ,   cnt = 0 ; \n     double   cumulative_cnt   =   0.0f ; \n     for ( int   i = 0 ; i hash_distribution . size (); i ++ ) \n     { \n         if ( hash_distribution [ i ] != 0 ) \n         { \n             max_value   =   max ( max_value ,   i ); \n             cumulative_cnt   +=   ( double )   hash_distribution [ i ]   /   ( double )( input . rows   *   input . cols ); \n             cnt   +=   hash_distribution [ i ]; \n             intensity_cdf [ i ]   =   cumulative_cnt ; \n             cout cnt  cnt  at    i  Cumulate to  cumulative_cnt  where intensity is now  intensity_cdf [ i ] endl ; \n         } \n     } \n     for ( int   i = 0 ; i input . rows ; i ++ ) \n     { \n         for ( int   j = 0 ; j input . cols ; j ++ ) \n         { \n             output . at uchar ( i , j )   =   ( intensity_cdf [ input . at uchar ( i , j )]   *   max_value   ); \n         } \n     }  }", 
            "title": "Today's lab, Spacial Domain histogram equalization."
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab3-brief-introduction-to-computer-vision-mar-15-2018", 
            "text": "", 
            "title": "Lab3. Brief introduction to Computer Vision  Mar 15, 2018"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#binary-machine-vision", 
            "text": "", 
            "title": "Binary Machine Vision"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-lab-connected-component-labeling", 
            "text": "Check here", 
            "title": "Today's lab, connected component labeling"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab4-camera-calibration-mar-29-2018", 
            "text": "Course pdf", 
            "title": "Lab4. Camera Calibration Mar 29, 2018"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#camera-calibration", 
            "text": "(From official openCV document)Basically, you need to take snapshots of these patterns with your camera and let OpenCV find them. Each found pattern results in a new equation. To solve the equation you need at least a predetermined number of pattern snapshots to form a well-posed equation system. This number is higher for the chessboard pattern and less for the circle ones. For example, in theory the chessboard pattern requires at least two snapshots. However, in practice we have a good amount of noise present in our input images, so for good results you will probably need at least 10 good snapshots of the input pattern in different positions.  First, download  , measure the size of those square  Take many photos (approx 50 images ) of this grid and save it as jpg file  Iterate all the point on the", 
            "title": "Camera Calibration"
        }, 
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-lab-camera-calibration-and-wraping", 
            "text": "Lab4.pdf", 
            "title": "Today's lab, camera calibration and wraping"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/", 
            "text": "Network Security\n\n\nSpring 2018 \n\nLecturer: Shiuhpyng Shieh \n\n\nCh1. Introduction.\n\n\nCh2. Symmetric Encryption and Message Confidentiality\n\n\nConcept correction here:\n\n\n\n\nAssymetric encryption is not necessarily and absolutely better than the symmetric encryption, they can work with each other.\n\n\n\n\nCommon type of the cryptanalysis\n\n\nBrute force attack\n\n\n\n\nOn avg, half of the keys have to be tested.\n\n\n\n\nCiphertext only attack\n\n\n\n\nKnown the encryption algorithm\n\n\nWant to collect all the ciphtertext to find out the plaintext or ultimately, find out what the key is.\n\n\n\n\nKnown plaintext attack\n\n\n\n\nUse the known plaintext and the correspond ciphertext which encrypted by the encryption algorithm and ultimately find out what the key is.   \n\n\n\n\nChosen plaintext attack\n\n\n\n\nUse the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is.\n\n\n\n\nDifference b/w known plaintext and chosen ciphertext\n\n\nSee here\n\n\nChosen ciphertext attack\n\n\n\n\nAs we've done in the course project 1, we use the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is.\n\n\n\n\nFeistel cipher architecture\n\n\n*\n\n\nModel of symmetric encryption\n\n\n\n\nEncrypt and decrypt with the same key, the key should be shared through a secure manner.\n\n\n\nsecurity of symmetric encryption depends on the secrecy of the key, not the secrecy of the algorithm, which means we should\nkeep the secret key as safe as possible.\n\n\n\n\nRSA Encryption standard\n\n\n\n\nAsymmetric encryption standard.\n\n\n\n\nThis encryption standard mainly focus on prime factorisation\n\u66f4\u591a\u8cc7\u8a0a\u53ef\u4ee5\u53c3\u8003\n\u5916\u661f\u4eba\u7684\u7b46\u8a18\n\n\nCourse project1. Chosen cipher attack\n\n\n\n\nWill post report after the session of this homework ends.\n\n\n\n\nDES Encryption standard\n\n\n\n\nAn encryption algorithm use round, permutation shift and XOR operation to generate the ciphertext.\n\n\nDivide the plaintext into 64-bit-long in size for each if the block, and use the same length key for encryption(actually the key is not in the same length since there are 8 bits used for the parity-checking during the encryption)\n\n\n\nImage src\n\n\nDES Briefly introduction\n\n\nProne to brute force attack since the key space is too small to guarantee the safe area, so the safer 3-DES algorithm is used nowadays.\n\n\n16rounds are needed for the encryption process\n\n\nThe encryption and decryption are run under the same algorithm but they are in the reverse order with each other\n\n\nThis is a model based on the \nFiestel model\n, namely for the encryption and decryption they use the same function but in the reversed order.\n\n\n\n\nFrom DES to 3DES\n\n\n\n\nDES is not so secure since the key is 56bits long, which is quite prone to BF cryptanalysis\n\n\n\n\n3DES lengthens the key of DES (56 * 3 = 168), doing DES 3 times to make the encryption safer.\n\n \n\n\n\n\n\n\nPlease feel free to refer to my classmate's \nnote\n for more information\n\n\n\n\nFor encryption procedure:\nP--E(K1)--A--D(K2)--B--E(K3)\nC \n\nC--D(K1)--B--E(K2)--A--D(K3)\nA \n\nSince the Fiestel architecture, the encryption and decryption method are just the reverse of each other.\n\n\nFor decryption procedure:\n\n\n\n\nAES Encryption standard\n\n\n\n\nMake a better encryption of 3DES, namely evolve from 3DES for a stronger and faster encryption algorithm.\n\n\nAES is still the same as the DES in the category of block cipher encryption, but the block size of AES is 128 bits, doubled of the DES encryption.\n\n\n10 Rounds of encryption again and again is needed.\n\n  \n Image source from textbook\nOne grey-coloured box is the one \"round\" of the encryption in AES\n\nEach of the round we take the preceding round's output as the input of this round and do the encryption again, with the following 4 tasks to be done\n\n1.The \nSubstitution Bytes\n is to use the non-linear transform to let the input transformed with a \"Affine transformation\", making the encryption robust and hard to be cracked\n\n2.The \nShift Rows(Bit transposition)\n is shifting the data, to rearrange the text, for row i we shift i-1 times to the left.\n\n\n\n\n Image source from wikipedia \n\n3.The \nMix Columns\n is a linear transform under the mod multiplication \n\n4.The \nAdd Round Key\n is let the input XOR with the Key in the current state. (Rijndael key generator solution,which is a subkey in each round, which we can be seen from the image provided above that Key(16 bytes and expand to match for each round, divided into 10 subkeys for 10 operations in AES encryption))\n\n5.After the aforementioned four steps are done, go to the next encryption box. The operation is bytewise\n\n\n\n\nThe truly random number and pseudo random number\n\n\n\n\n\n\nApplications of the random number\n\n1.RSA pub-key generation and other pub-key algorithms.\n\n2.Session key for encryption in system such as Wi-Fi, e-mail\n\n\n\n\n Image source from wikipedia \n\n\n\n\n\n\nThe following 2 criteria are used to validate a sequence is random. \n\n1.Uniform distribution: The each element in the seed of random number must take the same proportion of being taken out.\n\n2.Independence: A sequence cannot be inferred from the other sequence, strictly and absolutely.\n\n\n\n\n\n\nBlock cipher vs Stream cipher\n\n\nStream cipher\n\n\n\n\nChange the encryption key from time to time, and each time the two part(sender-receiver) can generate the same random key s.t. they can encrypt and decrypt the same message.\nThe key of such encryption algorithm should have a extremely large period and as random as possible, o.w. it is crack-prone.\n\nIn order to guard the BF attack, the longer key is preferred (However there is a trade-off b/w speed and security.)\n\n\nAs we can see the sender and receiver generate the same key for encryption and decryption.\nImage source from textbook \n\n\nRC4 Algorithm\n\n1.An algorithm with changeable key length encryption. \n\n2.SSL TLS WEP WPA use this encryption algorithm\n\n3.Easy to implement in both HW ans SW, but terminated in 2015 due to attack\n\n\n\n\nRC4 Encryption procedure \n\n1.Shuffle the key, make it randomised.\n\n1\n2\n3\n4\n5\n6\n7\n8\nfor\n \ni\n \nfrom\n \n0\n \nto\n \n255\n\n     \nS\n[\ni\n]\n \n:=\n \ni\n\n \nendfor\n\n \nj\n \n:\n=\n \n0\n\n \nfor\n(\n \ni\n=\n0\n \n;\n \ni\n256\n \n;\n \ni\n++\n)\n\n     \nj\n \n:\n=\n \n(\nj\n \n+\n \nS\n[\ni\n]\n \n+\n \nkey\n[\ni\n \nmod\n \nkeylength\n])\n \n%\n \n256\n \n//randomly take the new j and swap, make a permutation\n\n     \nswap\n \nvalues\n \nof\n \nS\n[\ni\n]\n \nand\n \nS\n[\nj\n]\n\n \nendfor\n\n\n\n\n\n2.Get even more shuffle data, each time for a input byte, locate the i and j value by take the value in the key, XOR the inputByte with the key (since the reverse of XOR operation is itself, once we insert the ciphertext we'll get plaintext, and converse is true as well.)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ni\n \n:\n=\n \n0\n\n\nj\n \n:\n=\n \n0\n\n\nwhile\n \nGeneratingOutput\n:\n\n    \ni\n \n:\n=\n \n(\ni\n \n+\n \n1\n)\n \nmod\n \n256\n   \n//a\n\n    \nj\n \n:\n=\n \n(\nj\n \n+\n \nS\n[\ni\n])\n \nmod\n \n256\n \n//b\n\n    \nswap\n \nvalues\n \nof\n \nS\n[\ni\n]\n \nand\n \nS\n[\nj\n]\n  \n//c\n\n    \nk\n \n:\n=\n \ninputByte\n \n^\n \nS\n[(\nS\n[\ni\n]\n \n+\n \nS\n[\nj\n])\n \n%\n \n256\n]\n \n//XOR operation suit for this case. Reverse operation also works\n\n    \noutput\n \nK\n\n\nendwhile\n\n\n\n\n\n\nBlock cipher\n\n\n\n\n\n\nUse the same key for the text, and divide the text into blocks, processing ONE BLOCK for each time. Processing procedure including shift position, substitute text to let the plaintext look similar, however, generating the\ntotally different ciphertext for cryptographically secure. \n\n\n\n\n\n\nThe AES(128 bits per block), DES(64 bits per block), 3DES(64 bits per block) are lie in this category.\n\n\n\n\n\n\n5 Block modes for the block cipher, defined by NIST USA. Intended to use for the symmetric cipher.  .\n\n\n\n\n\n\n1.Electronic Code Book where Encryption:  ciphertext[i] = code_book[plaintext[i]] just. Need a decryptor to do reversed tasks.\n\n2.Cipher Block Chaining, take the step i's ciphertext XOR with next step's plaintext and encrypt again. \nIf there is a bit error in the ciphertext, it will cause the decryption of plaintext i and plaintext i+1 error since they are chained together from step to step.\n\n\n \n\n3.Cipher FeedBack , only the encryptor is needed, 2 times of encryption is equivalent to decryption (Reason: ).\n\n\n \n\n4.CounTeR , use the counter directly for the key of encryption. Can be processed parallelly since each block can be processed with its counter and independent with other blocks, random access is suitable as well. And use the same key for decryption due to the properties of XOR operation, once the ciphertext XOR key ---\n plaintext is decrypted.\n\nThe CTR mode is both HW and SW efficiency (parallelism are able to implemented in both CPU and compiler, OS ...etc). \n\nWhat's more, the preprocessing can be done as well, even without the presence of the plaintext, we can still generate the required key and the next task is just let plaintext XOR key ---\n ciphertext.\n\n\n5.Output FeedBack similar too Cipher FeedBack, take the ciphertext from previous round and encrypt again\n\n\nUseful reference site ,MUST READ!!!\n\n\nCh3. Message Authencation and Public Key Cryptography\n\n\nMessage Authencation Code (MAC)\n\n\n\n\nUsing some hash value of the data and encrypt that value at the end of data for validation (see the image below)\n\n\nClarify!!: MAC cannot perform the data encryption, it can only be used for data authentication and validation. \n\n\nSuch as parity checking is also a kind of message authentication. \n\n\n \n\n\n Image source from wikipedia \n\n\n\n\nSecure Hash Functions\n\n\n \n\n1.Collision and preimage-found resistant, making it unable to do the reverse of hash to forge the data. \n\n\nHash collision, strong vs weak\n\n\nStrong\n\n\nGiven an arbitrary x there exists no x' with x' != x so that h(x) = h(x')\n(\u66f4\u53b2\u5bb3\uff0c\u7121\u6cd5\u627e\u5230\u4efb\u53d6\u5169\u500b\u7522\u751f\u76f8\u540c\u96dc\u6e4a\u6578\u503c)\n\n\nWeak\n\n\nThere exist no given x, and will be infeasible to find x' with x != x' so that h(x) = h(x') (\u4e00\u500b\u5df2\u77e5\u627e\u7121\u6cd5\u627e\u5230\u53e6\u4e00\u500b\u7522\u751f\u76f8\u540c\u6578\u503c\u7684\u96dc\u6e4a)\n\n\nSHA Note, NOT AN Encryption standard!\n\n\n\n\n\n\nTerm explanation (waiting for the answer from OAlienO) \n\n1.Message Digest Size: Message digest, MD(same as MD of MD5), of how much data amount we output, such as in the following SHA1 algorithm, we produce 160bits output (hex * 40 = 160). \n\n\n\n2.Message Size: Message amount that we can process in one time(Maxium input).\n\n3.Block Size: In block cipher, cut all the message into several blocks, in the block is how much message in a block to be processed\n\n4.Word Size: A size of a given state.\n\n\n\n\n\n\nThe following are the Message digest from the SHA512.\n\n\n\n\n\n\n\nHashing, Why and How?\n\n\nhash youtube\n \n\n\n\n\nHash aims for reduce the huge amount of data to the small amount.\n\n\nCan be used for verify and prevent the errors in the communication.\n\n\nEvan a small change in the original plaintext (such as only a bit), it will cause the totally different hash value, this\nresult is called Avalanche Effect. It ensures the security of hash algorithm.\n\n\nHash has to be one-way and pre image, collision-resistant, otherwise , data will be forged.\n\nHash is doomed to be broken or cracked, what matters is that we have to try out best to lengthen the time before being cracked\n\n\n\n\n\n\nHash-based message authentication code (HMAC)\n\n\nWatch out the color correspondence for better understanding the procedure\n\n\n\n\n\n\nHMAC vs CMAC??\n\n\nso hmac vs cmac\n\n* AS we can see from the picture for HMAC (aforementioned) and CMAC, although both of them use the key, but in\n\n\nMessage encryption vs Message digestion(hashing), what is the difference?\n\n\nso encryption-vs-digest\n \n\n\nso how-is-an-md5-or-sha-x-hash-different-from-an-encryption\n \n\n\nhash ,encryption and more\n \n\n\nso why-should-i-use-authenticated-encryption-instead-of-just-encryption\n \n\n\n\n\nEncryption: Really make the message secret, hard to be cracked and aims for security.\n\nkey difference between encryption and hashing is that encrypted strings can be reversed back into their original decrypted form if you have the right key\n ex. RSA AES DES ...\n\n\nDigestion (hashing): Digest the whole data, may be used for message authentication, producing an ID or FINGERPRINT of the input data.\n\nHashing is great for usage in any instance where you want to \ncompare a value with a stored value, but can't store its plain representation for security reasons\n. Other use cases could be checking the last few digits of a credit card match up with user input or comparing the hash of a file you have with the hash of it stored in a database to make sure that they're both the same. ex. MD5 SHA ...\n\n\nFurthermore, if the digested data is encrypted, than it can be used for DIGITAL SIGNATURE.\n1.For example in SHA family \n\u80fd\u8a08\u7b97\u51fa\u4e00\u500b\u6578\u4f4d\u8a0a\u606f\u6240\u5c0d\u61c9\u5230\u7684\uff0c\u9577\u5ea6\u56fa\u5b9a\u7684\u5b57\u4e32\uff08\u53c8\u7a31\u8a0a\u606f\u6458\u8981\uff09\u7684\u6f14\u7b97\u6cd5\u3002\u4e14\u82e5\u8f38\u5165\u7684\u8a0a\u606f\u4e0d\u540c\uff0c\u5b83\u5011\u5c0d\u61c9\u5230\u4e0d\u540c\u5b57\u4e32\u7684\u6a5f\u7387\u5f88\u9ad8\u3002\n\n\nOAlienO : SHA \u4e0d\u662f\u52a0\u5bc6\u56e0\u70ba\u4ed6\u6c92\u8fa6\u6cd5\u89e3\u56de\u539f\u672c\u7684 input\n\n\n\n\nAuthenticated encryption (HMAC x CMAC x  CCM = CMAC + AES block cipher + CTR block mode)\n\n\n\n\nA term used to describe encryption systems that simultaneously protect confidentiality and authenticity of communications.\n\n\nCompared with traditional encryption, the authenticated encryption  additionally provides authenticity, while plain encryption provides only confidentiality.\n\n\nUsually more complicated than confidentiality-only or authenticity-only schemes.\n\n\n\n\n\nPublic key cryptography\n\n\n\n\nEncrypt with public key: Want to send someone a message that only they(certain of groups,...etc) will be able to read, encrypt it with that person's public key.\n\n\nEncrypt with private key: Want to publish some information and guarantee that you're the author \n(Reason is that the only person who encrypt with HIS PRIVATE KEY CAN ONLY BE THE ORGINAL AUTHOR, and everyone can use the public related to that private key to decrypt it)\n, and that it hasn't been tampered with, then you encrypt it with your private key.(We can as well use the authenticated encryption to ensure the authenticity. Just like the aforementioned \nDigital signature\n)\n\n\n\nso What is we encrypt with private key??\n\n\n\n\nPrivate key vs Secret key, what is the difference?\n\n\n\n\nPrivate key: Use in asymmetric encryption.\n\n\nSecret key: Use in symmetric encryption, but it is quite hard for us (or say unsafe) to exchange secret key, so the Diffie Hellman key exchange algorithm is invented.\n\n\n\n\nDiffie Hellman key exchange\n\n\n\n\nA way to exchange the secret key via an unsafe path\n\n\n\nMath theory behind this algorithm\n\n\n\n\nSSL, TLS, SFTP use it. Like the AES implemetation AES is symmetric encryption and a shared-secret-key exchange is needed for end-to-end data encryption.\n\n\nBoth of end to end does not need to know each other (or cant break) his / her private key but share a same secret key to do secret data exchange.\n\n\nIn this algorithm, we should choose a very big a, b and p s.t. Bob is unable so solve 'a' of Alice's secret and neither is Alice. o.w. Eve will hack into it and solve the shared secret key.\n\n\nAside from the RSA, why use Diffie Hellman key exchange? \n\nSince the process of RSA is quite burdensome (numbers in it are extremely huge) so if we can back to the traditional symmetric encryption such as AES (just now we need a \"secure pipe\" under the \"insecure pipe\") to perform key exchange.\nThan the end-to-end encryption can be achieved, what's more, this method is faster in which stream cipher are performed\n\n\n\n\nMan in the middle attack (MITM)\n\n\n\n\nThe MITM forges the key of both side and deceives them, act as both fake Alice and Bob.\n\n\nAnd the wikipedia analogy ,note: sequence different from the image\n\n\n\nThe core idea about this is still the mathematical expression, for example for the secret key K1, since Darth intercepts the message, then he can forge the key with his secret key XD2 ,due to the following mathematical theory about modulo exponential.\n\n\n\n\n \n\nSo Alice is able to acquire the secret key via her own private key XA due to the upper math theory. \nBUT SHE DOES NOT KNOW THAT YD2 ACTUALLY COMES FROM DARTH and DARTH now share the same key with Alice, so Alice thinks that Darth is Bob!! and the same is true for Bob!!\n \n\nOriginally the shared secret key should be lie on the mathematical expression like this\n\n\n \n\nRather than this \n\n\n \n\n\n\n\nCh.4 Key Distribution and User Authentication\n\n\nKey distribution\n\n\n\n\nUsed in the symmetric key crypto system to exchange keys from one end point to another.\n\n\n\n\nKerberos and its components\n\n\n\n\nUser password will not be transmitted but will be used as a shared secret for the authentication\n\n\nCentralised key distribution and authentication service b/w user and server(3\nrd\n party) that relies on symmetric encryption (No public key in it)\n\n\nGenerates a symmetric secret key b/w two end points.\n\n\nDistributed system makes computing power better.\n\n\nDuring the key's lifetime (embedded in the message), the key can be used again and again.\n\n\nCentral idea relies on the trustworthy 3RD PARTY SERVER\n\n\n\n\nAuthencation server (AS)\n\n\n\n\nAuthenticate the user\n\n\n\n\nTicket granting server (TGS)\n\n\n\n\nGrant authenticated user permissions to act with the real server (SS, Service Server)\n\nwikipedia for detailed procedure\n \n\n\nDetailed explanation video\n \n\n\n\n\nTimestamp portocal vs Challenge-Response Portocal\n\n\nTimestamp portocal\n\n\n\n\nRecord the timestamp of each data transaction.\n\n\nProne to replay attack(a kind of MITM attack) if the clocks b/w the client and server is not synchronised\nBut how come will this happen?? \n\nIf the system time is not synchronised, then suppose the end point EA is slower, then the MITM can intercept the message b/w two endpoint and resend the password again to hack and pretend to be the genuine user. What's more, since the time is slower in EA, then as the MITM intercepts data and resend, it does need some time to \"RETRANSMIT\" , but it is the slower time that allows the delay of retransmit time not be discovered if the time difference |T_received - T_send| \n epsilon is not so strict.\n\n\n\n\nChallenge-Response Portocal\n\n\n\n\nReference this video first!\n\n\nThe server and the receiver share a certain kind of \"shared secret\" that might be generated as the user registered in the system.\n\n\nEnsures the \"Mutual Authentication\"\n\n\nThe procedure as follows:\nServer sends a unique challenge value sc to the client\n\nClient sends a unique challenge value cc to the server\n\nServer computes sr = hash(cc + secret) and sends to the client\n\nClient computes cr = hash(sc + secret) and sends to the server\n\nServer calculates the expected value of cr and ensures the client responded correctly\n\nClient calculates the expected value of sr and ensures the server responded correctly\nwhere\n\nsc is the server generated challenge\n\ncc is the client generated challenge\n\ncr is the client response\n\nsr is the server response\n\n\nSince the secret is shared b/w the server and client, then is is able to verify the genuine of both server and client  \n\n\nA good challenge/response system will generate a new challenge for every transaction or session (and make sure that previous challenges are not reused!), so that session transcripts cannot be spliced together to create new fraudulent systems. (Maybe the challenge will be encrypted in both parties)\n\n\n\n\nComparison b/w Kerberos v4 and Kerberos v5\n\n\nReference here\n\n\n\n\nv4 is prone to MITM attack and v5 is not.\n\n\nBoth of them provides mutual authentication\n\n\n\n\nWhat is mutual authentication and why we need it??\n\n\n\n\n\n\n\u7591\u554f\uff1aMutual authentication \u76f8\u8f03\u65bc one way \u4ed6\u7684\u597d\u8655\u662f \u53ef\u4ee5\u540c\u6642\u9a57\u8b49 \u4f3a\u670d\u5668\u65b9\u548c\u4f7f\u7528\u8005\u65b9\u561b\uff1f\uff1f\n\u5c31\u662f\u4f3a\u670d\u5668\u80fd\u78ba\u8a8d\u9019\u500buser \u800c\u4e14\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u78ba\u8a8d\u9019\u500bserver\n\u4f46\u662f\u539f\u672c\u53ea\u6709usr\u4f86\u78ba\u8a8dserver\n\u591a\u51fa\u9019\u500bserver\u4f86\u78ba\u8a8dusr \u6703\u6709\u4ec0\u9ebc\u512a\u9ede\u5462\uff1f\n\u89e3\u7b54\uff1a\u56e0\u70bauser\u548cserver\u90fd\u6709\u53ef\u80fd\u88ab\u4eff\u5192\uff0c\u56e0\u6b64\u9700\u8981\u96d9\u91cd\u8a8d\u8b49\u96d9\u65b9\u3002\n\n\n\n\n\n\nBoth the server and client may be inpersonated, so we need to verify their real identification.\n\n\n\n\n\n\nKey distribution with asymmetric encryption (Public key certificate)\n\n\n\n\nThe well known SSL use this method ,and the X.509 standard is used.\n\n\nAimed to solve the problem that we want to verify the authentication of some authorities by the trusted certificated authority (CA)\n\n\nStep as follows\n\n\n\nVerify the signature that generated by CA to ensure the reality.\n\n\n\n\nWhat is the difference b/w the digital signature and public key authentication.\n\n\n\n\nFrom stackoverflow:\nA digital signature is used to verify a message. It is basically an encrypted hash (encrypted by the private key of the sender) of the message. The recipient can check if the message was tampered with by hashing the received message and comparing this value with the decrypted signature (decrypted the signature with the public key from the sender).\n\n\n\n\nTo decrypt the signature, the corresponding public key is required. \nA digital certificate is used to bind public keys to persons or other entities. If there were no certificates, the signature could be easily be forged, as the recipient could not check if the public key belongs to the sender.\n\n\nOriginal discussion thread \n \n\n\nSimilar reference\n \n\n\n\n\nThe \"Chain of Trust\" SSL certificate, root certificate are all related to this topic \nActually the public key certification (certification distribution of authorize a genuine key) is the core concept of SSL/TLS portocal\n\n\nChain of Trust YouTube video\n\n\nPrivate key of root CA should be absolutely inaccessible.\n\n\nOnce the \"Chain of Trust\" is successfully formed, an secure communication path can be formed (TLS using SSL certificate to do such things)\n\n\n\n\nSo a question comes to my mind, \nWhat is the differenct b/w HTTPS,TLS and SSL?\n\n\n\n\nAnswer as follows:\n1.TLS is just the new name (or say acronym) of SSL Namely, SSL protocol got to version 3.0; TLS 1.0 is \"SSL 3.1\". TLS versions currently defined include TLS 1.1 and 1.2. Each new version adds a few features and modifies some internal details. We sometimes say \"SSL/TLS\".\n\n\n\n\n2.HTTPS is the HTTP under the secured transmission protocol, i.e. HTTPS is HTTP-within-SSL/TLS. SSL (TLS) establishes a secured, bidirectional tunnel for arbitrary binary data between two hosts.\n\n\nWhy chain of trust??\n\n\n\n\nEven though the asymmetric (Public-key cryptography RSA) can ensure the secret communication, digital signature can ensure the correctness of content\n, however, we are still not sure about whether the issuer of the digital certificate is the real \"good guy\" or the \"forged guy.\"\n\nwikipedia ref\n\n\n\n\nPKI, CA, Key...etc great explanation video\n\n\nHere\n\n\n\n\nA public key infrastructure (PKI) is a set of roles, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption.\n\n\n\n\nWhen to revoke a user's certification??\n\n\n\n\nThe user\u2019s private key is assumed to be compromised(\u5047\u5b9a\u88ab\u6d29\u6f0f\u51fa\u53bb\u4e86)\n\n\nThe user is no longer certified by this CA; reasons for this\ninclude subject\u2019s name has changed, the certificate is\nsuperseded, or the certificate was not issued in conformance\nwith the CA\u2019s policies\n\n\nThe CA\u2019s certificate is assumed to be compromised\n\n\n\n\nThe PKI architecture\n\n\n\n\nPKI YouTube video\n\n* PKI is a framework that some vendor and use...etc should follow, and PKI associates a public key with a verified person/system.\n\n\n\nCh.5 Cloud Security\n\n\n802.1X, EAP(A framework)\n\n\n\n\nUsed to control the access of user to the internet.\n\n\nprovides a generic transport service for the\nexchange of authentication information between a\nclient system and an authentication server.\n\n\nThe authentication server gives the instruction to the gate / authenticator such that it can give the client the internet resource he wants or not.\n\n\n , auth methods through the EAP layer to reach the data link layer.\n\n\nProcedure as follows \n\n1.EAPOL(OL stands for data encapsulation)-Start, start the eap\n\n2.EAPOL(OL stands for data encapsulation)-EAP(REQ/IDENTITY) auth server wants to know the identity /\n\n3.EAPOL(OL stands for data encapsulation)-EAP(RESPONSE/AUTH) five the clinet response\n\n4.EAPOL(OL stands for data encapsulation)-Logoff end the connection\n\n\n\n\nCloud Couputing\n\n\n\n\nDefinition: Focus on what service cloud should have rather than a \"how to\" design architecture. a tool for\ndescribing, discussing, and developing a system-specific\narchitecture using a common framework of reference.\n\n\nSaaS provides software such as google drive, PaaS manages the computing platform such as the web(middleware components), and IaaS provides the\nhardware resources such as the network server and hosts...etc\n\n\nRoles in cloud computing. \n\n1.Carrier: Provide the transport b/w cloud services and consumers\n\n2.Auditor(\u7a3d\u67e5\u54e1): Assures that THE CP conforms to a certain cloud standards\n\n3.Broker(\u7d93\u7d00\u4eba):Help the consumer to manage the cloud service when it is too complicated.\n\n\n\n\nData protection in the cloud\n\n\n\n\nMulti instance model: Am unique DBMS in each could subscriber(Risk distribution)\n\n\nMulti tenant model: Allows customers to share computing resources in a public or private cloud. Each tenant's data is isolated and remains invisible to other tenants.\n\nThe rest of cloud computing will be read before the midterm 2\n\n\n\n\nCh.6 Transport-Level Security\n\n\nSSL Architecture\n\n\n\n\nSSL connection: each connection is transient , and associated with one session.\n\n\nSSL session: Association b/w the client and the server\n\nwikipedia\n\n\nNetAdmin\n\n\n\n\nSSL Record Portocol\n\n\n\n\nConfidentiality with Handshake protocol to ensure that no one intercept in the pipeline, encrypt the data with secret key.\n\n\nMessage integrity: With a shared secret key to ensure the MAC code\nsuch that we may check whether the data has been modified or not.\n\n\n\n\n\nPre master, master secret, private, shared / session key\n\n\n\n\nPre master key: Allow for the uniform format of the master key.(Aim for the greater consistency)\n\n\nMaster key is the agreement of both endpoint, master_secret = PRF(pre_master secret, \"master secret\"(aims for tag of current thing), Client ran + Server ran (or the Alice ran add up with the Bob ran))\n\nCheck here\n\n\n\n\nCryptographic Computations\n\n\nTLS, HTTPS = HTTP + SSL/TLS HTTP under a secure transport layer\n\n\n\n\nPort 443 will be used since it invokes the SSL\n\n\nThe normal HTTP close we just need HTTP close, while the HTTPS we need the TLS which involves the underlying TCP connection.\n\n\nTLS requires the two entity of TCP in both client and server side.\n\n\nTLS should agree and exchange the closure alerts before closing connection.\n\n\n\n\nSSH\n\n\n\n\nCryptographic network protocol\n\n\n3different protocol: User authentication, Connection and Transport Layer Protocol\n\n\nUsing the asymmetric encryption for user authentication(identify the private key of the user ti ensure the user is really him).\n\n\nAuthentication method\n\n\n\nPackage spec\n\n\n\n\n\nSSH Channel types\n\n\n\n\nIncluding Session (Remotely execute a command such like ssh \n), X11 , Forwarded TCPIP(Remote Port Forwarding) Direct(Local PF)\n\n\n\n\nPort Forwarding\n\n\nSSHPF\n\n\n Useful features of SSH\n\n Insecure TCP -\n SSH (Change the port from TCP to SSH)\n\n SSH force the traffic in the TCP change to the SSH layer.\n\n \nLocal vs Remote PF\n\n\n\n\nLocal vs Remote ??\n1.Local \u81ea\u5df1\u9023\u5411\u66f4\u9060\u7aef\u7684\u4f3a\u670d\u5668\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u81ea\u5df1\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u9060\u7aefremote server\u7684b\u57e0\uff0c\u85c9\u7531remote server\u50b3\u5230\u66f4\u9060\u7aef\u7684faraway host\n\n2.Remote \u7576\u9060\u7aef\u4f3a\u670d\u5668\u60f3\u8981\u9023\u56de\u4f86\u6642\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u9060\u7aef\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u6211\u9019\u7aeflocal server\u7684b\u57e0\uff0c\u85c9\u7531local server\u9023\u5411\u6211\u4e00\u65c1\u7684near host\n\n\n\n\nCh.7 Wireless Security\n\n\n\n\nWireless devices are tend to have higher security risks than others since the following factors: Channel, Mobility, Resources, Accessibility.\n\n\nCommon Wireless Network Threats: Accidental association, Malicious association, AD-HOC Networks, Identity theft(MAC Spoofing), MITM attack, DoS, Network injection.\n\n\n\n\nProtect against wireless eavesdropping\n\n\n\n\nSignal hiding(not so practical) and encryption(kind of practical).\n\n\n\n\nProtect the access point\n\n\n\n\nMain threat is the unauthorized access to the network.\n\n\nThe 802.1X standard. provides the authentication for device wishing connecting to the LAN/WLAN.\n\n\n\n\nMobile device security\n\n\n\n\nMajor security issues are: Lack of physical\nsecurity controls, Use of untrusted\nmobile devices, Use of untrusted\nnetworks, Use of untrusted\ncontent, Use of applications\ncreated by unknown\nparties, Interaction with\nother systems, Use of location\nservices\n\n\n\n\n802.11i Wireless protocol\n\n\n\n\nControlled ports:PDU exchange within LAN b/w supplicant and other systems only if supplicant authorizes such an exchange\n\n\nUncontrolled ports: Allows PDU exchange b/w supplicant and other RS regardless the authentication state.\n\n\nBSS, ESS? \nHere\n\n\n\n\nWEP, WPA, RSN\n\n\n\n\nWEP: Use RC4 for encryption, the level of security is unrelated with len of WEP key, \u56e0\u70baRC4\u662fstream cipher\u7684\u4e00\u7a2e\uff0c\u540c\u4e00\u500b\u9470\u5319\u7d55\u4e0d\u80fd\u4f7f\u7528\u4e8c\u6b21\uff0c\u6240\u4ee5\u4f7f\u7528\uff08\u96d6\u7136\u662f\u7528\u660e\u6587\u50b3\u9001\u7684\uff09IV\u7684\u76ee\u7684\u5c31\u662f\u8981\u907f\u514d\u91cd\u8907\uff1b\u7136\u800c24\u4f4d\u5143\u7684IV\u4e26\u6c92\u6709\u9577\u5230\u8db3\u4ee5\u64d4\u4fdd\u5728\u5fd9\u788c\u7684\u7db2\u8def\u4e0a\u4e0d\u6703\u91cd\u8907\uff0c\u800c\u4e14IV\u7684\u4f7f\u7528\u65b9\u5f0f\u4e5f\u4f7f\u5176\u53ef\u80fd\u906d\u53d7\u5230\u95dc\u9023\u5f0f\u9470\u5319\u653b\u64ca, so change to WPA or WPA2 is the safer method\u3002\n\n\nWPA: Fixed the vulnerability of WEP.\n\n\n\n\n802.11i Fourway handshake auth.\n\n\n\n\nHere\n\n\nMIC is the message integrity code to ensure the integrity of the message.\n\n\nWhat is the purpose of ANonce and SNonce? As we can see from the 2017mid2 , they are used to generated the PTK for both the STA and AP, also the back SNonce serves like a challenge-response protocol to ensure the freshness and the alive of STA that there is no MITM attack and the same is true for AP.\n\n\nThe GTK is used for decrypting the data of multicast and broadcast traffic, all of the STAs share the same GTK.\n\n\nGTK is distributed after the pairwise keys that already established (Use PK generated before to enctypt the GTK key )\n\n\nGTK Changed every time as device leaves network(yes TRANSIENT KEY!)\n\n\nTK with TKIP or CCMP are used for traffic key(encryption for data transfer phase)\nprovides message integrity and data confidentiality.\n\n\nHMAC-SHA1 are used to generated nonce, expand pairwise keys and to generate GTK, PTK(transient key)\n\n\n\n\nCh8. EMAIL Security\n\n\n(Pretty Good Privacy)\n\n\n\n\nProvides a confidentiality and authentication service that\ncan be used for electronic mail and file storage applications\n\n\nPGP also provides the message authentication and the message integrity.\n\n\nServices\n1.Digital signature: DSS, RSA , SHA\n\n2.Message encryption: CAST, IDEA, 3DES\n\n3.Compression: zip\n\n4.email compatibility: Base64 encryption \n\n\n\n\n\n\n\n\nPGP Authencation\n\n\n\n\nRSA ensures that only the mail sender signed with the digital sender, encrypt w his/her private key, can be decrypted with his/her public key, thus ensures the identity.\n\n\nSHA ensures that no one can generated the message with the same hash code\n\n\n\n\nPGP Confidentiality and Authentication\n\n\n\n\n64bits CFB is used, using the block cipher , symmetric encryption.\n\n\nIn PGP, each symmetric key is used only once.(The session key is bound with the message and transmitted.)\n\n\nEncrypt the sesion key with the receiver's public key.\n\n\n\n\nPGP Compression\n\n\n\n\nPGP compresses the msg after signature but before encryption.\n\n\nIf sign after the compression, then the version of compression will be constrained since different compression leads to different encoding thus different hash result even with the same source data.\n\n\n\n\nPGP E-mail Compatibility\n\n\n\n\nRadix64(B64) encoding to convert them into printable ASCII chars.\n\n\nAppend the CRC to protect the transmission error.\n\n\n\n\nS/MIME\n\n\n\n\nSecurity enhancement for the MIME\n\n\nAnother standard besides PGP\n\n\n\n\nMIME\n\n\n\n\nMIME improve from SMTP\n\n\n5 Headers are defined, to fully describe the email, MIME-ver, content type, content-transfer encoding, content-ID, content description.\n\n\n\n\nS/MIME  Functionality\n\n\n\n\nEnveloped data: encrypted content of any type \nand\nencrypted content encryption keys\n for one or\nmore recipients.\n\n\nSigned data, message digest of content and digital signature with the private key of the signer. \nRecipient without S/MIME compatibility are unable to view the data\n\n\nClear-signed data: Only the digital signature is encoded using\nbase64 \nrecipients without S/MIME\ncapability can view the message content,\nalthough they cannot verify the signature\n\n\n\n\nCryptographic algorithms used in S/MIME\n\n\n\n\n Smime secures the MIME with a signature ,encryption, or both\n\n Clear signing does not involve transforming the message to be signed.\n\n\nS/MIME Certificate Processing\n\n\n\n\nManagers and/or users must configure each client with a list of trusted keys and with certificate revocation lists.\n\nLocal wil maintaining the certs needed\nto verify incoming signatures and to encrypt outgoing messages.(MACV\u4eba\u7684\u8b49\u66f8\u4f86\u6aa2\u9a57\u5225\u4eba\u7684\u6578\u4f4d\u7c3d\u6709\u4ee5\u53ca\u8981\u7528\u81ea\u5df1\u7684\u8b49\u66f8\u4f86\u70ba\n\n\n\u81ea\u5df1\u7684\u8a0a\u606f\u52a0\u5bc6\uff0c\u4ee5\u53ca\u7c3d\u7f72\u3002)\n\n\n\n\nDKIM\n\n\n\n\ncryptographically signing e-mail messages, permitting a signing domain t()o claim responsibility for a message in the mail stream\n\nYouTube\n\n\n\n\n2\nnd\n midterm note\n\n\n2014mid2\n\n\n\n\n\n\n\u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X\n\n\n\n\n\n\n\u5728\u6bcf\u4e00\u500bSSL session\u548ccinnection\u4e2d \u4ed6\u5011\u7684\u53c3\u6578\u6703\u5f7c\u6b64\u4e92\u76f8\u5206\u4eab\uff0c\u4f8b\u5982\u52a0\u5bc6\u65b9\u6cd5\u8207\u79d8\u9470\u5319\u9577\u5ea6\uff0csession \u548cconenction\u4ed6\u5011\u7684\u5dee\u5225\u5728\u65bc:SSL session\u8207SSL connection\u662f\u4e0d\u540c\u7684\u6982\u5ff5\u3002 SSL session\u6307\u7684\u662f\u901a\u904e\u63e1\u624b\u800c\u7522\u751f\u7684\u4e00\u4e9b\u53c3\u6578\u548c\u52a0\u5bc6\u79d8\u9470\u7684\u96c6\u5408\uff1b\u7136\u800cSSL connection\u662f\u6307\u5229\u7528\u67d0\u500bsession\u5efa\u7acb\u8d77\u4f86\u7684\u6d3b\u52d5\u7684\u6703\u8a71\u3002\u63db\u53e5\u8a71\u4f86\u8aaa\uff0cconnection\u662f\u6703\u8a71\u7684\u9032\u7a0b\uff0c\u800csession\u662f\u5efa\u7acb\u9019\u500b\u6703\u8a71\u6240\u9700\u8981\u7684\u4e00\u4e9b\u53c3\u6578\u3002\n\n\n\n\n(\u4fee\u6b63\u904e!)SSL\u4e2d \u52a0\u5bc6\u3001MAC\u3001\u58d3\u7e2e\u53ef\u80fd\u7684\u9806\u5e8f\u6709\u516d\u7a2e\uff0c\u4f46\u5176\u4e2d\u5408\u7406\u7684\u53ef\u80fd\n\u53ea\u6709\u52a0\u5bc6\u5728\u58d3\u7e2e\u4e4b\u5f8c!(\u58d3\u7e2e\u524d\u5c31\u52a0\u5bc6\uff0c\u56e0\u70ba\u8cc7\u6599\u5df2\u7d93\u8b8a\u6210\u7955\u6587\uff0c\u6709\u53ef\u80fd\u58d3\u7e2e\u6703ERROR)\n\n\nWEP\u7684\u7f3a\u9ede\u5c31\u662f \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587\uff0c\u52a0\u4e0aRC4\u662f\u4e00\u7a2estream cipher\u6a21\u5f0f\uff0c\u9700\u8981\u5920\u9577\u7684key\uff0c\u4f46WEP\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907)\n\n\nPMK\nPTK(\u66ab\u614b)\nKCK(EAP confirmation\uff0c\u7528\u4f86\u4fdd\u969c\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u5354\u5b9a\u9470\u5319\u4ea4\u63db\u7684\u5b8c\u6574\u6027)+KEK(EAP encryption, \u7528\u4f86\u4fdd\u8b49\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u4e2dGTK\u3001RSN IE \u7684\u6a5f\u5bc6\u6027\uff0c\u5c31\u662f\u78ba\u4fdd\u9019\u500b\u9470\u5319\u4e0d\u4e0d\u6703\u88ab\u76dc\u7528)+TK(traffic encryption, user traffic \u7684\u6a5f\u5bc6\u6027\u8207\u5b8c\u6574\u6027\uff0c\u5728\u7528\u6236\u548c\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u8cc7\u6599\u52a0\u5bc6)\n\n\nWPA\u52a0\u5bc6\u76844\u8def\u4ea4\u4e92\u5354\u5b9a\uff0c\u56e0\u70ba\u6709 SNonce \u548c ANonce \u7528\u4f86\u7d44\u6210TK\uff0c\u6545\u80fd\u78ba\u4fddfreshness\n\n\u66f4\u8a73\u7d30\u8acb\u9ede\u6b64\n\n\n2014\u6700\u5f8c\u4e00\u984c\uff0c\u5982\u679c\u662f\u7528\u90f5\u4ef6\u7684\u672c\u8eab\u5167\u5bb9\u4f86\u52a0\u5bc6\uff0c\u800c\u4e26\u975e\u90f5\u4ef6\u7684\u96dc\u6e4a\u6578\u503c\u52a0\u5bc6\u4f9d\u7136\u53ef\u7a31\u4f5c\u7c3d\u7ae0\uff0c\u4f46\u662f\u6548\u679c\u76f8\u7576\u5dee\uff0c\u56e0\u70ba\u662f\u6574\u4efd\u90f5\u4ef6\uff0c\u8a08\u7b97\u91cf\u592a\u5927\u4e86\uff0c\u52a0\u4e0a\u56e0\u70ba\u662f\u7528\u5bc4\u4ef6\u4eba\u7684\u79c1\u9470\u52a0\u5bc6\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u7528\u5bc4\u4ef6\u4eba\u7684\u516c\u9470\u6253\u958b\uff0c\u518d\u52a0\u4e0a\u96a8\u4fbf\u4e82\u8aaa\u89e3\u5bc6\u524d\u7684\u6771\u897f\u5c31\u662f\u7c3d\u7ae0\u4fbf\u6703\u9020\u6210\u98a8\u96aa\n\n\n\n\n2015mid2\n\n\n\n\nEAP\u652f\u6301\u7684\u65b9\u6cd5\u6709EAP-TLS, MD5, POTP, PSK , PWD, TTLS, IKEV2, FAST, SIM, AKA, GTC EKE\n\n\n\u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u539f\u56e0\u5728\u65bcuncontrolled\u7684\u7aef\u672b\u53ef\u8b93AS\u548cSTATION\u6e9d\u901a\uff0c\u4e0d\u8ad6\u72c0\u614b\uff0c\u4f46\u662fcontrolled\u9700\u8981\u8a8d\u8b49\u904e\u5f8c\u624d\u884c\uff0c\u56e0\u6b64\u5728\u4e00\u525b\u958b\u59cb\u7684\u6642\u5019\u4e26\u4e0d\u9069\u7528(\u4e00\u525b\u958b\u59cb\u4e00\u5b9a\u662f\u9084\u6c92\u6709\u8a8d\u8b49\u904e\u7684\u72c0\u614b)\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X\n\n\nWEP by RC4, WPA by RC4 and TKIP, RSN by AES CCM CCMP\n\n\nch8 12\u7684\u5716\u8981\u591a\u770b!\n\n\n\n\n2016mid2\n\n\n\n\nWEP WPA TKIP all use RC4\n\n\n\n\n\u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee\n\n\n\n\n11\n\n\n\n\nA(O)SNonce ANonce\nB(X)\u61c9\u8a72\u662fTK(?)\nC(O)\u7528Nonce\nD(O) E(X)\u61c9\u70baAP\n\n\n\n\nTA:\nB: (O) \u662f\u5229\u7528 PMK \u4f86\u52a0\u5bc6\u3002 (\u61c9\u8a72\u9084\u662fTK  \u52a9\u6559\u53ef\u80fd\u7d66\u932f)\nhandshake \u4e26\u6c92\u6709\u63d0\u4f9b authentication \u7684\u529f\u80fd\uff0c\u6240\u4ee5 D\u3001E \u61c9\u8a72\u90fd\u662f\u932f\u7684\u3002\u4f60\u7684\u5176\u4ed6\u7b54\u6848\u90fd\u662f\u5c0d\u7684\u3002\n\n\n\n\n\n\n12\n\n\n\n\nA:\u5c0d\uff0c\u56e0\u70ba\u6709Nonce\u7d44\u6210TK\uff0c\nB:\u61c9\u8a72\u5c0d\uff0c\u5427? \u4f46\u662fGROUP KEY\u63d0\u5230\u5982\u679c\u6709\u4e00\u500b\u88dd\u7f6e\u96e2\u958b\u4e86\uff0c\u5c31\u6703\u8b8a\u66f4\uff0c\nC:\u6c92\u6709\uff0c\u5427? \u56e0\u70ba\u4ed6\u662f\u63a1\u7528RC4stream cipher\uff0cKEY\u6703\u4e00\u76f4\u8b8a\n\nD: TKIP\u4e5f\u662f\u63a1\u7528RC4\u7684stream cipher \u6240\u4ee5KEY\u6703\u4e00\u76f4\u8b8a\n\n\n\n\nTA:\n\n\nWEP key \u90fd\u662f\u56fa\u5b9a\uff0cIV \u624d\u6703\u4e00\u76f4\u6539\u8b8a\u3002\n\n\nA: No. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab\nB: Yes. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab\nC: No. data packet \u662f\u7528 RC4(IV,WEP key) \u7522\u751f\u7684 key \u52a0\u5bc6\uff0cIV\u6703\u4e00\u76f4\u6539\u8b8a\u56e0\u6b64\u7522\u751f\u7684 key \u4e5f\u6703\u4e00\u76f4\u8b8a\u3002\nD: No. \u7406\u7531\u540c\u4e0a\u3002\n\n\n\n\n\n\n13\n\n\n\n\nA: a--noncea\nb b--nonceb\na one way 2times, 2 way four times??\nC: both\u5427?, replay attack\u6c92\u6709\u7528\u56e0\u70ba\u6703\u6709nonce\u78ba\u4fdd\u4fe1\u606f\u662f\u6700\u65b0\u7684\n\n\n\n\nTA:\nA: one way 2 times, two way 3 times\nC: both\n\n\n\n\n2017mid2\n\n\n\u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee\n\n\n\n\n5\n\n\n\n\n\u5168\u90e8\n\n\n\n\nTA: \u4f60\u662f\u5c0d\u7684\n\n\n\n\n\n\n6\n\n\n\n\na,b,c,d,e,f,g,h\n\n\n\n\nTA: \u4f60\u662f\u5c0d\u7684\n\n\n\n\n\n\n7\n(i) \u7528\u4f86\u7522\u751fPTK\n\n\n\n\n(ii)\u56e0\u70ba\u9031\u671f\u6027\u7684\u8a2d\u5b9a\u70ba0\uff0c\u90a3\u9ebc\u540c\u6a23\u70ba0\u7684\u5169\u500bnonce\u6709\u53ef\u80fd\u4ee3\u8868\u4e0d\u540c\u7684\u6642\u9593\u9ede\uff0c\u6240\u4ee5\u5bb9\u6613\u906d\u53d7replay attack\n\n\n\n\nTA: \u4f60\u662f\u5c0d\u7684\n\n\n\n\n\n\n8\n(i) WEP key\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907)\n\n\n\n\n(ii) \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587\n\n\n\n\nTA:\n(i) \u6b63\u78ba\u4f86\u8aaa WEP key \u662f\u56fa\u5b9a\u7684\uff0cIV \u662f 24bits \u4e26\u4e14\u6703\u96a8\u6642\u6539\u8b8a\u3002\u5f31\u9ede\u7684\u78ba\u662f\u5bb9\u6613\u91cd\u8907\u3002\n(ii) \u56e0\u6b64\u7576\u627e\u5230 IV \u91cd\u8907\u7684\u60c5\u6cc1\u6642\uff0c\u5169\u500b\u52a0\u5bc6\u7684\u5c01\u5305(C1,C2)\u6703\u9020\u6210 =\n C1 xor C2 = P1 xor P2, \u4e4b\u5f8c\u4fbf\u53ef\u7528frequency analysis \u7834\u89e3\u51fa\u660e\u6587\u3002\n\n\n\n\n\n\nCh9. IP Security\n\n\n\u6982\u5ff5\n\n\n\n\n\u5728\u7db2\u8def\u5c64(OSI \u7b2c\u4e09\u5c64\uff0c\u4ecb\u65bcDATA LINK\u5c64\u548c\u50b3\u8f38\u5c64\u4e4b\u9593)\u7684\u5b89\u5168\u6a5f\u5236\n\n\n\u9700\u8981\u80fd\u78ba\u4fdd\u5169\u4ef6\u4e8b\n\n\n\u7db2\u8def\u88dd\u7f6e\u80fd\u9060\u96e2\u672a\u8207\u63a7\u5236\u7db2\u8def\u6d41\u91cf\n\n\nend to end user \u6d41\u91cf\u8ffd\u8e64\u5c07\u4f7f\u7528\u8a8d\u8b49\u8207\u52a0\u5bc6\u6a5f\u5236\u4f86\u78ba\u4fdd\u5b89\u5168\n\n\n\n\n\n\n\n\nIPSEC\u7684\u61c9\u7528\n\n\n\n\n\u78ba\u4fdd\u5728LAN\uff0c\u516c\u53f8\u5b89\u5168\n\u5728\u7db2\u8def\u4e0a\u9060\u7aef\u9023\u7d50\u7684\u5b89\u5168\n\n\n\u5efa\u7acb\u8207\u5925\u4f34\u7684\u5167\u5916\u7db2\u9023\u7d50\u6a5f\u5236\n\n\n\u5efa\u7acb\u96fb\u5b50\u5546\u52d9\u76f8\u95dc\u7684\u5b89\u5168\u6a5f\u5236\n\n\n\n\n\n\n\u80fd\u78ba\u4fdd\u5728IP\u5c64\u7684\u6d41\u91cf\u5b89\u5168\uff0c\u53ca\u8a8d\u8b49( can encrypt and/or authenticate all traffic at the IP level)\n\n\n\u597d\u8655:\n\n\n\u5982\u679c\u5c07IPSEC\u653e\u5728\u9632\u706b\u7246\uff0c\u90a3\u9ebc\u6240\u6709\u6d41\u904e\u4ed6\u7684\u6d41\u91cf\u90fd\u53ef\u4ee5\u88ab\u5b89\u5168\u7684\u4fdd\u8b77\uff0c\u4e14\u516c\u53f8\u6216\u5de5\u4f5c\u7fa4\u7d44\u5167\u7684\u6d41\u91cf\u4e5f\u4e0d\u6703\u56e0\u6b64\u800c\u7522\u751f\u8ca0\u64d4\n\n\n\u5982\u679c\u6240\u6709\u7684\u5916\u4f86\u8a0a\u606f\u90fd\u5fc5\u9808\u4f7f\u7528IP\uff0c\u800c\u9632\u706b\u7246\u662f\u7db2\u969b\u7db2\u8def\u9032\u5165\u5167\u90e8\u7684\u552f\u4e00\u7ba1\u9053\u6642\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\u6703\u6709\u8b93\u904e\u9632\u706b\u7246IPSec\u7684\u9014\u5f91(IPSec\u4e00\u5b9a\u6703\u64cb\u4e0b\u4f86)\n\n\nIPSEC\u5c0d\u65bc\u4e0a\u5c64\u662f\u770b\u4e0d\u5230\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u8005\u4e0d\u9700\u8981\u91cd\u65b0\u8abf\u6574\u8a2d\u5b9a\u3002\n\n\n\u53ef\u4ee5\u63d0\u4f9b\u7d66\u500b\u4eba\u5b89\u5168\uff0c\u6216\u662f\u7279\u5b9a\u4f7f\u7528\u8005(\u56e0\u70ba\u4f7f\u7528\u8005\u6703\u6709\u81ea\u5df1\u7684IP\uff0c\u56e0\u6b64\u6211\u5011\u80fd\u900f\u904e\u5206\u914d\u7279\u5b9a\u7684IP\u5230\u7279\u5b9a\u7684IPSEC\u7d66\u4ed6\u5b89\u5168\u6a5f\u5236) \u4f8b\u5982\u6709\u500b\u4eba\u7684\u865b\u64ec\u7db2\u8def\u6216\u662f\u5728\u5927\u4f01\u696d\u5e95\u4e0b\u7684\u5b50\u7db2\u8def\u5c31\u80fd\u6d3e\u4e0a\u7528\u5834\u3002\n\n\n\n\n\n\n\n\n\u8def\u7531\u65b9\u9762\u7684\u61c9\u7528\n\n\n\n\nIPSEC \u80fd\u78ba\u4fdd\u4ee5\u4e0b\u56db\u9805\n\n\n\u8def\u7531\u5ee3\u64ad\u4f86\u81ea\u6388\u6b0a\u904e\u7684\u8def\u7531\u5668(from authorized router)\n\n\nA router seeking to establish or maintain a neighbor relationship with a router in another routing domain is an authorized router(\u4fdd\u8b49\u76f8\u9130\u7684\u8def\u7531\u5668\u4e5f\u662f\u7d93\u904e\u6388\u6b0a\u7684)\n\n\n\u80fd\u627e\u5230\u6700\u521d\u59cb\u767cIP\u5c01\u5305\u7684router (A redirect message comes from the router to which the initial IP packet was sent )\n\n\n\u8def\u7531\u66f4\u65b0(routing update)\u4e0d\u6703\u88ab\u507d\u9020\n\n\n\n\n\n\n\n\nIPSEC\u4e2d\u7684\u8cc7\u6599\n\n\n\n\n\u592a\u591a\u4e86 \u81ea\u5df1\u770b\n\n\n\n\n\nIPSEC\u6240\u63d0\u4f9b\u7684\u670d\u52d9\n\n\n\n\n\u8981\u80fd\u78ba\u4fdd\u4ee5\u4e0b\u529f\u80fd\u53ef\u4ee5\u88ab\u5be6\u65bd\uff0c\u8b6c\u5982\n\n\n\u5b58\u53d6\u63a7\u5236(Access Control)\n\n\n\u7121\u9023\u7dda\u5b8c\u6574\u6027(Connection-LESS integrity)\n\n\n\u8cc7\u6599\u4f86\u6e90\u8a8d\u8b49(Data origin authentication)\uff0c\u8a8d\u8b49IP\u5c01\u5305\uff0c\u78ba\u4fdd\u771f\u7684\u662f\u7531\u4ed6\u50b3\u904e\u4f86\u7684\uff0c\u4ee5\u53ca\u662f\u5426\u88ab\u4fee\u6539\u904e\n\n\n\u62d2\u7d55\u91cd\u64ad\u653b\u64ca(\u53ef\u4ee5\u7528sequenct number\u4f86\u9810\u9632 \u4e4b\u5f8c\u6703\u63d0\u5230)\n\n\n\u9650\u5236\u6d41\u91cf\u7684\u6a5f\u5bc6\u6027(Limited traffic flow confidentiality)\n\n\n\n\n\n\n\n\n\u5169\u7a2e\u6a21\u5f0f transport mode \u6216\u662f tunnel mode\n\n\n\n\n\u5176\u5dee\u5225\u5728\u65bc\u8cc7\u6599\u5c01\u88dd\u7684\u4e0d\u540c(\u5c01\u88dd\u6a5f\u5236\u7684\u4e0d\u540c)\n\n\n\n\n\n\n\n\n\n\n\u5dee\u7570\u9805\u76ee\n\n\ntransport mode\n\n\ntunnel mode\n\n\n\n\n\n\n\n\n\n\n\u4fdd\u8b77\u9805\u76ee\n\n\nupper layer protocols\n\n\nentier IP packet\n\n\n\n\n\n\n\u4fdd\u8b77\u5c0d\u8c61\n\n\nhost-to-host encapsulation(Encryption), authentication(Auth Header)\n\n\ngateway-to-gateway(or host)\n\n\n\n\n\n\n\u6a5f\u5236\n\n\n\u5728\u539f\u6709\u7684IP\u6295\u4e2d\u63d2\u5165\u9069\u7576\u7684IPSEC Header\uff0c\u8cc7\u6599\u64f4\u5145\u91cf\u8f03\u70ba\u5c11\uff0c\u4f46\u662f\u6bcf\u4e00\u500b\u4e3b\u6a5f\u90fd\u8981\u6642\u505aIPSEC\u624d\u53ef\u4ee5\uff0c\u6bd4\u8f03\u5c0d\u65bc\u7528\u6236\u4e0d\u65b9\u4fbf\n\n\n\u76f4\u63a5\u5728\u5916\u5305\u4e00\u500b\u65b0\u7684IP\u982d(src \u81ea\u5df1\u3001dst \u9060\u7aef\uff0c\u8b02\u4e4bnew ip header)\u4ee5\u53ca\u7aef\u53e3\uff0c\u4f46\u5728\u500b\u4eba\u96fb\u8166\u8edf\u9ad4\u4e0d\u9700\u8981\u65b0\u7a31\u6642\u505aIPSEC\uff0c\u53ea\u8981\u5728\u8def\u7531\u5668\u4e0a\u9762\u6709\u5373\u53ef\uff0c\u4f7f\u4e0d\u540c\u7684\u5340\u57df\u7db2\u8def\u9023\u7dda\u9593\u7528IPSEC\uff0c\u5373\u6709\u5b89\u5168\u7684VPN\u9023\u7dda\n\n\n\n\n\n\n\n\n\u5b89\u5168\u95dc\u806f(Security Association)\n\n\n\n\ndef: \u5728\u5169\u500b\u7db2\u8def\u5be6\u9ad4\u4e4b\u9593\uff0c\u6240\u5efa\u7acb\u8d77\u7684\u5171\u4eab\u7db2\u8def\u5b89\u5168\u5c6c\u6027\u3002(\u4ecb\u65bc\u767c\u9001\u8005\u8207\u63a5\u6536\u8005\u4e4b\u9593\u7684\u55ae\u5411\u95dc\u4fc2)\n\n\n\n\nex: \u5728IP\u5c01\u5305\u4e2d\uff0c\u4ee5\u9418\u9ede\u5730\u5740\u7684IPV4 V6\u5c01\u5305\u4e2d\u7684SPI\u8cc7\u8a0a\u4f5c\u70ba\u5b89\u5168\u95dc\u806f\u7684\u5b9a\u7fa9(SPI \u5b89\u5168\u53c3\u6578 in the enclosed extension header)\n\n\n\n\n\n\n\u5169\u500b\u91cd\u8981\u7684\u6771\u897f\u4f86\u78ba\u4fdd\u5b89\u5168\u95dc\u806f\u7684\u904b\u4f5c\n\n\n\n\n\u5b89\u5168\u95dc\u806f\u8cc7\u6599\u5eab(SAD): \u5b9a\u7fa9\u6bcf\u4e00\u500bSA\u7684\u53c3\u6578(\u4ea6\u5373IPSEC\u6a19\u982d(AH\u6216\u662fESP)\u4e2dSPI\u7684\u6578\u503c)\uff0c\u8209\u51e1\u53c3\u6578\u865f\uff0c\u5e8f\u865f(seq number counter \u9632\u6b62\u91cd\u653e\u653b\u64ca), \u5e8f\u865f\u6ea2\u51fa\u6a19\u793a(seq number counter overflow), \u9632\u91cd\u653e\u653b\u64ca\u8996\u7a97(anti replay window), AH\u3001ESP information, \u6709\u6548\u6642\u9593(SA lifetime), \u5354\u8b70\u6a21\u5f0f(IPSEC protocol mode), \u9019\u689d\u8def\u4e0a\u6700\u5927\u50b3\u8f38\u55ae\u5143(path MTU)\n\n\n\u5b89\u5168\u653f\u7b56\u8cc7\u6599\u5eab(SPD): \u5b58\u653eIPSEC\u7684\u898f\u5247\uff0c\u7528\u4f86\u5b9a\u7fa9\u90a3\u4e9b\u6d41\u91cf\u8981\u8d70IPSEC\uff08a table\uff09\n\n\n\n\n\n\nIpsec \u7684SPD\u548cSAD\u8be6\u89e3 - CSDN\u535a\u5ba2\n \u8207\u642d\u914d\u8ab2\u672c\u7684\u5716\u8868\u4e00\u8d77\u770b\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u5728SPD\u4e2d\u67e5\u5230\u6709\u76f8\u7b26\u7684\u4f86\u6e90\u8207\u76ee\u7684\u4ee5\u53ca\u7aef\u53e3\u5f8c\uff0c\u5c31\u53ef\u4ee5\u5957\u7528\u5176\u4e2dSPD\u7684\u898f\u5247\uff0c\u4e5f\u5c31\u662f\u7db2\u5740\u4e2d\u7684\u57f7\u884c\u5354\u8b70\u6216\u662fpdf\u4e2d\u7684action\u3002\n\n\n\n\u82f1\u6587\u55ae\u5b57: outbound: \u9001\u53bb\u5916\u9762\u3001\u5411\u5916\u767c\u9001\u7684\uff1binbound: \u9001\u53bb\u88e1\u9762\uff0c\u5411\u5167\u9001\u7684\n\n\n\n\n\u4ee5\u4e0b\u70ba\u6d41\u7a0b\u5716\u5169\u5f35\n\n\n\n\n\n\n\n\n\nESP\u8a73\u7d30\u89e3\u91cb\n\n\n\n\n\u5728tunnel mode\u4e2d\u6703\u6709\u4e00\u500b\u65b0\u7684ip header(new ip header)\n\n\n\n\n\u9632\u6b62\u91cd\u653e\u653b\u64ca\n\n\n\n\n\u5229\u7528\u8996\u7a97\u7684\u6a5f\u5236\uff0c\u5c31\u50cf\u5728\u8a08\u7b97\u6a5f\u7db2\u8def\u6982\u8ad6\u6240\u5b78\u5230\u7684\uff0c\u7576\u6536\u5230\u4e00\u500b\u5c01\u5305\u5f8c\u5c31\u5c07\u8996\u7a97\u5411\u524d\u79fb\uff0c\u7528bool\u8868\u793a\u6709\u6c92\u6709\u6536\u5230\uff0c\u6536\u5230\u524d\u4e00\u5f8c\u525b\u624d\u7684\u5730\u65b9\u5c31\u4e0d\u80fd\u518d\u5ea6\u63a5\u6536\u4e86(\u56e0\u70ba\u8996\u7a97\u5df2\u7d93\u96e2\u958b\u4e86\u90a3\u500b\u7bc4\u570d) \u56e0\u6b64\u80fd\u9632\u6b62\u91cd\u653e\u653b\u64ca\n\n\n\n\n\u7d50\u5408\u6578\u500bSA\n\n\n\n\n\u55ae\u4e00\u7684SA\u53ea\u80fdAH\u6216\u662fESP\u4f46\u4e0d\u80fd\u540c\u6642\u6709\u6578\u7a2e\n\n\n\u540d\u8a5e\u89e3\u91cb: security assocation bundle(SA\u6346\u5305(?))\uff0c\u4e00\u9023\u4e32\u7684SA\u4f7f\u6d41\u91cf\u901a\u904e\u4f86\u9054\u6210\u60f3\u8981\u7684IPSEC\u670d\u52d9\u3002 \u4e0d\u540c\u7684SA\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u7aef\u9ede\u7d50\u675f\uff0c\u4e5f\u53ef\u4ee5\u5728\u540c\u500b\u3002\n\n\n\u6709\u5169\u7a2e\u65b9\u6cd5\n\n\n\u50b3\u8f38\u76f8\u9130(transport adjacency) : \u4ee5\u4e0d\u7528\u5230\u96a7\u9053\u7684\u65b9\u5f0f(?)\u4f86\u5be6\u4f5c\u6bd4\u4e00\u5c64\u6a5f\u5236\u9084\u591a\u7684\u4fdd\u8b77\u5c64\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u5c64\u7684\u5b89\u5168\u6a5f\u5236\u7684\u7d50\u5408(allow only for one level of combination)\u3002\n\n\n\u8fed\u4ee3\u96a7\u9053(iterated tunneling) : \u4f7f\u7528\u96a7\u9053\u4f86\u6642\u505a\u591a\u5c64\u4fdd\u8b77\u6a5f\u5236\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u53ef\u4ee5\u6709\u5de2\u72c0\u7684\u5b89\u5168\u6a5f\u5236\u7d50\u5408\u3002\n\n\n\n\n\n\n\n\nESP wiht authentication\u5728\u5169\u7a2e\u6a21\u5f0f\u4e0b\u7684\u60c5\u6cc1\n\n\n\n\ntransport mode: \u8a8d\u8b49\u5728\u6574\u500bIP payload(\u6307IP\u5c01\u5305\u50b3\u8f38\u771f\u6b63\u7684\u5167\u5bb9\u3001\u8cc7\u6599\u672c\u8eab)\uff0c\u4f46\u662fIP\u7684\u982d\u4e26\u6c92\u6709\u88ab\u4fdd\u8b77\u3002\n\n\ntunnel mode: auth\u5728\u76ee\u7684\u5730\u624d\u6709\uff0c\u6574\u500bIP\u5c01\u5305\u90fd\u88ab\u4fdd\u8b77\n\n\n\u5169\u500b\u6a21\u5f0f\u90fd\u662f\u5c0d\u7955\u6587\u8a8d\u8b49\uff0c\u4e26\u975e\u660e\u6587\n\n\n\n\n\u50b3\u8f38\u76f8\u9130(transport adjacency)\n\n\n\n\ndef: \u5167ESP SA\u5916AH SA\u7684\u8907\u5408\u578b\u8a8d\u8b49\u6a5f\u5236\u3002\n\n\n\u6b64\u8655\u7684ESP\u6c92\u6709\u8a8d\u8b49\n\n\n\u52a0\u5bc6IP\u7684\u8cc7\u6599(payload)\n\n\nAH\u5247\u662f\u7528\u5728\u50b3\u8f38\u6a21\u5f0f(transport mode)\uff0c\n\n\n(\u53ef\u80fd\u8003):\u512a\u02c7\u9ede\u5c31\u662f\uff0c\u8a8d\u8b49\u8f03\u591a\u7684field\uff1b\u7f3a\u9ede\u5c31\u662f\uff0c\u6709\u5169\u500bSA\u53ef\u80fdoverhead\u591a\u4e86\u4e9b\uff0c\u6548\u80fd\u964d\u4f4e\uff0c\u9019\u4e5f\u662f\u4e00\u500btrade off\n\n\n\u5148\u52a0\u5bc6(\u5167ESP)\u518d\u8a8d\u8b49(\u5916AH)(\u4e0b\u9762\u90a3\u500b\u4e8b\u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u539f\u56e0\u4e4b\u5f8c\u8a73\u8ff0)\n\n\n\n\n\n\n\n\n\u50b3\u8f38\u8207\u96a7\u9053\u8907\u5408(transport-tunnel bundle)\n\n\n\n\ndef: \u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u63a1\u7528\u5167AH transport SA, \u5916ESP tunnel SA\uff0c\u6709\u4e9b\u539f\u56e0\u5982\u4e0b\n\n\n\u7ac4\u6539\u8cc7\u6599\u7d93\u7531\u9a57\u8b49\u4e00\u5b9a\u6703\u767c\u73fe\uff0c\u6545\u4e0d\u53ef\u80fd\uff0c\u6240\u4ee5\u4e5f\u4e0d\u9700\u8981\u5148\u52a0\u5bc6\uff0c\u5148\u8a8d\u8b49\u5c31\u597d\u4e86(\u5982\u679c\u6709\u4eba\u6514\u622a\u4e26\u4fee\u6539\u9a57\u8b49\u7684\u8cc7\u6599\u4e00\u5b9a\u6703\u88ab\u767c\u73fe)\n\n\n\u5148\u8a8d\u8b49\u5f8c\u5c31\u53ef\u4ee5\u628a\u8a8d\u8b49\u8cc7\u8a0a\u5b58\u5728\u76ee\u7684\u7aef(destination)\uff0c\u63d0\u4f9b\u5c07\u4f86\u8b58\u5225\u7528\n   C * \u7d50\u679c\u5c31\u662f\u6574\u500b\u8a8d\u8b49\u7684inner packet\u90fd\u88ab\u52a0\u5bc6\u4e86\uff0c\u800c\u4e14\u9084\u9644\u4e0a\u4e86\u65b0\u7684ItP\u982d C\n\n\n\n\n\n\n\n\n\u7db2\u8def\u9470\u5319\u4ea4\u63db(internet key exchange, IKE)\n\n\n\n\n\u6709IPSEC SA\u4e5f\u6709 IKE SA \u5169\u500b\u662f\u4e0d\u4e00\u6a23\u7684\u6771\u897f\uff0c\u5169\u968e\u6bb5\u5354\u5546\uff0c\u5148\u5354\u5546\u51fa\u4e00\u500bIKESA \u63a5\u8457\u518d\u524d\u5f80IPSEC SA\n\n\n\u95dc\u9375\u7684\u5169\u500b\u8981\u7d20: \u9470\u5319\u6c7a\u8b70(key determination) \u548c \u9470\u5319\u5206\u767c(key distribution)\u901a\u5e38\n\u56db\u500b\u9470\u5319\u5728\u5169\u500b\u61c9\u7528\u7a0b\u5f0f\u7684\u6e9d\u901a\u9593\n\n\n\u5354\u5546\u5167\u5bb9\n\n\n\u52a0\u5bc6\u7b97\u6cd5\n\n\nhash\u7b97\u6cd5\n\n\n\u8a8d\u8b49\u65b9\u5f0f\n\n\nPRF\u7b97\u6cd5(\u7528\u4ee5\u7522\u751f\u52a0\u89e3\u5bc6\u5bc6\u8981)\n\n\nDH \u9470\u5319\u4ea4\u63db\u7b97\u6cd5\u6848\u53c3\u6578\n\n\n\u9470\u5319\u9577\u5ea6\n\n\n\n\n\n\n\u5169\u7a2e\u9470\u5319\u7ba1\u7406\u8fa6\u6cd5\n\n\n\u624b\u52d5: \u624b\u52d5\u5c07\u9470\u5319\u914d\u7f6e\uff0c\u9069\u7528\u65bc\u5c0f\u578b\u4e14\u8b8a\u63db\u8f03\u5c11(small and static)\u7684\u74b0\u5883(\u56e0\u70ba\u5982\u679c\u8b8a\u5316\u5f88\u5927\u8981\u4e00\u76f4\u624b\u52d5\u91cd\u65b0\u914d\u7f6e\u76f8\u7576\u9ebb\u7169)\n\n\n\u81ea\u52d5: \u53ca\u6642\u4f9b\u61c9\u9700\u6c42(on-demand)\u7684\u9470\u5319\u5efa\u7acb(\u9700\u8981\u7684\u6642\u5019\u624d\u62ff)\n\n\n\n\n\n\n\n\nISAKMP/OAKLEY\n\n\n\n\nIPSEC\u7684\u9810\u8a2d\u9470\u5319\u7ba1\u7406\u6a5f\u5236\n\n\nISAKMP: \u63d0\u4f9b\u4e00\u500b\u67b6\u69cb(framework)\u4f86\u5efa\u7acb\u5b89\u5168\u95dc\u806f(SA)\u548c\u52a0\u5bc6\u91d1\u9470\n\n\nOAKLEY: \u4f7fDH\u9470\u5319\u4ea4\u63db\u540c\u6642\u53c8\u80fd\u4fdd\u969c\u5b89\u5168(Oakley\u53ef\u8996\u70ba\u662fDiffie-Hellman\u91d1\u9470\u4ea4\u63db\u6cd5\u7684\u52a0\u5f37\u7248\uff0c\u539f\u7406\u76f8\u540c\u4f46\u63d0\u4f9b\u8f03\u9ad8\u7684\u5b89\u5168\u6027\u3002)\uff0c\u4e5f\u4e0d\u9650\u5236\u7279\u5b9a\u683c\u5f0f( does not dictate specific formats)\uff0c\u63d0\u4f9bprotocal, format\u4f86\u5546\u91cf(negotiate)\u5b89\u5168\u5c6c\u6027(security attribute)\uff0c\u5305\u542b\u4e00\u4e9b\u80fd\u6709\u5404\u5f0f\u5404\u6a23\u7684key exchange algo\u7684\u8a0a\u606f\u96c6\u5408(message set)\n\nAll the pics , images credits to the original author, I only use it for the education purpose, please DO NOT distribute\n\n\n\n\n\n\n\n\n\n\nCh.10 Malicious Software\n\n\n\u7c97\u7565\u5206\u985e\n\n\n\n\n\u5148\u4ee5\u5982\u4f55\u50b3\u64ad\u5206\u985e\uff0c\u518d\u4ee5\u50b3\u64ad\u5230\u76ee\u6a19\u5f8c\u505a\u4ec0\u9ebc\u4f86\u5206\u985e\n\n\n\u6216\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5206\u985e\n\n\n\u9700\u4e0d\u9700\u8981\u5bc4\u751f\u65bchost program(\u5bbf\u4e3b)\uff0c\u4f8b\u5982\u75c5\u6bd2\uff1b\u6216\u662f\u53ef\u4ee5\u81ea\u7531\u884c\u52d5\u7684\u5982\u7279\u6d1b\u4f0a\u6728\u99ac\u6216bot\u7a0b\u5f0f\n\n\n\u4e0d\u6703\u81ea\u6211\u8907\u88fd\uff0c\u4f8b\u5982\u6728\u99ac\u548c\u5783\u573e\u90f5\u4ef6\uff1b\u6703\u81ea\u6211\u5fa9\u81ea\u4f8b\u5982\u8815\u87f2\u548c\u75c5\u6bd2\n\n\n\u62b5\u9054\u653b\u64ca\u76ee\u6a19\u505a\u4ec0\u9ebc\n\n\n\u70b8\u6389\u7cfb\u7d71\n\n\n\u63a7\u5236\u6a5f\u5668\u4f7f\u5176\u6210\u70ba\u6bad\u5c4d\u96fb\u8166\n\n\n\u7aca\u53d6\u8cc7\u6599\n\n\n\u92b7\u8072\u533f\u8de1\uff0c\u4ee5\u514d\u88ab\u8ffd\u8e64\u767c\u73fe\n\n\n\n\n\n\n\u8907\u5408\u653b\u64ca\u6a21\u5f0f\n\n\n\n\n\n\n\n\n\u767c\u5c55\u53f2\n\n\n\n\n\u4ee5\u524d\u958b\u767c\u60e1\u610f\u8edf\u9ad4\u7684\u96e3\u5ea6\u9817\u9ad8\uff0c\u4f46\u96a8\u8457\u958b\u767c\u5957\u4ef6\u7684\u666e\u53ca\uff0c\u73fe\u4eca\u5bb9\u6613\u591a\u4e86\uff0c\u5c31\u9023\u4e00\u822c\u7684\u78bc\u8fb2\u4e5f\u90fd\u505a\u5f97\u5230\n\n\n\u8fd1\u5e74\u4f86\u99ed\u5ba2\u5f9e\u500b\u4eba\u8b8a\u6210\u7d44\u7e54\u7b49\u7d1a\u72af\u7f6a\n\n\n\n\n\u96fb\u8166\u75c5\u6bd2\n\n\n\n\n\u4ecb\u7d39\n\n\n\u4e00\u7a2e\u5bc4\u751f\u6027(parasitic)\u7684\u7a0b\u5f0f\uff0c\u81ea\u6211\u57f7\u884c\n\n\n\u53ef\u4ee5\u611f\u67d3\u5176\u4ed6\u7a0b\u5f0f\u3001\u57f7\u884c\u6a94\u7b49\u7b49\uff0c\u4e26\u4e14\u6709\u53ef\u80fd\u7ac4\u6539\u4ed6\n\n\n\n\n\n\n\u67b6\u69cb\n\n\n\u611f\u67d3\u6a5f\u5236: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u611f\u67d3\u3001\u50b3\u64ad\uff0c\u6709\u6642\u4e5f\u53eb\u505ainfction vector\n\n\n\u89f8\u767c: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u88ab\u6253\u958b\uff0c\u6709\u6642\u4e5f\u53eb\u505alogic bomb\n\n\npayload: \u75c5\u6bd2\u505a\u4e86\u4ec0\u9ebc\n\n\n\n\n\n\n\n\n\u968e\u6bb5\n\n\n\n\n\u4f11\u7720(dormant): idle\u4e2d\uff0c\n\u4e0d\u662f\u6240\u6709\u75c5\u6bd2\u90fd\u6709\u9019\u500b\u968e\u6bb5\n\n\n\u50b3\u64ad(propagation): \u8907\u88fd\u5230\u5176\u4ed6\u7a0b\u5f0f\u3001\u78c1\u5340\u4e2d\n\n\n\u6fc0\u767c(triggering): \u75c5\u6bd2\u88ab\u555f\u52d5\u4e86\n\n\n\u57f7\u884c(execution): \u505a\u58de\u4e8b\n\n\n\n\n\n\n\n\n\u58d3\u7e2e\u75c5\u6bd2(compression virus): \u5c07\u81ea\u5df1\u89e3\u58d3\u7e2e\u9644\u52a0(prepend)\u5230\u5176\u4ed6\u57f7\u884c\u6a94\u4e4b\u4e2d\uff0c\u53ef\u4ee5\u7528\u4f86\u898f\u907fsize checking\u7684\u6383\u6bd2\u65b9\u5f0f\n\n\n\n\n\n\n\u4ee5\u653b\u64ca\u7684\u76ee\u6a19\u5206\u985e\u75c5\u6bd2\n\n\n\n\n\u611f\u67d3\u958b\u6a5f\u78c1\u5340: \u4f8b\u5982MBR\n\n\n\u611f\u67d3\u6a94\u6848: \u611f\u67d3OS\u3001shell\u7b49\u91cd\u8981\u6a94\u6848\n\n\n\u5de8\u96c6: \u611f\u67d3\u61c9\u7528\u7a0b\u5f0f\u9700\u8981\u7684macro\uff0c\u5f71\u97ff\u6587\u4ef6\u7684\u4f7f\u7528\n\n\n\u591a\u89d2\u5ea6: \u591a\u7a2e\u611f\u67d3\u6a21\u5f0f\n\n\n\n\n\u4ee5\u75c5\u6bd2\u5982\u4f55\u898f\u907f\u5075\u6e2c\u4f86\u5206\u985e\n\n\n\n\n\u52a0\u5bc6(encryption): \u75c5\u6bd2\u7684\u67d0\u90e8\u5206\u7522\u751f\u52a0\u5bc6\u7684\u9470\u5319\uff0c\u4e26\u52a0\u5bc6\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u800c\u7576\u611f\u67d3\u6210\u529f\u8981\u57f7\u884c\u7684\u6642\u5019\u5c31\u6703\u4f7f\u7528\u7576\u521d\u7684\u9470\u5319\u4f86\u89e3\u5bc6\u75c5\u6bd2\u4e26\u4e14\u57f7\u884c\u4ed6\uff0c\u6b64\u5916\u6bcf\u7576\n\u75c5\u6bd2\u7e41\u6b96\u7684\u6642\u5019\u9019\u500b\u52a0\u5bc6\u7684\u9470\u5319\u5c31\u6703\u6539\u8b8a\uff0c\u662f\u6545\u52a0\u5bc6\u7684\u7d50\u679c\u4e5f\u6703\u4e0d\u4e00\u6a23\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u75c5\u6bd2\u7279\u5075\u78bc\u6aa2\u6e2c(no constant bit pattern value)\n\n\n\u96b1\u533f(stealth): \u4f7f\u9632\u6bd2\u8edf\u9ad4\u7121\u6cd5\u5075\u6e2c\uff0c\u6574\u500b\u505a\u7684\u4e8b\u60c5(payload)\u4ee5\u53ca\u75c5\u6bd2\u672c\u8eab\u90fd\u96b1\u85cf\u3002\n\n\n\u591a\u578b\u614b(polymorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u56e0\u6b64\u96e3\u4ee5\u7528\u75c5\u6bd2\u7279\u5fb5\u78bc\u4f86\u6aa2\u67e5\u3002\n\n\n\u7a81\u8b8a(metamorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u6709\u53ef\u80fd\u5c07\u81ea\u5df1\u5168\u90e8\u91cd\u65b0\u6539\u5beb\uff0c\u5305\u542b\u884c\u70ba\u4ee5\u53ca\u6a23\u8c8c\uff0c\u4f7f\u5f97\u96e3\u4ee5\u5075\u6e2c\u3002\n\n\n\n\n\u5de8\u96c6\u4ee5\u53ca\u8173\u672c\u75c5\u6bd2\n\n\n\n\n\u5de8\u96c6\u75c5\u6bd2\u53ef\u4ee5\n\u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\u7a0b\u5f0f\u78bc\n\n\n\u56b4\u91cd\u5371\u5bb3\u7684\u539f\u56e0\n\n\n\u5e73\u53f0\u7121\u95dc\u6027(platform-\nINDEPENDENT\n)(\u75c5\u6bd2\u53ef\u4ee5\u8de8\u5e73\u53f0)\n\n\n\u611f\u67d3\u6587\u4ef6(\u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\uff0c\u4f7f\u6587\u4ef6\u7121\u6cd5\u9806\u5229\u904b\u884c)\uff0c\u800c\u975e\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc\n\n\n\u9019\u4e9b\u6587\u4ef6\u90fd\u5f88\u5e38\u898b\uff0c\u4f8b\u5982word(\u593e\u5e36\u65bc\u5176\u4e2d)\uff0c\u4f7f\u5176\u6563\u64ad\u5bb9\u6613\n\n\n\u56e0\u70ba\u662f\u611f\u67d3\u6587\u4ef6\u800c\u975e\u7cfb\u7d71\uff0c\u56e0\u6b64\u8f03\u96e3\u4ee5\u963b\u6b62\u6563\u64ad\n\n\n\n\n\n\n\n\n\u96fb\u8166\u8815\u87f2\n\n\n\n\n\u4e00\u500b\u6703\u81ea\u5df1\u627e\u6a5f\u5668\u4f86\u611f\u67d3\u7684\u7a0b\u5f0f\n\n\n\n\n\u70ba\u4e86\u8907\u88fd\uff0c\u53ef\u80fd\u6703\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4f86\u63a5\u5230\u9060\u7aef\u6a5f\u5668\n\n\n\n\n\u96fb\u90f5\u3001\u6a94\u6848\u50b3\u8f38\n\n\n\u9060\u7aef\u57f7\u884c\n\n\n\u9060\u7aef\u6a94\u6848\u63a5\u89f8(remote file access)\n\n\n\u9060\u7aef\u767b\u5165(remote login)\n\n\n\n\n\n\n\n\n\u8815\u87f2\u7684\u904b\u4f5c\u968e\u6bb5\u548c\u75c5\u6bd2\u4e00\u6a23\uff0c\u770b\u4e0a\u65b9\u63d0\u904e\u7684\u5373\u53ef\n\n\n\n\n\n\n\u8207\u96fb\u8166\u75c5\u6bd2\u4e0d\u540c\u7684\u662f\uff0c\u96fb\u8166\u8815\u87f2\u4e0d\u9700\u8981\u9644\u5728\u5225\u7684\u7a0b\u5f0f\u5167\uff0c\u53ef\u80fd\u4e0d\u7528\u4f7f\u7528\u8005\u4ecb\u5165\u64cd\u4f5c\u4e5f\u80fd\u81ea\u6211\u8907\u88fd\u6216\u57f7\u884c\n\n\n\n\n\n\n\u8815\u87f2\u5982\u4f55\u767c\u73fe\u76ee\u6a19\n\n\n\n\n\u96a8\u6a5f: \u96a8\u6a5f\u611f\u67d3\u4e0d\u540cIP\uff0c\u6703\u9020\u6210\u5f88\u5927\u7684\u7db2\u8def\u6d41\u91cf\uff0c\u5c31\u7b97\u5728\u653b\u64ca\u5c55\u958b\u524d(\u56e0\u70ba\u8981\u4e00\u76f4\u96a8\u6a5f\u627e\u76ee\u6a19\uff0c\u8f03\u70ba\u6df7\u4e82\uff0c\u9817\u5403\u7db2\u8def\u6d41\u91cf\u8cc7\u6e90)\n\n\n\u76ee\u6a19\u5217\u8868(hit list): \u653b\u64ca\u8005\u5df2\u7d93\u6709\u653b\u64ca\u5217\u8868\uff0c\u63a5\u8457\u6309\u8868\u64cd\u8ab2\uff0c\u56e0\u70ba\u5df2\u7d93\u5148\u5efa\u597d\u653b\u64ca\u5217\u8868\uff0c\u5728scan\u6a5f\u5668\u7684\u6642\u5019\u5c31\u5f88\u5feb\uff0c\u5f88\u96e3\u6293\u51fa\u611f\u67d3\u7279\u5fb5\n\n\n\u62d3\u6a38\u7684(topological): \u7528\u5df2\u7d93\u611f\u67d3\u7684\u6a5f\u5668\u4f86\u627e\u51fa\u5176\u4ed6\u53ef\u653b\u64ca\u76ee\u6a19\n\n\n\u5340\u57df\u5b50\u7db2(local subnet):\u5982\u679chost\u662f\u5728\u9632\u706b\u7246\u5f8c\u88ab\u611f\u67d3\u7684\uff0c\u8815\u87f2\u6703\u5229\u7528\u5b50\u7db2\u8def\u7684\u67b6\u69cb\u627e\u4ed6\u7684\u5b50\u7db2\u8def\u7576\u76ee\u6a19\n\n\n\n\n\n\n\n\n\u8815\u87f2\u7684\u6280\u8853(worm technology)\n\n\n\n\n\u8de8\u5e73\u53f0\n\n\n\u591a\u653b\u64ca(multi-exploit): \u4ee5\u591a\u7a2e\u7ba1\u9053\u6ef2\u5165\u7cfb\u7d71\n\n\n\u5feb\u901f\u50b3\u64ad(ultrafast spreading): \u5229\u7528\u5404\u7a2e\u65b9\u6cd5\u52a0\u5feb\u50b3\u64ad\u901f\u5ea6\uff0c\u4f86\u611f\u67d3\u6108\u591a\u4e3b\u6a5f\u6108\u597d\n\n\n\u591a\u5f62: \u70ba\u4e86\u898f\u907f\u76e3\u6e2c\uff0c\u6bcf\u4e00\u500b\u8907\u88fd\u904e\u7684\u8815\u87f2\u90fd\u6703\u6709\u529f\u80fd\u4e00\u81f4\u4f46\u662f\u65b0\u7684\u7a0b\u5f0f\u78bc\u5167\u5bb9\n\n\n\u7a81\u8b8a: \u6539\u8b8a\u5916\u89c0\uff0c\u6216\u662f\u5728\u751f\u614b\u968e\u6bb5\u6709\u4e0d\u540c\u7684\u7279\u5fb5\n\n\n\u4ea4\u901a\u5de5\u5177(transport vehicle): \u56e0\u70ba\u8815\u87f2\u5bb9\u6613\u5927\u91cf\u611f\u67d3\u6a5f\u5668\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f5c\u70ba\u60e1\u610fpayload\u7684\u6563\u4f48\u5de5\u5177\n\n\n\n\n\n\n\n\n\u884c\u52d5\u7684\u7a0b\u5f0f\u78bc(mobile code)\n\n\n\n\ndef: (QQ \u597d\u96e3\u7ffb\u8b6f\uff0c\u76f4\u63a5\u786c\u80cc\u5b9a\u7fa9\u5427): Refers to programs that can be shipped unchanged to a heterogeneous collection of platforms and execute with identical semantics\uff0c\u8de8\u5e73\u53f0\u4f46\u662f\u529f\u80fd\u76f8\u540c\u3002(\u8b93\u7a0b\u5f0f\u53ef\u4ee5\u88dd\u8f09\u5230\u5404\u7a2e\u4e0d\u540c\u7684\u5e73\u53f0\u800c\u4e14\u57f7\u884c\u7684\u76ee\u7684\u901a\u80fd\u76f8\u540c)\n\n\n\u53ef\u4f5c\u70ba\u6728\u99ac\u3001\u8815\u87f2\u3001\u75c5\u6bd2\u7684\u50b3\u64ad\u6a5f\u5236\n\n\n\u5e38\u898b\u7684\u653b\u64ca\u624b\u6cd5\n\n\ncross-site scripting\n\n\n\u4e92\u52d5\u5f0f\u7db2\u9801(interactive, dynamic web)\n\n\nemail \u9644\u4ef6\n\n\n\u5f9e\u5947\u602a\u7684\u5730\u65b9\u4e0b\u5947\u602a\u7684\u6587\u4ef6(\u4f8b\u5982\u91d1\u5c71\u6bd2X\uff0c36X\u9632\u6bd2)\n\n\n\n\n\n\n\n\n\u4e0b\u8f09\u611f\u67d3(driven-by-downloads)\n\n\n\n\n\u653b\u64ca\u8005\u5229\u7528\u7db2\u9801\u7684\u6f0f\u6d1e\uff0c\u8b93\u4f7f\u7528\u8005\u700f\u89bd\u53d7\u63a7\u5236\u7684\u7db2\u9801\u5f8c\uff0c\u4fbf\u53ef\u4ee5\u5e6b\u4f7f\u7528\u8005\u5b89\u88dd\u60e1\u610f\u8edf\u9ad4(\u4f8b\u5982\u90a3\u7a2e\u4e00\u6253\u958b\u5c31\u8df3\u51fa\u6771\u897f\u5e6b\u4f60\u5b89\u88ddhao123\u7684\u7db2\u7ad9)\n\n\n\n\n\u5783\u573e\u90f5\u4ef6\n\n\n\u3000\u6700\u8fd1\u7684\u5783\u573e\u96fb\u90f5\u5e38\u5e38\u7531\u6bad\u5c4d\u7db2\u8def\u767c\u9001\n\n\u3000\u5783\u573e\u90f5\u7c21\u4e5f\u9069\u5408\u4e58\u8f09\u60e1\u610f\u8edf\u9ad4\n*\u3000\u4e5f\u53ef\u4ee5\u91e3\u9b5a\uff0c\u7db2\u8def\u91e3\u9b5a\n\n\n\u6728\u78bc\u8edf\u9ad4\n\n\n\n\ndef(wikipedia): \u7279\u5fb5\u8207\u7279\u6d1b\u4f0a\u6728\u99ac\u4e00\u6a23\u5177\u6709\u507d\u88dd\u6027\uff0c\u8868\u9762\u4e0a\u6c92\u6709\u5371\u5bb3\u3001\u751a\u81f3\u9084\u9644\u6709\u4f7f\u7528\u8005\u9700\u8981\u7684\u529f\u80fd\uff0c\u537b\u6703\u5728\u4f7f\u7528\u8005\u4e0d\u7d93\u610f\u9593\uff0c\u5c0d\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u7522\u751f\u7834\u58de\u6216\u7aca\u53d6\u8cc7\u6599\uff0c\u7279\u5225\u662f\u4f7f\u7528\u8005\u7684\u5404\u7a2e\u5e33\u6236\u53ca\u53e3\u4ee4\u7b49\u91cd\u8981\u4e14\u9700\u8981\u4fdd\u5bc6\u7684\u8cc7\u8a0a\uff0c\u751a\u81f3\u63a7\u5236\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u3002\n\n\n\u85cf\u6709 \u6211\u96b1\u85cf\u7684\u653b\u64ca\u7a0b\u5f0f\u78bc(\u5c31\u50cf\u6728\u99ac\u88e1\u9762\u7684\u58eb\u5175)\n\n\n\u7121\u6cd5\u81ea\u52d5\u64cd\u8f1f\uff0c\u8981\u6709\u9060\u7aefserver\u4f86\u57f7\u884c\n\n\n\u53ef\u4ee5\u9593\u63a5\u5730\u9054\u6210\u653b\u64ca(\u5c31\u50cf\u8981\u7d93\u7531\u6728\u99ac\u9032\u5230\u7279\u6d1b\u4f0a\u57ce)\n\n\n\u600e\u9ebc\u500b\u9593\u63a5?? \u7dad\u57fa\u767e\u79d1\u7684\u8aaa\u660e: \u904b\u884c\u4e86\u6728\u99ac\u7a0b\u5f0f\u7684\u670d\u52d9\u7aef\u4ee5\u5f8c\uff0c\u6703\u7522\u751f\u4e00\u500b\u6709\u8457\u5bb9\u6613\u8ff7\u60d1\u7528\u6236\u7684\u540d\u7a31\u7684\u9032\u7a0b\uff0c\u6697\u4e2d\u6253\u958b\u57e0\uff0c\u5411\u6307\u5b9a\u5730\u9ede\u767c\u9001\u8cc7\u6599\uff08\u5982\u7db2\u8def\u904a\u6232\u7684\u5bc6\u78bc\uff0c\u5373\u6642\u901a\u8a0a\u8edf\u9ad4\u5bc6\u78bc\u548c\u7528\u6236\u4e0a\u7db2\u5bc6\u78bc\u7b49\uff09\uff0c\u99ed\u5ba2\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u9019\u4e9b\u6253\u958b\u7684\u57e0\u9032\u5165\u96fb\u8166\u7cfb\u7d71\u3002\n\n\n\n\n\n\n\u6709\u4ee5\u4e0b\u4e09\u7a2e\u6a21\u5f0f:\n\n\n\u8b93\u539f\u6709\u7684\u7a0b\u5f0f\u7e7c\u7e8c\u6b63\u5e38\u57f7\u884c\uff0c\u4f46\u662f\u4e5f\n\u984d\u5916\u5730\n\u57f7\u884c\u60e1\u610f\u653b\u64ca\n\n\n\u57f7\u884c\u539f\u6709\u7684\u7a0b\u5f0f\uff0c\u4f46\u537b\u4fee\u6539\u4ed6\n\u7528\u4f86\u6b3a\u9a19\u7cfb\u7d71\n(\u507d\u88dd\u5728\u6b63\u5e38\u7684\u7a0b\u5f0f\u4e4b\u4e0b)\n\n\n\u76f4\u63a5\u53d6\u4ee3\u6389\u539f\u6709\u7684\u7a0b\u5f0f\u641e\u7834\u58de\n\n\n\n\n\n\n\n\n\u60e1\u610f\u8edf\u9ad4\u6703\u505a\u7684\u50b7\u5bb3(payload)\n\n\n\n\nsystem corruption: (\u81ea\u5df1\u770bXD)\n\n\nattack agent: \u60e1\u610f\u7a0b\u5f0f\u4f54\u64da(\u597d\u50cf\u53db\u8ecd\u4e00\u6a23)\u4e86\u7db2\u9801\u6216\u662f\u670d\u52d9\uff0c\u5728\u7528\u88ab\u5360\u64da\u7684\u7db2\u9801\u6216\u662f\u670d\u52d9\u4f86\u767c\u52d5\u653b\u64ca\uff0c\u56e0\u70ba\u662f\u4f54\u64da\u4ed6\u4eba\u7684\u5730\u76e4\u6240\u4ee5\u96e3\u4ee5\u6eaf\u6e90\n\n\nattack agent ex: zombie, botnet\n\n\n\n\n\n\n\n\ninformation theft:\u7aca\u53d6\u500b\u8cc7\uff0c\u4f8b\u5982\n\n\n\n\n\u7db2\u8def\u91e3\u9b5a(phishing): \u5167\u5bb9\u4ee5\u5047\u4e82\u771f\u4f7f\u53d7\u5bb3\u8005\u4e0a\u7576\n\n\n\u9b5a\u53c9\u91e3\u9b5a(spear-phishing) \nwiki\n\uff0c\u901a\u5e38\u6536\u96c6\u7684\u8cc7\u6599\u6703\u6bd4\u4e00\u822c\u8cc7\u6599\u66f4\u654f\u611f\u6a5f\u5bc6\u3002\n\n\n\u9375\u76e4\u5074\u9304: \u6d41\u51fa\u8cc7\u6599\n\n\n\u9593\u8adc\u8edf\u9ad4(spyware): \u5077\u5077\u76e3\u63a7\n\n\n\n\n\n\n\n\n\u5077\u5077\u9032\u5165\u7cfb\u7d71(stealthing)\n\n\n\n\n\u5f8c\u9580\n\n\ndef : \u9867\u540d\u601d\u7fa9\uff0c\u8d70\u5f8c\u9580\uff0c\u5c31\u662f\u53ef\u4ee5\u4e0d\u7528\u904e\u8edf\u9ad4\u5e38\u898f\u7684\u5b89\u5168\u6027\u6a5f\u5236\u4f86\u53d6\u5f97\u7cfb\u7d71\u63a7\u5236\u3002\n\n\n\u900f\u904e\u4e00\u4e9b\u975e\u6a19\u6e96\u7684\u7aef\u53e3(nonstandard port)\u4f86\u7aca\u807d\u4ee5\u53ca\u6f5b\u5165\u3002\n\n\n\n\n\n\n(rootkit)\n\n\ndef : \u4e00\u5957\u8edf\u4ef6\u5de5\u5177\uff0c\u4f7f\u672a\u7d93\u6388\u6b0a\u7684\u7528\u6236\u80fd\u5920\u5728\u672a\u88ab\u6aa2\u6e2c\u5230\u7684\u60c5\u6cc1\u4e0b\u7372\u5f97\u8a08\u7b97\u6a5f\u7cfb\u7d71\u7684\u63a7\u5236\u6b0a\u3002\n\n\n\u5077\u5077\u5730(in a stealthy way)\u7834\u58de\u6216\u4fee\u6539\u4f7f\u7528\u8005\u7684\u6b63\u5e38\u529f\u80fd\n\n\n\u653b\u64ca\u8005\u80fd\u53d6\u5f97\u96fb\u8166\u7684\u63a7\u5236\u6b0a: \u5305\u542b\u76e3\u63a7\u7e69\u7e8c\u3001\u6539\u8b8a\u7a0b\u5f0f\u6216\u6a94\u6848\u3001\u6536\u767c\u7db2\u8def\u6d41\u91cf\u3001\u53d6\u5f8c\u9580\u7a0b\u5f0f\u63a7\u5236\u6b0a\u3002\n\n\n\u5206\u70ba\u4ee5\u4e0b\u5e7e\u7a2e\n\n\n\u4e00\u81f4\u7684(persistent)\n\n\n\u53ea\u5b58\u5728\u8a18\u61b6\u9ad4(memory based): \u958b\u6a5f\u5f8c\u5c31\u6c92\u7528\u4e86\n\n\n\u4f7f\u7528\u8005\u6a21\u5f0f(user mode): \u53ef\u4ee5\u547c\u53ebAPI\u4e26\u4e14\u4fee\u6539\u4ed6\u7684\u7d50\u679c\n\n\n\u6838\u5fc3\u6a21\u5f0f(kernal mode): \u53ef\u4ee5\u963b\u65b7\u547c\u53ebOS API\n\n\n\u865b\u64ec\u6a5f\u70ba\u4e3b(virtual machine based): \u81ea\u884c\u5b89\u88dd\u4e00\u500bVM\u518d\u628a\u4f7f\u7528\u8005\u7684OS\u5305\u5728\u88e1\u9762\u6aa2\u6e2c\u3002\n\n\n\u5916\u90e8\u6a21\u5f0f(external mode):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u6bad\u5c4d\u7db2\u8def\u7684\u4f7f\u7528(use of bots)\n\n\n\n\nDDoS(\u63a7\u5236\u591a\u53f0\u4e00\u8d77\u6d88\u8017\u6d41\u91cf\uff0c\u767c\u52d5\u653b\u64ca)\n\n\nspamming\n\n\n\u7aba\u63a2\u6d41\u91cf(sniffing traffic)\n\n\n\u9375\u76e4\u5074\u9304(key logging)\n\n\n\u88dd\u7db2\u9801\u63d2\u4ef6(hao123)\n\n\n\u653b\u64caIRC\u7db2\u8def\n\n\n\u64cd\u5f04\u7db2\u9801\u904a\u6232\u6216\u6295\u7968\n\n\n\n\n\u5c0d\u65bc\u60e1\u610f\u8edf\u9ad4\u7684\u5c0d\u7b56\n\n\n\n\n\u78ba\u4fdd\u96fb\u8166\u7cfb\u7d71\u662f\u6700\u65b0\u7684\uff0c\u56e0\u70ba\u53ef\u80fd\u6703\u6709\u5f88\u591a\u66f4\u65b0\u6703\u88dc\u8db3\u6f0f\u6d1e\n\n\n\u78ba\u8a8d\u6a94\u6848\u7684\u5b58\u53d6\u6b0a\u9650\uff0c\u4ee5\u63a7\u5236\u5728\u88e1\u9762\u7684\u8cc7\u6599\uff0c\u5426\u5247\u4efb\u610f\u4eba\u90fd\u53ef\u4ee5\u5f97\u5230\u8cc7\u6599\u7684\u8a71\u592a\u5371\u96aa\n\n\n\n\n\u6383\u6bd2\u8edf\u9ad4\u7684\u6f14\u9032\n\n\n\n\n\n\nhost-based scanner \u4ee5\u4e3b\u6a5f\u70ba\u4e3b\u7684\n\n\n\n\n\u7b2c\u4e00\u4ee3: \u6700\u7c21\u55ae\u7684\u6383\u63cf\u65b9\u5f0f\uff0c\u9700\u8981\u75c5\u6bd2\u7c3d\u540d(\u7279\u5fb5)\n\n\n\u7b2c\u4e8c\u4ee3: \u555f\u767c\u5f0f(heuristic)\uff0c\u627e\u5c0b\u53ef\u80fd\u7684\u60e1\u610f\u8edf\u9ad4\uff0cintegrity checking\n\n\n\u7b2c\u4e09\u4ee3: \u6aa2\u67e5\u6d3b\u52d5\uff0c\u4ee5\u6d3b\u52d5\u4f86\u5075\u6e2c\u60e1\u610f\u8edf\u9ad4\u800c\u975e\u4ee5\u7d50\u69cb(\u56e0\u70ba\u4ed6\u5011\u53ef\u80fd\u7a81\u8b8a\uff0c\u7d50\u69cb\u592a\u4e94\u82b1\u516b\u9580\u4e86)\n\n\n\u7b2c\u56db\u4ee3: \u5168\u9762\u9632\u79a6(XD??)\n\n\n\n\n\n\n\n\nhost-based + behavor-blocking\n\n\n\n\ndef : \u548cOS\u7d50\u5408\uff0c\u5373\u6642\u6aa2\u6e2c\n\n\n\u627e\u51fa\u6f5b\u5728\u7684\u60e1\u610f\u8edf\u9ad4\uff0c\u5728\u767c\u4f5c\u524d\u5c31\u5148\u64cb\u4e0b(\u9632\u60a3\u672a\u7136)\n\n\n\u9650\u5236: (\u53ef\u80fd\u8003) \u56e0\u70ba\u60e1\u610f\u7a0b\u5f0f\u78bc\u5fc5\u9808\u8981\u76ee\u6a19\u6a5f\u5668\u57f7\u884c(\u81f3\u5c11\u8981\u6709\u57f7\u884c) \u6700\u4f4e\u9650\u5ea6\u4e00\u5b9a\u8981\u4e00\u9ede\u9ede\u5148\u8dd1\u904e\uff0c\u56e0\u6b64\u5728\u88ab\u6aa2\u6e2c\u51fa\u4f86\u7684\u6642\u5019\u53ef\u80fd\u5df2\u7d93\u9020\u6210\u4e86\u90e8\u5206\u640d\u5bb3\n\n\n\n\n\n\n\n\nperimeter-scanning\n\n\n\n\n\u901a\u5e38\u6703\u5728\u9632\u706b\u7246\u4e0a\u57f7\u884c\uff0c\u4f8b\u5982\u5728email web proxy\u4e0a\n\n\n\u5169\u7a2e\u76e3\u6e2c\u65b9\u5f0f\n\n\n\u5165\u53e3\u76e3\u6e2c(ingress): \u5728\u4f01\u696d\u7db2\u8def\u8207\u5916\u7db2\u7684\u4ea4\u754c\uff0c\u4f8b\u5982border router\u3001external firewall\u7684\u4e00\u90e8\u5206\n\n\n\u51fa\u53e3\u76e3\u6e2c(egress): \u4e5f\u662f\u5728\u4ea4\u754c\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u6aa2\u6e2c\u51fa\u767c\u7684\u6d41\u91cf\uff0c\u770b\u770b\u6709\u6c92\u6709\u7570\u5e38 \n\u53ef\u4ee5\u627e\u5230\u653b\u64ca\u7684\u4f86\u6e90\n\n\n\n\n\n\n\n\n\u5c0d\u6297\u8815\u87f2\n\n\n\n\nA\u7b49\u7d1a: \u7279\u5fb5\u70ba\u4e3b(signature-based)\n\n\nB\u7b49\u7d1a: \u904e\u6ffe\u70ba\u4e3b(filter-based): \u548cA\u985e\u4f3c\u4f46\u662f\u9760\u8815\u87f2\u7684\u5167\u5bb9\u800c\u975esignature\n\n\nC\u7b49\u7d1a: \u6709\u6548\n\u8f09\u8377\n\u70ba\u4e3b(payload): \u770b\u770b\u767c\u51fa\u7684\n\u5c01\u5305\n\u662f\u5426\u6709worm\n\n\nD\u7b49\u7d1a: threshold random walk(TRW): \u96a8\u6a5f\u6307\u5b9a\u76e3\u6e2c\uff0c\u96a8\u6a5f\u6307\u5b9a\u67d0\u500b\u9023\u7dda\u4f86\u6aa2\u67e5\u5979\n\n\nE\u7b49\u7d1a: \u983b\u7387\u9650\u5236(rate limiting): \u56e0\u70ba\u8815\u87f2\u8981\u6383\u63cf\u76ee\u6a19\uff0c\u6240\u4ee5\u53ef\u4ee5\u9650\u5236scan\u985e\u578b(scan like)(\u6216\u662f\u5230\u67d0\u6a5f\u5668)\u7684\u6d41\u91cf\u4f86\u907f\u514d\u8815\u87f2\u7e7c\u7e8c\u64f4\u6563\n\n\nF\u7b49\u7d1a: \u983b\u7387\u505c\u6b62(rate halting): \u7576\u8d85\u904e\u67d0\u4e00\u500b\u80fd\u5224\u65b7\u5230\u8815\u87f2\u7279\u5fb5\u7684\u95be\u503c\uff0c\u76f4\u63a5\u5207\u65b7\u6d41\u91cf\n\n\n\n\nDDoS\n\n\n\n\ndef: \u4ea6\u7a31\u6d2a\u6c34\u653b\u64ca\uff0c\u662f\u4e00\u7a2e\u7db2\u8def\u653b\u64ca\u624b\u6cd5\uff0c\u5176\u76ee\u7684\u5728\u65bc\u4f7f\u76ee\u6a19\u96fb\u8166\u7684\u7db2\u8def\u6216\u7cfb\u7d71\u8cc7\u6e90\u8017\u76e1\uff0c\u4f7f\u670d\u52d9\u66ab\u6642\u4e2d\u65b7\u6216\u505c\u6b62\uff0c\u5c0e\u81f4\u5176\u6b63\u5e38\u7528\u6236\u7121\u6cd5\u5b58\u53d6\u3002\n\n\n\u53ef\u4ee5\u7531\u8cc7\u6e90\u7684\u7528\u91cf\u770b\u51fa(\u56e0\u70baDDoS\u672c\u8eab\u5c31\u6703\u7528\u5f88\u591a\u7684\u8cc7\u6e90)\n\n\n\u5206\u70ba\u5169\u7a2e\n\n\n\u983b\u5bec\u6d88\u8017\u653b\u64ca: \u70ba\u4e86\u7528\u7f44\u53d7\u5bb3\u8005\u983b\u5bec\uff1b\u5835\u4f4f\u4ed6\uff0c\u4f8b\u5982ICMP\u6d2a\u6c34\u653b\u64ca\uff0c\u901a\u904e\u5411\u672a\u826f\u597d\u8a2d\u5b9a\u7684\u8def\u7531\u5668\u50b3\u9001\u5ee3\u64ad\u8cc7\u8a0a\u5360\u7528\u7cfb\u7d71\u8cc7\u6e90\u7684\u505a\u6cd5(\u4e00\u76f4\u671d\u4e3b\u6a5f\u767c\u9001\u8acb\u6c42\uff0c\u8b93\u4e00\u822c\u4eba\u7121\u6cd5\u767c\u9001\u8acb\u6c42)\u3002\n\n\n\u8cc7\u6e90\u6d88\u8017\u653b\u64ca: \u7528\u7f44\u53d7\u5bb3\u8005\u7684\u8cc7\u6e90\uff0c\u4f8b\u5982TCP\u4e2d\u7684SYN\u653b\u64ca\uff0c\u653b\u64ca\u8005\u4e00\u76f4\u767c\u9001SYN\u4f86\u8acb\u6c42\uff0c\u4f46\u662f\u5b8c\u5168\u4e0d\u56de\u61c9\u4f3a\u670d\u5668\u50b3\u4f86\u7684SYN/ACK(\u7167\u7406\u4f86\u8aaa\u6211\u6536\u5230\u4f3a\u670d\u5668\u7684\u8cc7\u6599\u6211\u8981\u8aaaACK\uff0c\u4ee5\u78ba\u8a8d3way handshaking)\uff0c\u4f3a\u670d\u5668\u5c31\u6703\u4ee5\u70ba\u6211\u6c92\u6536\u5230\uff0c\u518d\u5ea6\u9001\u8cc7\u6599\u4f86\uff0c\u5c31\u9019\u6a23\u9023\u7e8c\u767c\u5c01\u5305\u7d66server\u4f46\u4e0d\u56de\u61c9\u4ed6\uff0cserver\u8cc7\u6e90\u5c31\u88ab\u7528\u7f44 \nwiki: SYN flood\n\n\nSYN flood\u597d\u61c2\u7684\u5f71\u7247\n\n\n\n\n\n\n\u5c0d\u7b56(\u61c9\u8a72\u5f88\u597d\u61c2)\u5c31\u4e0d\u8aaa\u4e86\n\n\n\u4e8b\u767c\u524d: \u8b93\u4ed6\u5011\u7684buffer\u80fd\u5927\u4e00\u9ede\uff0c\u5373\u4f7f\u88abDDoS\u4e5f\u6490\u5f97\u4f4f\n\n\n\u4e8b\u767c\u7576\u4e0b: \u5229\u78bc\u5075\u6e2c\uff0c\u6e1b\u5c11\u640d\u5931\n\n\n\u4e8b\u767c\u5f8c: \u6eaf\u6e90\uff0c\u627e\u8ab0\u653b\u64ca\u7684(\u4e0d\u592a\u5be6\u969b)\n\n\n\n\n\n\n\n\nCh11. Intruder\n\n\nthee classes of intuder\n\n\n\n\nMasquerader : \u672a\u7d93\u6388\u6b0a\u7684\u4f7f\u7528\u8005\u4fb5\u5165\n\n\nMisfeasor : \u8a2a\u554f\u672a\u7372\u6388\u6b0a\u8a2a\u554f\u7684\u6578\u64da\uff0c\u7a0b\u5e8f\u6216\u8cc7\u6e90\u7684\u5408\u6cd5\u7528\u6236\n\n\nClandestine user : \u4e00\u500b\u4eba\u5c0d\u7cfb\u7d71\u9032\u884c\u76e3\u7763\u63a7\u5236\uff0c\u4e26\u4f7f\u7528\u6b64\u63a7\u5236\u8ff4\u907fauditing control\u548caccess control\uff0c\u6216\u8005\u58d3\u5236audit collection\n(\u596a\u53d6\u7cfb\u7d71\u7ba1\u7406\u54e1\u63a7\u5236\u6b0a\u9650\u7684\u4eba)\n\n\n\n\n\u5c0d\u6297hackers\u7684\u7cfb\u7d71\n\n\n\n\n\u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71(IDS)\n\n\n\u5165\u4fb5\u9810\u9632\u7cfb\u7d71(IPS)\n\n\nComputer emergency response team(CERT) : expert group that handles computer security incidents.\n\n\n\n\ninsider attack\n\n\n\n\nmost difficult to detect and prevent\n\n\n\u5c0d\u61c9\u653f\u7b56:\n\n\n\u4f7f\u7528\u8005\u9700\u8981\u591a\u5c11\u8cc7\u6e90\u8b93\u4ed6\u5011\u505a\u4e8b\u5c31\u6388\u6b0a\u591a\u5c11(\u4e0d\u7528\u4e00\u6b21\u7d66\u5168\u90e8\u7684\u6b0a\u9650)\n\n\n\u7528log\u7d00\u9304\u54ea\u4e9buser\u9032\u4f86\u4e86\u4e26\u4f7f\u7528\u4e86\u54ea\u4e9b\u6307\u4ee4\n\n\n\u7528\u6bd4\u8f03\u6709\u4fdd\u8b77\u6027\u7684\u6388\u6b0a\u65b9\u5f0f\u4fdd\u8b77\u91cd\u8981\u8cc7\u6e90\n\n\n\u4f7f\u7528\u7d50\u675f\u5f8c\u522a\u9664\u4f7f\u7528\u8005\u96fb\u8166\u8207\u7db2\u8def\u7684\u806f\u7e6b\n\n\n\u4f7f\u7528\u7d50\u675f\u5f8c\u4fdd\u7559\u5099\u4efd(\u4f5c\u70ba\u6c92\u4e82\u7528\u6b0a\u9650\u7684\u8b49\u64da)\n\n\n\n\n\n\n\n\nway to protect password file\n\n\n\n\n\n\none-way function: \u53ea\u5132\u5b58\u5bc6\u78bc\u7d93\u904e\u55ae\u5411\u51fd\u6578\u904b\u7b97\u5f8c\u7684\u8cc7\u6599(\u4f8b\u5982\u96dc\u6e4a\u6578\u503c\uff0c\u800c\u975e\u5bc6\u78bc\u672c\u8eab)(The system stores only the value of a function based on the user\u2019s password)\n\n\n\n\n\n\naccess control: \u9650\u5b9a\u53ea\u6709\u4e00\u500b\u6216\u5c11\u6578\u5e7e\u500b\u5e33\u6236\u53ef\u4ee5\u5b58\u53d6\u5bc6\u78bc\u6a94(Access to the password file is limited to one or a very few accounts)\n\n\n\n\n\n\nintrusion detection\n\n\n\n\n\u7cfb\u7d71\u7684\u7b2c\u4e8c\u9053\u9632\u7dda(system\u2019s second line of defense )\uff0c\u56e0\u70ba\u5df2\u7d93\u6709\u4eba\u7a81\u7834\u67f5\u6b04\u9032\u4f86\u4e86\uff0c\u73fe\u5728\u5c31\u662f\u8981\u76e3\u6e2c\u90a3\u500b\u9032\u4f86\u7684\u4eba\u3002\n\n\nProfiles of Behavior of Intruders and Authorized Users(\u90a3\u5f35\u5716)\u8aaa\u660e :    the nature of the task confronting the designer of an intrusion detection system. Although the typical behavior of an intruder differs from the typical behavior of an authorized user, there is an overlap in these behaviors. Thus, a loose interpretation of intruder behavior, which will catch more intruders, will also lead to a number of \"false positives,\" or authorized users identified as intruders. On the other hand, an attempt to limit false positives by a tight interpretation of intruder behavior will lead to an increase in false negatives, or intruders not identified as intruders. Thus, there is an element of compromise and art in the practice of intrusion detection.\n\n\naudit record\n\n\nFundamental tool for intrusion detection\n\n\n\u5229\u7528\u7279\u5b9a\u7684\u7d00\u9304\u7b46\u4f86\u5206\u6790\u70ba\u6b04\u4f4d\u4f7f\u7528\u7684\u60c5\u5f62\uff0c\u4f7f\u7528\u6307\u4ee4\u5075\u6e2c\u7cfb\u7d71\u5c07\u78b0\u649e\u627e\u51fa\n\n\n\n\n\n\nThreshold detection : \u8a08\u7b97\u67d0\u4e00\u4e8b\u4ef6\u767c\u751f\u7684\u6b21\u6578\uff0c\u5982\u679c\u6b21\u6578\u8d85\u904e\u4e00\u500b\u7279\u5b9a\u6578\u5b57\u5c31\u4ee3\u8868\u6709\u53ef\u80fd\u906d\u53d7\u5165\u4fb5(\u7c21\u964b\u4e14\u6c92\u6548\u7387\u7684\u65b9\u6cd5)\n\n\nProfile-based : \u4ee5\u904e\u53bb\u7684\u884c\u70ba\u548c\u73fe\u5728\u7684\u6bd4\u8f03\u5f8c\uff0c\u5982\u679c\u6709\u91cd\u5927\u504f\u5dee(detecting significant deviations)\u4ee3\u8868\u53ef\u80fd\u906d\u53d7\u653b\u64ca\n\n\n\n\nRule-Based Intrusion Dectection : \u5617\u8a66\u8a02\u5b9a\u4e00\u4e9b\u898f\u5247\u898f\u77e9\uff0c\u5c08\u9580\u7528\u4f86\u6aa2\u67e5\u51fa\u7cfb\u7d71\u662f\u5426\u6709\u4e0d\u7576\u7684\u5165\u4fb5\u7684\u65b9\u6cd5\n\n\n\n\nRule-based anomaly detection\n\n\nRule-based penetration identification\n\n\nUSTAT\n\n\n\n\n\n\n\n\n\u5206\u6563\u5f0f\u5165\u4fb5\u8005\u6aa2\u6e2c(distributed intrusion detection)\n\n\n\n\ndef: \u5c0d\u65bc\u4e00\u6574\u500b\u7d44\u7e54\u9700\u8981\u61c9\u4ed8\u5c0d\u65bc\u6574\u500b\u7db2\u8def\u62d3\u6a38\u652f\u6490\u8d77\u4f86\u7684\u4e3b\u6a5f\u67b6\u69cb\uff0c\u5e0c\u671b\u80fd\u5c07\u6578\u500b\u4e3b\u6a5f\u7684\u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71\u806f\u5408\u8d77\u4f86\u7528\n\n\n\u4f46\u53ef\u80fd\u6703\u6709\u4ee5\u4e0b\u56f0\u5883:\n\n\n\u4e0d\u540c\u4e3b\u6a5f\u7684audit record\u53ef\u80fd\u4e0d\u4e00\u6a23\uff0c\u9700\u8981\u8655\u7406\u683c\u5f0f\u554f\u984c\n\n\n\n\n\n\n\n\n\n\n\n\nhoneypot\n\n\n\n\n\u662f\u4e00\u500b\u96fb\u8166\u8853\u8a9e\uff0c\u5c08\u6307\u7528\u4f86\u5075\u6e2c\u6216\u62b5\u79a6\u672a\u7d93\u6388\u6b0a\u64cd\u4f5c\u6216\u8005\u662f\u99ed\u5ba2\u653b\u64ca\u7684\u9677\u9631\n\n\n\u8a73\u7d30def: \u871c\u7f50\u901a\u5e38\u507d\u88dd\u6210\u770b\u4f3c\u6709\u5229\u7528\u50f9\u503c\u7684\u7db2\u8def\u3001\u8cc7\u6599\u3001\u96fb\u8166\u7cfb\u7d71\uff0c\u4e26\u6545\u610f\u8a2d\u7f6e\u4e86bug\uff0c\u7528\u4f86\u5438\u5f15\u99ed\u5ba2\u653b\u64ca\u3002\u7531\u65bc\u871c\u7f50\u4e8b\u5be6\u4e0a\u4e26\u672a\u5c0d\u7db2\u8def\u63d0\u4f9b\u4efb\u4f55\u6709\u50f9\u503c\u7684\u670d\u52d9\uff0c\u6240\u4ee5\u4efb\u4f55\u5c0d\u871c\u7f50\u7684\u5617\u8a66\u90fd\u662f\u53ef\u7591\u7684\u3002\u871c\u7f50\u4e2d\u9084\u53ef\u80fd\u88dd\u6709\u76e3\u63a7\u8edf\u9ad4\uff0c\u7528\u4ee5\u76e3\u8996\u99ed\u5ba2\u5165\u4fb5\u5f8c\u7684\u8209\u52d5\u3002\n\n\n\u53ef\u4ee5\u5c07\u99ed\u5ba2\u5f9e\u771f\u6b63\u91cd\u8981\u7684\u7cfb\u7d71\u5f15\u958b\u5230\u871c\u7f50(\u871c\u7f50\u505a\u70ba\u8a98\u990c)\uff0c\u871c\u7f50\u548c\u771f\u5be6\u7cfb\u7d71\u662fisolated\u7684\n\n\n\u4e5f\u80fd\u5229\u7528\u871c\u7f50\u4f86\u85c9\u6a5f\u8490\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u8a0a(\u871c\u7f50\u662f\u88abmonitored\u7684)\n\n\n\n\npdf p29 30(\u8003\u524d\u4e00\u5929\u770b\uff0c\u5167\u5bb9\u504f\u6b7b\u8a18)\n\n\npassword management\n\n\n\n\nFront line of defense against intruders\n\n\nimplementation\n\n\nCrypt(3) : \u721b\n\n\n\u7528\u4f86\u5687\u963b\u5bc6\u78bc\u731c\u6e2c\u653b\u64ca\n\n\n\u4f46\u662f\u56e0\u70ba\u6700\u65e9\u4f7f\u7528\uff0c\u6240\u4ee5\u76f8\u5bb9\u6027\u8f03\u597d\u3002\u800c\u4eca\u4ecd\u7136\u88ab\u5ee3\u6cdb\u4f7f\u7528\n\n\n\n\n\n\nMD5 secure hash algorithm : \u4e2d\n\n\n\u529f\u80fd\u597d\uff0c\u4f46\u662f\u6bd4Crypt(3)\u6162(trade off)\n\n\n\n\n\n\nBcrypt : \u597d\n\n\nUNIX\u7cfb\u7d71\u4e2d\u6700\u5b89\u5168\u7684\u52a0\u9e7d+\u96dc\u6e4a\u65b9\u6cd5\n\n\n\u529f\u80fd\u66f4\u597d\uff0c\u4f46\u662f\u53c8\u66f4\u6162\u4e86(trade off)\n\n\n\n\n\n\n\n\n\n\n\n\nCh12. Firewalls\n\n\nFirewall characteristics\n\n\n\n\n\u57fa\u672c\u4e0a\uff0c\u9632\u706b\u7246\u7684\u7528\u9014\u5c31\u662f\u9694\u96e2\u7db2\u8def(\u9694\u96e2\u6210\u6578\u500bZONE)\u3002\n\n\n\n\ndesign goals for a firewall\n\n\n\n\nall traffic inside to outside, and vice versa, must pass through the firewall\n(\u6240\u6709\u5167\u5230\u5916\u6216\u662f\u5916\u5230\u5167\u7684\u6d41\u91cf\u90fd\u5fc5\u9808\u8981\u7d93\u904e\u9632\u706b\u7246)\n\n\nonly authorized traffic will be allowd to pass\n(\u53ea\u6709\u7d93\u904e\u6388\u6b0a\u7684\u6d41\u91cf\u624d\u53ef\u4ee5\u88ab\u5141\u8a31\u901a\u904e EX. \u5340\u57df\u5b89\u5168\u653f\u7b56\u7684\u8a2d\u5b9a)\n\n\nthe firewall is immune to penetration\n(\u9632\u706b\u7246\u672c\u8eab\u5c0d\u4fb5\u5165\u5177\u6709\u514d\u75ab\u529b)\n\n\n\n\ntechniques that firewalls use to control access and enforce the site's security policy\n\n\n\n\nservice control\n\n\n\u6c7a\u5b9a\u4f55\u7a2e\u5167\u90e8\u6216\u5916\u90e8\u7684\u670d\u52d9\u53ef\u4ee5\u88ab\u4f7f\u7528\n\n\n\n\n\n\ndirection control\n\n\n\u5c0d\u65bc\u7279\u5b9a\u670d\u52d9\u53ef\u4ee5\u6c7a\u5b9a\u54ea\u500b\u65b9\u5411\u7684\u6d41\u91cf\u53ef\u4ee5\u88ab\u901a\u904e\n\n\n\n\n\n\nuser control\n\n\n\u6839\u64da\u4f7f\u7528\u8005\u6c7a\u5b9a\u662f\u5426\u80fd\u8b93\u4ed6\u6709\u5b58\u53d6\u6b0a(\u4f7f\u7528\u6b0a)\n\n\n\n\n\n\nbehavior control\n\n\n\u76e3\u63a7\u7279\u5b9a\u670d\u52d9\u7684\u4f7f\u7528\u60c5\u6cc1\n\n\n\n\n\n\n\n\nfirewall expectations\n\n\n\n\n\u662f\u4e00\u500bcheck point\uff0c\u53ef\u4ee5\u628a\u672a\u6388\u6b0a\u7684user\u64cb\u5728\u53d7\u4fdd\u8b77\u7684\u7db2\u8def\u5916\u3001\u53ef\u4ee5\u7981\u6b62\u6709\u6f5b\u5728\u5371\u96aa\u7684\u670d\u52d9\u3001\u53ef\u4ee5\u9632\u6b62IP spoofing(IP\u5047\u9020)\u53carouting attack\n\n\n\u662f\u4e00\u500b\u76e3\u6e2c\u8ddf\u5b89\u5168\u6709\u95dc\u7684\u4e8b\u4ef6\u7684\u5e73\u53f0\n\n\n\u53ef\u4ee5\u662f\u63d0\u4f9b\u4e00\u4e9b\u8ddf\u5b89\u5168\u7121\u95dc\u7684Internet functions\u7684\u5e73\u53f0 (ex. NAT)\n\n\n\u53ef\u4ee5\u662f\u63d0\u4f9bIPsec\u7684\u5e73\u53f0\n\n\n\n\nfirewall limitations\n\n\n\n\n\u7121\u6cd5\u62b5\u64cb\u7e5e\u904e\u9632\u706b\u7246\u7684\u653b\u64ca(\u4f8b\u5982\u7b46\u96fb\u5728\u5916\u88ab\u611f\u67d3\uff0c\u7136\u5f8c\u5e36\u56de\u516c\u53f8\u5167\u7db2\u8b93\u5927\u5bb6\u90fd\u611f\u67d3)\n\n\n\u7121\u6cd5\u9632\u7bc4\u5728\u9632\u706b\u7246\u5167\u7684wireless communication between local systems (\u56e0\u70ba\u6839\u672c\u6c92\u6709reach\u5230\u9632\u706b\u7246)\n\n\n\u5c0d\u65bcinternal threat\u7121\u6cd5\u9632\u7bc4\n\n\n\n\nTypes of Firewalls\n\n\n\n\n\n\nPacket filtering firewall\n(\u8a2d\u5b9a\u898f\u5247\u6aa2\u67e5IP\u5c01\u5305)\n\n\n\u53ef\u4ee5\u8a2d\u5b9a\u4e00\u9023\u4e32\u7684rules\u4f86\u6c7a\u5b9a\u6b64packet\u53ef\u4e0d\u53ef\u4ee5\u901a\u904e\n\n\n\u7f3a\u9ede\n\n\n\u56e0\u70ba\u4e0d\u6703\u6aa2\u67e5upper layer data\uff0c\u6240\u4ee5\u7121\u6cd5\u9632\u6b62\u7279\u5b9a\u61c9\u7528\u7a0b\u5f0f\u7684\u6f0f\u6d1e\u653b\u64ca(\u4ed6\u8dd1\u5728\u50b3\u8f38\u5c64)\n\n\n\u56e0\u70ba\u6b64\u985e\u9632\u706b\u7246\u53ef\u4ee5\u5b58\u53d6\u7684\u8cc7\u6e90\u6709\u9650\uff0c\u6240\u4ee5\u529f\u80fd\u4e5f\u883b\u6709\u9650\u7684\n\n\n\u4e0d\u652f\u63f4\u9032\u968e\u7684\u4f7f\u7528\u8005\u8a8d\u8b49(advanced user auth)\n\n\n\u5229\u7528TCP/IP protocol\u7684\u554f\u984c\u80fd\u653b\u64ca\u6b64\u985e\u578b\u7684\u9632\u706b\u7246(\u56e0\u70ba\u9019\u500b\u9632\u706b\u7246\u67b6\u8a2d\u5728\u50b3\u8f38\u5c64)\n\n\n\u56e0\u70ba\u6c7a\u5b9aaccess control\u7684\u8b8a\u6578\u4e0d\u591a\uff0c\u82e5\u4e00\u4e0d\u5c0f\u5fc3\u932f\u8aa4\u8a2d\u5b9a\u67d0\u4e9b\u8b8a\u6578\uff0c\u5247\u5f88\u6709\u53ef\u80fd\u8b93\u4e0d\u5b89\u5168\u7684\u5c01\u5305\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u901a\u904e\u4e86\n\n\n\n\n\n\n\u512a\u9ede\n\n\n\u5f88\u7c21\u55ae\n\n\n\u5c0duser\u4f86\u8aaa\u5f88\u5bb9\u6613\u61c2\u3001\u800c\u4e14\u5f88\u5feb\u901f\n\n\n\n\n\n\n\u7f3a\u9ede\n    \u2013 \u96e3\u4ee5\u8a2d\u8a08\u51fa\u4e00\u7d44\u9577\u671f\u6709\u6548\u53c8\u6b63\u78ba\u7684\u7121\u8aa4\u904e\u6ffe\u898f\u5247\u3002\n    \u2013 \u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\uff0c\u6240\u4ee5\u5c0d\u65bc\u5c01\u5305\u8cc7\u6599\u6bb5\u6216\u7279\u5b9a\u61c9\u7528\u670d\u52d9\u5f31\u9ede\u7684\u653b\u64ca\u65b9\u5f0f\u7121\u80fd\u70ba\u529b\u3002\n    \u2013 \u7f3a\u4e4f\u9a57\u8b49\u80fd\u529b\u3002\n    \u2013 \u5b89\u5168\u6027\u8f03\u5dee\u3002\n\n\nAttacks And Countermeasures\n\n\nIP address spoofing(\u507d\u9020IP\u4f4d\u5740)\n\n\nhacker\u628a\u5916\u90e8pkt\u7684source IP address\u8a2d\u6210\u5167\u90e8\u67d0\u4e00IP address\uff0c\u7136\u5f8c\u8a66\u5716\u5f9e\u5916\u9762\u50b3\u5230\u5167\u90e8(\u8b93\u4eba\u8aa4\u4ee5\u70ba\u662f\u5167\u90e8\u7684\u800c\u6389\u4ee5\u8f15\u5fc3)\n\n\nsolution\n: \u4e1f\u68c4\u6389\u5f9e\u5916\u90e8\u9032\u4f86\u4f46\u662fsource IP address\u662f\u5167\u90e8\u4f4d\u5740\u7684pkt\n\n\n\n\n\n\nSource routing attacks(\u4f86\u6e90\u8def\u7531\u653b\u64ca)\n\n\nthe source station specifies route that a pkt should take, and it hopes that it will \nbypass\n the security measures that do not analyze the source routing information(\u4f86\u6e90\u7aef\u53ef\u4ee5\u6307\u5b9a\u5c01\u5305\u884c\u7d93\u7db2\u969b\u7db2\u8def\u7684\u8def\u7531\uff0c\u5e0c\u671b\u7528\u9019\u500b\u8cc7\u8a0a\u4f86\u8eb2\u907f\u53ef\u80fd\u6709\u5e7e\u500b\u6c92\u6709\u505a\u5b89\u5168\u6aa2\u67e5\u7684\u8def\u7531\u5668)\n\n\nsolution\n: \u4e1f\u68c4\u6389\u6240\u6709\u542b\u6709routing information\u7684pkt\n\n\n\n\n\n\nTiny fragment attacks(\u6975\u5c0f\u5c01\u5305\u653b\u64ca)\n\n\n\u5165\u4fb5\u8005\u5c07pkt\u5206\u5272\u6210\u591a\u500bfragment\uff0c\u4f7f\u5f97TCP header\u8cc7\u8a0a\u88ab\u5206\u6563\u5230\u5f88\u591a\u500bfragment(\u800c\u4e14\u8981\u7528pattern\u4f86\u770b\u7684\u8a71\u4e5f\u4e0d\u5bb9\u6613\u770b\uff0c\u56e0\u70bapattern\u4e5f\u6703\u88ab\u5207\u5272\uff0c\n\u8da8\u52e2\u79d1\u6280\u8aaa: \u5c0f\u578b\u7247\u6bb5\u5c01\u5305\u53ef\u80fd\u88ab\u7528\u65bc\u963b\u7d55\u670d\u52d9\u7a0b\u5f0f\u653b\u64ca\uff0c\u6216\u7528\u65bc\u898f\u907f\u5b89\u5168\u6a5f\u5236\u6216\u5075\u6e2c\u3002\n)\n\n\nsolution\n: enforce a rule that the first fragment of a pkt must contain a predefined minimum amount of the transport header(\u524d\u9762\u4e00\u5b9a\u8981\u6709\u5b8c\u6574\u7684\u5c01\u5305\u6a19\u982dheader\uff0c\u4ee5\u78ba\u4fdd\u8cc7\u6599\u7684\u5b8c\u6574\u6027\u78ba\u8a8d\u8cc7\u6599\u662f\u4e0d\u88ab\u5207\u5272\u7684)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStateful inspection firewall\n\n\nstateful:\n\n\n\u512a\u9ede: \u53ef\u4ee5\u5206\u8fa8\u4e0d\u540c\u7684\u9023\u7dda\u72c0\u614b(\u56e0\u70ba\u9023\u7dda\u72c0\u614b\u53ef\u4ee5\u7531srcIP dstIP UDP\u3001TCP port\u5224\u65b7)\uff0c\u53ef\u4ee5\u5224\u65b7\u5c01\u5305\u662f\u5426\u5c6c\u65bc\u73fe\u5b58\u7684\u9023\u7dda\uff0c\u662f\u4e14\u5141\u8a31\u7684\u8a71\u5c31\u8b93\u5979\u5feb\u901f\u901a\u904e\uff0c\u4e0d\u662f\u5c31\u984d\u5916\u8655\u7406\n\n\n\u7f3a\u9ede: \u9700\u8981\u984d\u5916\u786c\u9ad4(trade off)\uff0c\u6548\u80fd\u8f03\u5c01\u5305\u904e\u6ffe\u5dee\u3001\u4e5f\u6c92\u8fa6\u6cd5\u8655\u7406\u4e0a\u5c64\u7684\u5354\u5b9a\uff0c\u56e0\u70ba\uff0c\u5982\u5716\uff0c\u4ed6\u5efa\u7acb\u5728\u50b3\u8f38\u5c64\u800c\u8ddf\u4e0a\u5c64\u7684\u61c9\u7528\u5c64\u7121\u95dc\u3002\n\n\n\n\n\n\nstateless:\n\n\n\u512a\u9ede: \u7c21\u55ae\u4f9d\u64da\u73fe\u6709\u7684\u5c01\u5305\u8cc7\u8a0a\u904e\u6ffe\u3001\u4e0d\u9808\u984d\u5916\u786c\u9ad4\n\n\n\u7f3a\u9ede: \u53ef\u80fd\u8f03\u5bb9\u6613\u53d7\u653b\u64ca\uff0c\u4f8b\u5982IP Spoofing\u53ef\u4ee5\u507d\u9020IP\u8b93\u9632\u706b\u7246\u4ee5\u70ba\u53ef\u4ee5\uff0c(\u7528stateful\u56e0\u70ba\u8b58\u5225\u7684\u6a19\u7c64\u5f88\u591a\uff0c\u53ef\u4ee5\u5340\u5206\u507d\u9020IP\u7684\u5c01\u5305\u548c\u5be6\u969bIP\u7684\u5c01\u5305(\u56e0\u70ba\u4e5f\u8a31\u53ef\u4ee5\u7528\u5176\u4ed6header\u78ba\u8a8d\uff0c\u4f86\u8aaa\u662f\u4e0d\u662f\u8ddf\u73fe\u6709\u5141\u8a31\u7684\u4e00\u6a23)\uff0c\u4f46\u662fstateless\u5c31\u6c92\u6709\u9019\u500b\u529f\u80fd)\n\n\n\n\n\n\n\n\n\n\n\n\nPROXY \u6982\u5ff5\n\n\n\n\ndef: \u5f37\u8abf\u7528\u6236\u7aef\u7a0b\u5f0f\u5fc5\u9700\u8207\u4ee3\u7406\u4f3a\u670d\u5668\u63a5\u6d3d\uff0c\u518d\u900f\u904e\u5b83\u4f86\u8207\u76ee\u7684\u6a5f\u5668\u9023\u901a\uff0c\u800c\u975e\u76f4\u63a5\u8b93\u7528\u6236\u7aef\u9023\u63a5\u771f\u6b63\u7684\u76ee\u7684\u5730\u3002\n\n\n\n\n\n\n\n\nApplication proxy firewall\n\n\n\n\n\u82e5gateway\u6c92\u6709\u70ba\u7279\u5b9a\u61c9\u7528(\u56e0\u70ba\u73fe\u5728\u5728\u61c9\u7528\u5c64)\u505aproxy\u5247\u8a72\u985e\u7684\u670d\u52d9\u5c31\u4e0d\u88ab\u652f\u63f4\uff0c\u56e0\u6b64\u4e5f\u4e0d\u80fd\u901a\u904e\u9632\u706b\u7246\n\n\ngateway\u4e5f\u53ef\u4ee5\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u3001\u63a5\u53d7\u67d0\u4e9b\u7279\u5b9a\u7684feature\uff0c\u4f7f\u5f97\u8a72\u670d\u52d9\u53ef\u4ee5\u88ab\u63a5\u53d7\uff0c\u800c\u62d2\u7d55\u5176\u4ed6\u670d\u52d9\u7684\u8981\u6c42\n\n\n\u512a\u9ede: \u6bd4packet filtering firewall\u66f4\u5b89\u5168(\u56e0\u70ba\u76f4\u63a5\u904e\u6ffe\u4e86\u5c01\u5305\u5167\u5bb9(pkt contents)\u8207\u547d\u4ee4\uff0c\u4ee5\u78ba\u4fdd\u67d0\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u5167\u5bb9\u5b89\u5168(\u4f8b HTTP, FTP, EMAIL)\n\n\n\u7f3a\u9ede: additional processing overhead on each connection(\u8981\u984d\u5916\u8655\u7406\u6bcf\u500b\u9023\u7dda -\n \u9020\u6210\u8ca0\u64d4)\uff0c\u9084\u8981\u91dd\u5c0d\u4e0d\u540c\u61c9\u7528\u7a0b\u5f0f\u985e\u71df\u5beb\u4e0d\u540c\u7684\u4ee3\u7406\u65b9\u6cd5\uff0c\u6210\u672c\u9ad8\u3002\n\n\n\n\n\n\nCircuit-level proxy firewall\n\n\nnot permit end-to-end TCP connections =\n \u800c\u662f\u5efa\u7acb\u5169\u689dTCP connections\n\n\n\u6703\u5efa\u7acb\u4e8c\u500bTCP\u9023\u7dda\u8655\u7406\uff0c\n\u4e00\u689d\u662f\u5167\u90e8\u8207circuit-level proxy\u3001\u53e6\u5916\u4e00\u689d\u662fcircuit-level proxy\u8207\u5916\u90e8\n(\u900f\u904eproxy firewall\u505a\u70ba\u4e2d\u7e7c\u7ad9\uff0c\u4e5f\u5c31\u662f \u5167\u90e8--proxy--\u5916\u90e8\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u96b1\u85cf\u5167\u90e8IP\u4f4d\u5740\u3002)\n\n\n\n\n\n\n\n\nsecurity function consists of \ndetermining which connections will be allowed\n\u3001\u76f4\u63a5\u7528\u9023\u7dda\u7b49\u7d1a\u7684\u65b9\u5f0f\u5b9a\u7fa9\u8aaa\u54ea\u5e7e\u689d\u9023\u7dda\u662f\u5141\u8a31\u7684\u3002\n\n\n\u512a\u9ede: \u8f03\u61c9\u7528\u5c64\u4ee3\u7406\u5feb\u901f\u3001\u4e00\u822c\u76ee\u7684\u5171\u7528\u4ee3\u7406\u670d\u52d9\uff0c\u53ef\u652f\u63f4\u8a31\u591a\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u4ee3\u7406\u5b58\u53d6\u529f\u80fd\u3002\n\n\n\u7f3a\u9ede: \u9700\u8981\u4fee\u6539\u7528\u6236\u7aef\u61c9\u7528\u7a0b\u5f0f\u6216TCP/IP\u5354\u5b9a\u5806\u758a\uff0c\u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\u3001ICMP\u4e5f\u4e0d\u884c(\u56e0\u70ba\u4ed6\u662fnetwork\u5c64)\u3002\n\n\n\n\n\n\n\n\nFirewall comparison\n\n\n\n\nBastion host\n\n\n\n\ndef: \u4e00\u500b\u88ab\u9632\u706b\u7246\u7ba1\u7406\u54e1\u8a8d\u53ef\u7684\u95dc\u9375\u7cfb\u7d71(x \u7ffb\u5f97\u597d\u721b)\n\n\n\u901a\u5e38\u662fapplication proxy\u6216circuit-level proxy\u7684\u5e73\u53f0\n\n\ncharacteristics(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18)\n\n\n\u57f7\u884c\u5b89\u5168\u7684\u4f5c\u696d\u7cfb\u7d71\n\n\n\u53ea\u6709\u7db2\u8def\u7ba1\u7406\u4eba\u8a8d\u70ba\u662f\u5fc5\u8981\u7684\u670d\u52d9\u624d\u6703\u88ab\u5b89\u88dd\n\n\n\u6703\u6709\u984d\u5916\u8a8d\u8b49\u7684\u529f\u80fd\n\n\n\u6bcf\u500bproxy\u90fd\u88ab\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u6a19\u6e96\u670d\u52d9\u7684\u4e00\u90e8\u4efd\n\n\n\u6bcf\u500bproxy\u90fd\u53ea\u80fd\u8b93\u7279\u5b9a\u7684\u4e3b\u6a5f\u5b58\u53d6\n\n\n\u6bcf\u500bproxy\u90fd\u6703\u900f\u904e\u8a18\u9304\u6d41\u91cf \u9023\u7dda\u548c\u9023\u7dda\u7684\u6642\u9593\u9577\u77ed\u4f86\u7dad\u8b77\u6aa2\u67e5\u6240\u9700\u7684\u8cc7\u8a0a\n\n\n\u6bcf\u500bproxy\u90fd\u662f\u5c08\u9580\u70ba\u7db2\u8def\u5b89\u5168\u8a2d\u8a08\u7684\u5c0f\u5c0f\u8edf\u9ad4\u5957\u4ef6\n\n\n\u6bcf\u500b\u5728bastion host\u4e0a\u7684proxy\u90fd\u662f\u7368\u7acb\u7684 -\n \u5c31\u7b97\u67d0\u500bproxy\u51fa\u554f\u984c\u4e5f\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6proxy(\u91cd\u8981\uff0c\u6211\u89ba\u5f97\u6703\u8003!)\n\n\n\u9664\u4e86\u4e00\u958b\u59cb\u555f\u52d5\u7684\u8a2d\u5b9a\u6a94\u5916\uff0c\u4e0d\u9700\u8981\u5b58\u53d6\u786c\u789f -\n \u5165\u4fb5\u8005\u7121\u6cd5\u5c07\u6709\u5371\u96aa\u7684\u6a94\u6848\u503c\u5165bastion host\n\n\n\u6bcf\u500bproxy\u90fd\u53ea\u6709\u4e00\u822c\u4f7f\u7528\u8005\u7684\u6b0a\u9650\uff0c\u4e14\u5728bastion host\u4e2d\u96b1\u5bc6\u4e14\u5b89\u5168\u7684\u76ee\u9304\u4e2d\u57f7\u884c\n\n\n\n\n\n\n\n\nHost-based firewall\n\n\n\n\na software module used to secure an individual host\n(\u7528\u4f86\u6aa2\u9a57indivitual host\u7684\u8edf\u9ad4\u6a21\u7d44\uff0chost\u5728server\u6216\u662f\u500b\u4eba\u96fb\u8166\u90fd\u53ef)\n\n\nFilters and restricts the flow of packets\n\n\nCommon location is a server\n\n\n\u512a\u9ede\n\n\nFiltering rules can be tailored to the host environment (\u904e\u6ffe\u7684\u898f\u5247\u53ef\u4ee5\u61c9\u7528\u65bchost environment)\n\n\n\u53ef\u7528\u65bc\u8207\u7368\u7acb\u7684\u9632\u706b\u7246\u7d50\u5408 -\n \u63d0\u4f9b\u5176\u4ed6layer\u7684\u4fdd\u8b77\n\n\n\u5c64\u5c64\u7368\u7acb\uff0c\u4e92\u4e0d\u5f71\u97ff(independent topology)\n\n\n\n\n\n\n\n\nPersonal firewall\n\n\n\n\ncontrols the traffic between a PC or workstation on one side and the Internet or enterprise network on the other side\n(\u63a7\u5236 \u500b\u4eba\u96fb\u8166\u6216\u5de5\u4f5c\u7ad9 \u5230 \u7db2\u8def\u6216\u4f01\u696d\u7db2\u8def \u7684\u6d41\u91cf)\n\n\ndeny unauthorized remote access to the computer(\u963b\u6b62\u672a\u7d93\u6388\u6b0a\u7684\u9060\u7aef\u5b58\u53d6)\n\n\ncan monitor outgoing activity in an attempt to detect and block worms and other malware(\u53ef\u4ee5\u76e3\u63a7\u5916\u754c\u7684\u6d3b\u52d5 -\n \u767c\u73fe\u4e26\u963b\u6b62\u8815\u87f2\u548c\u5176\u4ed6\u60e1\u610f\u8edf\u4ef6\uff0c\u6216\u8aaa\u53ef\u4ee5\u76e3\u63a7outgoing\uff0c\u5411\u5916\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u963b\u64cb\u8815\u87f2\u653b\u64ca(\u56e0\u70ba\u8815\u87f2\u7e41\u6b96\u5f8c\u6703\u5411\u5916\u8dd1\uff0c\u5c0b\u627e\u65b0\u7684\u76ee\u6a19))\n\n\nis less complex\n\n\n\n\nDMZ\n\n\n\n\ndef: \u4ecb\u65bc\u5167\u90e8\u7db2\u8def\u8207Internet\u9593\u7684\u5340\u57df(\u5b50\u7db2\u8def) \uff0c\u4f5c\u70ba\u5167\u5916\u7db2\u8def\u9593\u7684\u5b89\u5168\u6027\u7de9\u885d\u5730\u5e36\u3002\n\n\n\u5728\u9632\u706b\u7246\u67b6\u69cb\u4e2d\uff0cDMZ\u5340\u57df\u662f\u63d0\u4f9bInternet\u4f7f\u7528\u8005\u5b58\u53d6\u7db2\u969b\u7db2\u8def\u4f3a\u670d\u5668\u7684\u7db2\u8def\u5340\u57df\uff0c\u5982Webserver\u6216DNS server \u3002\n\n\nDMZ\u548c\u5167\u90e8\u7db2\u8def\u662f\u5206\u9694\u958b\u4f86\u7684\uff0c\u56e0\u6b64\u5373\u4f7f\u906d\u5230\u653b\u64ca\u4e5f\u4e0d\u6703\u5371\u53ca\u5167\u90e8\u7db2\u8def\u3002\n\n\n\n\n\n\n\n\nFirewall locations and Topologies(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18)\n\n\n\n\nHost-resident firewall\n\n\nincludes personal firewall software and firewall software on servers\n\n\n\n\n\n\nScreening router\n\n\na single router between internal and external networks with stateless or full packet filtering(\u6709\u904e\u6ffe\u6a5f\u5236\u7684router\uff0c\u53ef\u4ee5\u5f9escreening\u9019\u500b\u540d\u8a5e\u770b\u51fa\uff0c\u5c31\u662f\u6709\u76e3\u63a7\u529f\u80fd4.)\n\n\n\n\n\n\nSingle bastion nline\n\n\na single firewall between an internal and external router(\u5167\u7db2\u8207\u5916\u7db2\u7684router\u4e2d\u9593\u7684\u9632\u706b\u7246)\n\n\n\n\n\n\nSingle bastion T\n\n\nsingle bastion inline but has a third network interface on bastion to a DMZ(\u5728bastion\u548c\u9632\u706b\u7246\u4e4b\u9593\u9084\u6709\u4e00\u500b\u4ecb\u9762)\n\n\n\n\n\n\nDouble bastion inline\n\n\nDMZ is sandwiched between bastion firewalls(DMZ\u593e\u5728\u5169\u500bbastion firewall\u4e4b\u9593)\n\n\n\n\n\n\nDouble bastion T\n\n\nDMZ is on a \nseparate network interface\n on the bastion firewall\n\n\n\n\n\n\nDistributed firewall configuration\n\n\nused by some large businesses and government organizations\n\n\n\n\n\n\n\n\n\n\nFinal exam note\n\n\n2012Final(Jan. 11 2013)\n\n\n\n\n\n\n(3) IPSec \u53ef\u4ee5\u7528\u6ed1\u52d5\u8996\u7a97\u4f86\u963b\u64cb\u91cd\u653e\u653b\u64ca\uff0c\u5177\u9ad4\u6d41\u7a0b\u5982\u4e0b\uff0c\u9996\u5148\u5728\u6ed1\u52d5\u8996\u7a97\u4e2d\uff0c\u5982\u679c\u6709\u4e00\u500b\u5c01\u5305\u7684\u5e8f\u5217\u865f\u5c0f\u65bc\u8996\u7a97\u6700\u5c0f\u7684(\u4e5f\u5c31\u662f\u4f4d\u65bc\u8996\u7a97\u7684\u5de6\u5074\uff0c\u5247\u662f\u70ba\u91cd\u653e\u653b\u64ca\uff0c\u56e0\u70ba\u90a3\u662f\u4e4b\u524d\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305)\uff0c\u5982\u679c\u5c01\u5305\u5e8f\u5217\u865f\u53ef\u4ee5\u843d\u5728\u8996\u7a97\u4e2d\uff0c\u800c\u4e14\u4e4b\u524d\u9084\u6c92\u6709\u88ab\u63a5\u6536\u904e\uff0c\u5247\u662f\u70ba\u65b0\u7684\u5c01\u5305\u63a5\u6536\u4ed6\uff0c\u5982\u679c\u5df2\u7d93\u6709mark\u70ba\u63a5\u6536\u904e\u5247\u4e5f\u662f\u87f2\u653e\u653b\u64ca\uff0c\u62cb\u68c4\u4ed6\uff0c\u5982\u679c\u5c01\u5305\u518d\u8996\u7a97\u7684\u53f3\u908a\uff0c\u53f3\u908a\u90fd\u662f\u9084\u6c92\u63a5\u6536\u904e\u7684\uff0c\u662f\u4e00\u500b\u5168\u65b0\u7684\u5c01\u5305\uff0c\u5247\u5c07\u5176\u63a5\u53d7\u5f8c\uff0c\u628a\u8996\u7a97\u5f80\u53f3\u6ed1\u52d5\u3002\n\n\n\n\n\n\n(4) keyspace\u5927\u7684password\u6703\u6bd4\u8f03\u5b89\u5168\uff0c\u800c\u5df2\u7d93\u5efa\u7acb\u65bcdictionary\u7684\u662f\u6700\u4e0d\u5b89\u5168\u7684\u5bc6\u78bc\n\n\n\n\n\n\n(5) \u6aa2\u6e2c\u653b\u64ca\u8005\u7684\u5169\u7a2e\u65b9\u6cd5\n\n\n\n\nstatistical\u6aa2\u6e2c\uff0c\u63a1\u7528\u7684\u662f\u7528\u4e00\u4e9b\u7d71\u8a08\u8cc7\u8a0a(\u4f8b\u5982\u6d41\u91cf\u3001\u7aef\u53e3\u4f7f\u7528\u3001\u6642\u9593)\u7b49\u7b49\u627e\u51fa\u653b\u64ca\u884c\u70ba\u3002\n\n\nrule\u6aa2\u6e2c\uff0c\u5229\u7528\u4e00\u4e9b\u5c08\u5bb6\u8a2d\u5b9a\u53ef\u80fd\u662f\u653b\u64ca\u3001\u5165\u4fb5\u8005\u7684\u898f\u5247\u4f86\u627e\u51fa\u3002\n\n\n\u5dee\u5225\u5728\u65bc\u5f8c\u8005\u7684\u898f\u5247\u662f\u7d81\u6b7b\u7684\uff0c\u8f03\u4e0d\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u80fd\u8f03\u5feb(\u5957\u7528\u65e2\u6709\u898f\u5247)\uff1b\u524d\u8005\u662f\u52d5\u614b\u611f\u77e5\u7684\uff0c\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u6703\u6bd4\u8f03\u6162(\u4e00\u7a2etrade off)\n\n\n\n\n\n\n(6) \u76e3\u63a7\u8cc7\u6599\u4e2d\uff0c\u8cc7\u6599\u53ef\u80fd\u6703\u76f8\u7576\u9f90\u5927\uff0c\u6bcf\u4e00\u500b\u90fd\u770b\u7684\u8a71\u592a\u8017\u6642\u4e86\uff0c\u6240\u4ee5\u8981\u6709\n\u9078\u64c7\u6027\n(selectivity)\n\n\n(7) \u898b\u4e0a\u65b9\u7b46\u8a18\uff0c\u7c21\u55ae\u4f86\u8aaa\u871c\u7f50\u5c31\u662f\u4e00\u500b\u548c\u4e3b\u8981nerwork\u9694\u958b\u7684\u7cfb\u7d71\uff0c\u507d\u88dd\u8c50\u5bcc\u3001\u6709\u5229\u7528\u50f9\u503c\u7684\u8cc7\u8a0a\n\u5438\u5f15\u5370\u99ed\u5ba2\u5f80\u90a3\u88cf\u8d70\n\uff0c\u5f9e\u800c\n\u4fdd\u8b77\u4e3b\u8981\u7db2\u8def\u88dd\u7f6e\n\uff0c\u4e26\u4e14\u871c\u7f50\u662f\n\u88ab\u76e3\u6e2c\n\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u65bc\n\u6536\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u6599\u4ee5\u4fbf\u8cc7\u5b89\u5206\u6790\n\u3002\n\n\n(8) \n\n\n(9) \u653b\u64ca\u7684\u65b9\u6cd5\u8acb\u5efa\u4e0a\u65b9\u7b46\u8a18\uff0c\u5f71\u97ffpacket filter\u7684\u65b9\u6cd5\u5982\u4e0b\n\n\nIP spoofing: \u6709\u4e9b\u4f7f\u7528IP\u4f86\u6e90\u7684\u5c01\u5305\u904e\u6ffe\u5668\u53ef\u80fd\u6703\u88ab\u9a19(\u56e0\u70ba\u653b\u64ca\u8005\u53ef\u4ee5\u5c07\u5c01\u5305\u507d\u9020\u6210\u4e00\u500b\u53ef\u4fe1\u4efb\u7684IP\u5728\u4e0a\u982d\uff0c\u9032\u800c\u9054\u6210\u6b3a\u9a19\u7684\u76ee\u7684)\n\n\nsrc routing: \u81ea\u8a02routing\u65b9\u6cd5\u7684\u8a71\uff0c\u5047\u8a2d\u6211\u77e5\u9053\u90a3\u4e9brouter\u662f\u6c92\u6709\u597d\u7684\u5c01\u5305\u5b89\u5168\u6a5f\u5236\uff0c\u6211\u5c31\u53ef\u4ee5\u6545\u610f\u7d93\u904e\u4ed6\u4f86\u9054\u6210\u8eb2\u907f\u6aa2\u6e2c\u7684\u7b11\u904e\n\n\ntiny fragment: \u4f7f\u7528\u8a31\u591a\u5c0f\u5c01\u5305\u4f86DoS\n\n\n\n\n\n\n(10)\n\n\nstateful: \u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u6709\u7d00\u9304\u5c01\u5305\u72c0\u614b\u7684\u5c01\u5305\u904e\u6ffe\u5668\uff0c\u53ea\u6709\u7b26\u5408\u73fe\u6709\u5141\u8a31\u72c0\u614b\u7684\u5c01\u5305\u6750\u53ef\u4ee5\u8b93\u5b83\u904e\u53bb\uff0c\u5426\u5247\u5c31\u7981\u6b62\uff1b\u984c\u76ee\u7684TCP\u5c01\u5305\u70ba\u4f8b\uff0c\u5982\u679cfilter\u8b93\u73fe\u5728\u9019\u500bSYN\u7684\u5c01\u5305\u901a\u904e\uff0c\u5247\u53ef\u8a18\u9304\u6709\u95dc\u6b64\u5c01\u7684\u72c0\u614b\uff0c\u5c07\u4f86\u6709\u985e\u4f3c\u7684\u5c01\u5305\u4f86\uff0c\u7b26\u5408\u72c0\u614b\u4fbf\u53ef\u4f7f\u5176\u901a\u904e\u3002\n\n\nstateless: \u53ea\u7528\u73fe\u6709\u5c01\u5305\u7684\u8cc7\u8a0a(\u5982 header\u7b49\u7b49)\u4f86\u6c7a\u5b9a\u662f\u5426\u901a\u904e\uff0c\u5982\u679c\u6709\u4eba\u507d\u9020\u4e86\u4e00\u500b\u4e00\u6a21\u4e00\u6a23header\u7684\u5c01\u5305\uff0c\u4fbf\u53ef\u4ee5\u6b3a\u9a19\u904e\u4ed6(\u56e0\u70ba\u6c92\u6709\u4e4b\u524d\u7684\u72c0\u614b\u53ef\u4f9b\u6bd4\u5c0d)\uff0c\u4fb5\u5165\u7cfb\u7d71\u3002\n\n\n\n\n\n\n\n\n2015final(Dec. 29 2015)\n\n\n\n\n(1)firewall\u901a\u5e38\u7121\u6cd5\u5230\u9054application \u5c64\u904e\u6ffe\u61c9\u7528\u7a0b\u5f0f\u50b3\u9001\u7684\u8cc7\u6599\n\n\n(2)\n\n\n(a) security association \u70ba\u55ae\u5411\n\n\n\n\n\n\n(6)\n\n\negress\u53ef\u4ee5\u7528\u4f86\u627e\u5230attack src\n\n\n\n\n\n\n(7) \u5b9a\u8b70\u984c\uff0c\u8acb\u898b\u4e0a\u9762\u7b46\u8a18\u3002\n\n\n(9) \u898b\u4e0a\u9762\u8868\u683c\uff0c\u4e2d\u6587\u7684\u90a3\u500b\n\n\n(10) \u80cc\u8aa6\u984c\uff0c\u898b\u4e0a\u9762\u7b46\u8a18\n\n\n(11) \u56e0\u70ba\u5bc6\u78bc\u6709\u52a0\u9e7d(\u96a8\u6a5fstr append)\u904e\u5f8c\u624dhash\uff0c\u6240\u4ee5\u6703\u4e0d\u4e00\u6a23\n\n\n(12) statistical\u5075\u6e2c\u6cd5\u6bd4\u8f03\u80fd\u56e0\u61c9\u65b0\u7684\u653b\u64ca\uff0c\u539f\u56e0\u4e43\u662f\u4ed6\u6bd4\u8f03\u52d5\u614b\uff0c\u6703\u6aa2\u67e5\u4f7f\u7528\u8457\u7684\u8cc7\u6599\u7528\u91cf\u3001\u884c\u70ba\u3001\u7aef\u53e3\u3001\u7db2\u8def\u4f4d\u7f6e\u7b49\u7b49\uff1b\u7136\u800crule based\u7528\u5df2\u7d93\u5beb\u6b7b\u7684\u65e2\u6709\u898f\u5247\u4f86\u5075\u6e2c\uff0c\u56e0\u70ba\u5beb\u6b7b\u4e86\u6240\u4ee5\u5f88\u7cdf\uff0c\u7121\u6cd5\u5c0d\u65b0\u7684\u6709\u6240\u8b8a\u901a\uff0c\u6545stat\u65b9\u6cd5\u624d\u80fd\u5c0d\u6297\u3001\u65b0\u7a4e\u3001\u672a\u77e5\u7684\u5a01\u8105\u3002\n\n\n\n\n\u4ee5\u4e0b\u6709\u7591\u554f\uff0c\u9084\u7169\u8acb\u52a9\u6559\u89e3\u7b54:\n\n\n\n\n(5) meta\u75c5\u6bd2\u548cpoly\u75c5\u6bd2\u7684\u5340\u5225? poly\u61c9\u8a72\u662f\u53ea\u6709\u6539\u8b8a\u81ea\u5df1\u7684signature\uff0c\u6216\u662f\u90e8\u5206\u7684code\uff1b\u4f46\u662fmeta\u662f\u6574\u500b\u7a81\u8b8a\u6210\u65b0\u7684\uff0c\u4e0d\u50c5signature\u8b8a\u4e86\uff0ccode\u4e5f\u5b8c\u5168\u4e0d\u540c\uff0c\u561b?\n\n\n(7) reflexive \u548c non-reflexive DDoS \u7684\u5340\u5225?\uff0creflexive\u597d\u50cf\u9084\u6703\u7d93\u7531\u7b2c\u4e09\u65b9\u4f86\u9593\u63a5\u767c\u9001DDoS\u5c01\u5305\uff0c\u4f7f\u4e3b\u8b00\u66f4\u96e3\u88ab\u67e5\u5230\uff0c\u9032\u800c\u96b1\u8eab\uff0c\u55ce?\n\n\n(13)\uff0chttp\u5c6c\u65bcweb\uff0c\u6240\u4ee5\u756b\u5728external\u5916?\n\n\n\n\n\n2016final(Jan. 3 2017)\n\n\n\n\nexam paper(for TA)\n\n\n\n\n\n\n\u56e0\u70ba\u6c92\u6709\u6b63\u89e3\uff0c\u6240\u4ee5\u4ee5\u4e0b\u6709\u7591\u554f\u7684\u4e5f\u7169\u8acb\u52a9\u6559\u89e3\u7b54:\n\n\n\n\n\n\n(1) \u9023\u7dda\u516c\u53f8\u7684\u5206\u90e8\uff0c\u61c9\u8a72\u63a1\u7528tunnel mode\u5c31\u597d\uff0c\u5982\u9019\u5f35\u5716(cooperate network\u901a\u5e38\u6703\u7528tunnel mode)\uff0c\u56e0\u70ba\u9019\u6a23\u4e0d\u7528\u6bcf\u4e00\u500b\u5206\u90e8\u7684\u96fb\u8166\u90fd\u8981\u5177\u5099IPSEC\u529f\u80fd\uff0c\u6bd4\u8f03\u7c21\u55ae\uff0c\u800c\u5728\u52a0\u4e0a\u8981\u52a0\u5bc6\uff0c\u5247\u4f7f\u7528ESP in transport mode\n\n\n\u5c01\u5305\u5982\u9019\u500btunnel\u6700\u5f8c\u7684\u7d50\u679c\n\n\n\n\n\n\n\n(2)\n\n\n\n\n(a)yes, by using the sliding window with seq number,\n\n\n(b) drop it\n\n\n\n\n\n\n\n\n(3)\n\n\n\n\n(a)AH\n\n\n(b)ESP\n\n\nESP with auth\n\n\n\n\n\n\n\n\n(4)\n\n\n\n\n(a)\u7a81\u8b8a(metamorphism)\n\n\n(b)\u591a\u578b\u614b(polymorphism)\n\n\n(\u88dc\u5145)\n\n\nPolymorphic code: The (same) code takes many forms (like encryptions)\n\n\nOligomorphic code: The (same) code takes one of a few predefined forms (and thus can be possibly matched against signatures that can cover all cases)\n\n\nMetamorphic code: The code mutates, so the code itself is different in each execution (but the functionality the same)\n\n\n\n\n\n\n\n\n\n\n\n\n(5)\n\n\n\n\n(a) \u7d71\u8a08\u53ef\u4ee5\u800c\u898f\u5247\u4e0d\u884c: \u65b0\u7684\u5a01\u8105\uff0c\u56e0\u70ba\u65b0\u7684\u5a01\u8105\u4e0d\u6703\u7b26\u5408\u4efb\u4f55\u4e00\u500b\u898f\u5247\uff0c\u662f\u5fc5\u5f97\u7528\u8f03\u70ba\u52d5\u614b\u7684\u7d71\u8a08\u65b9\u5f0f\u5075\u6e2c\u3002\n\n\n(b) \u898f\u5247\u53ef\u4ee5\u800c\u7d71\u8a08\u4e0d\u884c: \u5728\u7d71\u8a08\u6578\u64da\u4e0a\u8fa8\u8a8d\u4e0d\u51fa\u800c\u898f\u5247\u53ef\u4ee5\u7684(\u4f8b\u5982\u67d0\u500b\u4fb5\u5165\u6027\u653b\u64ca\u4e26\u4e0d\u6703\u89f8\u72af\u4efb\u4f55\u4e00\u500bthreshold\u7684\u8a2d\u5b9a)\uff0c\u56e0\u6b64\u4ed6\u662f\u4e00\u7a2e\u7d71\u8a08\u4f8b\u5916\uff0c\u9700\u8981\u7528\u898f\u5247\u6027\u6aa2\u6e2c\u4f86\u8655\u7406\u3002\n\n\n\n\n\n\n\n\n(6)\n\n\n\n\n\u4f7f\u7528\u8005\u5e33\u6236\u5728\u8cc7\u6599\u5eab\u5efa\u7acb\u7684\u6642\u5019: \u6703\u5c07\u4f7f\u7528\u8005\u7684\n\u5e33\u865f\uff0csalt\u7684\u96a8\u6a5f\u5b57\u4e32\uff0c\u4ee5\u53cahash(salt(password))\n\u4e09\u5143\u7d44\u5b58\u5728db\u3002\n\n\n\u4f7f\u7528\u8005\u8f38\u5165\u5bc6\u78bc\u767b\u5165\u7cfb\u7d71\u7684\u6642\u5019: \u4f7f\u7528\u8005\u8f38\u5165\u5e33\u865f\u5bc6\u78bc\u5f8c\uff0c\u5c0d\u61c9\u53bbquery\u90a3\u500bdb entry\uff0c\u4e26\u4e14\u5c07\u7576\u521d\u7684salt\u6578\u503c\u53d6\u51fa \n hash(salt(typein_password)) ?= hash(salt(stored_password)) \u4f86\u78ba\u8a8d\u662f\u4e0d\u662f\u4e00\u500b\u5408\u6cd5\u7684\u767b\u5165\u3002\n\n\n\n\n\n\n\n\n(7)\n\n\n\n\n(a)\n\n\nIPS (Intrusion Protection System): \u9632\u60a3\u672a\u7136\uff0c\u9632\u60a3\u5165\u4fb5\u7684\u7cfb\u7d71(\u5728\u5165\u4fb5\u524d)\u3002\n\n\nIDS (Intrusion Detecion System): \u5373\u6642\u8655\u7406\uff0c\u5728\u5165\u4fb5\u5f8c\u8d95\u7dca\u767c\u73fe\u4e26\u8655\u7406\uff0c\u4f7f\u640d\u5931\u964d\u81f3\u6700\u4f4e\u3002\n\n\nrole: \u904e\u6ffe\u8cc7\u8a0a\uff0c\u5c07\u53ef\u80fd\u9020\u6210\u653b\u64ca\u7684\u6d41\u91cf\u5148\u64cb\u4e0b\uff0c\u55ce?\n\n\n\n\n\n\n(b) tiny fragment\u80fd\u653b\u64ca\u6210\u529f\u7684\u539f\u56e0\u5982\u4e0b: \u9996\u5148\uff0c\u56e0\u70ba\u5c01\u5305\u5f88\u5c0f\uff0c\u7528\u4f86\u8fa8\u8b58\u60e1\u610f\u5c01\u5305\u7684pattern\u8fa8\u8a8d\u7cfb\u7d71\u53ef\u80fd\u7121\u6cd5\u5206\u8fa8(\u56e0\u70bapattern\u4e5f\u88ab\u5207\u5272\u4e86)\uff0c(\u6216\u7c21\u55ae\u8aaa\u5c31\u662f\u5c01\u5305\u592a\u5c0f\u5f97\u4ee5\u898f\u907f\u5b89\u5168\u6aa2\u6e2c)\uff0c\u518d\u4f86\uff0c\u5982\u679c\u7528\u5c01\u5305size \u5c0f\u4e5f\u53ef\u4ee5\u8eb2\u907fsize\u6aa2\u6e2c\u7684\u6a5f\u5236\u3002\n\n\n\n\n\n\n\n\n(8)\n\n\n\n\n(a) rootkit (\u611f\u89ba\u633a\u5e38\u8003)\u4fb5\u5165\u7cfb\u7d71\u4e2d\u507d\u88dd\u6210root\u7684\u975e\u6cd5\u4f7f\u7528\u8005\n\n\n(b) bot \u662f\u88ab\u60e1\u610f\u8edf\u9ad4\u6216\u653b\u64ca\u8005\u63a7\u5236\u7684\u7db2\u8def\u7cfb\u7d71\uff0c\u800c\u8a31\u591a\u500bbot\u5408\u4f5c\u4e00\u6a23\u7684\u4e8b\u60c5\u5c31\u662f\u6bad\u5c4d\u7db2\u8def(botnet\u3001zombie net) \u6703\u7528\u4f86\u767c\u52d5DDoS\u653b\u64ca\n\n\n \u56e0\u70ba\u76e3\u6e2c\u5411\u5916\u6d41\u51fa\u7684\u5c01\u5305\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4f86\u6e2c\u5230\u8815\u87f2\u8edf\u9ad4\u8981\u5f9e\u5167\u90e8\u5411\u5916\u7ac4\u51fa\u5c0b\u627e\u4e0b\u4e00\u500b\u76ee\u6a19 (\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54)\n\n\n(d) \u7528\u4ee5\u6aa2\u6e2c\u8815\u87f2\uff0c\u96a8\u6a5f\u78ba\u8a8d\u9023\u7dda\u662f\u5426\u9054\u67d0\u500b\u53ef\u80fd\u88ab\u5224\u5b9a\u70baworm\u4e8b\u4ef6\u7684\u6d41\u91cf\n\n\n\n\n\n\n\n\n(9)\n\n\n\n\n(a) \u5206\u6563\u5f0f\u963b\u65b7\u670d\u52d9\u653b\u64ca\uff0c\u85c9\u7531\u767c\u9001\u5927\u91cf\u6d41\u91cf\u4f86\u8b93\u76ee\u6a19\u7db2\u8def\u7cfb\u7d71\u75b2\u65bc\u61c9\u4ed8\uff0c\u751a\u81f3\u7671\u7613\uff0c\u800c\u9020\u6210\u5408\u6cd5\u4f7f\u7528\u8005\u7121\u6cd5\u5b58\u53d6\u8a72\u7db2\u8def\u7cfb\u7d71\u7684\u8cc7\u6e90\u3002\n\n\n(b) \u6709\u900f\u904e\u7b2c\u4e09\u65b9\u7db2\u8def\u7cfb\u7d71\u3001\u9593\u63a5\u5f62\u5f0f\u7684DDoS\uff0c\u53ef\u4ee5\u8b93\u99ed\u5ba2\u7684I\u6613\u65bc\u96b1\u533f\u3002\n\n\n \u53c8\u7a31SYN Flood\uff0c\u4e00\u76f4\u9805\u7cfb\u7d71\u767c\u5e03SYN\u5c01\u5305\uff0c\u7cfb\u7d71\u4fbf\u6703\u56de\u61c9SYN-ACK\uff0c\u57fa\u65bcTCP\u4e09\u65b9\u4ea4\u63e1\u539f\u5247\uff0c(\u56e0\u70ba\u81ea\u5df1\u4e5f\u8981\u56de\u61c9\u4e00\u500bACK\u624d\u80fd\u5efa\u7acb\u9023\u7dda\uff0c\uff0c\u5426\u5247\u56e0\u70ba\u7cfb\u7d71\u4ee5\u70ba\u6211\u5011\u6c92\u6536\u5230\uff0c\u4ed6\u8b8a\u5f97\u91cd\u50b3\u5c01\u5305)\uff0c\u4e5f\u6b63\u56e0\u5982\u6b64\u6211\u5011\u5c31\u767c\u4e00\u5806SYN\u4f46\u4e0d\u56de\u61c9\u7cfb\u7d71\u7684SYN-ACK\uff0c\u8b93\u7cfb\u7d71\u75b2\u65bc\u91cd\u65b0\u50b3\u9001\u5c01\u5305\u800c\u7671\u7613\u5176\u8cc7\u6e90\u3002\n\n\n(d) \u4e00\u76f4\u5411\u7cfb\u7d71\u767c\u5e03ICMP\u63a7\u5236\u5c01\u5305\uff0c\u800c\u8017\u76e1\u983b\u5bec\n\n\n\n\n\n\n\n\n(10) \u5c0b\u627e\u53ef\u80fd\u6709\u5f31\u9ede\u3001\u6f0f\u6d1e\u7684port\u4ee5\u9032\u884c\u653b\u64ca(\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54)\n\n\n\n\n\n\n2017final (Jan. 2 2018)\n\n\n\n\n\n\n(1)\n\n\n\n\n(a) \u4e09\u500b\u539f\u56e0: \u60e1\u610f\u8edf\u9ad4\u592a\u591a\u7a2e\u3001\u9632\u6bd2\u8edf\u9ad4\u66f4\u65b0\u8cc7\u6599\u5eab\u7684\u901f\u5ea6\u611f\u4e0d\u4e0a\u60e1\u610f\u8edf\u9ad4\u63a8\u9673\u51fa\u65b0\u7684\u901f\u5ea6(\u9053\u9ad8\u4e00\u5c3a\u9b54\u9ad8\u4e00\u4e08?)\u3001\n\n\n(b) \u4e09\u7a2e: polymorphism, metamorphism, stealthy malwares\n\n\n\n\n\n\n\n\n(2) \u4e0d\u77e5\u9053\u8036\uff0c\u4f46\u63a8\u6e2c\u61c9\u8a72\u662fcross-site scripting(\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54)\n\n\n\n\ndef: \u662f\u4e00\u7a2e\u7db2\u7ad9\u61c9\u7528\u7a0b\u5f0f\u7684\u5b89\u5168\u6f0f\u6d1e\u653b\u64ca\uff0c\u662f\u4ee3\u78bc\u6ce8\u5165\u7684\u4e00\u7a2e\u3002\u5b83\u5141\u8a31\u60e1\u610f\u4f7f\u7528\u8005\u5c07\u7a0b\u5f0f\u78bc\u6ce8\u5165\u5230\u7db2\u9801\u4e0a\uff0c\u5176\u4ed6\u4f7f\u7528\u8005\u5728\u89c0\u770b\u7db2\u9801\u6642\u5c31\u6703\u53d7\u5230\u5f71\u97ff\u3002\u9019\u985e\u653b\u64ca\u901a\u5e38\u5305\u542b\u4e86HTML\u4ee5\u53ca\u4f7f\u7528\u8005\u7aef\u8173\u672c\u8a9e\u8a00\u3002\n\n\n\n\n\n\n\n\n(3)\n\n\n\n\n(b) \u5f9e\u88ab\u63a7\u5236\u7684zombie\u96fb\u8166\u767c\u9001\u591a\u500bICMP\u63a7\u5236\u5c01\u5305\uff0c\u7d93\u7531\u7b2c\u4e09\u65b9\u7684reflexive server\uff0c\u9593\u63a5\u7684\u653b\u64ca\u53d7\u5bb3\u8005\u4e3b\u6a5f\n\n\n\n\n\n\n\n\n(4) ingress(\u5427?)\uff0c\u56e0\u70baspoofing attack\u662f\u5916\u9762\u7684\u9020\u5047\u5c01\u5305\u50b3\u5165\u4f5c\u70ba\u653b\u64ca\n\n\n\n\n\n\n(5) (\u9019\u4e5f\u4e0d\u662f\u5f88\u78ba\u5b9a\uff0c\u9084\u8acb\u52a9\u6559\u8a73\u7d30\u89e3\u7b54)\n\n\n\n\n(a) stateless \u53ef\u4ee5\u6210\u529f\u5efa\u7acb\u9023\u7dda\uff0c\u56e0\u70ba\u4ed6\u53ea\u6aa2\u67e5\u73fe\u6709\u7684\u5c01\u5305\u5167\u5bb9\u4f86\u5224\u65b7\u662f\u5426\u6709\u5a01\u8105\n\n\n(b) stateful \u4e0d\u4e00\u5b9a\u80fd\u6210\u529f\u9023\u7dda\uff0c\u4f8b\u5982\u5f9e\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\uff0c\u5982\u679c\u67e5\u95b1\u5148\u524d\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\u5c0d\u61c9\u7684\u898f\u5247\u4e0d\u5141\u8a31\u901a\u904e\u7684\u8a71\uff0c\u5247\u4e0d\u5141\u8a31\u901a\u904e\uff0c\u800c\u7121\u6cd5\u9054\u6210TCP\u3002\n\n\n\n\n\n\n\n\n(6) \u4e0d\u6703\uff0c\u56e0\u70basalt\u662f\u96a8\u6a5f\u7522\u751f\u7684\u5b57\u4e32\uff0c\u5169\u8005salt\u503c\u4e0d\u540c\uff0c\u5247hash(salt(pass1)) != hash(salt(pass2))\n\n\n\n\n\n\n(7)\n\n\n\n\n\n\n\n(8)\n\n\n\n\n(a) TRW: \u662f\u4e00\u7a2e\u5c0d\u4ed8\u8815\u87f2\u7684\u65b9\u6cd5\uff0c\u96a8\u6a5f\u6383\u63cf\u67d0\u500b\u6307\u5b9a\u7684\u9023\u7dda\u4f86\u770b\u662f\u5426\u6709\u53ef\u80fd\u542b\u6709\u8815\u87f2\u3002\n\n\n(b) rate limiting: \u7576\u767c\u73fe\u53ef\u80fd\u6709\u8815\u87f2\u7684\u5c01\u5305\u6642\uff0c\u9650\u5236\u4f86\u81ea\u90a3\u500bsource\u7684\u5c01\u5305\u6d41\u91cf\u3002\n\n\n\n\n\n\n\n\n(9) AH, ESP auth\n\n\n\n\n(10) \u4e0a\u9762\u6709\u4e86\u5c31\u4e0d\u91cd\u8907\u5beb\u56c9\n\n\n\n\n(11) \u5169\u500b\u90fd\u662f\u6bd4\u8f03\u4f4e(\u78b0\u649e\u5c11\uff0c\u932f\u8aa4\u7387\u4f4e)\n\u5982\u5716: \n\n\n\n\n\n\n(12) \u5c0f\u5c01\u5305\u653b\u64ca\uff0c\u5b9a\u7fa9\u662f\u5c07\u5927\u7684\u5c01\u5305\u5207\u5272\u6210\u6578\u500b\u5c0f\u5c01\u5305\u4f86\u767c\u9001\uff0c\u85c9\u6b64\u898f\u907f\u5b89\u5168\u6aa2\u6e2c\uff0c\u4ee5\u9054\u6210\u653b\u64ca\u3002 \u80fd\u8eb2\u904e\u6aa2\u67e5\u539f\u56e0\u5728\u65bc\uff0c\u7b2c\u4e00\uff0c\u5c01\u5305\u5207\u5272\u5f8c\u8f03\u96e3\u770b\u51fa\u60e1\u610f\u7684pattern(\u56e0\u70bapattern \u4e5f\u88ab\u5207\u5272\u4e86)\uff1b\u7b2c\u4e8c\uff0c\u5207\u5272\u5f8csize\u660e\u986f\u6703\u964d\u4f4e\u8a31\u591a\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u5982\u5927\u5c0f\u6aa2\u67e5\u6a5f\u5236\u7684\u65b9\u6cd5\u3002\n\n\n\n\n\n\n(13)\n\n\n\n\n(a) \u5728\u67e5\u8a62\u8cc7\u6599\u5eab\u7684\u6642\u5019\u6c92\u6709\u5728\u8f38\u5165\u6b04\u4f4d\u505a\u5b89\u5168\u6027\u6aa2\u6e2c\uff0c\u8b93\u99ed\u5ba2\u53ef\u4ee5\u593e\u5e36\u60e1\u610fSQL\u6307\u4ee4\u65bc\u5176\u4e2d\u3002\n\n\n(b) \u53ef\u4ee5\u6488\u51fa\u8a31\u591a\u4f7f\u7528\u8005\u8cc7\u6599\n\n\n host-based: \u901a\u5e38\u662f\u4fdd\u8b77\u500b\u4eba\u7684\u9632\u706b\u7246\uff1bnetwork-based: \u4fdd\u8b77\u6574\u500b\u7db2\u8def\u62d3\u6a38\u67b6\u69cb\u3001\u7cfb\u7d71\u7684\u9632\u706b\u7246\n\n\n\n\n\n\n\n\n(14) \u4e0a\u4e00\u6b21\u7684\u7bc4\u570d\uff0c\u5c31\u6c92\u6709\u5beb\u4e86\n\n\n\n\n\n\n(15)\n\n\n\n\n(a) \u4ee3\u8868\u843d\u5728\u7a97\u53e3\u7684\u5de6\u908a\uff0c\u662f\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305\uff0c\u6b64\u6642\u518d\u5ea6\u6536\u5230\u4ee3\u8868\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305\n\n\n(b) \u6709\u5169\u7a2e\u60c5\u5f62\n\n\n\u60c5\u6cc1\u4e00: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u800c\u4e14\u662f\u6c92\u6709\u5099\u63a5\u6536\u904e\u7684\uff0c\u5247\u63a5\u6536\u4ed6\n\n\n\u60c5\u6cc1\u4e8c: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u7136\u800c\u662f\u88ab\u63a5\u6536\u904e\u7684\uff0c\u4ee3\u7b46\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305\n\n\n\n\n\n\n \u5168\u65b0\u7684\u5c01\u5305\uff0c\u7a97\u53e3\u5411\u53f3\u6ed1\u52d5\u4e00\u500b\u5c01\u5305\u55ae\u4f4d\u4ee5\u63a5\u6536\u9019\u500b\u5c01\u5305\n\n\n\n\n\n\n\n\n(16)\n\n\n\n\n(a)size of args = 8bytes(char pointer is 8 bytes)\n\n\n(b)return address will store the value of where the instruction of main is stored for return purpose, which vlaue is \n0x08048fe5\n\n\n buf is 4 bytes, and there are 4 bytes more for $ebp, so total 8 bytes of data to overflow to the return address, payload is \"A\" * 8 + (\\95\\88\\04\\08) due to x86 little endian architecture.", 
            "title": "Junior 2nd sem. Network Security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#network-security", 
            "text": "Spring 2018  \nLecturer: Shiuhpyng Shieh", 
            "title": "Network Security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch1-introduction", 
            "text": "", 
            "title": "Ch1. Introduction."
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch2-symmetric-encryption-and-message-confidentiality", 
            "text": "", 
            "title": "Ch2. Symmetric Encryption and Message Confidentiality"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#concept-correction-here", 
            "text": "Assymetric encryption is not necessarily and absolutely better than the symmetric encryption, they can work with each other.", 
            "title": "Concept correction here:"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#common-type-of-the-cryptanalysis", 
            "text": "", 
            "title": "Common type of the cryptanalysis"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#brute-force-attack", 
            "text": "On avg, half of the keys have to be tested.", 
            "title": "Brute force attack"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ciphertext-only-attack", 
            "text": "Known the encryption algorithm  Want to collect all the ciphtertext to find out the plaintext or ultimately, find out what the key is.", 
            "title": "Ciphertext only attack"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#known-plaintext-attack", 
            "text": "Use the known plaintext and the correspond ciphertext which encrypted by the encryption algorithm and ultimately find out what the key is.", 
            "title": "Known plaintext attack"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#chosen-plaintext-attack", 
            "text": "Use the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is.", 
            "title": "Chosen plaintext attack"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#difference-bw-known-plaintext-and-chosen-ciphertext", 
            "text": "See here", 
            "title": "Difference b/w known plaintext and chosen ciphertext"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#chosen-ciphertext-attack", 
            "text": "As we've done in the course project 1, we use the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is.", 
            "title": "Chosen ciphertext attack"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#feistel-cipher-architecture", 
            "text": "*", 
            "title": "Feistel cipher architecture"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#model-of-symmetric-encryption", 
            "text": "Encrypt and decrypt with the same key, the key should be shared through a secure manner.  security of symmetric encryption depends on the secrecy of the key, not the secrecy of the algorithm, which means we should\nkeep the secret key as safe as possible.", 
            "title": "Model of symmetric encryption"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#rsa-encryption-standard", 
            "text": "Asymmetric encryption standard.   This encryption standard mainly focus on prime factorisation\n\u66f4\u591a\u8cc7\u8a0a\u53ef\u4ee5\u53c3\u8003 \u5916\u661f\u4eba\u7684\u7b46\u8a18", 
            "title": "RSA Encryption standard"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#course-project1-chosen-cipher-attack", 
            "text": "Will post report after the session of this homework ends.", 
            "title": "Course project1. Chosen cipher attack"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#des-encryption-standard", 
            "text": "An encryption algorithm use round, permutation shift and XOR operation to generate the ciphertext.  Divide the plaintext into 64-bit-long in size for each if the block, and use the same length key for encryption(actually the key is not in the same length since there are 8 bits used for the parity-checking during the encryption)  Image src  DES Briefly introduction  Prone to brute force attack since the key space is too small to guarantee the safe area, so the safer 3-DES algorithm is used nowadays.  16rounds are needed for the encryption process  The encryption and decryption are run under the same algorithm but they are in the reverse order with each other  This is a model based on the  Fiestel model , namely for the encryption and decryption they use the same function but in the reversed order.", 
            "title": "DES Encryption standard"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#from-des-to-3des", 
            "text": "DES is not so secure since the key is 56bits long, which is quite prone to BF cryptanalysis   3DES lengthens the key of DES (56 * 3 = 168), doing DES 3 times to make the encryption safer.      Please feel free to refer to my classmate's  note  for more information   For encryption procedure:\nP--E(K1)--A--D(K2)--B--E(K3) C  \nC--D(K1)--B--E(K2)--A--D(K3) A  \nSince the Fiestel architecture, the encryption and decryption method are just the reverse of each other.  For decryption procedure:", 
            "title": "From DES to 3DES"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#aes-encryption-standard", 
            "text": "Make a better encryption of 3DES, namely evolve from 3DES for a stronger and faster encryption algorithm.  AES is still the same as the DES in the category of block cipher encryption, but the block size of AES is 128 bits, doubled of the DES encryption.  10 Rounds of encryption again and again is needed.     Image source from textbook\nOne grey-coloured box is the one \"round\" of the encryption in AES \nEach of the round we take the preceding round's output as the input of this round and do the encryption again, with the following 4 tasks to be done \n1.The  Substitution Bytes  is to use the non-linear transform to let the input transformed with a \"Affine transformation\", making the encryption robust and hard to be cracked \n2.The  Shift Rows(Bit transposition)  is shifting the data, to rearrange the text, for row i we shift i-1 times to the left.    Image source from wikipedia  \n3.The  Mix Columns  is a linear transform under the mod multiplication  \n4.The  Add Round Key  is let the input XOR with the Key in the current state. (Rijndael key generator solution,which is a subkey in each round, which we can be seen from the image provided above that Key(16 bytes and expand to match for each round, divided into 10 subkeys for 10 operations in AES encryption)) \n5.After the aforementioned four steps are done, go to the next encryption box. The operation is bytewise", 
            "title": "AES Encryption standard"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#the-truly-random-number-and-pseudo-random-number", 
            "text": "Applications of the random number \n1.RSA pub-key generation and other pub-key algorithms. \n2.Session key for encryption in system such as Wi-Fi, e-mail    Image source from wikipedia     The following 2 criteria are used to validate a sequence is random.  \n1.Uniform distribution: The each element in the seed of random number must take the same proportion of being taken out. \n2.Independence: A sequence cannot be inferred from the other sequence, strictly and absolutely.", 
            "title": "The truly random number and pseudo random number"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#block-cipher-vs-stream-cipher", 
            "text": "", 
            "title": "Block cipher vs Stream cipher"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#stream-cipher", 
            "text": "Change the encryption key from time to time, and each time the two part(sender-receiver) can generate the same random key s.t. they can encrypt and decrypt the same message.\nThe key of such encryption algorithm should have a extremely large period and as random as possible, o.w. it is crack-prone. \nIn order to guard the BF attack, the longer key is preferred (However there is a trade-off b/w speed and security.) \nAs we can see the sender and receiver generate the same key for encryption and decryption.\nImage source from textbook   RC4 Algorithm \n1.An algorithm with changeable key length encryption.  \n2.SSL TLS WEP WPA use this encryption algorithm \n3.Easy to implement in both HW ans SW, but terminated in 2015 due to attack   RC4 Encryption procedure  \n1.Shuffle the key, make it randomised. 1\n2\n3\n4\n5\n6\n7\n8 for   i   from   0   to   255 \n      S [ i ]   :=   i \n  endfor \n  j   : =   0 \n  for (   i = 0   ;   i 256   ;   i ++ ) \n      j   : =   ( j   +   S [ i ]   +   key [ i   mod   keylength ])   %   256   //randomly take the new j and swap, make a permutation \n      swap   values   of   S [ i ]   and   S [ j ] \n  endfor   \n2.Get even more shuffle data, each time for a input byte, locate the i and j value by take the value in the key, XOR the inputByte with the key (since the reverse of XOR operation is itself, once we insert the ciphertext we'll get plaintext, and converse is true as well.) 1\n2\n3\n4\n5\n6\n7\n8\n9 i   : =   0  j   : =   0  while   GeneratingOutput : \n     i   : =   ( i   +   1 )   mod   256     //a \n     j   : =   ( j   +   S [ i ])   mod   256   //b \n     swap   values   of   S [ i ]   and   S [ j ]    //c \n     k   : =   inputByte   ^   S [( S [ i ]   +   S [ j ])   %   256 ]   //XOR operation suit for this case. Reverse operation also works \n     output   K  endwhile", 
            "title": "Stream cipher"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#block-cipher", 
            "text": "Use the same key for the text, and divide the text into blocks, processing ONE BLOCK for each time. Processing procedure including shift position, substitute text to let the plaintext look similar, however, generating the\ntotally different ciphertext for cryptographically secure.     The AES(128 bits per block), DES(64 bits per block), 3DES(64 bits per block) are lie in this category.    5 Block modes for the block cipher, defined by NIST USA. Intended to use for the symmetric cipher.  .    1.Electronic Code Book where Encryption:  ciphertext[i] = code_book[plaintext[i]] just. Need a decryptor to do reversed tasks. \n2.Cipher Block Chaining, take the step i's ciphertext XOR with next step's plaintext and encrypt again.  If there is a bit error in the ciphertext, it will cause the decryption of plaintext i and plaintext i+1 error since they are chained together from step to step.    \n3.Cipher FeedBack , only the encryptor is needed, 2 times of encryption is equivalent to decryption (Reason: ).    \n4.CounTeR , use the counter directly for the key of encryption. Can be processed parallelly since each block can be processed with its counter and independent with other blocks, random access is suitable as well. And use the same key for decryption due to the properties of XOR operation, once the ciphertext XOR key ---  plaintext is decrypted. \nThe CTR mode is both HW and SW efficiency (parallelism are able to implemented in both CPU and compiler, OS ...etc).  \nWhat's more, the preprocessing can be done as well, even without the presence of the plaintext, we can still generate the required key and the next task is just let plaintext XOR key ---  ciphertext.  5.Output FeedBack similar too Cipher FeedBack, take the ciphertext from previous round and encrypt again  Useful reference site ,MUST READ!!!", 
            "title": "Block cipher"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch3-message-authencation-and-public-key-cryptography", 
            "text": "", 
            "title": "Ch3. Message Authencation and Public Key Cryptography"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#message-authencation-code-mac", 
            "text": "Using some hash value of the data and encrypt that value at the end of data for validation (see the image below)  Clarify!!: MAC cannot perform the data encryption, it can only be used for data authentication and validation.   Such as parity checking is also a kind of message authentication.       Image source from wikipedia", 
            "title": "Message Authencation Code (MAC)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#secure-hash-functions", 
            "text": "1.Collision and preimage-found resistant, making it unable to do the reverse of hash to forge the data.", 
            "title": "Secure Hash Functions"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#hash-collision-strong-vs-weak", 
            "text": "", 
            "title": "Hash collision, strong vs weak"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#strong", 
            "text": "Given an arbitrary x there exists no x' with x' != x so that h(x) = h(x')\n(\u66f4\u53b2\u5bb3\uff0c\u7121\u6cd5\u627e\u5230\u4efb\u53d6\u5169\u500b\u7522\u751f\u76f8\u540c\u96dc\u6e4a\u6578\u503c)", 
            "title": "Strong"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#weak", 
            "text": "There exist no given x, and will be infeasible to find x' with x != x' so that h(x) = h(x') (\u4e00\u500b\u5df2\u77e5\u627e\u7121\u6cd5\u627e\u5230\u53e6\u4e00\u500b\u7522\u751f\u76f8\u540c\u6578\u503c\u7684\u96dc\u6e4a)", 
            "title": "Weak"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#sha-note-not-an-encryption-standard", 
            "text": "Term explanation (waiting for the answer from OAlienO)  \n1.Message Digest Size: Message digest, MD(same as MD of MD5), of how much data amount we output, such as in the following SHA1 algorithm, we produce 160bits output (hex * 40 = 160).   \n2.Message Size: Message amount that we can process in one time(Maxium input). \n3.Block Size: In block cipher, cut all the message into several blocks, in the block is how much message in a block to be processed \n4.Word Size: A size of a given state.    The following are the Message digest from the SHA512.", 
            "title": "SHA Note, NOT AN Encryption standard!"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#hashing-why-and-how", 
            "text": "hash youtube     Hash aims for reduce the huge amount of data to the small amount.  Can be used for verify and prevent the errors in the communication.  Evan a small change in the original plaintext (such as only a bit), it will cause the totally different hash value, this\nresult is called Avalanche Effect. It ensures the security of hash algorithm.  Hash has to be one-way and pre image, collision-resistant, otherwise , data will be forged. Hash is doomed to be broken or cracked, what matters is that we have to try out best to lengthen the time before being cracked", 
            "title": "Hashing, Why and How?"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#hash-based-message-authentication-code-hmac", 
            "text": "Watch out the color correspondence for better understanding the procedure", 
            "title": "Hash-based message authentication code (HMAC)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#hmac-vs-cmac", 
            "text": "so hmac vs cmac \n* AS we can see from the picture for HMAC (aforementioned) and CMAC, although both of them use the key, but in", 
            "title": "HMAC vs CMAC??"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#message-encryption-vs-message-digestionhashing-what-is-the-difference", 
            "text": "so encryption-vs-digest    so how-is-an-md5-or-sha-x-hash-different-from-an-encryption    hash ,encryption and more    so why-should-i-use-authenticated-encryption-instead-of-just-encryption     Encryption: Really make the message secret, hard to be cracked and aims for security. key difference between encryption and hashing is that encrypted strings can be reversed back into their original decrypted form if you have the right key  ex. RSA AES DES ...  Digestion (hashing): Digest the whole data, may be used for message authentication, producing an ID or FINGERPRINT of the input data. \nHashing is great for usage in any instance where you want to  compare a value with a stored value, but can't store its plain representation for security reasons . Other use cases could be checking the last few digits of a credit card match up with user input or comparing the hash of a file you have with the hash of it stored in a database to make sure that they're both the same. ex. MD5 SHA ...  Furthermore, if the digested data is encrypted, than it can be used for DIGITAL SIGNATURE.\n1.For example in SHA family  \u80fd\u8a08\u7b97\u51fa\u4e00\u500b\u6578\u4f4d\u8a0a\u606f\u6240\u5c0d\u61c9\u5230\u7684\uff0c\u9577\u5ea6\u56fa\u5b9a\u7684\u5b57\u4e32\uff08\u53c8\u7a31\u8a0a\u606f\u6458\u8981\uff09\u7684\u6f14\u7b97\u6cd5\u3002\u4e14\u82e5\u8f38\u5165\u7684\u8a0a\u606f\u4e0d\u540c\uff0c\u5b83\u5011\u5c0d\u61c9\u5230\u4e0d\u540c\u5b57\u4e32\u7684\u6a5f\u7387\u5f88\u9ad8\u3002  OAlienO : SHA \u4e0d\u662f\u52a0\u5bc6\u56e0\u70ba\u4ed6\u6c92\u8fa6\u6cd5\u89e3\u56de\u539f\u672c\u7684 input", 
            "title": "Message encryption vs Message digestion(hashing), what is the difference?"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#authenticated-encryption-hmac-x-cmac-x-ccm-cmac-aes-block-cipher-ctr-block-mode", 
            "text": "A term used to describe encryption systems that simultaneously protect confidentiality and authenticity of communications.  Compared with traditional encryption, the authenticated encryption  additionally provides authenticity, while plain encryption provides only confidentiality.  Usually more complicated than confidentiality-only or authenticity-only schemes.", 
            "title": "Authenticated encryption (HMAC x CMAC x  CCM = CMAC + AES block cipher + CTR block mode)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#public-key-cryptography", 
            "text": "Encrypt with public key: Want to send someone a message that only they(certain of groups,...etc) will be able to read, encrypt it with that person's public key.  Encrypt with private key: Want to publish some information and guarantee that you're the author  (Reason is that the only person who encrypt with HIS PRIVATE KEY CAN ONLY BE THE ORGINAL AUTHOR, and everyone can use the public related to that private key to decrypt it) , and that it hasn't been tampered with, then you encrypt it with your private key.(We can as well use the authenticated encryption to ensure the authenticity. Just like the aforementioned  Digital signature )  so What is we encrypt with private key??", 
            "title": "Public key cryptography"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#private-key-vs-secret-key-what-is-the-difference", 
            "text": "Private key: Use in asymmetric encryption.  Secret key: Use in symmetric encryption, but it is quite hard for us (or say unsafe) to exchange secret key, so the Diffie Hellman key exchange algorithm is invented.", 
            "title": "Private key vs Secret key, what is the difference?"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#diffie-hellman-key-exchange", 
            "text": "A way to exchange the secret key via an unsafe path  Math theory behind this algorithm   SSL, TLS, SFTP use it. Like the AES implemetation AES is symmetric encryption and a shared-secret-key exchange is needed for end-to-end data encryption.  Both of end to end does not need to know each other (or cant break) his / her private key but share a same secret key to do secret data exchange.  In this algorithm, we should choose a very big a, b and p s.t. Bob is unable so solve 'a' of Alice's secret and neither is Alice. o.w. Eve will hack into it and solve the shared secret key.  Aside from the RSA, why use Diffie Hellman key exchange?  \nSince the process of RSA is quite burdensome (numbers in it are extremely huge) so if we can back to the traditional symmetric encryption such as AES (just now we need a \"secure pipe\" under the \"insecure pipe\") to perform key exchange.\nThan the end-to-end encryption can be achieved, what's more, this method is faster in which stream cipher are performed", 
            "title": "Diffie Hellman key exchange"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#man-in-the-middle-attack-mitm", 
            "text": "The MITM forges the key of both side and deceives them, act as both fake Alice and Bob. \nAnd the wikipedia analogy ,note: sequence different from the image  \nThe core idea about this is still the mathematical expression, for example for the secret key K1, since Darth intercepts the message, then he can forge the key with his secret key XD2 ,due to the following mathematical theory about modulo exponential.     \nSo Alice is able to acquire the secret key via her own private key XA due to the upper math theory.  BUT SHE DOES NOT KNOW THAT YD2 ACTUALLY COMES FROM DARTH and DARTH now share the same key with Alice, so Alice thinks that Darth is Bob!! and the same is true for Bob!!   \nOriginally the shared secret key should be lie on the mathematical expression like this    \nRather than this", 
            "title": "Man in the middle attack (MITM)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch4-key-distribution-and-user-authentication", 
            "text": "", 
            "title": "Ch.4 Key Distribution and User Authentication"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#key-distribution", 
            "text": "Used in the symmetric key crypto system to exchange keys from one end point to another.", 
            "title": "Key distribution"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#kerberos-and-its-components", 
            "text": "User password will not be transmitted but will be used as a shared secret for the authentication  Centralised key distribution and authentication service b/w user and server(3 rd  party) that relies on symmetric encryption (No public key in it)  Generates a symmetric secret key b/w two end points.  Distributed system makes computing power better.  During the key's lifetime (embedded in the message), the key can be used again and again.  Central idea relies on the trustworthy 3RD PARTY SERVER", 
            "title": "Kerberos and its components"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#authencation-server-as", 
            "text": "Authenticate the user", 
            "title": "Authencation server (AS)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ticket-granting-server-tgs", 
            "text": "Grant authenticated user permissions to act with the real server (SS, Service Server) wikipedia for detailed procedure    Detailed explanation video", 
            "title": "Ticket granting server (TGS)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#timestamp-portocal-vs-challenge-response-portocal", 
            "text": "", 
            "title": "Timestamp portocal vs Challenge-Response Portocal"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#timestamp-portocal", 
            "text": "Record the timestamp of each data transaction.  Prone to replay attack(a kind of MITM attack) if the clocks b/w the client and server is not synchronised\nBut how come will this happen??  \nIf the system time is not synchronised, then suppose the end point EA is slower, then the MITM can intercept the message b/w two endpoint and resend the password again to hack and pretend to be the genuine user. What's more, since the time is slower in EA, then as the MITM intercepts data and resend, it does need some time to \"RETRANSMIT\" , but it is the slower time that allows the delay of retransmit time not be discovered if the time difference |T_received - T_send|   epsilon is not so strict.", 
            "title": "Timestamp portocal"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#challenge-response-portocal", 
            "text": "Reference this video first!  The server and the receiver share a certain kind of \"shared secret\" that might be generated as the user registered in the system.  Ensures the \"Mutual Authentication\"  The procedure as follows:\nServer sends a unique challenge value sc to the client \nClient sends a unique challenge value cc to the server \nServer computes sr = hash(cc + secret) and sends to the client \nClient computes cr = hash(sc + secret) and sends to the server \nServer calculates the expected value of cr and ensures the client responded correctly \nClient calculates the expected value of sr and ensures the server responded correctly\nwhere \nsc is the server generated challenge \ncc is the client generated challenge \ncr is the client response \nsr is the server response  Since the secret is shared b/w the server and client, then is is able to verify the genuine of both server and client    A good challenge/response system will generate a new challenge for every transaction or session (and make sure that previous challenges are not reused!), so that session transcripts cannot be spliced together to create new fraudulent systems. (Maybe the challenge will be encrypted in both parties)", 
            "title": "Challenge-Response Portocal"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#comparison-bw-kerberos-v4-and-kerberos-v5", 
            "text": "Reference here   v4 is prone to MITM attack and v5 is not.  Both of them provides mutual authentication", 
            "title": "Comparison b/w Kerberos v4 and Kerberos v5"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#what-is-mutual-authentication-and-why-we-need-it", 
            "text": "\u7591\u554f\uff1aMutual authentication \u76f8\u8f03\u65bc one way \u4ed6\u7684\u597d\u8655\u662f \u53ef\u4ee5\u540c\u6642\u9a57\u8b49 \u4f3a\u670d\u5668\u65b9\u548c\u4f7f\u7528\u8005\u65b9\u561b\uff1f\uff1f\n\u5c31\u662f\u4f3a\u670d\u5668\u80fd\u78ba\u8a8d\u9019\u500buser \u800c\u4e14\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u78ba\u8a8d\u9019\u500bserver\n\u4f46\u662f\u539f\u672c\u53ea\u6709usr\u4f86\u78ba\u8a8dserver\n\u591a\u51fa\u9019\u500bserver\u4f86\u78ba\u8a8dusr \u6703\u6709\u4ec0\u9ebc\u512a\u9ede\u5462\uff1f\n\u89e3\u7b54\uff1a\u56e0\u70bauser\u548cserver\u90fd\u6709\u53ef\u80fd\u88ab\u4eff\u5192\uff0c\u56e0\u6b64\u9700\u8981\u96d9\u91cd\u8a8d\u8b49\u96d9\u65b9\u3002    Both the server and client may be inpersonated, so we need to verify their real identification.", 
            "title": "What is mutual authentication and why we need it??"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#key-distribution-with-asymmetric-encryption-public-key-certificate", 
            "text": "The well known SSL use this method ,and the X.509 standard is used.  Aimed to solve the problem that we want to verify the authentication of some authorities by the trusted certificated authority (CA)  Step as follows  Verify the signature that generated by CA to ensure the reality.", 
            "title": "Key distribution with asymmetric encryption (Public key certificate)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#what-is-the-difference-bw-the-digital-signature-and-public-key-authentication", 
            "text": "From stackoverflow:\nA digital signature is used to verify a message. It is basically an encrypted hash (encrypted by the private key of the sender) of the message. The recipient can check if the message was tampered with by hashing the received message and comparing this value with the decrypted signature (decrypted the signature with the public key from the sender).   To decrypt the signature, the corresponding public key is required.  A digital certificate is used to bind public keys to persons or other entities. If there were no certificates, the signature could be easily be forged, as the recipient could not check if the public key belongs to the sender.  Original discussion thread     Similar reference     The \"Chain of Trust\" SSL certificate, root certificate are all related to this topic  Actually the public key certification (certification distribution of authorize a genuine key) is the core concept of SSL/TLS portocal  Chain of Trust YouTube video  Private key of root CA should be absolutely inaccessible.  Once the \"Chain of Trust\" is successfully formed, an secure communication path can be formed (TLS using SSL certificate to do such things)", 
            "title": "What is the difference b/w the digital signature and public key authentication."
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#so-a-question-comes-to-my-mind-what-is-the-differenct-bw-httpstls-and-ssl", 
            "text": "Answer as follows:\n1.TLS is just the new name (or say acronym) of SSL Namely, SSL protocol got to version 3.0; TLS 1.0 is \"SSL 3.1\". TLS versions currently defined include TLS 1.1 and 1.2. Each new version adds a few features and modifies some internal details. We sometimes say \"SSL/TLS\".   2.HTTPS is the HTTP under the secured transmission protocol, i.e. HTTPS is HTTP-within-SSL/TLS. SSL (TLS) establishes a secured, bidirectional tunnel for arbitrary binary data between two hosts.", 
            "title": "So a question comes to my mind, What is the differenct b/w HTTPS,TLS and SSL?"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#why-chain-of-trust", 
            "text": "Even though the asymmetric (Public-key cryptography RSA) can ensure the secret communication, digital signature can ensure the correctness of content\n, however, we are still not sure about whether the issuer of the digital certificate is the real \"good guy\" or the \"forged guy.\" wikipedia ref", 
            "title": "Why chain of trust??"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pki-ca-keyetc-great-explanation-video", 
            "text": "Here   A public key infrastructure (PKI) is a set of roles, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption.", 
            "title": "PKI, CA, Key...etc great explanation video"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#when-to-revoke-a-users-certification", 
            "text": "The user\u2019s private key is assumed to be compromised(\u5047\u5b9a\u88ab\u6d29\u6f0f\u51fa\u53bb\u4e86)  The user is no longer certified by this CA; reasons for this\ninclude subject\u2019s name has changed, the certificate is\nsuperseded, or the certificate was not issued in conformance\nwith the CA\u2019s policies  The CA\u2019s certificate is assumed to be compromised", 
            "title": "When to revoke a user's certification??"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#the-pki-architecture", 
            "text": "PKI YouTube video \n* PKI is a framework that some vendor and use...etc should follow, and PKI associates a public key with a verified person/system.", 
            "title": "The PKI architecture"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch5-cloud-security", 
            "text": "", 
            "title": "Ch.5 Cloud Security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#8021x-eapa-framework", 
            "text": "Used to control the access of user to the internet.  provides a generic transport service for the\nexchange of authentication information between a\nclient system and an authentication server.  The authentication server gives the instruction to the gate / authenticator such that it can give the client the internet resource he wants or not.   , auth methods through the EAP layer to reach the data link layer.  Procedure as follows  \n1.EAPOL(OL stands for data encapsulation)-Start, start the eap \n2.EAPOL(OL stands for data encapsulation)-EAP(REQ/IDENTITY) auth server wants to know the identity / \n3.EAPOL(OL stands for data encapsulation)-EAP(RESPONSE/AUTH) five the clinet response \n4.EAPOL(OL stands for data encapsulation)-Logoff end the connection", 
            "title": "802.1X, EAP(A framework)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#cloud-couputing", 
            "text": "Definition: Focus on what service cloud should have rather than a \"how to\" design architecture. a tool for\ndescribing, discussing, and developing a system-specific\narchitecture using a common framework of reference.  SaaS provides software such as google drive, PaaS manages the computing platform such as the web(middleware components), and IaaS provides the\nhardware resources such as the network server and hosts...etc  Roles in cloud computing.  \n1.Carrier: Provide the transport b/w cloud services and consumers \n2.Auditor(\u7a3d\u67e5\u54e1): Assures that THE CP conforms to a certain cloud standards \n3.Broker(\u7d93\u7d00\u4eba):Help the consumer to manage the cloud service when it is too complicated.", 
            "title": "Cloud Couputing"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#data-protection-in-the-cloud", 
            "text": "Multi instance model: Am unique DBMS in each could subscriber(Risk distribution)  Multi tenant model: Allows customers to share computing resources in a public or private cloud. Each tenant's data is isolated and remains invisible to other tenants. The rest of cloud computing will be read before the midterm 2", 
            "title": "Data protection in the cloud"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch6-transport-level-security", 
            "text": "", 
            "title": "Ch.6 Transport-Level Security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ssl-architecture", 
            "text": "SSL connection: each connection is transient , and associated with one session.  SSL session: Association b/w the client and the server wikipedia  NetAdmin", 
            "title": "SSL Architecture"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ssl-record-portocol", 
            "text": "Confidentiality with Handshake protocol to ensure that no one intercept in the pipeline, encrypt the data with secret key.  Message integrity: With a shared secret key to ensure the MAC code\nsuch that we may check whether the data has been modified or not.", 
            "title": "SSL Record Portocol"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pre-master-master-secret-private-shared-session-key", 
            "text": "Pre master key: Allow for the uniform format of the master key.(Aim for the greater consistency)  Master key is the agreement of both endpoint, master_secret = PRF(pre_master secret, \"master secret\"(aims for tag of current thing), Client ran + Server ran (or the Alice ran add up with the Bob ran)) Check here", 
            "title": "Pre master, master secret, private, shared / session key"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#cryptographic-computations", 
            "text": "", 
            "title": "Cryptographic Computations"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#tls-https-http-ssltls-http-under-a-secure-transport-layer", 
            "text": "Port 443 will be used since it invokes the SSL  The normal HTTP close we just need HTTP close, while the HTTPS we need the TLS which involves the underlying TCP connection.  TLS requires the two entity of TCP in both client and server side.  TLS should agree and exchange the closure alerts before closing connection.", 
            "title": "TLS, HTTPS = HTTP + SSL/TLS HTTP under a secure transport layer"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ssh", 
            "text": "Cryptographic network protocol  3different protocol: User authentication, Connection and Transport Layer Protocol  Using the asymmetric encryption for user authentication(identify the private key of the user ti ensure the user is really him).  Authentication method  Package spec", 
            "title": "SSH"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ssh-channel-types", 
            "text": "Including Session (Remotely execute a command such like ssh  ), X11 , Forwarded TCPIP(Remote Port Forwarding) Direct(Local PF)", 
            "title": "SSH Channel types"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#port-forwarding", 
            "text": "SSHPF   Useful features of SSH  Insecure TCP -  SSH (Change the port from TCP to SSH)  SSH force the traffic in the TCP change to the SSH layer.   Local vs Remote PF   Local vs Remote ??\n1.Local \u81ea\u5df1\u9023\u5411\u66f4\u9060\u7aef\u7684\u4f3a\u670d\u5668\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u81ea\u5df1\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u9060\u7aefremote server\u7684b\u57e0\uff0c\u85c9\u7531remote server\u50b3\u5230\u66f4\u9060\u7aef\u7684faraway host \n2.Remote \u7576\u9060\u7aef\u4f3a\u670d\u5668\u60f3\u8981\u9023\u56de\u4f86\u6642\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u9060\u7aef\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u6211\u9019\u7aeflocal server\u7684b\u57e0\uff0c\u85c9\u7531local server\u9023\u5411\u6211\u4e00\u65c1\u7684near host", 
            "title": "Port Forwarding"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch7-wireless-security", 
            "text": "Wireless devices are tend to have higher security risks than others since the following factors: Channel, Mobility, Resources, Accessibility.  Common Wireless Network Threats: Accidental association, Malicious association, AD-HOC Networks, Identity theft(MAC Spoofing), MITM attack, DoS, Network injection.", 
            "title": "Ch.7 Wireless Security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#protect-against-wireless-eavesdropping", 
            "text": "Signal hiding(not so practical) and encryption(kind of practical).", 
            "title": "Protect against wireless eavesdropping"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#protect-the-access-point", 
            "text": "Main threat is the unauthorized access to the network.  The 802.1X standard. provides the authentication for device wishing connecting to the LAN/WLAN.", 
            "title": "Protect the access point"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#mobile-device-security", 
            "text": "Major security issues are: Lack of physical\nsecurity controls, Use of untrusted\nmobile devices, Use of untrusted\nnetworks, Use of untrusted\ncontent, Use of applications\ncreated by unknown\nparties, Interaction with\nother systems, Use of location\nservices", 
            "title": "Mobile device security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#80211i-wireless-protocol", 
            "text": "Controlled ports:PDU exchange within LAN b/w supplicant and other systems only if supplicant authorizes such an exchange  Uncontrolled ports: Allows PDU exchange b/w supplicant and other RS regardless the authentication state.  BSS, ESS?  Here", 
            "title": "802.11i Wireless protocol"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#wep-wpa-rsn", 
            "text": "WEP: Use RC4 for encryption, the level of security is unrelated with len of WEP key, \u56e0\u70baRC4\u662fstream cipher\u7684\u4e00\u7a2e\uff0c\u540c\u4e00\u500b\u9470\u5319\u7d55\u4e0d\u80fd\u4f7f\u7528\u4e8c\u6b21\uff0c\u6240\u4ee5\u4f7f\u7528\uff08\u96d6\u7136\u662f\u7528\u660e\u6587\u50b3\u9001\u7684\uff09IV\u7684\u76ee\u7684\u5c31\u662f\u8981\u907f\u514d\u91cd\u8907\uff1b\u7136\u800c24\u4f4d\u5143\u7684IV\u4e26\u6c92\u6709\u9577\u5230\u8db3\u4ee5\u64d4\u4fdd\u5728\u5fd9\u788c\u7684\u7db2\u8def\u4e0a\u4e0d\u6703\u91cd\u8907\uff0c\u800c\u4e14IV\u7684\u4f7f\u7528\u65b9\u5f0f\u4e5f\u4f7f\u5176\u53ef\u80fd\u906d\u53d7\u5230\u95dc\u9023\u5f0f\u9470\u5319\u653b\u64ca, so change to WPA or WPA2 is the safer method\u3002  WPA: Fixed the vulnerability of WEP.", 
            "title": "WEP, WPA, RSN"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#80211i-fourway-handshake-auth", 
            "text": "Here  MIC is the message integrity code to ensure the integrity of the message.  What is the purpose of ANonce and SNonce? As we can see from the 2017mid2 , they are used to generated the PTK for both the STA and AP, also the back SNonce serves like a challenge-response protocol to ensure the freshness and the alive of STA that there is no MITM attack and the same is true for AP.  The GTK is used for decrypting the data of multicast and broadcast traffic, all of the STAs share the same GTK.  GTK is distributed after the pairwise keys that already established (Use PK generated before to enctypt the GTK key )  GTK Changed every time as device leaves network(yes TRANSIENT KEY!)  TK with TKIP or CCMP are used for traffic key(encryption for data transfer phase)\nprovides message integrity and data confidentiality.  HMAC-SHA1 are used to generated nonce, expand pairwise keys and to generate GTK, PTK(transient key)", 
            "title": "802.11i Fourway handshake auth."
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch8-email-security", 
            "text": "", 
            "title": "Ch8. EMAIL Security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pretty-good-privacy", 
            "text": "Provides a confidentiality and authentication service that\ncan be used for electronic mail and file storage applications  PGP also provides the message authentication and the message integrity.  Services\n1.Digital signature: DSS, RSA , SHA \n2.Message encryption: CAST, IDEA, 3DES \n3.Compression: zip \n4.email compatibility: Base64 encryption", 
            "title": "(Pretty Good Privacy)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pgp-authencation", 
            "text": "RSA ensures that only the mail sender signed with the digital sender, encrypt w his/her private key, can be decrypted with his/her public key, thus ensures the identity.  SHA ensures that no one can generated the message with the same hash code", 
            "title": "PGP Authencation"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pgp-confidentiality-and-authentication", 
            "text": "64bits CFB is used, using the block cipher , symmetric encryption.  In PGP, each symmetric key is used only once.(The session key is bound with the message and transmitted.)  Encrypt the sesion key with the receiver's public key.", 
            "title": "PGP Confidentiality and Authentication"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pgp-compression", 
            "text": "PGP compresses the msg after signature but before encryption.  If sign after the compression, then the version of compression will be constrained since different compression leads to different encoding thus different hash result even with the same source data.", 
            "title": "PGP Compression"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pgp-e-mail-compatibility", 
            "text": "Radix64(B64) encoding to convert them into printable ASCII chars.  Append the CRC to protect the transmission error.", 
            "title": "PGP E-mail Compatibility"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#smime", 
            "text": "Security enhancement for the MIME  Another standard besides PGP", 
            "title": "S/MIME"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#mime", 
            "text": "MIME improve from SMTP  5 Headers are defined, to fully describe the email, MIME-ver, content type, content-transfer encoding, content-ID, content description.", 
            "title": "MIME"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#smime-functionality", 
            "text": "Enveloped data: encrypted content of any type  and\nencrypted content encryption keys  for one or\nmore recipients.  Signed data, message digest of content and digital signature with the private key of the signer.  Recipient without S/MIME compatibility are unable to view the data  Clear-signed data: Only the digital signature is encoded using\nbase64  recipients without S/MIME\ncapability can view the message content,\nalthough they cannot verify the signature", 
            "title": "S/MIME  Functionality"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#cryptographic-algorithms-used-in-smime", 
            "text": "Smime secures the MIME with a signature ,encryption, or both  Clear signing does not involve transforming the message to be signed.", 
            "title": "Cryptographic algorithms used in S/MIME"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#smime-certificate-processing", 
            "text": "Managers and/or users must configure each client with a list of trusted keys and with certificate revocation lists. Local wil maintaining the certs needed\nto verify incoming signatures and to encrypt outgoing messages.(MACV\u4eba\u7684\u8b49\u66f8\u4f86\u6aa2\u9a57\u5225\u4eba\u7684\u6578\u4f4d\u7c3d\u6709\u4ee5\u53ca\u8981\u7528\u81ea\u5df1\u7684\u8b49\u66f8\u4f86\u70ba  \u81ea\u5df1\u7684\u8a0a\u606f\u52a0\u5bc6\uff0c\u4ee5\u53ca\u7c3d\u7f72\u3002)", 
            "title": "S/MIME Certificate Processing"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#dkim", 
            "text": "cryptographically signing e-mail messages, permitting a signing domain t()o claim responsibility for a message in the mail stream YouTube", 
            "title": "DKIM"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2nd-midterm-note", 
            "text": "", 
            "title": "2nd midterm note"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2014mid2", 
            "text": "\u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X    \u5728\u6bcf\u4e00\u500bSSL session\u548ccinnection\u4e2d \u4ed6\u5011\u7684\u53c3\u6578\u6703\u5f7c\u6b64\u4e92\u76f8\u5206\u4eab\uff0c\u4f8b\u5982\u52a0\u5bc6\u65b9\u6cd5\u8207\u79d8\u9470\u5319\u9577\u5ea6\uff0csession \u548cconenction\u4ed6\u5011\u7684\u5dee\u5225\u5728\u65bc:SSL session\u8207SSL connection\u662f\u4e0d\u540c\u7684\u6982\u5ff5\u3002 SSL session\u6307\u7684\u662f\u901a\u904e\u63e1\u624b\u800c\u7522\u751f\u7684\u4e00\u4e9b\u53c3\u6578\u548c\u52a0\u5bc6\u79d8\u9470\u7684\u96c6\u5408\uff1b\u7136\u800cSSL connection\u662f\u6307\u5229\u7528\u67d0\u500bsession\u5efa\u7acb\u8d77\u4f86\u7684\u6d3b\u52d5\u7684\u6703\u8a71\u3002\u63db\u53e5\u8a71\u4f86\u8aaa\uff0cconnection\u662f\u6703\u8a71\u7684\u9032\u7a0b\uff0c\u800csession\u662f\u5efa\u7acb\u9019\u500b\u6703\u8a71\u6240\u9700\u8981\u7684\u4e00\u4e9b\u53c3\u6578\u3002   (\u4fee\u6b63\u904e!)SSL\u4e2d \u52a0\u5bc6\u3001MAC\u3001\u58d3\u7e2e\u53ef\u80fd\u7684\u9806\u5e8f\u6709\u516d\u7a2e\uff0c\u4f46\u5176\u4e2d\u5408\u7406\u7684\u53ef\u80fd \u53ea\u6709\u52a0\u5bc6\u5728\u58d3\u7e2e\u4e4b\u5f8c!(\u58d3\u7e2e\u524d\u5c31\u52a0\u5bc6\uff0c\u56e0\u70ba\u8cc7\u6599\u5df2\u7d93\u8b8a\u6210\u7955\u6587\uff0c\u6709\u53ef\u80fd\u58d3\u7e2e\u6703ERROR)  WEP\u7684\u7f3a\u9ede\u5c31\u662f \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587\uff0c\u52a0\u4e0aRC4\u662f\u4e00\u7a2estream cipher\u6a21\u5f0f\uff0c\u9700\u8981\u5920\u9577\u7684key\uff0c\u4f46WEP\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907)  PMK PTK(\u66ab\u614b) KCK(EAP confirmation\uff0c\u7528\u4f86\u4fdd\u969c\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u5354\u5b9a\u9470\u5319\u4ea4\u63db\u7684\u5b8c\u6574\u6027)+KEK(EAP encryption, \u7528\u4f86\u4fdd\u8b49\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u4e2dGTK\u3001RSN IE \u7684\u6a5f\u5bc6\u6027\uff0c\u5c31\u662f\u78ba\u4fdd\u9019\u500b\u9470\u5319\u4e0d\u4e0d\u6703\u88ab\u76dc\u7528)+TK(traffic encryption, user traffic \u7684\u6a5f\u5bc6\u6027\u8207\u5b8c\u6574\u6027\uff0c\u5728\u7528\u6236\u548c\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u8cc7\u6599\u52a0\u5bc6)  WPA\u52a0\u5bc6\u76844\u8def\u4ea4\u4e92\u5354\u5b9a\uff0c\u56e0\u70ba\u6709 SNonce \u548c ANonce \u7528\u4f86\u7d44\u6210TK\uff0c\u6545\u80fd\u78ba\u4fddfreshness \u66f4\u8a73\u7d30\u8acb\u9ede\u6b64  2014\u6700\u5f8c\u4e00\u984c\uff0c\u5982\u679c\u662f\u7528\u90f5\u4ef6\u7684\u672c\u8eab\u5167\u5bb9\u4f86\u52a0\u5bc6\uff0c\u800c\u4e26\u975e\u90f5\u4ef6\u7684\u96dc\u6e4a\u6578\u503c\u52a0\u5bc6\u4f9d\u7136\u53ef\u7a31\u4f5c\u7c3d\u7ae0\uff0c\u4f46\u662f\u6548\u679c\u76f8\u7576\u5dee\uff0c\u56e0\u70ba\u662f\u6574\u4efd\u90f5\u4ef6\uff0c\u8a08\u7b97\u91cf\u592a\u5927\u4e86\uff0c\u52a0\u4e0a\u56e0\u70ba\u662f\u7528\u5bc4\u4ef6\u4eba\u7684\u79c1\u9470\u52a0\u5bc6\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u7528\u5bc4\u4ef6\u4eba\u7684\u516c\u9470\u6253\u958b\uff0c\u518d\u52a0\u4e0a\u96a8\u4fbf\u4e82\u8aaa\u89e3\u5bc6\u524d\u7684\u6771\u897f\u5c31\u662f\u7c3d\u7ae0\u4fbf\u6703\u9020\u6210\u98a8\u96aa", 
            "title": "2014mid2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2015mid2", 
            "text": "EAP\u652f\u6301\u7684\u65b9\u6cd5\u6709EAP-TLS, MD5, POTP, PSK , PWD, TTLS, IKEV2, FAST, SIM, AKA, GTC EKE  \u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u539f\u56e0\u5728\u65bcuncontrolled\u7684\u7aef\u672b\u53ef\u8b93AS\u548cSTATION\u6e9d\u901a\uff0c\u4e0d\u8ad6\u72c0\u614b\uff0c\u4f46\u662fcontrolled\u9700\u8981\u8a8d\u8b49\u904e\u5f8c\u624d\u884c\uff0c\u56e0\u6b64\u5728\u4e00\u525b\u958b\u59cb\u7684\u6642\u5019\u4e26\u4e0d\u9069\u7528(\u4e00\u525b\u958b\u59cb\u4e00\u5b9a\u662f\u9084\u6c92\u6709\u8a8d\u8b49\u904e\u7684\u72c0\u614b)\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X  WEP by RC4, WPA by RC4 and TKIP, RSN by AES CCM CCMP  ch8 12\u7684\u5716\u8981\u591a\u770b!", 
            "title": "2015mid2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2016mid2", 
            "text": "WEP WPA TKIP all use RC4", 
            "title": "2016mid2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_1", 
            "text": "11   A(O)SNonce ANonce\nB(X)\u61c9\u8a72\u662fTK(?)\nC(O)\u7528Nonce\nD(O) E(X)\u61c9\u70baAP   TA:\nB: (O) \u662f\u5229\u7528 PMK \u4f86\u52a0\u5bc6\u3002 (\u61c9\u8a72\u9084\u662fTK  \u52a9\u6559\u53ef\u80fd\u7d66\u932f)\nhandshake \u4e26\u6c92\u6709\u63d0\u4f9b authentication \u7684\u529f\u80fd\uff0c\u6240\u4ee5 D\u3001E \u61c9\u8a72\u90fd\u662f\u932f\u7684\u3002\u4f60\u7684\u5176\u4ed6\u7b54\u6848\u90fd\u662f\u5c0d\u7684\u3002    12   A:\u5c0d\uff0c\u56e0\u70ba\u6709Nonce\u7d44\u6210TK\uff0c\nB:\u61c9\u8a72\u5c0d\uff0c\u5427? \u4f46\u662fGROUP KEY\u63d0\u5230\u5982\u679c\u6709\u4e00\u500b\u88dd\u7f6e\u96e2\u958b\u4e86\uff0c\u5c31\u6703\u8b8a\u66f4\uff0c\nC:\u6c92\u6709\uff0c\u5427? \u56e0\u70ba\u4ed6\u662f\u63a1\u7528RC4stream cipher\uff0cKEY\u6703\u4e00\u76f4\u8b8a \nD: TKIP\u4e5f\u662f\u63a1\u7528RC4\u7684stream cipher \u6240\u4ee5KEY\u6703\u4e00\u76f4\u8b8a   TA: \nWEP key \u90fd\u662f\u56fa\u5b9a\uff0cIV \u624d\u6703\u4e00\u76f4\u6539\u8b8a\u3002  A: No. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab\nB: Yes. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab\nC: No. data packet \u662f\u7528 RC4(IV,WEP key) \u7522\u751f\u7684 key \u52a0\u5bc6\uff0cIV\u6703\u4e00\u76f4\u6539\u8b8a\u56e0\u6b64\u7522\u751f\u7684 key \u4e5f\u6703\u4e00\u76f4\u8b8a\u3002\nD: No. \u7406\u7531\u540c\u4e0a\u3002    13   A: a--noncea b b--nonceb a one way 2times, 2 way four times??\nC: both\u5427?, replay attack\u6c92\u6709\u7528\u56e0\u70ba\u6703\u6709nonce\u78ba\u4fdd\u4fe1\u606f\u662f\u6700\u65b0\u7684   TA:\nA: one way 2 times, two way 3 times\nC: both", 
            "title": "\u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2017mid2", 
            "text": "", 
            "title": "2017mid2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_2", 
            "text": "5   \u5168\u90e8   TA: \u4f60\u662f\u5c0d\u7684    6   a,b,c,d,e,f,g,h   TA: \u4f60\u662f\u5c0d\u7684    7\n(i) \u7528\u4f86\u7522\u751fPTK   (ii)\u56e0\u70ba\u9031\u671f\u6027\u7684\u8a2d\u5b9a\u70ba0\uff0c\u90a3\u9ebc\u540c\u6a23\u70ba0\u7684\u5169\u500bnonce\u6709\u53ef\u80fd\u4ee3\u8868\u4e0d\u540c\u7684\u6642\u9593\u9ede\uff0c\u6240\u4ee5\u5bb9\u6613\u906d\u53d7replay attack   TA: \u4f60\u662f\u5c0d\u7684    8\n(i) WEP key\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907)   (ii) \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587   TA:\n(i) \u6b63\u78ba\u4f86\u8aaa WEP key \u662f\u56fa\u5b9a\u7684\uff0cIV \u662f 24bits \u4e26\u4e14\u6703\u96a8\u6642\u6539\u8b8a\u3002\u5f31\u9ede\u7684\u78ba\u662f\u5bb9\u6613\u91cd\u8907\u3002\n(ii) \u56e0\u6b64\u7576\u627e\u5230 IV \u91cd\u8907\u7684\u60c5\u6cc1\u6642\uff0c\u5169\u500b\u52a0\u5bc6\u7684\u5c01\u5305(C1,C2)\u6703\u9020\u6210 =  C1 xor C2 = P1 xor P2, \u4e4b\u5f8c\u4fbf\u53ef\u7528frequency analysis \u7834\u89e3\u51fa\u660e\u6587\u3002", 
            "title": "\u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch9-ip-security", 
            "text": "", 
            "title": "Ch9. IP Security"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_3", 
            "text": "\u5728\u7db2\u8def\u5c64(OSI \u7b2c\u4e09\u5c64\uff0c\u4ecb\u65bcDATA LINK\u5c64\u548c\u50b3\u8f38\u5c64\u4e4b\u9593)\u7684\u5b89\u5168\u6a5f\u5236  \u9700\u8981\u80fd\u78ba\u4fdd\u5169\u4ef6\u4e8b  \u7db2\u8def\u88dd\u7f6e\u80fd\u9060\u96e2\u672a\u8207\u63a7\u5236\u7db2\u8def\u6d41\u91cf  end to end user \u6d41\u91cf\u8ffd\u8e64\u5c07\u4f7f\u7528\u8a8d\u8b49\u8207\u52a0\u5bc6\u6a5f\u5236\u4f86\u78ba\u4fdd\u5b89\u5168", 
            "title": "\u6982\u5ff5"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ipsec", 
            "text": "\u78ba\u4fdd\u5728LAN\uff0c\u516c\u53f8\u5b89\u5168\n\u5728\u7db2\u8def\u4e0a\u9060\u7aef\u9023\u7d50\u7684\u5b89\u5168  \u5efa\u7acb\u8207\u5925\u4f34\u7684\u5167\u5916\u7db2\u9023\u7d50\u6a5f\u5236  \u5efa\u7acb\u96fb\u5b50\u5546\u52d9\u76f8\u95dc\u7684\u5b89\u5168\u6a5f\u5236    \u80fd\u78ba\u4fdd\u5728IP\u5c64\u7684\u6d41\u91cf\u5b89\u5168\uff0c\u53ca\u8a8d\u8b49( can encrypt and/or authenticate all traffic at the IP level)  \u597d\u8655:  \u5982\u679c\u5c07IPSEC\u653e\u5728\u9632\u706b\u7246\uff0c\u90a3\u9ebc\u6240\u6709\u6d41\u904e\u4ed6\u7684\u6d41\u91cf\u90fd\u53ef\u4ee5\u88ab\u5b89\u5168\u7684\u4fdd\u8b77\uff0c\u4e14\u516c\u53f8\u6216\u5de5\u4f5c\u7fa4\u7d44\u5167\u7684\u6d41\u91cf\u4e5f\u4e0d\u6703\u56e0\u6b64\u800c\u7522\u751f\u8ca0\u64d4  \u5982\u679c\u6240\u6709\u7684\u5916\u4f86\u8a0a\u606f\u90fd\u5fc5\u9808\u4f7f\u7528IP\uff0c\u800c\u9632\u706b\u7246\u662f\u7db2\u969b\u7db2\u8def\u9032\u5165\u5167\u90e8\u7684\u552f\u4e00\u7ba1\u9053\u6642\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\u6703\u6709\u8b93\u904e\u9632\u706b\u7246IPSec\u7684\u9014\u5f91(IPSec\u4e00\u5b9a\u6703\u64cb\u4e0b\u4f86)  IPSEC\u5c0d\u65bc\u4e0a\u5c64\u662f\u770b\u4e0d\u5230\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u8005\u4e0d\u9700\u8981\u91cd\u65b0\u8abf\u6574\u8a2d\u5b9a\u3002  \u53ef\u4ee5\u63d0\u4f9b\u7d66\u500b\u4eba\u5b89\u5168\uff0c\u6216\u662f\u7279\u5b9a\u4f7f\u7528\u8005(\u56e0\u70ba\u4f7f\u7528\u8005\u6703\u6709\u81ea\u5df1\u7684IP\uff0c\u56e0\u6b64\u6211\u5011\u80fd\u900f\u904e\u5206\u914d\u7279\u5b9a\u7684IP\u5230\u7279\u5b9a\u7684IPSEC\u7d66\u4ed6\u5b89\u5168\u6a5f\u5236) \u4f8b\u5982\u6709\u500b\u4eba\u7684\u865b\u64ec\u7db2\u8def\u6216\u662f\u5728\u5927\u4f01\u696d\u5e95\u4e0b\u7684\u5b50\u7db2\u8def\u5c31\u80fd\u6d3e\u4e0a\u7528\u5834\u3002", 
            "title": "IPSEC\u7684\u61c9\u7528"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_4", 
            "text": "IPSEC \u80fd\u78ba\u4fdd\u4ee5\u4e0b\u56db\u9805  \u8def\u7531\u5ee3\u64ad\u4f86\u81ea\u6388\u6b0a\u904e\u7684\u8def\u7531\u5668(from authorized router)  A router seeking to establish or maintain a neighbor relationship with a router in another routing domain is an authorized router(\u4fdd\u8b49\u76f8\u9130\u7684\u8def\u7531\u5668\u4e5f\u662f\u7d93\u904e\u6388\u6b0a\u7684)  \u80fd\u627e\u5230\u6700\u521d\u59cb\u767cIP\u5c01\u5305\u7684router (A redirect message comes from the router to which the initial IP packet was sent )  \u8def\u7531\u66f4\u65b0(routing update)\u4e0d\u6703\u88ab\u507d\u9020", 
            "title": "\u8def\u7531\u65b9\u9762\u7684\u61c9\u7528"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ipsec_1", 
            "text": "\u592a\u591a\u4e86 \u81ea\u5df1\u770b", 
            "title": "IPSEC\u4e2d\u7684\u8cc7\u6599"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ipsec_2", 
            "text": "\u8981\u80fd\u78ba\u4fdd\u4ee5\u4e0b\u529f\u80fd\u53ef\u4ee5\u88ab\u5be6\u65bd\uff0c\u8b6c\u5982  \u5b58\u53d6\u63a7\u5236(Access Control)  \u7121\u9023\u7dda\u5b8c\u6574\u6027(Connection-LESS integrity)  \u8cc7\u6599\u4f86\u6e90\u8a8d\u8b49(Data origin authentication)\uff0c\u8a8d\u8b49IP\u5c01\u5305\uff0c\u78ba\u4fdd\u771f\u7684\u662f\u7531\u4ed6\u50b3\u904e\u4f86\u7684\uff0c\u4ee5\u53ca\u662f\u5426\u88ab\u4fee\u6539\u904e  \u62d2\u7d55\u91cd\u64ad\u653b\u64ca(\u53ef\u4ee5\u7528sequenct number\u4f86\u9810\u9632 \u4e4b\u5f8c\u6703\u63d0\u5230)  \u9650\u5236\u6d41\u91cf\u7684\u6a5f\u5bc6\u6027(Limited traffic flow confidentiality)", 
            "title": "IPSEC\u6240\u63d0\u4f9b\u7684\u670d\u52d9"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#transport-mode-tunnel-mode", 
            "text": "\u5176\u5dee\u5225\u5728\u65bc\u8cc7\u6599\u5c01\u88dd\u7684\u4e0d\u540c(\u5c01\u88dd\u6a5f\u5236\u7684\u4e0d\u540c)      \u5dee\u7570\u9805\u76ee  transport mode  tunnel mode      \u4fdd\u8b77\u9805\u76ee  upper layer protocols  entier IP packet    \u4fdd\u8b77\u5c0d\u8c61  host-to-host encapsulation(Encryption), authentication(Auth Header)  gateway-to-gateway(or host)    \u6a5f\u5236  \u5728\u539f\u6709\u7684IP\u6295\u4e2d\u63d2\u5165\u9069\u7576\u7684IPSEC Header\uff0c\u8cc7\u6599\u64f4\u5145\u91cf\u8f03\u70ba\u5c11\uff0c\u4f46\u662f\u6bcf\u4e00\u500b\u4e3b\u6a5f\u90fd\u8981\u6642\u505aIPSEC\u624d\u53ef\u4ee5\uff0c\u6bd4\u8f03\u5c0d\u65bc\u7528\u6236\u4e0d\u65b9\u4fbf  \u76f4\u63a5\u5728\u5916\u5305\u4e00\u500b\u65b0\u7684IP\u982d(src \u81ea\u5df1\u3001dst \u9060\u7aef\uff0c\u8b02\u4e4bnew ip header)\u4ee5\u53ca\u7aef\u53e3\uff0c\u4f46\u5728\u500b\u4eba\u96fb\u8166\u8edf\u9ad4\u4e0d\u9700\u8981\u65b0\u7a31\u6642\u505aIPSEC\uff0c\u53ea\u8981\u5728\u8def\u7531\u5668\u4e0a\u9762\u6709\u5373\u53ef\uff0c\u4f7f\u4e0d\u540c\u7684\u5340\u57df\u7db2\u8def\u9023\u7dda\u9593\u7528IPSEC\uff0c\u5373\u6709\u5b89\u5168\u7684VPN\u9023\u7dda", 
            "title": "\u5169\u7a2e\u6a21\u5f0f transport mode \u6216\u662f tunnel mode"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#security-association", 
            "text": "def: \u5728\u5169\u500b\u7db2\u8def\u5be6\u9ad4\u4e4b\u9593\uff0c\u6240\u5efa\u7acb\u8d77\u7684\u5171\u4eab\u7db2\u8def\u5b89\u5168\u5c6c\u6027\u3002(\u4ecb\u65bc\u767c\u9001\u8005\u8207\u63a5\u6536\u8005\u4e4b\u9593\u7684\u55ae\u5411\u95dc\u4fc2)   ex: \u5728IP\u5c01\u5305\u4e2d\uff0c\u4ee5\u9418\u9ede\u5730\u5740\u7684IPV4 V6\u5c01\u5305\u4e2d\u7684SPI\u8cc7\u8a0a\u4f5c\u70ba\u5b89\u5168\u95dc\u806f\u7684\u5b9a\u7fa9(SPI \u5b89\u5168\u53c3\u6578 in the enclosed extension header)    \u5169\u500b\u91cd\u8981\u7684\u6771\u897f\u4f86\u78ba\u4fdd\u5b89\u5168\u95dc\u806f\u7684\u904b\u4f5c   \u5b89\u5168\u95dc\u806f\u8cc7\u6599\u5eab(SAD): \u5b9a\u7fa9\u6bcf\u4e00\u500bSA\u7684\u53c3\u6578(\u4ea6\u5373IPSEC\u6a19\u982d(AH\u6216\u662fESP)\u4e2dSPI\u7684\u6578\u503c)\uff0c\u8209\u51e1\u53c3\u6578\u865f\uff0c\u5e8f\u865f(seq number counter \u9632\u6b62\u91cd\u653e\u653b\u64ca), \u5e8f\u865f\u6ea2\u51fa\u6a19\u793a(seq number counter overflow), \u9632\u91cd\u653e\u653b\u64ca\u8996\u7a97(anti replay window), AH\u3001ESP information, \u6709\u6548\u6642\u9593(SA lifetime), \u5354\u8b70\u6a21\u5f0f(IPSEC protocol mode), \u9019\u689d\u8def\u4e0a\u6700\u5927\u50b3\u8f38\u55ae\u5143(path MTU)  \u5b89\u5168\u653f\u7b56\u8cc7\u6599\u5eab(SPD): \u5b58\u653eIPSEC\u7684\u898f\u5247\uff0c\u7528\u4f86\u5b9a\u7fa9\u90a3\u4e9b\u6d41\u91cf\u8981\u8d70IPSEC\uff08a table\uff09    Ipsec \u7684SPD\u548cSAD\u8be6\u89e3 - CSDN\u535a\u5ba2  \u8207\u642d\u914d\u8ab2\u672c\u7684\u5716\u8868\u4e00\u8d77\u770b\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u5728SPD\u4e2d\u67e5\u5230\u6709\u76f8\u7b26\u7684\u4f86\u6e90\u8207\u76ee\u7684\u4ee5\u53ca\u7aef\u53e3\u5f8c\uff0c\u5c31\u53ef\u4ee5\u5957\u7528\u5176\u4e2dSPD\u7684\u898f\u5247\uff0c\u4e5f\u5c31\u662f\u7db2\u5740\u4e2d\u7684\u57f7\u884c\u5354\u8b70\u6216\u662fpdf\u4e2d\u7684action\u3002  \u82f1\u6587\u55ae\u5b57: outbound: \u9001\u53bb\u5916\u9762\u3001\u5411\u5916\u767c\u9001\u7684\uff1binbound: \u9001\u53bb\u88e1\u9762\uff0c\u5411\u5167\u9001\u7684   \u4ee5\u4e0b\u70ba\u6d41\u7a0b\u5716\u5169\u5f35     ESP\u8a73\u7d30\u89e3\u91cb   \u5728tunnel mode\u4e2d\u6703\u6709\u4e00\u500b\u65b0\u7684ip header(new ip header)", 
            "title": "\u5b89\u5168\u95dc\u806f(Security Association)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_5", 
            "text": "\u5229\u7528\u8996\u7a97\u7684\u6a5f\u5236\uff0c\u5c31\u50cf\u5728\u8a08\u7b97\u6a5f\u7db2\u8def\u6982\u8ad6\u6240\u5b78\u5230\u7684\uff0c\u7576\u6536\u5230\u4e00\u500b\u5c01\u5305\u5f8c\u5c31\u5c07\u8996\u7a97\u5411\u524d\u79fb\uff0c\u7528bool\u8868\u793a\u6709\u6c92\u6709\u6536\u5230\uff0c\u6536\u5230\u524d\u4e00\u5f8c\u525b\u624d\u7684\u5730\u65b9\u5c31\u4e0d\u80fd\u518d\u5ea6\u63a5\u6536\u4e86(\u56e0\u70ba\u8996\u7a97\u5df2\u7d93\u96e2\u958b\u4e86\u90a3\u500b\u7bc4\u570d) \u56e0\u6b64\u80fd\u9632\u6b62\u91cd\u653e\u653b\u64ca", 
            "title": "\u9632\u6b62\u91cd\u653e\u653b\u64ca"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#sa", 
            "text": "\u55ae\u4e00\u7684SA\u53ea\u80fdAH\u6216\u662fESP\u4f46\u4e0d\u80fd\u540c\u6642\u6709\u6578\u7a2e  \u540d\u8a5e\u89e3\u91cb: security assocation bundle(SA\u6346\u5305(?))\uff0c\u4e00\u9023\u4e32\u7684SA\u4f7f\u6d41\u91cf\u901a\u904e\u4f86\u9054\u6210\u60f3\u8981\u7684IPSEC\u670d\u52d9\u3002 \u4e0d\u540c\u7684SA\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u7aef\u9ede\u7d50\u675f\uff0c\u4e5f\u53ef\u4ee5\u5728\u540c\u500b\u3002  \u6709\u5169\u7a2e\u65b9\u6cd5  \u50b3\u8f38\u76f8\u9130(transport adjacency) : \u4ee5\u4e0d\u7528\u5230\u96a7\u9053\u7684\u65b9\u5f0f(?)\u4f86\u5be6\u4f5c\u6bd4\u4e00\u5c64\u6a5f\u5236\u9084\u591a\u7684\u4fdd\u8b77\u5c64\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u5c64\u7684\u5b89\u5168\u6a5f\u5236\u7684\u7d50\u5408(allow only for one level of combination)\u3002  \u8fed\u4ee3\u96a7\u9053(iterated tunneling) : \u4f7f\u7528\u96a7\u9053\u4f86\u6642\u505a\u591a\u5c64\u4fdd\u8b77\u6a5f\u5236\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u53ef\u4ee5\u6709\u5de2\u72c0\u7684\u5b89\u5168\u6a5f\u5236\u7d50\u5408\u3002", 
            "title": "\u7d50\u5408\u6578\u500bSA"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#esp-wiht-authentication", 
            "text": "transport mode: \u8a8d\u8b49\u5728\u6574\u500bIP payload(\u6307IP\u5c01\u5305\u50b3\u8f38\u771f\u6b63\u7684\u5167\u5bb9\u3001\u8cc7\u6599\u672c\u8eab)\uff0c\u4f46\u662fIP\u7684\u982d\u4e26\u6c92\u6709\u88ab\u4fdd\u8b77\u3002  tunnel mode: auth\u5728\u76ee\u7684\u5730\u624d\u6709\uff0c\u6574\u500bIP\u5c01\u5305\u90fd\u88ab\u4fdd\u8b77  \u5169\u500b\u6a21\u5f0f\u90fd\u662f\u5c0d\u7955\u6587\u8a8d\u8b49\uff0c\u4e26\u975e\u660e\u6587", 
            "title": "ESP wiht authentication\u5728\u5169\u7a2e\u6a21\u5f0f\u4e0b\u7684\u60c5\u6cc1"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#transport-adjacency", 
            "text": "def: \u5167ESP SA\u5916AH SA\u7684\u8907\u5408\u578b\u8a8d\u8b49\u6a5f\u5236\u3002  \u6b64\u8655\u7684ESP\u6c92\u6709\u8a8d\u8b49  \u52a0\u5bc6IP\u7684\u8cc7\u6599(payload)  AH\u5247\u662f\u7528\u5728\u50b3\u8f38\u6a21\u5f0f(transport mode)\uff0c  (\u53ef\u80fd\u8003):\u512a\u02c7\u9ede\u5c31\u662f\uff0c\u8a8d\u8b49\u8f03\u591a\u7684field\uff1b\u7f3a\u9ede\u5c31\u662f\uff0c\u6709\u5169\u500bSA\u53ef\u80fdoverhead\u591a\u4e86\u4e9b\uff0c\u6548\u80fd\u964d\u4f4e\uff0c\u9019\u4e5f\u662f\u4e00\u500btrade off  \u5148\u52a0\u5bc6(\u5167ESP)\u518d\u8a8d\u8b49(\u5916AH)(\u4e0b\u9762\u90a3\u500b\u4e8b\u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u539f\u56e0\u4e4b\u5f8c\u8a73\u8ff0)", 
            "title": "\u50b3\u8f38\u76f8\u9130(transport adjacency)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#transport-tunnel-bundle", 
            "text": "def: \u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u63a1\u7528\u5167AH transport SA, \u5916ESP tunnel SA\uff0c\u6709\u4e9b\u539f\u56e0\u5982\u4e0b  \u7ac4\u6539\u8cc7\u6599\u7d93\u7531\u9a57\u8b49\u4e00\u5b9a\u6703\u767c\u73fe\uff0c\u6545\u4e0d\u53ef\u80fd\uff0c\u6240\u4ee5\u4e5f\u4e0d\u9700\u8981\u5148\u52a0\u5bc6\uff0c\u5148\u8a8d\u8b49\u5c31\u597d\u4e86(\u5982\u679c\u6709\u4eba\u6514\u622a\u4e26\u4fee\u6539\u9a57\u8b49\u7684\u8cc7\u6599\u4e00\u5b9a\u6703\u88ab\u767c\u73fe)  \u5148\u8a8d\u8b49\u5f8c\u5c31\u53ef\u4ee5\u628a\u8a8d\u8b49\u8cc7\u8a0a\u5b58\u5728\u76ee\u7684\u7aef(destination)\uff0c\u63d0\u4f9b\u5c07\u4f86\u8b58\u5225\u7528\n   C * \u7d50\u679c\u5c31\u662f\u6574\u500b\u8a8d\u8b49\u7684inner packet\u90fd\u88ab\u52a0\u5bc6\u4e86\uff0c\u800c\u4e14\u9084\u9644\u4e0a\u4e86\u65b0\u7684ItP\u982d C", 
            "title": "\u50b3\u8f38\u8207\u96a7\u9053\u8907\u5408(transport-tunnel bundle)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#internet-key-exchange-ike", 
            "text": "\u6709IPSEC SA\u4e5f\u6709 IKE SA \u5169\u500b\u662f\u4e0d\u4e00\u6a23\u7684\u6771\u897f\uff0c\u5169\u968e\u6bb5\u5354\u5546\uff0c\u5148\u5354\u5546\u51fa\u4e00\u500bIKESA \u63a5\u8457\u518d\u524d\u5f80IPSEC SA  \u95dc\u9375\u7684\u5169\u500b\u8981\u7d20: \u9470\u5319\u6c7a\u8b70(key determination) \u548c \u9470\u5319\u5206\u767c(key distribution)\u901a\u5e38 \u56db\u500b\u9470\u5319\u5728\u5169\u500b\u61c9\u7528\u7a0b\u5f0f\u7684\u6e9d\u901a\u9593  \u5354\u5546\u5167\u5bb9  \u52a0\u5bc6\u7b97\u6cd5  hash\u7b97\u6cd5  \u8a8d\u8b49\u65b9\u5f0f  PRF\u7b97\u6cd5(\u7528\u4ee5\u7522\u751f\u52a0\u89e3\u5bc6\u5bc6\u8981)  DH \u9470\u5319\u4ea4\u63db\u7b97\u6cd5\u6848\u53c3\u6578  \u9470\u5319\u9577\u5ea6    \u5169\u7a2e\u9470\u5319\u7ba1\u7406\u8fa6\u6cd5  \u624b\u52d5: \u624b\u52d5\u5c07\u9470\u5319\u914d\u7f6e\uff0c\u9069\u7528\u65bc\u5c0f\u578b\u4e14\u8b8a\u63db\u8f03\u5c11(small and static)\u7684\u74b0\u5883(\u56e0\u70ba\u5982\u679c\u8b8a\u5316\u5f88\u5927\u8981\u4e00\u76f4\u624b\u52d5\u91cd\u65b0\u914d\u7f6e\u76f8\u7576\u9ebb\u7169)  \u81ea\u52d5: \u53ca\u6642\u4f9b\u61c9\u9700\u6c42(on-demand)\u7684\u9470\u5319\u5efa\u7acb(\u9700\u8981\u7684\u6642\u5019\u624d\u62ff)", 
            "title": "\u7db2\u8def\u9470\u5319\u4ea4\u63db(internet key exchange, IKE)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#isakmpoakley", 
            "text": "IPSEC\u7684\u9810\u8a2d\u9470\u5319\u7ba1\u7406\u6a5f\u5236  ISAKMP: \u63d0\u4f9b\u4e00\u500b\u67b6\u69cb(framework)\u4f86\u5efa\u7acb\u5b89\u5168\u95dc\u806f(SA)\u548c\u52a0\u5bc6\u91d1\u9470  OAKLEY: \u4f7fDH\u9470\u5319\u4ea4\u63db\u540c\u6642\u53c8\u80fd\u4fdd\u969c\u5b89\u5168(Oakley\u53ef\u8996\u70ba\u662fDiffie-Hellman\u91d1\u9470\u4ea4\u63db\u6cd5\u7684\u52a0\u5f37\u7248\uff0c\u539f\u7406\u76f8\u540c\u4f46\u63d0\u4f9b\u8f03\u9ad8\u7684\u5b89\u5168\u6027\u3002)\uff0c\u4e5f\u4e0d\u9650\u5236\u7279\u5b9a\u683c\u5f0f( does not dictate specific formats)\uff0c\u63d0\u4f9bprotocal, format\u4f86\u5546\u91cf(negotiate)\u5b89\u5168\u5c6c\u6027(security attribute)\uff0c\u5305\u542b\u4e00\u4e9b\u80fd\u6709\u5404\u5f0f\u5404\u6a23\u7684key exchange algo\u7684\u8a0a\u606f\u96c6\u5408(message set) All the pics , images credits to the original author, I only use it for the education purpose, please DO NOT distribute", 
            "title": "ISAKMP/OAKLEY"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch10-malicious-software", 
            "text": "", 
            "title": "Ch.10 Malicious Software"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_6", 
            "text": "\u5148\u4ee5\u5982\u4f55\u50b3\u64ad\u5206\u985e\uff0c\u518d\u4ee5\u50b3\u64ad\u5230\u76ee\u6a19\u5f8c\u505a\u4ec0\u9ebc\u4f86\u5206\u985e  \u6216\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5206\u985e  \u9700\u4e0d\u9700\u8981\u5bc4\u751f\u65bchost program(\u5bbf\u4e3b)\uff0c\u4f8b\u5982\u75c5\u6bd2\uff1b\u6216\u662f\u53ef\u4ee5\u81ea\u7531\u884c\u52d5\u7684\u5982\u7279\u6d1b\u4f0a\u6728\u99ac\u6216bot\u7a0b\u5f0f  \u4e0d\u6703\u81ea\u6211\u8907\u88fd\uff0c\u4f8b\u5982\u6728\u99ac\u548c\u5783\u573e\u90f5\u4ef6\uff1b\u6703\u81ea\u6211\u5fa9\u81ea\u4f8b\u5982\u8815\u87f2\u548c\u75c5\u6bd2  \u62b5\u9054\u653b\u64ca\u76ee\u6a19\u505a\u4ec0\u9ebc  \u70b8\u6389\u7cfb\u7d71  \u63a7\u5236\u6a5f\u5668\u4f7f\u5176\u6210\u70ba\u6bad\u5c4d\u96fb\u8166  \u7aca\u53d6\u8cc7\u6599  \u92b7\u8072\u533f\u8de1\uff0c\u4ee5\u514d\u88ab\u8ffd\u8e64\u767c\u73fe    \u8907\u5408\u653b\u64ca\u6a21\u5f0f", 
            "title": "\u7c97\u7565\u5206\u985e"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_7", 
            "text": "\u4ee5\u524d\u958b\u767c\u60e1\u610f\u8edf\u9ad4\u7684\u96e3\u5ea6\u9817\u9ad8\uff0c\u4f46\u96a8\u8457\u958b\u767c\u5957\u4ef6\u7684\u666e\u53ca\uff0c\u73fe\u4eca\u5bb9\u6613\u591a\u4e86\uff0c\u5c31\u9023\u4e00\u822c\u7684\u78bc\u8fb2\u4e5f\u90fd\u505a\u5f97\u5230  \u8fd1\u5e74\u4f86\u99ed\u5ba2\u5f9e\u500b\u4eba\u8b8a\u6210\u7d44\u7e54\u7b49\u7d1a\u72af\u7f6a", 
            "title": "\u767c\u5c55\u53f2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_8", 
            "text": "\u4ecb\u7d39  \u4e00\u7a2e\u5bc4\u751f\u6027(parasitic)\u7684\u7a0b\u5f0f\uff0c\u81ea\u6211\u57f7\u884c  \u53ef\u4ee5\u611f\u67d3\u5176\u4ed6\u7a0b\u5f0f\u3001\u57f7\u884c\u6a94\u7b49\u7b49\uff0c\u4e26\u4e14\u6709\u53ef\u80fd\u7ac4\u6539\u4ed6    \u67b6\u69cb  \u611f\u67d3\u6a5f\u5236: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u611f\u67d3\u3001\u50b3\u64ad\uff0c\u6709\u6642\u4e5f\u53eb\u505ainfction vector  \u89f8\u767c: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u88ab\u6253\u958b\uff0c\u6709\u6642\u4e5f\u53eb\u505alogic bomb  payload: \u75c5\u6bd2\u505a\u4e86\u4ec0\u9ebc     \u968e\u6bb5   \u4f11\u7720(dormant): idle\u4e2d\uff0c \u4e0d\u662f\u6240\u6709\u75c5\u6bd2\u90fd\u6709\u9019\u500b\u968e\u6bb5  \u50b3\u64ad(propagation): \u8907\u88fd\u5230\u5176\u4ed6\u7a0b\u5f0f\u3001\u78c1\u5340\u4e2d  \u6fc0\u767c(triggering): \u75c5\u6bd2\u88ab\u555f\u52d5\u4e86  \u57f7\u884c(execution): \u505a\u58de\u4e8b     \u58d3\u7e2e\u75c5\u6bd2(compression virus): \u5c07\u81ea\u5df1\u89e3\u58d3\u7e2e\u9644\u52a0(prepend)\u5230\u5176\u4ed6\u57f7\u884c\u6a94\u4e4b\u4e2d\uff0c\u53ef\u4ee5\u7528\u4f86\u898f\u907fsize checking\u7684\u6383\u6bd2\u65b9\u5f0f", 
            "title": "\u96fb\u8166\u75c5\u6bd2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_9", 
            "text": "\u611f\u67d3\u958b\u6a5f\u78c1\u5340: \u4f8b\u5982MBR  \u611f\u67d3\u6a94\u6848: \u611f\u67d3OS\u3001shell\u7b49\u91cd\u8981\u6a94\u6848  \u5de8\u96c6: \u611f\u67d3\u61c9\u7528\u7a0b\u5f0f\u9700\u8981\u7684macro\uff0c\u5f71\u97ff\u6587\u4ef6\u7684\u4f7f\u7528  \u591a\u89d2\u5ea6: \u591a\u7a2e\u611f\u67d3\u6a21\u5f0f", 
            "title": "\u4ee5\u653b\u64ca\u7684\u76ee\u6a19\u5206\u985e\u75c5\u6bd2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_10", 
            "text": "\u52a0\u5bc6(encryption): \u75c5\u6bd2\u7684\u67d0\u90e8\u5206\u7522\u751f\u52a0\u5bc6\u7684\u9470\u5319\uff0c\u4e26\u52a0\u5bc6\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u800c\u7576\u611f\u67d3\u6210\u529f\u8981\u57f7\u884c\u7684\u6642\u5019\u5c31\u6703\u4f7f\u7528\u7576\u521d\u7684\u9470\u5319\u4f86\u89e3\u5bc6\u75c5\u6bd2\u4e26\u4e14\u57f7\u884c\u4ed6\uff0c\u6b64\u5916\u6bcf\u7576 \u75c5\u6bd2\u7e41\u6b96\u7684\u6642\u5019\u9019\u500b\u52a0\u5bc6\u7684\u9470\u5319\u5c31\u6703\u6539\u8b8a\uff0c\u662f\u6545\u52a0\u5bc6\u7684\u7d50\u679c\u4e5f\u6703\u4e0d\u4e00\u6a23\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u75c5\u6bd2\u7279\u5075\u78bc\u6aa2\u6e2c(no constant bit pattern value)  \u96b1\u533f(stealth): \u4f7f\u9632\u6bd2\u8edf\u9ad4\u7121\u6cd5\u5075\u6e2c\uff0c\u6574\u500b\u505a\u7684\u4e8b\u60c5(payload)\u4ee5\u53ca\u75c5\u6bd2\u672c\u8eab\u90fd\u96b1\u85cf\u3002  \u591a\u578b\u614b(polymorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u56e0\u6b64\u96e3\u4ee5\u7528\u75c5\u6bd2\u7279\u5fb5\u78bc\u4f86\u6aa2\u67e5\u3002  \u7a81\u8b8a(metamorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u6709\u53ef\u80fd\u5c07\u81ea\u5df1\u5168\u90e8\u91cd\u65b0\u6539\u5beb\uff0c\u5305\u542b\u884c\u70ba\u4ee5\u53ca\u6a23\u8c8c\uff0c\u4f7f\u5f97\u96e3\u4ee5\u5075\u6e2c\u3002", 
            "title": "\u4ee5\u75c5\u6bd2\u5982\u4f55\u898f\u907f\u5075\u6e2c\u4f86\u5206\u985e"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_11", 
            "text": "\u5de8\u96c6\u75c5\u6bd2\u53ef\u4ee5 \u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\u7a0b\u5f0f\u78bc  \u56b4\u91cd\u5371\u5bb3\u7684\u539f\u56e0  \u5e73\u53f0\u7121\u95dc\u6027(platform- INDEPENDENT )(\u75c5\u6bd2\u53ef\u4ee5\u8de8\u5e73\u53f0)  \u611f\u67d3\u6587\u4ef6(\u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\uff0c\u4f7f\u6587\u4ef6\u7121\u6cd5\u9806\u5229\u904b\u884c)\uff0c\u800c\u975e\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc  \u9019\u4e9b\u6587\u4ef6\u90fd\u5f88\u5e38\u898b\uff0c\u4f8b\u5982word(\u593e\u5e36\u65bc\u5176\u4e2d)\uff0c\u4f7f\u5176\u6563\u64ad\u5bb9\u6613  \u56e0\u70ba\u662f\u611f\u67d3\u6587\u4ef6\u800c\u975e\u7cfb\u7d71\uff0c\u56e0\u6b64\u8f03\u96e3\u4ee5\u963b\u6b62\u6563\u64ad", 
            "title": "\u5de8\u96c6\u4ee5\u53ca\u8173\u672c\u75c5\u6bd2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_12", 
            "text": "\u4e00\u500b\u6703\u81ea\u5df1\u627e\u6a5f\u5668\u4f86\u611f\u67d3\u7684\u7a0b\u5f0f   \u70ba\u4e86\u8907\u88fd\uff0c\u53ef\u80fd\u6703\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4f86\u63a5\u5230\u9060\u7aef\u6a5f\u5668   \u96fb\u90f5\u3001\u6a94\u6848\u50b3\u8f38  \u9060\u7aef\u57f7\u884c  \u9060\u7aef\u6a94\u6848\u63a5\u89f8(remote file access)  \u9060\u7aef\u767b\u5165(remote login)     \u8815\u87f2\u7684\u904b\u4f5c\u968e\u6bb5\u548c\u75c5\u6bd2\u4e00\u6a23\uff0c\u770b\u4e0a\u65b9\u63d0\u904e\u7684\u5373\u53ef    \u8207\u96fb\u8166\u75c5\u6bd2\u4e0d\u540c\u7684\u662f\uff0c\u96fb\u8166\u8815\u87f2\u4e0d\u9700\u8981\u9644\u5728\u5225\u7684\u7a0b\u5f0f\u5167\uff0c\u53ef\u80fd\u4e0d\u7528\u4f7f\u7528\u8005\u4ecb\u5165\u64cd\u4f5c\u4e5f\u80fd\u81ea\u6211\u8907\u88fd\u6216\u57f7\u884c    \u8815\u87f2\u5982\u4f55\u767c\u73fe\u76ee\u6a19   \u96a8\u6a5f: \u96a8\u6a5f\u611f\u67d3\u4e0d\u540cIP\uff0c\u6703\u9020\u6210\u5f88\u5927\u7684\u7db2\u8def\u6d41\u91cf\uff0c\u5c31\u7b97\u5728\u653b\u64ca\u5c55\u958b\u524d(\u56e0\u70ba\u8981\u4e00\u76f4\u96a8\u6a5f\u627e\u76ee\u6a19\uff0c\u8f03\u70ba\u6df7\u4e82\uff0c\u9817\u5403\u7db2\u8def\u6d41\u91cf\u8cc7\u6e90)  \u76ee\u6a19\u5217\u8868(hit list): \u653b\u64ca\u8005\u5df2\u7d93\u6709\u653b\u64ca\u5217\u8868\uff0c\u63a5\u8457\u6309\u8868\u64cd\u8ab2\uff0c\u56e0\u70ba\u5df2\u7d93\u5148\u5efa\u597d\u653b\u64ca\u5217\u8868\uff0c\u5728scan\u6a5f\u5668\u7684\u6642\u5019\u5c31\u5f88\u5feb\uff0c\u5f88\u96e3\u6293\u51fa\u611f\u67d3\u7279\u5fb5  \u62d3\u6a38\u7684(topological): \u7528\u5df2\u7d93\u611f\u67d3\u7684\u6a5f\u5668\u4f86\u627e\u51fa\u5176\u4ed6\u53ef\u653b\u64ca\u76ee\u6a19  \u5340\u57df\u5b50\u7db2(local subnet):\u5982\u679chost\u662f\u5728\u9632\u706b\u7246\u5f8c\u88ab\u611f\u67d3\u7684\uff0c\u8815\u87f2\u6703\u5229\u7528\u5b50\u7db2\u8def\u7684\u67b6\u69cb\u627e\u4ed6\u7684\u5b50\u7db2\u8def\u7576\u76ee\u6a19     \u8815\u87f2\u7684\u6280\u8853(worm technology)   \u8de8\u5e73\u53f0  \u591a\u653b\u64ca(multi-exploit): \u4ee5\u591a\u7a2e\u7ba1\u9053\u6ef2\u5165\u7cfb\u7d71  \u5feb\u901f\u50b3\u64ad(ultrafast spreading): \u5229\u7528\u5404\u7a2e\u65b9\u6cd5\u52a0\u5feb\u50b3\u64ad\u901f\u5ea6\uff0c\u4f86\u611f\u67d3\u6108\u591a\u4e3b\u6a5f\u6108\u597d  \u591a\u5f62: \u70ba\u4e86\u898f\u907f\u76e3\u6e2c\uff0c\u6bcf\u4e00\u500b\u8907\u88fd\u904e\u7684\u8815\u87f2\u90fd\u6703\u6709\u529f\u80fd\u4e00\u81f4\u4f46\u662f\u65b0\u7684\u7a0b\u5f0f\u78bc\u5167\u5bb9  \u7a81\u8b8a: \u6539\u8b8a\u5916\u89c0\uff0c\u6216\u662f\u5728\u751f\u614b\u968e\u6bb5\u6709\u4e0d\u540c\u7684\u7279\u5fb5  \u4ea4\u901a\u5de5\u5177(transport vehicle): \u56e0\u70ba\u8815\u87f2\u5bb9\u6613\u5927\u91cf\u611f\u67d3\u6a5f\u5668\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f5c\u70ba\u60e1\u610fpayload\u7684\u6563\u4f48\u5de5\u5177", 
            "title": "\u96fb\u8166\u8815\u87f2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#mobile-code", 
            "text": "def: (QQ \u597d\u96e3\u7ffb\u8b6f\uff0c\u76f4\u63a5\u786c\u80cc\u5b9a\u7fa9\u5427): Refers to programs that can be shipped unchanged to a heterogeneous collection of platforms and execute with identical semantics\uff0c\u8de8\u5e73\u53f0\u4f46\u662f\u529f\u80fd\u76f8\u540c\u3002(\u8b93\u7a0b\u5f0f\u53ef\u4ee5\u88dd\u8f09\u5230\u5404\u7a2e\u4e0d\u540c\u7684\u5e73\u53f0\u800c\u4e14\u57f7\u884c\u7684\u76ee\u7684\u901a\u80fd\u76f8\u540c)  \u53ef\u4f5c\u70ba\u6728\u99ac\u3001\u8815\u87f2\u3001\u75c5\u6bd2\u7684\u50b3\u64ad\u6a5f\u5236  \u5e38\u898b\u7684\u653b\u64ca\u624b\u6cd5  cross-site scripting  \u4e92\u52d5\u5f0f\u7db2\u9801(interactive, dynamic web)  email \u9644\u4ef6  \u5f9e\u5947\u602a\u7684\u5730\u65b9\u4e0b\u5947\u602a\u7684\u6587\u4ef6(\u4f8b\u5982\u91d1\u5c71\u6bd2X\uff0c36X\u9632\u6bd2)", 
            "title": "\u884c\u52d5\u7684\u7a0b\u5f0f\u78bc(mobile code)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#driven-by-downloads", 
            "text": "\u653b\u64ca\u8005\u5229\u7528\u7db2\u9801\u7684\u6f0f\u6d1e\uff0c\u8b93\u4f7f\u7528\u8005\u700f\u89bd\u53d7\u63a7\u5236\u7684\u7db2\u9801\u5f8c\uff0c\u4fbf\u53ef\u4ee5\u5e6b\u4f7f\u7528\u8005\u5b89\u88dd\u60e1\u610f\u8edf\u9ad4(\u4f8b\u5982\u90a3\u7a2e\u4e00\u6253\u958b\u5c31\u8df3\u51fa\u6771\u897f\u5e6b\u4f60\u5b89\u88ddhao123\u7684\u7db2\u7ad9)", 
            "title": "\u4e0b\u8f09\u611f\u67d3(driven-by-downloads)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_13", 
            "text": "\u6700\u8fd1\u7684\u5783\u573e\u96fb\u90f5\u5e38\u5e38\u7531\u6bad\u5c4d\u7db2\u8def\u767c\u9001 \u3000\u5783\u573e\u90f5\u7c21\u4e5f\u9069\u5408\u4e58\u8f09\u60e1\u610f\u8edf\u9ad4\n*\u3000\u4e5f\u53ef\u4ee5\u91e3\u9b5a\uff0c\u7db2\u8def\u91e3\u9b5a", 
            "title": "\u5783\u573e\u90f5\u4ef6"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_14", 
            "text": "def(wikipedia): \u7279\u5fb5\u8207\u7279\u6d1b\u4f0a\u6728\u99ac\u4e00\u6a23\u5177\u6709\u507d\u88dd\u6027\uff0c\u8868\u9762\u4e0a\u6c92\u6709\u5371\u5bb3\u3001\u751a\u81f3\u9084\u9644\u6709\u4f7f\u7528\u8005\u9700\u8981\u7684\u529f\u80fd\uff0c\u537b\u6703\u5728\u4f7f\u7528\u8005\u4e0d\u7d93\u610f\u9593\uff0c\u5c0d\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u7522\u751f\u7834\u58de\u6216\u7aca\u53d6\u8cc7\u6599\uff0c\u7279\u5225\u662f\u4f7f\u7528\u8005\u7684\u5404\u7a2e\u5e33\u6236\u53ca\u53e3\u4ee4\u7b49\u91cd\u8981\u4e14\u9700\u8981\u4fdd\u5bc6\u7684\u8cc7\u8a0a\uff0c\u751a\u81f3\u63a7\u5236\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u3002  \u85cf\u6709 \u6211\u96b1\u85cf\u7684\u653b\u64ca\u7a0b\u5f0f\u78bc(\u5c31\u50cf\u6728\u99ac\u88e1\u9762\u7684\u58eb\u5175)  \u7121\u6cd5\u81ea\u52d5\u64cd\u8f1f\uff0c\u8981\u6709\u9060\u7aefserver\u4f86\u57f7\u884c  \u53ef\u4ee5\u9593\u63a5\u5730\u9054\u6210\u653b\u64ca(\u5c31\u50cf\u8981\u7d93\u7531\u6728\u99ac\u9032\u5230\u7279\u6d1b\u4f0a\u57ce)  \u600e\u9ebc\u500b\u9593\u63a5?? \u7dad\u57fa\u767e\u79d1\u7684\u8aaa\u660e: \u904b\u884c\u4e86\u6728\u99ac\u7a0b\u5f0f\u7684\u670d\u52d9\u7aef\u4ee5\u5f8c\uff0c\u6703\u7522\u751f\u4e00\u500b\u6709\u8457\u5bb9\u6613\u8ff7\u60d1\u7528\u6236\u7684\u540d\u7a31\u7684\u9032\u7a0b\uff0c\u6697\u4e2d\u6253\u958b\u57e0\uff0c\u5411\u6307\u5b9a\u5730\u9ede\u767c\u9001\u8cc7\u6599\uff08\u5982\u7db2\u8def\u904a\u6232\u7684\u5bc6\u78bc\uff0c\u5373\u6642\u901a\u8a0a\u8edf\u9ad4\u5bc6\u78bc\u548c\u7528\u6236\u4e0a\u7db2\u5bc6\u78bc\u7b49\uff09\uff0c\u99ed\u5ba2\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u9019\u4e9b\u6253\u958b\u7684\u57e0\u9032\u5165\u96fb\u8166\u7cfb\u7d71\u3002    \u6709\u4ee5\u4e0b\u4e09\u7a2e\u6a21\u5f0f:  \u8b93\u539f\u6709\u7684\u7a0b\u5f0f\u7e7c\u7e8c\u6b63\u5e38\u57f7\u884c\uff0c\u4f46\u662f\u4e5f \u984d\u5916\u5730 \u57f7\u884c\u60e1\u610f\u653b\u64ca  \u57f7\u884c\u539f\u6709\u7684\u7a0b\u5f0f\uff0c\u4f46\u537b\u4fee\u6539\u4ed6 \u7528\u4f86\u6b3a\u9a19\u7cfb\u7d71 (\u507d\u88dd\u5728\u6b63\u5e38\u7684\u7a0b\u5f0f\u4e4b\u4e0b)  \u76f4\u63a5\u53d6\u4ee3\u6389\u539f\u6709\u7684\u7a0b\u5f0f\u641e\u7834\u58de", 
            "title": "\u6728\u78bc\u8edf\u9ad4"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#payload", 
            "text": "system corruption: (\u81ea\u5df1\u770bXD)  attack agent: \u60e1\u610f\u7a0b\u5f0f\u4f54\u64da(\u597d\u50cf\u53db\u8ecd\u4e00\u6a23)\u4e86\u7db2\u9801\u6216\u662f\u670d\u52d9\uff0c\u5728\u7528\u88ab\u5360\u64da\u7684\u7db2\u9801\u6216\u662f\u670d\u52d9\u4f86\u767c\u52d5\u653b\u64ca\uff0c\u56e0\u70ba\u662f\u4f54\u64da\u4ed6\u4eba\u7684\u5730\u76e4\u6240\u4ee5\u96e3\u4ee5\u6eaf\u6e90  attack agent ex: zombie, botnet     information theft:\u7aca\u53d6\u500b\u8cc7\uff0c\u4f8b\u5982   \u7db2\u8def\u91e3\u9b5a(phishing): \u5167\u5bb9\u4ee5\u5047\u4e82\u771f\u4f7f\u53d7\u5bb3\u8005\u4e0a\u7576  \u9b5a\u53c9\u91e3\u9b5a(spear-phishing)  wiki \uff0c\u901a\u5e38\u6536\u96c6\u7684\u8cc7\u6599\u6703\u6bd4\u4e00\u822c\u8cc7\u6599\u66f4\u654f\u611f\u6a5f\u5bc6\u3002  \u9375\u76e4\u5074\u9304: \u6d41\u51fa\u8cc7\u6599  \u9593\u8adc\u8edf\u9ad4(spyware): \u5077\u5077\u76e3\u63a7     \u5077\u5077\u9032\u5165\u7cfb\u7d71(stealthing)   \u5f8c\u9580  def : \u9867\u540d\u601d\u7fa9\uff0c\u8d70\u5f8c\u9580\uff0c\u5c31\u662f\u53ef\u4ee5\u4e0d\u7528\u904e\u8edf\u9ad4\u5e38\u898f\u7684\u5b89\u5168\u6027\u6a5f\u5236\u4f86\u53d6\u5f97\u7cfb\u7d71\u63a7\u5236\u3002  \u900f\u904e\u4e00\u4e9b\u975e\u6a19\u6e96\u7684\u7aef\u53e3(nonstandard port)\u4f86\u7aca\u807d\u4ee5\u53ca\u6f5b\u5165\u3002    (rootkit)  def : \u4e00\u5957\u8edf\u4ef6\u5de5\u5177\uff0c\u4f7f\u672a\u7d93\u6388\u6b0a\u7684\u7528\u6236\u80fd\u5920\u5728\u672a\u88ab\u6aa2\u6e2c\u5230\u7684\u60c5\u6cc1\u4e0b\u7372\u5f97\u8a08\u7b97\u6a5f\u7cfb\u7d71\u7684\u63a7\u5236\u6b0a\u3002  \u5077\u5077\u5730(in a stealthy way)\u7834\u58de\u6216\u4fee\u6539\u4f7f\u7528\u8005\u7684\u6b63\u5e38\u529f\u80fd  \u653b\u64ca\u8005\u80fd\u53d6\u5f97\u96fb\u8166\u7684\u63a7\u5236\u6b0a: \u5305\u542b\u76e3\u63a7\u7e69\u7e8c\u3001\u6539\u8b8a\u7a0b\u5f0f\u6216\u6a94\u6848\u3001\u6536\u767c\u7db2\u8def\u6d41\u91cf\u3001\u53d6\u5f8c\u9580\u7a0b\u5f0f\u63a7\u5236\u6b0a\u3002  \u5206\u70ba\u4ee5\u4e0b\u5e7e\u7a2e  \u4e00\u81f4\u7684(persistent)  \u53ea\u5b58\u5728\u8a18\u61b6\u9ad4(memory based): \u958b\u6a5f\u5f8c\u5c31\u6c92\u7528\u4e86  \u4f7f\u7528\u8005\u6a21\u5f0f(user mode): \u53ef\u4ee5\u547c\u53ebAPI\u4e26\u4e14\u4fee\u6539\u4ed6\u7684\u7d50\u679c  \u6838\u5fc3\u6a21\u5f0f(kernal mode): \u53ef\u4ee5\u963b\u65b7\u547c\u53ebOS API  \u865b\u64ec\u6a5f\u70ba\u4e3b(virtual machine based): \u81ea\u884c\u5b89\u88dd\u4e00\u500bVM\u518d\u628a\u4f7f\u7528\u8005\u7684OS\u5305\u5728\u88e1\u9762\u6aa2\u6e2c\u3002  \u5916\u90e8\u6a21\u5f0f(external mode):", 
            "title": "\u60e1\u610f\u8edf\u9ad4\u6703\u505a\u7684\u50b7\u5bb3(payload)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#use-of-bots", 
            "text": "DDoS(\u63a7\u5236\u591a\u53f0\u4e00\u8d77\u6d88\u8017\u6d41\u91cf\uff0c\u767c\u52d5\u653b\u64ca)  spamming  \u7aba\u63a2\u6d41\u91cf(sniffing traffic)  \u9375\u76e4\u5074\u9304(key logging)  \u88dd\u7db2\u9801\u63d2\u4ef6(hao123)  \u653b\u64caIRC\u7db2\u8def  \u64cd\u5f04\u7db2\u9801\u904a\u6232\u6216\u6295\u7968", 
            "title": "\u6bad\u5c4d\u7db2\u8def\u7684\u4f7f\u7528(use of bots)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_15", 
            "text": "\u78ba\u4fdd\u96fb\u8166\u7cfb\u7d71\u662f\u6700\u65b0\u7684\uff0c\u56e0\u70ba\u53ef\u80fd\u6703\u6709\u5f88\u591a\u66f4\u65b0\u6703\u88dc\u8db3\u6f0f\u6d1e  \u78ba\u8a8d\u6a94\u6848\u7684\u5b58\u53d6\u6b0a\u9650\uff0c\u4ee5\u63a7\u5236\u5728\u88e1\u9762\u7684\u8cc7\u6599\uff0c\u5426\u5247\u4efb\u610f\u4eba\u90fd\u53ef\u4ee5\u5f97\u5230\u8cc7\u6599\u7684\u8a71\u592a\u5371\u96aa", 
            "title": "\u5c0d\u65bc\u60e1\u610f\u8edf\u9ad4\u7684\u5c0d\u7b56"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_16", 
            "text": "host-based scanner \u4ee5\u4e3b\u6a5f\u70ba\u4e3b\u7684   \u7b2c\u4e00\u4ee3: \u6700\u7c21\u55ae\u7684\u6383\u63cf\u65b9\u5f0f\uff0c\u9700\u8981\u75c5\u6bd2\u7c3d\u540d(\u7279\u5fb5)  \u7b2c\u4e8c\u4ee3: \u555f\u767c\u5f0f(heuristic)\uff0c\u627e\u5c0b\u53ef\u80fd\u7684\u60e1\u610f\u8edf\u9ad4\uff0cintegrity checking  \u7b2c\u4e09\u4ee3: \u6aa2\u67e5\u6d3b\u52d5\uff0c\u4ee5\u6d3b\u52d5\u4f86\u5075\u6e2c\u60e1\u610f\u8edf\u9ad4\u800c\u975e\u4ee5\u7d50\u69cb(\u56e0\u70ba\u4ed6\u5011\u53ef\u80fd\u7a81\u8b8a\uff0c\u7d50\u69cb\u592a\u4e94\u82b1\u516b\u9580\u4e86)  \u7b2c\u56db\u4ee3: \u5168\u9762\u9632\u79a6(XD??)     host-based + behavor-blocking   def : \u548cOS\u7d50\u5408\uff0c\u5373\u6642\u6aa2\u6e2c  \u627e\u51fa\u6f5b\u5728\u7684\u60e1\u610f\u8edf\u9ad4\uff0c\u5728\u767c\u4f5c\u524d\u5c31\u5148\u64cb\u4e0b(\u9632\u60a3\u672a\u7136)  \u9650\u5236: (\u53ef\u80fd\u8003) \u56e0\u70ba\u60e1\u610f\u7a0b\u5f0f\u78bc\u5fc5\u9808\u8981\u76ee\u6a19\u6a5f\u5668\u57f7\u884c(\u81f3\u5c11\u8981\u6709\u57f7\u884c) \u6700\u4f4e\u9650\u5ea6\u4e00\u5b9a\u8981\u4e00\u9ede\u9ede\u5148\u8dd1\u904e\uff0c\u56e0\u6b64\u5728\u88ab\u6aa2\u6e2c\u51fa\u4f86\u7684\u6642\u5019\u53ef\u80fd\u5df2\u7d93\u9020\u6210\u4e86\u90e8\u5206\u640d\u5bb3", 
            "title": "\u6383\u6bd2\u8edf\u9ad4\u7684\u6f14\u9032"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#perimeter-scanning", 
            "text": "\u901a\u5e38\u6703\u5728\u9632\u706b\u7246\u4e0a\u57f7\u884c\uff0c\u4f8b\u5982\u5728email web proxy\u4e0a  \u5169\u7a2e\u76e3\u6e2c\u65b9\u5f0f  \u5165\u53e3\u76e3\u6e2c(ingress): \u5728\u4f01\u696d\u7db2\u8def\u8207\u5916\u7db2\u7684\u4ea4\u754c\uff0c\u4f8b\u5982border router\u3001external firewall\u7684\u4e00\u90e8\u5206  \u51fa\u53e3\u76e3\u6e2c(egress): \u4e5f\u662f\u5728\u4ea4\u754c\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u6aa2\u6e2c\u51fa\u767c\u7684\u6d41\u91cf\uff0c\u770b\u770b\u6709\u6c92\u6709\u7570\u5e38  \u53ef\u4ee5\u627e\u5230\u653b\u64ca\u7684\u4f86\u6e90", 
            "title": "perimeter-scanning"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_17", 
            "text": "A\u7b49\u7d1a: \u7279\u5fb5\u70ba\u4e3b(signature-based)  B\u7b49\u7d1a: \u904e\u6ffe\u70ba\u4e3b(filter-based): \u548cA\u985e\u4f3c\u4f46\u662f\u9760\u8815\u87f2\u7684\u5167\u5bb9\u800c\u975esignature  C\u7b49\u7d1a: \u6709\u6548 \u8f09\u8377 \u70ba\u4e3b(payload): \u770b\u770b\u767c\u51fa\u7684 \u5c01\u5305 \u662f\u5426\u6709worm  D\u7b49\u7d1a: threshold random walk(TRW): \u96a8\u6a5f\u6307\u5b9a\u76e3\u6e2c\uff0c\u96a8\u6a5f\u6307\u5b9a\u67d0\u500b\u9023\u7dda\u4f86\u6aa2\u67e5\u5979  E\u7b49\u7d1a: \u983b\u7387\u9650\u5236(rate limiting): \u56e0\u70ba\u8815\u87f2\u8981\u6383\u63cf\u76ee\u6a19\uff0c\u6240\u4ee5\u53ef\u4ee5\u9650\u5236scan\u985e\u578b(scan like)(\u6216\u662f\u5230\u67d0\u6a5f\u5668)\u7684\u6d41\u91cf\u4f86\u907f\u514d\u8815\u87f2\u7e7c\u7e8c\u64f4\u6563  F\u7b49\u7d1a: \u983b\u7387\u505c\u6b62(rate halting): \u7576\u8d85\u904e\u67d0\u4e00\u500b\u80fd\u5224\u65b7\u5230\u8815\u87f2\u7279\u5fb5\u7684\u95be\u503c\uff0c\u76f4\u63a5\u5207\u65b7\u6d41\u91cf", 
            "title": "\u5c0d\u6297\u8815\u87f2"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ddos", 
            "text": "def: \u4ea6\u7a31\u6d2a\u6c34\u653b\u64ca\uff0c\u662f\u4e00\u7a2e\u7db2\u8def\u653b\u64ca\u624b\u6cd5\uff0c\u5176\u76ee\u7684\u5728\u65bc\u4f7f\u76ee\u6a19\u96fb\u8166\u7684\u7db2\u8def\u6216\u7cfb\u7d71\u8cc7\u6e90\u8017\u76e1\uff0c\u4f7f\u670d\u52d9\u66ab\u6642\u4e2d\u65b7\u6216\u505c\u6b62\uff0c\u5c0e\u81f4\u5176\u6b63\u5e38\u7528\u6236\u7121\u6cd5\u5b58\u53d6\u3002  \u53ef\u4ee5\u7531\u8cc7\u6e90\u7684\u7528\u91cf\u770b\u51fa(\u56e0\u70baDDoS\u672c\u8eab\u5c31\u6703\u7528\u5f88\u591a\u7684\u8cc7\u6e90)  \u5206\u70ba\u5169\u7a2e  \u983b\u5bec\u6d88\u8017\u653b\u64ca: \u70ba\u4e86\u7528\u7f44\u53d7\u5bb3\u8005\u983b\u5bec\uff1b\u5835\u4f4f\u4ed6\uff0c\u4f8b\u5982ICMP\u6d2a\u6c34\u653b\u64ca\uff0c\u901a\u904e\u5411\u672a\u826f\u597d\u8a2d\u5b9a\u7684\u8def\u7531\u5668\u50b3\u9001\u5ee3\u64ad\u8cc7\u8a0a\u5360\u7528\u7cfb\u7d71\u8cc7\u6e90\u7684\u505a\u6cd5(\u4e00\u76f4\u671d\u4e3b\u6a5f\u767c\u9001\u8acb\u6c42\uff0c\u8b93\u4e00\u822c\u4eba\u7121\u6cd5\u767c\u9001\u8acb\u6c42)\u3002  \u8cc7\u6e90\u6d88\u8017\u653b\u64ca: \u7528\u7f44\u53d7\u5bb3\u8005\u7684\u8cc7\u6e90\uff0c\u4f8b\u5982TCP\u4e2d\u7684SYN\u653b\u64ca\uff0c\u653b\u64ca\u8005\u4e00\u76f4\u767c\u9001SYN\u4f86\u8acb\u6c42\uff0c\u4f46\u662f\u5b8c\u5168\u4e0d\u56de\u61c9\u4f3a\u670d\u5668\u50b3\u4f86\u7684SYN/ACK(\u7167\u7406\u4f86\u8aaa\u6211\u6536\u5230\u4f3a\u670d\u5668\u7684\u8cc7\u6599\u6211\u8981\u8aaaACK\uff0c\u4ee5\u78ba\u8a8d3way handshaking)\uff0c\u4f3a\u670d\u5668\u5c31\u6703\u4ee5\u70ba\u6211\u6c92\u6536\u5230\uff0c\u518d\u5ea6\u9001\u8cc7\u6599\u4f86\uff0c\u5c31\u9019\u6a23\u9023\u7e8c\u767c\u5c01\u5305\u7d66server\u4f46\u4e0d\u56de\u61c9\u4ed6\uff0cserver\u8cc7\u6e90\u5c31\u88ab\u7528\u7f44  wiki: SYN flood  SYN flood\u597d\u61c2\u7684\u5f71\u7247    \u5c0d\u7b56(\u61c9\u8a72\u5f88\u597d\u61c2)\u5c31\u4e0d\u8aaa\u4e86  \u4e8b\u767c\u524d: \u8b93\u4ed6\u5011\u7684buffer\u80fd\u5927\u4e00\u9ede\uff0c\u5373\u4f7f\u88abDDoS\u4e5f\u6490\u5f97\u4f4f  \u4e8b\u767c\u7576\u4e0b: \u5229\u78bc\u5075\u6e2c\uff0c\u6e1b\u5c11\u640d\u5931  \u4e8b\u767c\u5f8c: \u6eaf\u6e90\uff0c\u627e\u8ab0\u653b\u64ca\u7684(\u4e0d\u592a\u5be6\u969b)", 
            "title": "DDoS"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch11-intruder", 
            "text": "", 
            "title": "Ch11. Intruder"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#thee-classes-of-intuder", 
            "text": "Masquerader : \u672a\u7d93\u6388\u6b0a\u7684\u4f7f\u7528\u8005\u4fb5\u5165  Misfeasor : \u8a2a\u554f\u672a\u7372\u6388\u6b0a\u8a2a\u554f\u7684\u6578\u64da\uff0c\u7a0b\u5e8f\u6216\u8cc7\u6e90\u7684\u5408\u6cd5\u7528\u6236  Clandestine user : \u4e00\u500b\u4eba\u5c0d\u7cfb\u7d71\u9032\u884c\u76e3\u7763\u63a7\u5236\uff0c\u4e26\u4f7f\u7528\u6b64\u63a7\u5236\u8ff4\u907fauditing control\u548caccess control\uff0c\u6216\u8005\u58d3\u5236audit collection\n(\u596a\u53d6\u7cfb\u7d71\u7ba1\u7406\u54e1\u63a7\u5236\u6b0a\u9650\u7684\u4eba)", 
            "title": "thee classes of intuder"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#hackers", 
            "text": "\u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71(IDS)  \u5165\u4fb5\u9810\u9632\u7cfb\u7d71(IPS)  Computer emergency response team(CERT) : expert group that handles computer security incidents.", 
            "title": "\u5c0d\u6297hackers\u7684\u7cfb\u7d71"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#insider-attack", 
            "text": "most difficult to detect and prevent  \u5c0d\u61c9\u653f\u7b56:  \u4f7f\u7528\u8005\u9700\u8981\u591a\u5c11\u8cc7\u6e90\u8b93\u4ed6\u5011\u505a\u4e8b\u5c31\u6388\u6b0a\u591a\u5c11(\u4e0d\u7528\u4e00\u6b21\u7d66\u5168\u90e8\u7684\u6b0a\u9650)  \u7528log\u7d00\u9304\u54ea\u4e9buser\u9032\u4f86\u4e86\u4e26\u4f7f\u7528\u4e86\u54ea\u4e9b\u6307\u4ee4  \u7528\u6bd4\u8f03\u6709\u4fdd\u8b77\u6027\u7684\u6388\u6b0a\u65b9\u5f0f\u4fdd\u8b77\u91cd\u8981\u8cc7\u6e90  \u4f7f\u7528\u7d50\u675f\u5f8c\u522a\u9664\u4f7f\u7528\u8005\u96fb\u8166\u8207\u7db2\u8def\u7684\u806f\u7e6b  \u4f7f\u7528\u7d50\u675f\u5f8c\u4fdd\u7559\u5099\u4efd(\u4f5c\u70ba\u6c92\u4e82\u7528\u6b0a\u9650\u7684\u8b49\u64da)", 
            "title": "insider attack"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#way-to-protect-password-file", 
            "text": "one-way function: \u53ea\u5132\u5b58\u5bc6\u78bc\u7d93\u904e\u55ae\u5411\u51fd\u6578\u904b\u7b97\u5f8c\u7684\u8cc7\u6599(\u4f8b\u5982\u96dc\u6e4a\u6578\u503c\uff0c\u800c\u975e\u5bc6\u78bc\u672c\u8eab)(The system stores only the value of a function based on the user\u2019s password)    access control: \u9650\u5b9a\u53ea\u6709\u4e00\u500b\u6216\u5c11\u6578\u5e7e\u500b\u5e33\u6236\u53ef\u4ee5\u5b58\u53d6\u5bc6\u78bc\u6a94(Access to the password file is limited to one or a very few accounts)", 
            "title": "way to protect password file"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#intrusion-detection", 
            "text": "\u7cfb\u7d71\u7684\u7b2c\u4e8c\u9053\u9632\u7dda(system\u2019s second line of defense )\uff0c\u56e0\u70ba\u5df2\u7d93\u6709\u4eba\u7a81\u7834\u67f5\u6b04\u9032\u4f86\u4e86\uff0c\u73fe\u5728\u5c31\u662f\u8981\u76e3\u6e2c\u90a3\u500b\u9032\u4f86\u7684\u4eba\u3002  Profiles of Behavior of Intruders and Authorized Users(\u90a3\u5f35\u5716)\u8aaa\u660e :    the nature of the task confronting the designer of an intrusion detection system. Although the typical behavior of an intruder differs from the typical behavior of an authorized user, there is an overlap in these behaviors. Thus, a loose interpretation of intruder behavior, which will catch more intruders, will also lead to a number of \"false positives,\" or authorized users identified as intruders. On the other hand, an attempt to limit false positives by a tight interpretation of intruder behavior will lead to an increase in false negatives, or intruders not identified as intruders. Thus, there is an element of compromise and art in the practice of intrusion detection.  audit record  Fundamental tool for intrusion detection  \u5229\u7528\u7279\u5b9a\u7684\u7d00\u9304\u7b46\u4f86\u5206\u6790\u70ba\u6b04\u4f4d\u4f7f\u7528\u7684\u60c5\u5f62\uff0c\u4f7f\u7528\u6307\u4ee4\u5075\u6e2c\u7cfb\u7d71\u5c07\u78b0\u649e\u627e\u51fa    Threshold detection : \u8a08\u7b97\u67d0\u4e00\u4e8b\u4ef6\u767c\u751f\u7684\u6b21\u6578\uff0c\u5982\u679c\u6b21\u6578\u8d85\u904e\u4e00\u500b\u7279\u5b9a\u6578\u5b57\u5c31\u4ee3\u8868\u6709\u53ef\u80fd\u906d\u53d7\u5165\u4fb5(\u7c21\u964b\u4e14\u6c92\u6548\u7387\u7684\u65b9\u6cd5)  Profile-based : \u4ee5\u904e\u53bb\u7684\u884c\u70ba\u548c\u73fe\u5728\u7684\u6bd4\u8f03\u5f8c\uff0c\u5982\u679c\u6709\u91cd\u5927\u504f\u5dee(detecting significant deviations)\u4ee3\u8868\u53ef\u80fd\u906d\u53d7\u653b\u64ca   Rule-Based Intrusion Dectection : \u5617\u8a66\u8a02\u5b9a\u4e00\u4e9b\u898f\u5247\u898f\u77e9\uff0c\u5c08\u9580\u7528\u4f86\u6aa2\u67e5\u51fa\u7cfb\u7d71\u662f\u5426\u6709\u4e0d\u7576\u7684\u5165\u4fb5\u7684\u65b9\u6cd5   Rule-based anomaly detection  Rule-based penetration identification  USTAT     \u5206\u6563\u5f0f\u5165\u4fb5\u8005\u6aa2\u6e2c(distributed intrusion detection)   def: \u5c0d\u65bc\u4e00\u6574\u500b\u7d44\u7e54\u9700\u8981\u61c9\u4ed8\u5c0d\u65bc\u6574\u500b\u7db2\u8def\u62d3\u6a38\u652f\u6490\u8d77\u4f86\u7684\u4e3b\u6a5f\u67b6\u69cb\uff0c\u5e0c\u671b\u80fd\u5c07\u6578\u500b\u4e3b\u6a5f\u7684\u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71\u806f\u5408\u8d77\u4f86\u7528  \u4f46\u53ef\u80fd\u6703\u6709\u4ee5\u4e0b\u56f0\u5883:  \u4e0d\u540c\u4e3b\u6a5f\u7684audit record\u53ef\u80fd\u4e0d\u4e00\u6a23\uff0c\u9700\u8981\u8655\u7406\u683c\u5f0f\u554f\u984c", 
            "title": "intrusion detection"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#honeypot", 
            "text": "\u662f\u4e00\u500b\u96fb\u8166\u8853\u8a9e\uff0c\u5c08\u6307\u7528\u4f86\u5075\u6e2c\u6216\u62b5\u79a6\u672a\u7d93\u6388\u6b0a\u64cd\u4f5c\u6216\u8005\u662f\u99ed\u5ba2\u653b\u64ca\u7684\u9677\u9631  \u8a73\u7d30def: \u871c\u7f50\u901a\u5e38\u507d\u88dd\u6210\u770b\u4f3c\u6709\u5229\u7528\u50f9\u503c\u7684\u7db2\u8def\u3001\u8cc7\u6599\u3001\u96fb\u8166\u7cfb\u7d71\uff0c\u4e26\u6545\u610f\u8a2d\u7f6e\u4e86bug\uff0c\u7528\u4f86\u5438\u5f15\u99ed\u5ba2\u653b\u64ca\u3002\u7531\u65bc\u871c\u7f50\u4e8b\u5be6\u4e0a\u4e26\u672a\u5c0d\u7db2\u8def\u63d0\u4f9b\u4efb\u4f55\u6709\u50f9\u503c\u7684\u670d\u52d9\uff0c\u6240\u4ee5\u4efb\u4f55\u5c0d\u871c\u7f50\u7684\u5617\u8a66\u90fd\u662f\u53ef\u7591\u7684\u3002\u871c\u7f50\u4e2d\u9084\u53ef\u80fd\u88dd\u6709\u76e3\u63a7\u8edf\u9ad4\uff0c\u7528\u4ee5\u76e3\u8996\u99ed\u5ba2\u5165\u4fb5\u5f8c\u7684\u8209\u52d5\u3002  \u53ef\u4ee5\u5c07\u99ed\u5ba2\u5f9e\u771f\u6b63\u91cd\u8981\u7684\u7cfb\u7d71\u5f15\u958b\u5230\u871c\u7f50(\u871c\u7f50\u505a\u70ba\u8a98\u990c)\uff0c\u871c\u7f50\u548c\u771f\u5be6\u7cfb\u7d71\u662fisolated\u7684  \u4e5f\u80fd\u5229\u7528\u871c\u7f50\u4f86\u85c9\u6a5f\u8490\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u8a0a(\u871c\u7f50\u662f\u88abmonitored\u7684)", 
            "title": "honeypot"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#pdf-p29-30", 
            "text": "", 
            "title": "pdf p29 30(\u8003\u524d\u4e00\u5929\u770b\uff0c\u5167\u5bb9\u504f\u6b7b\u8a18)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#password-management", 
            "text": "Front line of defense against intruders  implementation  Crypt(3) : \u721b  \u7528\u4f86\u5687\u963b\u5bc6\u78bc\u731c\u6e2c\u653b\u64ca  \u4f46\u662f\u56e0\u70ba\u6700\u65e9\u4f7f\u7528\uff0c\u6240\u4ee5\u76f8\u5bb9\u6027\u8f03\u597d\u3002\u800c\u4eca\u4ecd\u7136\u88ab\u5ee3\u6cdb\u4f7f\u7528    MD5 secure hash algorithm : \u4e2d  \u529f\u80fd\u597d\uff0c\u4f46\u662f\u6bd4Crypt(3)\u6162(trade off)    Bcrypt : \u597d  UNIX\u7cfb\u7d71\u4e2d\u6700\u5b89\u5168\u7684\u52a0\u9e7d+\u96dc\u6e4a\u65b9\u6cd5  \u529f\u80fd\u66f4\u597d\uff0c\u4f46\u662f\u53c8\u66f4\u6162\u4e86(trade off)", 
            "title": "password management"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#ch12-firewalls", 
            "text": "", 
            "title": "Ch12. Firewalls"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#firewall-characteristics", 
            "text": "\u57fa\u672c\u4e0a\uff0c\u9632\u706b\u7246\u7684\u7528\u9014\u5c31\u662f\u9694\u96e2\u7db2\u8def(\u9694\u96e2\u6210\u6578\u500bZONE)\u3002", 
            "title": "Firewall characteristics"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#design-goals-for-a-firewall", 
            "text": "all traffic inside to outside, and vice versa, must pass through the firewall\n(\u6240\u6709\u5167\u5230\u5916\u6216\u662f\u5916\u5230\u5167\u7684\u6d41\u91cf\u90fd\u5fc5\u9808\u8981\u7d93\u904e\u9632\u706b\u7246)  only authorized traffic will be allowd to pass\n(\u53ea\u6709\u7d93\u904e\u6388\u6b0a\u7684\u6d41\u91cf\u624d\u53ef\u4ee5\u88ab\u5141\u8a31\u901a\u904e EX. \u5340\u57df\u5b89\u5168\u653f\u7b56\u7684\u8a2d\u5b9a)  the firewall is immune to penetration\n(\u9632\u706b\u7246\u672c\u8eab\u5c0d\u4fb5\u5165\u5177\u6709\u514d\u75ab\u529b)", 
            "title": "design goals for a firewall"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#techniques-that-firewalls-use-to-control-access-and-enforce-the-sites-security-policy", 
            "text": "service control  \u6c7a\u5b9a\u4f55\u7a2e\u5167\u90e8\u6216\u5916\u90e8\u7684\u670d\u52d9\u53ef\u4ee5\u88ab\u4f7f\u7528    direction control  \u5c0d\u65bc\u7279\u5b9a\u670d\u52d9\u53ef\u4ee5\u6c7a\u5b9a\u54ea\u500b\u65b9\u5411\u7684\u6d41\u91cf\u53ef\u4ee5\u88ab\u901a\u904e    user control  \u6839\u64da\u4f7f\u7528\u8005\u6c7a\u5b9a\u662f\u5426\u80fd\u8b93\u4ed6\u6709\u5b58\u53d6\u6b0a(\u4f7f\u7528\u6b0a)    behavior control  \u76e3\u63a7\u7279\u5b9a\u670d\u52d9\u7684\u4f7f\u7528\u60c5\u6cc1", 
            "title": "techniques that firewalls use to control access and enforce the site's security policy"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#firewall-expectations", 
            "text": "\u662f\u4e00\u500bcheck point\uff0c\u53ef\u4ee5\u628a\u672a\u6388\u6b0a\u7684user\u64cb\u5728\u53d7\u4fdd\u8b77\u7684\u7db2\u8def\u5916\u3001\u53ef\u4ee5\u7981\u6b62\u6709\u6f5b\u5728\u5371\u96aa\u7684\u670d\u52d9\u3001\u53ef\u4ee5\u9632\u6b62IP spoofing(IP\u5047\u9020)\u53carouting attack  \u662f\u4e00\u500b\u76e3\u6e2c\u8ddf\u5b89\u5168\u6709\u95dc\u7684\u4e8b\u4ef6\u7684\u5e73\u53f0  \u53ef\u4ee5\u662f\u63d0\u4f9b\u4e00\u4e9b\u8ddf\u5b89\u5168\u7121\u95dc\u7684Internet functions\u7684\u5e73\u53f0 (ex. NAT)  \u53ef\u4ee5\u662f\u63d0\u4f9bIPsec\u7684\u5e73\u53f0", 
            "title": "firewall expectations"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#firewall-limitations", 
            "text": "\u7121\u6cd5\u62b5\u64cb\u7e5e\u904e\u9632\u706b\u7246\u7684\u653b\u64ca(\u4f8b\u5982\u7b46\u96fb\u5728\u5916\u88ab\u611f\u67d3\uff0c\u7136\u5f8c\u5e36\u56de\u516c\u53f8\u5167\u7db2\u8b93\u5927\u5bb6\u90fd\u611f\u67d3)  \u7121\u6cd5\u9632\u7bc4\u5728\u9632\u706b\u7246\u5167\u7684wireless communication between local systems (\u56e0\u70ba\u6839\u672c\u6c92\u6709reach\u5230\u9632\u706b\u7246)  \u5c0d\u65bcinternal threat\u7121\u6cd5\u9632\u7bc4", 
            "title": "firewall limitations"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#types-of-firewalls", 
            "text": "Packet filtering firewall (\u8a2d\u5b9a\u898f\u5247\u6aa2\u67e5IP\u5c01\u5305)  \u53ef\u4ee5\u8a2d\u5b9a\u4e00\u9023\u4e32\u7684rules\u4f86\u6c7a\u5b9a\u6b64packet\u53ef\u4e0d\u53ef\u4ee5\u901a\u904e  \u7f3a\u9ede  \u56e0\u70ba\u4e0d\u6703\u6aa2\u67e5upper layer data\uff0c\u6240\u4ee5\u7121\u6cd5\u9632\u6b62\u7279\u5b9a\u61c9\u7528\u7a0b\u5f0f\u7684\u6f0f\u6d1e\u653b\u64ca(\u4ed6\u8dd1\u5728\u50b3\u8f38\u5c64)  \u56e0\u70ba\u6b64\u985e\u9632\u706b\u7246\u53ef\u4ee5\u5b58\u53d6\u7684\u8cc7\u6e90\u6709\u9650\uff0c\u6240\u4ee5\u529f\u80fd\u4e5f\u883b\u6709\u9650\u7684  \u4e0d\u652f\u63f4\u9032\u968e\u7684\u4f7f\u7528\u8005\u8a8d\u8b49(advanced user auth)  \u5229\u7528TCP/IP protocol\u7684\u554f\u984c\u80fd\u653b\u64ca\u6b64\u985e\u578b\u7684\u9632\u706b\u7246(\u56e0\u70ba\u9019\u500b\u9632\u706b\u7246\u67b6\u8a2d\u5728\u50b3\u8f38\u5c64)  \u56e0\u70ba\u6c7a\u5b9aaccess control\u7684\u8b8a\u6578\u4e0d\u591a\uff0c\u82e5\u4e00\u4e0d\u5c0f\u5fc3\u932f\u8aa4\u8a2d\u5b9a\u67d0\u4e9b\u8b8a\u6578\uff0c\u5247\u5f88\u6709\u53ef\u80fd\u8b93\u4e0d\u5b89\u5168\u7684\u5c01\u5305\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u901a\u904e\u4e86    \u512a\u9ede  \u5f88\u7c21\u55ae  \u5c0duser\u4f86\u8aaa\u5f88\u5bb9\u6613\u61c2\u3001\u800c\u4e14\u5f88\u5feb\u901f    \u7f3a\u9ede\n    \u2013 \u96e3\u4ee5\u8a2d\u8a08\u51fa\u4e00\u7d44\u9577\u671f\u6709\u6548\u53c8\u6b63\u78ba\u7684\u7121\u8aa4\u904e\u6ffe\u898f\u5247\u3002\n    \u2013 \u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\uff0c\u6240\u4ee5\u5c0d\u65bc\u5c01\u5305\u8cc7\u6599\u6bb5\u6216\u7279\u5b9a\u61c9\u7528\u670d\u52d9\u5f31\u9ede\u7684\u653b\u64ca\u65b9\u5f0f\u7121\u80fd\u70ba\u529b\u3002\n    \u2013 \u7f3a\u4e4f\u9a57\u8b49\u80fd\u529b\u3002\n    \u2013 \u5b89\u5168\u6027\u8f03\u5dee\u3002  Attacks And Countermeasures  IP address spoofing(\u507d\u9020IP\u4f4d\u5740)  hacker\u628a\u5916\u90e8pkt\u7684source IP address\u8a2d\u6210\u5167\u90e8\u67d0\u4e00IP address\uff0c\u7136\u5f8c\u8a66\u5716\u5f9e\u5916\u9762\u50b3\u5230\u5167\u90e8(\u8b93\u4eba\u8aa4\u4ee5\u70ba\u662f\u5167\u90e8\u7684\u800c\u6389\u4ee5\u8f15\u5fc3)  solution : \u4e1f\u68c4\u6389\u5f9e\u5916\u90e8\u9032\u4f86\u4f46\u662fsource IP address\u662f\u5167\u90e8\u4f4d\u5740\u7684pkt    Source routing attacks(\u4f86\u6e90\u8def\u7531\u653b\u64ca)  the source station specifies route that a pkt should take, and it hopes that it will  bypass  the security measures that do not analyze the source routing information(\u4f86\u6e90\u7aef\u53ef\u4ee5\u6307\u5b9a\u5c01\u5305\u884c\u7d93\u7db2\u969b\u7db2\u8def\u7684\u8def\u7531\uff0c\u5e0c\u671b\u7528\u9019\u500b\u8cc7\u8a0a\u4f86\u8eb2\u907f\u53ef\u80fd\u6709\u5e7e\u500b\u6c92\u6709\u505a\u5b89\u5168\u6aa2\u67e5\u7684\u8def\u7531\u5668)  solution : \u4e1f\u68c4\u6389\u6240\u6709\u542b\u6709routing information\u7684pkt    Tiny fragment attacks(\u6975\u5c0f\u5c01\u5305\u653b\u64ca)  \u5165\u4fb5\u8005\u5c07pkt\u5206\u5272\u6210\u591a\u500bfragment\uff0c\u4f7f\u5f97TCP header\u8cc7\u8a0a\u88ab\u5206\u6563\u5230\u5f88\u591a\u500bfragment(\u800c\u4e14\u8981\u7528pattern\u4f86\u770b\u7684\u8a71\u4e5f\u4e0d\u5bb9\u6613\u770b\uff0c\u56e0\u70bapattern\u4e5f\u6703\u88ab\u5207\u5272\uff0c \u8da8\u52e2\u79d1\u6280\u8aaa: \u5c0f\u578b\u7247\u6bb5\u5c01\u5305\u53ef\u80fd\u88ab\u7528\u65bc\u963b\u7d55\u670d\u52d9\u7a0b\u5f0f\u653b\u64ca\uff0c\u6216\u7528\u65bc\u898f\u907f\u5b89\u5168\u6a5f\u5236\u6216\u5075\u6e2c\u3002 )  solution : enforce a rule that the first fragment of a pkt must contain a predefined minimum amount of the transport header(\u524d\u9762\u4e00\u5b9a\u8981\u6709\u5b8c\u6574\u7684\u5c01\u5305\u6a19\u982dheader\uff0c\u4ee5\u78ba\u4fdd\u8cc7\u6599\u7684\u5b8c\u6574\u6027\u78ba\u8a8d\u8cc7\u6599\u662f\u4e0d\u88ab\u5207\u5272\u7684)        Stateful inspection firewall  stateful:  \u512a\u9ede: \u53ef\u4ee5\u5206\u8fa8\u4e0d\u540c\u7684\u9023\u7dda\u72c0\u614b(\u56e0\u70ba\u9023\u7dda\u72c0\u614b\u53ef\u4ee5\u7531srcIP dstIP UDP\u3001TCP port\u5224\u65b7)\uff0c\u53ef\u4ee5\u5224\u65b7\u5c01\u5305\u662f\u5426\u5c6c\u65bc\u73fe\u5b58\u7684\u9023\u7dda\uff0c\u662f\u4e14\u5141\u8a31\u7684\u8a71\u5c31\u8b93\u5979\u5feb\u901f\u901a\u904e\uff0c\u4e0d\u662f\u5c31\u984d\u5916\u8655\u7406  \u7f3a\u9ede: \u9700\u8981\u984d\u5916\u786c\u9ad4(trade off)\uff0c\u6548\u80fd\u8f03\u5c01\u5305\u904e\u6ffe\u5dee\u3001\u4e5f\u6c92\u8fa6\u6cd5\u8655\u7406\u4e0a\u5c64\u7684\u5354\u5b9a\uff0c\u56e0\u70ba\uff0c\u5982\u5716\uff0c\u4ed6\u5efa\u7acb\u5728\u50b3\u8f38\u5c64\u800c\u8ddf\u4e0a\u5c64\u7684\u61c9\u7528\u5c64\u7121\u95dc\u3002    stateless:  \u512a\u9ede: \u7c21\u55ae\u4f9d\u64da\u73fe\u6709\u7684\u5c01\u5305\u8cc7\u8a0a\u904e\u6ffe\u3001\u4e0d\u9808\u984d\u5916\u786c\u9ad4  \u7f3a\u9ede: \u53ef\u80fd\u8f03\u5bb9\u6613\u53d7\u653b\u64ca\uff0c\u4f8b\u5982IP Spoofing\u53ef\u4ee5\u507d\u9020IP\u8b93\u9632\u706b\u7246\u4ee5\u70ba\u53ef\u4ee5\uff0c(\u7528stateful\u56e0\u70ba\u8b58\u5225\u7684\u6a19\u7c64\u5f88\u591a\uff0c\u53ef\u4ee5\u5340\u5206\u507d\u9020IP\u7684\u5c01\u5305\u548c\u5be6\u969bIP\u7684\u5c01\u5305(\u56e0\u70ba\u4e5f\u8a31\u53ef\u4ee5\u7528\u5176\u4ed6header\u78ba\u8a8d\uff0c\u4f86\u8aaa\u662f\u4e0d\u662f\u8ddf\u73fe\u6709\u5141\u8a31\u7684\u4e00\u6a23)\uff0c\u4f46\u662fstateless\u5c31\u6c92\u6709\u9019\u500b\u529f\u80fd)       PROXY \u6982\u5ff5   def: \u5f37\u8abf\u7528\u6236\u7aef\u7a0b\u5f0f\u5fc5\u9700\u8207\u4ee3\u7406\u4f3a\u670d\u5668\u63a5\u6d3d\uff0c\u518d\u900f\u904e\u5b83\u4f86\u8207\u76ee\u7684\u6a5f\u5668\u9023\u901a\uff0c\u800c\u975e\u76f4\u63a5\u8b93\u7528\u6236\u7aef\u9023\u63a5\u771f\u6b63\u7684\u76ee\u7684\u5730\u3002     Application proxy firewall   \u82e5gateway\u6c92\u6709\u70ba\u7279\u5b9a\u61c9\u7528(\u56e0\u70ba\u73fe\u5728\u5728\u61c9\u7528\u5c64)\u505aproxy\u5247\u8a72\u985e\u7684\u670d\u52d9\u5c31\u4e0d\u88ab\u652f\u63f4\uff0c\u56e0\u6b64\u4e5f\u4e0d\u80fd\u901a\u904e\u9632\u706b\u7246  gateway\u4e5f\u53ef\u4ee5\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u3001\u63a5\u53d7\u67d0\u4e9b\u7279\u5b9a\u7684feature\uff0c\u4f7f\u5f97\u8a72\u670d\u52d9\u53ef\u4ee5\u88ab\u63a5\u53d7\uff0c\u800c\u62d2\u7d55\u5176\u4ed6\u670d\u52d9\u7684\u8981\u6c42  \u512a\u9ede: \u6bd4packet filtering firewall\u66f4\u5b89\u5168(\u56e0\u70ba\u76f4\u63a5\u904e\u6ffe\u4e86\u5c01\u5305\u5167\u5bb9(pkt contents)\u8207\u547d\u4ee4\uff0c\u4ee5\u78ba\u4fdd\u67d0\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u5167\u5bb9\u5b89\u5168(\u4f8b HTTP, FTP, EMAIL)  \u7f3a\u9ede: additional processing overhead on each connection(\u8981\u984d\u5916\u8655\u7406\u6bcf\u500b\u9023\u7dda -  \u9020\u6210\u8ca0\u64d4)\uff0c\u9084\u8981\u91dd\u5c0d\u4e0d\u540c\u61c9\u7528\u7a0b\u5f0f\u985e\u71df\u5beb\u4e0d\u540c\u7684\u4ee3\u7406\u65b9\u6cd5\uff0c\u6210\u672c\u9ad8\u3002    Circuit-level proxy firewall  not permit end-to-end TCP connections =  \u800c\u662f\u5efa\u7acb\u5169\u689dTCP connections  \u6703\u5efa\u7acb\u4e8c\u500bTCP\u9023\u7dda\u8655\u7406\uff0c \u4e00\u689d\u662f\u5167\u90e8\u8207circuit-level proxy\u3001\u53e6\u5916\u4e00\u689d\u662fcircuit-level proxy\u8207\u5916\u90e8 (\u900f\u904eproxy firewall\u505a\u70ba\u4e2d\u7e7c\u7ad9\uff0c\u4e5f\u5c31\u662f \u5167\u90e8--proxy--\u5916\u90e8\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u96b1\u85cf\u5167\u90e8IP\u4f4d\u5740\u3002)     security function consists of  determining which connections will be allowed \u3001\u76f4\u63a5\u7528\u9023\u7dda\u7b49\u7d1a\u7684\u65b9\u5f0f\u5b9a\u7fa9\u8aaa\u54ea\u5e7e\u689d\u9023\u7dda\u662f\u5141\u8a31\u7684\u3002  \u512a\u9ede: \u8f03\u61c9\u7528\u5c64\u4ee3\u7406\u5feb\u901f\u3001\u4e00\u822c\u76ee\u7684\u5171\u7528\u4ee3\u7406\u670d\u52d9\uff0c\u53ef\u652f\u63f4\u8a31\u591a\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u4ee3\u7406\u5b58\u53d6\u529f\u80fd\u3002  \u7f3a\u9ede: \u9700\u8981\u4fee\u6539\u7528\u6236\u7aef\u61c9\u7528\u7a0b\u5f0f\u6216TCP/IP\u5354\u5b9a\u5806\u758a\uff0c\u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\u3001ICMP\u4e5f\u4e0d\u884c(\u56e0\u70ba\u4ed6\u662fnetwork\u5c64)\u3002", 
            "title": "Types of Firewalls"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#firewall-comparison", 
            "text": "", 
            "title": "Firewall comparison"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#bastion-host", 
            "text": "def: \u4e00\u500b\u88ab\u9632\u706b\u7246\u7ba1\u7406\u54e1\u8a8d\u53ef\u7684\u95dc\u9375\u7cfb\u7d71(x \u7ffb\u5f97\u597d\u721b)  \u901a\u5e38\u662fapplication proxy\u6216circuit-level proxy\u7684\u5e73\u53f0  characteristics(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18)  \u57f7\u884c\u5b89\u5168\u7684\u4f5c\u696d\u7cfb\u7d71  \u53ea\u6709\u7db2\u8def\u7ba1\u7406\u4eba\u8a8d\u70ba\u662f\u5fc5\u8981\u7684\u670d\u52d9\u624d\u6703\u88ab\u5b89\u88dd  \u6703\u6709\u984d\u5916\u8a8d\u8b49\u7684\u529f\u80fd  \u6bcf\u500bproxy\u90fd\u88ab\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u6a19\u6e96\u670d\u52d9\u7684\u4e00\u90e8\u4efd  \u6bcf\u500bproxy\u90fd\u53ea\u80fd\u8b93\u7279\u5b9a\u7684\u4e3b\u6a5f\u5b58\u53d6  \u6bcf\u500bproxy\u90fd\u6703\u900f\u904e\u8a18\u9304\u6d41\u91cf \u9023\u7dda\u548c\u9023\u7dda\u7684\u6642\u9593\u9577\u77ed\u4f86\u7dad\u8b77\u6aa2\u67e5\u6240\u9700\u7684\u8cc7\u8a0a  \u6bcf\u500bproxy\u90fd\u662f\u5c08\u9580\u70ba\u7db2\u8def\u5b89\u5168\u8a2d\u8a08\u7684\u5c0f\u5c0f\u8edf\u9ad4\u5957\u4ef6  \u6bcf\u500b\u5728bastion host\u4e0a\u7684proxy\u90fd\u662f\u7368\u7acb\u7684 -  \u5c31\u7b97\u67d0\u500bproxy\u51fa\u554f\u984c\u4e5f\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6proxy(\u91cd\u8981\uff0c\u6211\u89ba\u5f97\u6703\u8003!)  \u9664\u4e86\u4e00\u958b\u59cb\u555f\u52d5\u7684\u8a2d\u5b9a\u6a94\u5916\uff0c\u4e0d\u9700\u8981\u5b58\u53d6\u786c\u789f -  \u5165\u4fb5\u8005\u7121\u6cd5\u5c07\u6709\u5371\u96aa\u7684\u6a94\u6848\u503c\u5165bastion host  \u6bcf\u500bproxy\u90fd\u53ea\u6709\u4e00\u822c\u4f7f\u7528\u8005\u7684\u6b0a\u9650\uff0c\u4e14\u5728bastion host\u4e2d\u96b1\u5bc6\u4e14\u5b89\u5168\u7684\u76ee\u9304\u4e2d\u57f7\u884c", 
            "title": "Bastion host"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#host-based-firewall", 
            "text": "a software module used to secure an individual host\n(\u7528\u4f86\u6aa2\u9a57indivitual host\u7684\u8edf\u9ad4\u6a21\u7d44\uff0chost\u5728server\u6216\u662f\u500b\u4eba\u96fb\u8166\u90fd\u53ef)  Filters and restricts the flow of packets  Common location is a server  \u512a\u9ede  Filtering rules can be tailored to the host environment (\u904e\u6ffe\u7684\u898f\u5247\u53ef\u4ee5\u61c9\u7528\u65bchost environment)  \u53ef\u7528\u65bc\u8207\u7368\u7acb\u7684\u9632\u706b\u7246\u7d50\u5408 -  \u63d0\u4f9b\u5176\u4ed6layer\u7684\u4fdd\u8b77  \u5c64\u5c64\u7368\u7acb\uff0c\u4e92\u4e0d\u5f71\u97ff(independent topology)", 
            "title": "Host-based firewall"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#personal-firewall", 
            "text": "controls the traffic between a PC or workstation on one side and the Internet or enterprise network on the other side\n(\u63a7\u5236 \u500b\u4eba\u96fb\u8166\u6216\u5de5\u4f5c\u7ad9 \u5230 \u7db2\u8def\u6216\u4f01\u696d\u7db2\u8def \u7684\u6d41\u91cf)  deny unauthorized remote access to the computer(\u963b\u6b62\u672a\u7d93\u6388\u6b0a\u7684\u9060\u7aef\u5b58\u53d6)  can monitor outgoing activity in an attempt to detect and block worms and other malware(\u53ef\u4ee5\u76e3\u63a7\u5916\u754c\u7684\u6d3b\u52d5 -  \u767c\u73fe\u4e26\u963b\u6b62\u8815\u87f2\u548c\u5176\u4ed6\u60e1\u610f\u8edf\u4ef6\uff0c\u6216\u8aaa\u53ef\u4ee5\u76e3\u63a7outgoing\uff0c\u5411\u5916\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u963b\u64cb\u8815\u87f2\u653b\u64ca(\u56e0\u70ba\u8815\u87f2\u7e41\u6b96\u5f8c\u6703\u5411\u5916\u8dd1\uff0c\u5c0b\u627e\u65b0\u7684\u76ee\u6a19))  is less complex", 
            "title": "Personal firewall"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#dmz", 
            "text": "def: \u4ecb\u65bc\u5167\u90e8\u7db2\u8def\u8207Internet\u9593\u7684\u5340\u57df(\u5b50\u7db2\u8def) \uff0c\u4f5c\u70ba\u5167\u5916\u7db2\u8def\u9593\u7684\u5b89\u5168\u6027\u7de9\u885d\u5730\u5e36\u3002  \u5728\u9632\u706b\u7246\u67b6\u69cb\u4e2d\uff0cDMZ\u5340\u57df\u662f\u63d0\u4f9bInternet\u4f7f\u7528\u8005\u5b58\u53d6\u7db2\u969b\u7db2\u8def\u4f3a\u670d\u5668\u7684\u7db2\u8def\u5340\u57df\uff0c\u5982Webserver\u6216DNS server \u3002  DMZ\u548c\u5167\u90e8\u7db2\u8def\u662f\u5206\u9694\u958b\u4f86\u7684\uff0c\u56e0\u6b64\u5373\u4f7f\u906d\u5230\u653b\u64ca\u4e5f\u4e0d\u6703\u5371\u53ca\u5167\u90e8\u7db2\u8def\u3002", 
            "title": "DMZ"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#firewall-locations-and-topologies", 
            "text": "Host-resident firewall  includes personal firewall software and firewall software on servers    Screening router  a single router between internal and external networks with stateless or full packet filtering(\u6709\u904e\u6ffe\u6a5f\u5236\u7684router\uff0c\u53ef\u4ee5\u5f9escreening\u9019\u500b\u540d\u8a5e\u770b\u51fa\uff0c\u5c31\u662f\u6709\u76e3\u63a7\u529f\u80fd4.)    Single bastion nline  a single firewall between an internal and external router(\u5167\u7db2\u8207\u5916\u7db2\u7684router\u4e2d\u9593\u7684\u9632\u706b\u7246)    Single bastion T  single bastion inline but has a third network interface on bastion to a DMZ(\u5728bastion\u548c\u9632\u706b\u7246\u4e4b\u9593\u9084\u6709\u4e00\u500b\u4ecb\u9762)    Double bastion inline  DMZ is sandwiched between bastion firewalls(DMZ\u593e\u5728\u5169\u500bbastion firewall\u4e4b\u9593)    Double bastion T  DMZ is on a  separate network interface  on the bastion firewall    Distributed firewall configuration  used by some large businesses and government organizations", 
            "title": "Firewall locations and Topologies(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#final-exam-note", 
            "text": "", 
            "title": "Final exam note"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2012finaljan-11-2013", 
            "text": "(3) IPSec \u53ef\u4ee5\u7528\u6ed1\u52d5\u8996\u7a97\u4f86\u963b\u64cb\u91cd\u653e\u653b\u64ca\uff0c\u5177\u9ad4\u6d41\u7a0b\u5982\u4e0b\uff0c\u9996\u5148\u5728\u6ed1\u52d5\u8996\u7a97\u4e2d\uff0c\u5982\u679c\u6709\u4e00\u500b\u5c01\u5305\u7684\u5e8f\u5217\u865f\u5c0f\u65bc\u8996\u7a97\u6700\u5c0f\u7684(\u4e5f\u5c31\u662f\u4f4d\u65bc\u8996\u7a97\u7684\u5de6\u5074\uff0c\u5247\u662f\u70ba\u91cd\u653e\u653b\u64ca\uff0c\u56e0\u70ba\u90a3\u662f\u4e4b\u524d\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305)\uff0c\u5982\u679c\u5c01\u5305\u5e8f\u5217\u865f\u53ef\u4ee5\u843d\u5728\u8996\u7a97\u4e2d\uff0c\u800c\u4e14\u4e4b\u524d\u9084\u6c92\u6709\u88ab\u63a5\u6536\u904e\uff0c\u5247\u662f\u70ba\u65b0\u7684\u5c01\u5305\u63a5\u6536\u4ed6\uff0c\u5982\u679c\u5df2\u7d93\u6709mark\u70ba\u63a5\u6536\u904e\u5247\u4e5f\u662f\u87f2\u653e\u653b\u64ca\uff0c\u62cb\u68c4\u4ed6\uff0c\u5982\u679c\u5c01\u5305\u518d\u8996\u7a97\u7684\u53f3\u908a\uff0c\u53f3\u908a\u90fd\u662f\u9084\u6c92\u63a5\u6536\u904e\u7684\uff0c\u662f\u4e00\u500b\u5168\u65b0\u7684\u5c01\u5305\uff0c\u5247\u5c07\u5176\u63a5\u53d7\u5f8c\uff0c\u628a\u8996\u7a97\u5f80\u53f3\u6ed1\u52d5\u3002    (4) keyspace\u5927\u7684password\u6703\u6bd4\u8f03\u5b89\u5168\uff0c\u800c\u5df2\u7d93\u5efa\u7acb\u65bcdictionary\u7684\u662f\u6700\u4e0d\u5b89\u5168\u7684\u5bc6\u78bc    (5) \u6aa2\u6e2c\u653b\u64ca\u8005\u7684\u5169\u7a2e\u65b9\u6cd5   statistical\u6aa2\u6e2c\uff0c\u63a1\u7528\u7684\u662f\u7528\u4e00\u4e9b\u7d71\u8a08\u8cc7\u8a0a(\u4f8b\u5982\u6d41\u91cf\u3001\u7aef\u53e3\u4f7f\u7528\u3001\u6642\u9593)\u7b49\u7b49\u627e\u51fa\u653b\u64ca\u884c\u70ba\u3002  rule\u6aa2\u6e2c\uff0c\u5229\u7528\u4e00\u4e9b\u5c08\u5bb6\u8a2d\u5b9a\u53ef\u80fd\u662f\u653b\u64ca\u3001\u5165\u4fb5\u8005\u7684\u898f\u5247\u4f86\u627e\u51fa\u3002  \u5dee\u5225\u5728\u65bc\u5f8c\u8005\u7684\u898f\u5247\u662f\u7d81\u6b7b\u7684\uff0c\u8f03\u4e0d\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u80fd\u8f03\u5feb(\u5957\u7528\u65e2\u6709\u898f\u5247)\uff1b\u524d\u8005\u662f\u52d5\u614b\u611f\u77e5\u7684\uff0c\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u6703\u6bd4\u8f03\u6162(\u4e00\u7a2etrade off)    (6) \u76e3\u63a7\u8cc7\u6599\u4e2d\uff0c\u8cc7\u6599\u53ef\u80fd\u6703\u76f8\u7576\u9f90\u5927\uff0c\u6bcf\u4e00\u500b\u90fd\u770b\u7684\u8a71\u592a\u8017\u6642\u4e86\uff0c\u6240\u4ee5\u8981\u6709 \u9078\u64c7\u6027 (selectivity)  (7) \u898b\u4e0a\u65b9\u7b46\u8a18\uff0c\u7c21\u55ae\u4f86\u8aaa\u871c\u7f50\u5c31\u662f\u4e00\u500b\u548c\u4e3b\u8981nerwork\u9694\u958b\u7684\u7cfb\u7d71\uff0c\u507d\u88dd\u8c50\u5bcc\u3001\u6709\u5229\u7528\u50f9\u503c\u7684\u8cc7\u8a0a \u5438\u5f15\u5370\u99ed\u5ba2\u5f80\u90a3\u88cf\u8d70 \uff0c\u5f9e\u800c \u4fdd\u8b77\u4e3b\u8981\u7db2\u8def\u88dd\u7f6e \uff0c\u4e26\u4e14\u871c\u7f50\u662f \u88ab\u76e3\u6e2c \u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u65bc \u6536\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u6599\u4ee5\u4fbf\u8cc7\u5b89\u5206\u6790 \u3002  (8)   (9) \u653b\u64ca\u7684\u65b9\u6cd5\u8acb\u5efa\u4e0a\u65b9\u7b46\u8a18\uff0c\u5f71\u97ffpacket filter\u7684\u65b9\u6cd5\u5982\u4e0b  IP spoofing: \u6709\u4e9b\u4f7f\u7528IP\u4f86\u6e90\u7684\u5c01\u5305\u904e\u6ffe\u5668\u53ef\u80fd\u6703\u88ab\u9a19(\u56e0\u70ba\u653b\u64ca\u8005\u53ef\u4ee5\u5c07\u5c01\u5305\u507d\u9020\u6210\u4e00\u500b\u53ef\u4fe1\u4efb\u7684IP\u5728\u4e0a\u982d\uff0c\u9032\u800c\u9054\u6210\u6b3a\u9a19\u7684\u76ee\u7684)  src routing: \u81ea\u8a02routing\u65b9\u6cd5\u7684\u8a71\uff0c\u5047\u8a2d\u6211\u77e5\u9053\u90a3\u4e9brouter\u662f\u6c92\u6709\u597d\u7684\u5c01\u5305\u5b89\u5168\u6a5f\u5236\uff0c\u6211\u5c31\u53ef\u4ee5\u6545\u610f\u7d93\u904e\u4ed6\u4f86\u9054\u6210\u8eb2\u907f\u6aa2\u6e2c\u7684\u7b11\u904e  tiny fragment: \u4f7f\u7528\u8a31\u591a\u5c0f\u5c01\u5305\u4f86DoS    (10)  stateful: \u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u6709\u7d00\u9304\u5c01\u5305\u72c0\u614b\u7684\u5c01\u5305\u904e\u6ffe\u5668\uff0c\u53ea\u6709\u7b26\u5408\u73fe\u6709\u5141\u8a31\u72c0\u614b\u7684\u5c01\u5305\u6750\u53ef\u4ee5\u8b93\u5b83\u904e\u53bb\uff0c\u5426\u5247\u5c31\u7981\u6b62\uff1b\u984c\u76ee\u7684TCP\u5c01\u5305\u70ba\u4f8b\uff0c\u5982\u679cfilter\u8b93\u73fe\u5728\u9019\u500bSYN\u7684\u5c01\u5305\u901a\u904e\uff0c\u5247\u53ef\u8a18\u9304\u6709\u95dc\u6b64\u5c01\u7684\u72c0\u614b\uff0c\u5c07\u4f86\u6709\u985e\u4f3c\u7684\u5c01\u5305\u4f86\uff0c\u7b26\u5408\u72c0\u614b\u4fbf\u53ef\u4f7f\u5176\u901a\u904e\u3002  stateless: \u53ea\u7528\u73fe\u6709\u5c01\u5305\u7684\u8cc7\u8a0a(\u5982 header\u7b49\u7b49)\u4f86\u6c7a\u5b9a\u662f\u5426\u901a\u904e\uff0c\u5982\u679c\u6709\u4eba\u507d\u9020\u4e86\u4e00\u500b\u4e00\u6a21\u4e00\u6a23header\u7684\u5c01\u5305\uff0c\u4fbf\u53ef\u4ee5\u6b3a\u9a19\u904e\u4ed6(\u56e0\u70ba\u6c92\u6709\u4e4b\u524d\u7684\u72c0\u614b\u53ef\u4f9b\u6bd4\u5c0d)\uff0c\u4fb5\u5165\u7cfb\u7d71\u3002", 
            "title": "2012Final(Jan. 11 2013)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2015finaldec-29-2015", 
            "text": "(1)firewall\u901a\u5e38\u7121\u6cd5\u5230\u9054application \u5c64\u904e\u6ffe\u61c9\u7528\u7a0b\u5f0f\u50b3\u9001\u7684\u8cc7\u6599  (2)  (a) security association \u70ba\u55ae\u5411    (6)  egress\u53ef\u4ee5\u7528\u4f86\u627e\u5230attack src    (7) \u5b9a\u8b70\u984c\uff0c\u8acb\u898b\u4e0a\u9762\u7b46\u8a18\u3002  (9) \u898b\u4e0a\u9762\u8868\u683c\uff0c\u4e2d\u6587\u7684\u90a3\u500b  (10) \u80cc\u8aa6\u984c\uff0c\u898b\u4e0a\u9762\u7b46\u8a18  (11) \u56e0\u70ba\u5bc6\u78bc\u6709\u52a0\u9e7d(\u96a8\u6a5fstr append)\u904e\u5f8c\u624dhash\uff0c\u6240\u4ee5\u6703\u4e0d\u4e00\u6a23  (12) statistical\u5075\u6e2c\u6cd5\u6bd4\u8f03\u80fd\u56e0\u61c9\u65b0\u7684\u653b\u64ca\uff0c\u539f\u56e0\u4e43\u662f\u4ed6\u6bd4\u8f03\u52d5\u614b\uff0c\u6703\u6aa2\u67e5\u4f7f\u7528\u8457\u7684\u8cc7\u6599\u7528\u91cf\u3001\u884c\u70ba\u3001\u7aef\u53e3\u3001\u7db2\u8def\u4f4d\u7f6e\u7b49\u7b49\uff1b\u7136\u800crule based\u7528\u5df2\u7d93\u5beb\u6b7b\u7684\u65e2\u6709\u898f\u5247\u4f86\u5075\u6e2c\uff0c\u56e0\u70ba\u5beb\u6b7b\u4e86\u6240\u4ee5\u5f88\u7cdf\uff0c\u7121\u6cd5\u5c0d\u65b0\u7684\u6709\u6240\u8b8a\u901a\uff0c\u6545stat\u65b9\u6cd5\u624d\u80fd\u5c0d\u6297\u3001\u65b0\u7a4e\u3001\u672a\u77e5\u7684\u5a01\u8105\u3002", 
            "title": "2015final(Dec. 29 2015)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_18", 
            "text": "(5) meta\u75c5\u6bd2\u548cpoly\u75c5\u6bd2\u7684\u5340\u5225? poly\u61c9\u8a72\u662f\u53ea\u6709\u6539\u8b8a\u81ea\u5df1\u7684signature\uff0c\u6216\u662f\u90e8\u5206\u7684code\uff1b\u4f46\u662fmeta\u662f\u6574\u500b\u7a81\u8b8a\u6210\u65b0\u7684\uff0c\u4e0d\u50c5signature\u8b8a\u4e86\uff0ccode\u4e5f\u5b8c\u5168\u4e0d\u540c\uff0c\u561b?  (7) reflexive \u548c non-reflexive DDoS \u7684\u5340\u5225?\uff0creflexive\u597d\u50cf\u9084\u6703\u7d93\u7531\u7b2c\u4e09\u65b9\u4f86\u9593\u63a5\u767c\u9001DDoS\u5c01\u5305\uff0c\u4f7f\u4e3b\u8b00\u66f4\u96e3\u88ab\u67e5\u5230\uff0c\u9032\u800c\u96b1\u8eab\uff0c\u55ce?  (13)\uff0chttp\u5c6c\u65bcweb\uff0c\u6240\u4ee5\u756b\u5728external\u5916?", 
            "title": "\u4ee5\u4e0b\u6709\u7591\u554f\uff0c\u9084\u7169\u8acb\u52a9\u6559\u89e3\u7b54:"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2016finaljan-3-2017", 
            "text": "exam paper(for TA)", 
            "title": "2016final(Jan. 3 2017)"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#_19", 
            "text": "(1) \u9023\u7dda\u516c\u53f8\u7684\u5206\u90e8\uff0c\u61c9\u8a72\u63a1\u7528tunnel mode\u5c31\u597d\uff0c\u5982\u9019\u5f35\u5716(cooperate network\u901a\u5e38\u6703\u7528tunnel mode)\uff0c\u56e0\u70ba\u9019\u6a23\u4e0d\u7528\u6bcf\u4e00\u500b\u5206\u90e8\u7684\u96fb\u8166\u90fd\u8981\u5177\u5099IPSEC\u529f\u80fd\uff0c\u6bd4\u8f03\u7c21\u55ae\uff0c\u800c\u5728\u52a0\u4e0a\u8981\u52a0\u5bc6\uff0c\u5247\u4f7f\u7528ESP in transport mode \n\u5c01\u5305\u5982\u9019\u500btunnel\u6700\u5f8c\u7684\u7d50\u679c    (2)   (a)yes, by using the sliding window with seq number,  (b) drop it     (3)   (a)AH  (b)ESP  ESP with auth     (4)   (a)\u7a81\u8b8a(metamorphism)  (b)\u591a\u578b\u614b(polymorphism)  (\u88dc\u5145)  Polymorphic code: The (same) code takes many forms (like encryptions)  Oligomorphic code: The (same) code takes one of a few predefined forms (and thus can be possibly matched against signatures that can cover all cases)  Metamorphic code: The code mutates, so the code itself is different in each execution (but the functionality the same)       (5)   (a) \u7d71\u8a08\u53ef\u4ee5\u800c\u898f\u5247\u4e0d\u884c: \u65b0\u7684\u5a01\u8105\uff0c\u56e0\u70ba\u65b0\u7684\u5a01\u8105\u4e0d\u6703\u7b26\u5408\u4efb\u4f55\u4e00\u500b\u898f\u5247\uff0c\u662f\u5fc5\u5f97\u7528\u8f03\u70ba\u52d5\u614b\u7684\u7d71\u8a08\u65b9\u5f0f\u5075\u6e2c\u3002  (b) \u898f\u5247\u53ef\u4ee5\u800c\u7d71\u8a08\u4e0d\u884c: \u5728\u7d71\u8a08\u6578\u64da\u4e0a\u8fa8\u8a8d\u4e0d\u51fa\u800c\u898f\u5247\u53ef\u4ee5\u7684(\u4f8b\u5982\u67d0\u500b\u4fb5\u5165\u6027\u653b\u64ca\u4e26\u4e0d\u6703\u89f8\u72af\u4efb\u4f55\u4e00\u500bthreshold\u7684\u8a2d\u5b9a)\uff0c\u56e0\u6b64\u4ed6\u662f\u4e00\u7a2e\u7d71\u8a08\u4f8b\u5916\uff0c\u9700\u8981\u7528\u898f\u5247\u6027\u6aa2\u6e2c\u4f86\u8655\u7406\u3002     (6)   \u4f7f\u7528\u8005\u5e33\u6236\u5728\u8cc7\u6599\u5eab\u5efa\u7acb\u7684\u6642\u5019: \u6703\u5c07\u4f7f\u7528\u8005\u7684 \u5e33\u865f\uff0csalt\u7684\u96a8\u6a5f\u5b57\u4e32\uff0c\u4ee5\u53cahash(salt(password)) \u4e09\u5143\u7d44\u5b58\u5728db\u3002  \u4f7f\u7528\u8005\u8f38\u5165\u5bc6\u78bc\u767b\u5165\u7cfb\u7d71\u7684\u6642\u5019: \u4f7f\u7528\u8005\u8f38\u5165\u5e33\u865f\u5bc6\u78bc\u5f8c\uff0c\u5c0d\u61c9\u53bbquery\u90a3\u500bdb entry\uff0c\u4e26\u4e14\u5c07\u7576\u521d\u7684salt\u6578\u503c\u53d6\u51fa   hash(salt(typein_password)) ?= hash(salt(stored_password)) \u4f86\u78ba\u8a8d\u662f\u4e0d\u662f\u4e00\u500b\u5408\u6cd5\u7684\u767b\u5165\u3002     (7)   (a)  IPS (Intrusion Protection System): \u9632\u60a3\u672a\u7136\uff0c\u9632\u60a3\u5165\u4fb5\u7684\u7cfb\u7d71(\u5728\u5165\u4fb5\u524d)\u3002  IDS (Intrusion Detecion System): \u5373\u6642\u8655\u7406\uff0c\u5728\u5165\u4fb5\u5f8c\u8d95\u7dca\u767c\u73fe\u4e26\u8655\u7406\uff0c\u4f7f\u640d\u5931\u964d\u81f3\u6700\u4f4e\u3002  role: \u904e\u6ffe\u8cc7\u8a0a\uff0c\u5c07\u53ef\u80fd\u9020\u6210\u653b\u64ca\u7684\u6d41\u91cf\u5148\u64cb\u4e0b\uff0c\u55ce?    (b) tiny fragment\u80fd\u653b\u64ca\u6210\u529f\u7684\u539f\u56e0\u5982\u4e0b: \u9996\u5148\uff0c\u56e0\u70ba\u5c01\u5305\u5f88\u5c0f\uff0c\u7528\u4f86\u8fa8\u8b58\u60e1\u610f\u5c01\u5305\u7684pattern\u8fa8\u8a8d\u7cfb\u7d71\u53ef\u80fd\u7121\u6cd5\u5206\u8fa8(\u56e0\u70bapattern\u4e5f\u88ab\u5207\u5272\u4e86)\uff0c(\u6216\u7c21\u55ae\u8aaa\u5c31\u662f\u5c01\u5305\u592a\u5c0f\u5f97\u4ee5\u898f\u907f\u5b89\u5168\u6aa2\u6e2c)\uff0c\u518d\u4f86\uff0c\u5982\u679c\u7528\u5c01\u5305size \u5c0f\u4e5f\u53ef\u4ee5\u8eb2\u907fsize\u6aa2\u6e2c\u7684\u6a5f\u5236\u3002     (8)   (a) rootkit (\u611f\u89ba\u633a\u5e38\u8003)\u4fb5\u5165\u7cfb\u7d71\u4e2d\u507d\u88dd\u6210root\u7684\u975e\u6cd5\u4f7f\u7528\u8005  (b) bot \u662f\u88ab\u60e1\u610f\u8edf\u9ad4\u6216\u653b\u64ca\u8005\u63a7\u5236\u7684\u7db2\u8def\u7cfb\u7d71\uff0c\u800c\u8a31\u591a\u500bbot\u5408\u4f5c\u4e00\u6a23\u7684\u4e8b\u60c5\u5c31\u662f\u6bad\u5c4d\u7db2\u8def(botnet\u3001zombie net) \u6703\u7528\u4f86\u767c\u52d5DDoS\u653b\u64ca   \u56e0\u70ba\u76e3\u6e2c\u5411\u5916\u6d41\u51fa\u7684\u5c01\u5305\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4f86\u6e2c\u5230\u8815\u87f2\u8edf\u9ad4\u8981\u5f9e\u5167\u90e8\u5411\u5916\u7ac4\u51fa\u5c0b\u627e\u4e0b\u4e00\u500b\u76ee\u6a19 (\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54)  (d) \u7528\u4ee5\u6aa2\u6e2c\u8815\u87f2\uff0c\u96a8\u6a5f\u78ba\u8a8d\u9023\u7dda\u662f\u5426\u9054\u67d0\u500b\u53ef\u80fd\u88ab\u5224\u5b9a\u70baworm\u4e8b\u4ef6\u7684\u6d41\u91cf     (9)   (a) \u5206\u6563\u5f0f\u963b\u65b7\u670d\u52d9\u653b\u64ca\uff0c\u85c9\u7531\u767c\u9001\u5927\u91cf\u6d41\u91cf\u4f86\u8b93\u76ee\u6a19\u7db2\u8def\u7cfb\u7d71\u75b2\u65bc\u61c9\u4ed8\uff0c\u751a\u81f3\u7671\u7613\uff0c\u800c\u9020\u6210\u5408\u6cd5\u4f7f\u7528\u8005\u7121\u6cd5\u5b58\u53d6\u8a72\u7db2\u8def\u7cfb\u7d71\u7684\u8cc7\u6e90\u3002  (b) \u6709\u900f\u904e\u7b2c\u4e09\u65b9\u7db2\u8def\u7cfb\u7d71\u3001\u9593\u63a5\u5f62\u5f0f\u7684DDoS\uff0c\u53ef\u4ee5\u8b93\u99ed\u5ba2\u7684I\u6613\u65bc\u96b1\u533f\u3002   \u53c8\u7a31SYN Flood\uff0c\u4e00\u76f4\u9805\u7cfb\u7d71\u767c\u5e03SYN\u5c01\u5305\uff0c\u7cfb\u7d71\u4fbf\u6703\u56de\u61c9SYN-ACK\uff0c\u57fa\u65bcTCP\u4e09\u65b9\u4ea4\u63e1\u539f\u5247\uff0c(\u56e0\u70ba\u81ea\u5df1\u4e5f\u8981\u56de\u61c9\u4e00\u500bACK\u624d\u80fd\u5efa\u7acb\u9023\u7dda\uff0c\uff0c\u5426\u5247\u56e0\u70ba\u7cfb\u7d71\u4ee5\u70ba\u6211\u5011\u6c92\u6536\u5230\uff0c\u4ed6\u8b8a\u5f97\u91cd\u50b3\u5c01\u5305)\uff0c\u4e5f\u6b63\u56e0\u5982\u6b64\u6211\u5011\u5c31\u767c\u4e00\u5806SYN\u4f46\u4e0d\u56de\u61c9\u7cfb\u7d71\u7684SYN-ACK\uff0c\u8b93\u7cfb\u7d71\u75b2\u65bc\u91cd\u65b0\u50b3\u9001\u5c01\u5305\u800c\u7671\u7613\u5176\u8cc7\u6e90\u3002  (d) \u4e00\u76f4\u5411\u7cfb\u7d71\u767c\u5e03ICMP\u63a7\u5236\u5c01\u5305\uff0c\u800c\u8017\u76e1\u983b\u5bec     (10) \u5c0b\u627e\u53ef\u80fd\u6709\u5f31\u9ede\u3001\u6f0f\u6d1e\u7684port\u4ee5\u9032\u884c\u653b\u64ca(\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54)", 
            "title": "\u56e0\u70ba\u6c92\u6709\u6b63\u89e3\uff0c\u6240\u4ee5\u4ee5\u4e0b\u6709\u7591\u554f\u7684\u4e5f\u7169\u8acb\u52a9\u6559\u89e3\u7b54:"
        }, 
        {
            "location": "/univ_notes/network_security/network_security/#2017final-jan-2-2018", 
            "text": "(1)   (a) \u4e09\u500b\u539f\u56e0: \u60e1\u610f\u8edf\u9ad4\u592a\u591a\u7a2e\u3001\u9632\u6bd2\u8edf\u9ad4\u66f4\u65b0\u8cc7\u6599\u5eab\u7684\u901f\u5ea6\u611f\u4e0d\u4e0a\u60e1\u610f\u8edf\u9ad4\u63a8\u9673\u51fa\u65b0\u7684\u901f\u5ea6(\u9053\u9ad8\u4e00\u5c3a\u9b54\u9ad8\u4e00\u4e08?)\u3001  (b) \u4e09\u7a2e: polymorphism, metamorphism, stealthy malwares     (2) \u4e0d\u77e5\u9053\u8036\uff0c\u4f46\u63a8\u6e2c\u61c9\u8a72\u662fcross-site scripting(\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54)   def: \u662f\u4e00\u7a2e\u7db2\u7ad9\u61c9\u7528\u7a0b\u5f0f\u7684\u5b89\u5168\u6f0f\u6d1e\u653b\u64ca\uff0c\u662f\u4ee3\u78bc\u6ce8\u5165\u7684\u4e00\u7a2e\u3002\u5b83\u5141\u8a31\u60e1\u610f\u4f7f\u7528\u8005\u5c07\u7a0b\u5f0f\u78bc\u6ce8\u5165\u5230\u7db2\u9801\u4e0a\uff0c\u5176\u4ed6\u4f7f\u7528\u8005\u5728\u89c0\u770b\u7db2\u9801\u6642\u5c31\u6703\u53d7\u5230\u5f71\u97ff\u3002\u9019\u985e\u653b\u64ca\u901a\u5e38\u5305\u542b\u4e86HTML\u4ee5\u53ca\u4f7f\u7528\u8005\u7aef\u8173\u672c\u8a9e\u8a00\u3002     (3)   (b) \u5f9e\u88ab\u63a7\u5236\u7684zombie\u96fb\u8166\u767c\u9001\u591a\u500bICMP\u63a7\u5236\u5c01\u5305\uff0c\u7d93\u7531\u7b2c\u4e09\u65b9\u7684reflexive server\uff0c\u9593\u63a5\u7684\u653b\u64ca\u53d7\u5bb3\u8005\u4e3b\u6a5f     (4) ingress(\u5427?)\uff0c\u56e0\u70baspoofing attack\u662f\u5916\u9762\u7684\u9020\u5047\u5c01\u5305\u50b3\u5165\u4f5c\u70ba\u653b\u64ca    (5) (\u9019\u4e5f\u4e0d\u662f\u5f88\u78ba\u5b9a\uff0c\u9084\u8acb\u52a9\u6559\u8a73\u7d30\u89e3\u7b54)   (a) stateless \u53ef\u4ee5\u6210\u529f\u5efa\u7acb\u9023\u7dda\uff0c\u56e0\u70ba\u4ed6\u53ea\u6aa2\u67e5\u73fe\u6709\u7684\u5c01\u5305\u5167\u5bb9\u4f86\u5224\u65b7\u662f\u5426\u6709\u5a01\u8105  (b) stateful \u4e0d\u4e00\u5b9a\u80fd\u6210\u529f\u9023\u7dda\uff0c\u4f8b\u5982\u5f9e\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\uff0c\u5982\u679c\u67e5\u95b1\u5148\u524d\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\u5c0d\u61c9\u7684\u898f\u5247\u4e0d\u5141\u8a31\u901a\u904e\u7684\u8a71\uff0c\u5247\u4e0d\u5141\u8a31\u901a\u904e\uff0c\u800c\u7121\u6cd5\u9054\u6210TCP\u3002     (6) \u4e0d\u6703\uff0c\u56e0\u70basalt\u662f\u96a8\u6a5f\u7522\u751f\u7684\u5b57\u4e32\uff0c\u5169\u8005salt\u503c\u4e0d\u540c\uff0c\u5247hash(salt(pass1)) != hash(salt(pass2))    (7)    (8)   (a) TRW: \u662f\u4e00\u7a2e\u5c0d\u4ed8\u8815\u87f2\u7684\u65b9\u6cd5\uff0c\u96a8\u6a5f\u6383\u63cf\u67d0\u500b\u6307\u5b9a\u7684\u9023\u7dda\u4f86\u770b\u662f\u5426\u6709\u53ef\u80fd\u542b\u6709\u8815\u87f2\u3002  (b) rate limiting: \u7576\u767c\u73fe\u53ef\u80fd\u6709\u8815\u87f2\u7684\u5c01\u5305\u6642\uff0c\u9650\u5236\u4f86\u81ea\u90a3\u500bsource\u7684\u5c01\u5305\u6d41\u91cf\u3002     (9) AH, ESP auth   (10) \u4e0a\u9762\u6709\u4e86\u5c31\u4e0d\u91cd\u8907\u5beb\u56c9   (11) \u5169\u500b\u90fd\u662f\u6bd4\u8f03\u4f4e(\u78b0\u649e\u5c11\uff0c\u932f\u8aa4\u7387\u4f4e)\n\u5982\u5716:     (12) \u5c0f\u5c01\u5305\u653b\u64ca\uff0c\u5b9a\u7fa9\u662f\u5c07\u5927\u7684\u5c01\u5305\u5207\u5272\u6210\u6578\u500b\u5c0f\u5c01\u5305\u4f86\u767c\u9001\uff0c\u85c9\u6b64\u898f\u907f\u5b89\u5168\u6aa2\u6e2c\uff0c\u4ee5\u9054\u6210\u653b\u64ca\u3002 \u80fd\u8eb2\u904e\u6aa2\u67e5\u539f\u56e0\u5728\u65bc\uff0c\u7b2c\u4e00\uff0c\u5c01\u5305\u5207\u5272\u5f8c\u8f03\u96e3\u770b\u51fa\u60e1\u610f\u7684pattern(\u56e0\u70bapattern \u4e5f\u88ab\u5207\u5272\u4e86)\uff1b\u7b2c\u4e8c\uff0c\u5207\u5272\u5f8csize\u660e\u986f\u6703\u964d\u4f4e\u8a31\u591a\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u5982\u5927\u5c0f\u6aa2\u67e5\u6a5f\u5236\u7684\u65b9\u6cd5\u3002    (13)   (a) \u5728\u67e5\u8a62\u8cc7\u6599\u5eab\u7684\u6642\u5019\u6c92\u6709\u5728\u8f38\u5165\u6b04\u4f4d\u505a\u5b89\u5168\u6027\u6aa2\u6e2c\uff0c\u8b93\u99ed\u5ba2\u53ef\u4ee5\u593e\u5e36\u60e1\u610fSQL\u6307\u4ee4\u65bc\u5176\u4e2d\u3002  (b) \u53ef\u4ee5\u6488\u51fa\u8a31\u591a\u4f7f\u7528\u8005\u8cc7\u6599   host-based: \u901a\u5e38\u662f\u4fdd\u8b77\u500b\u4eba\u7684\u9632\u706b\u7246\uff1bnetwork-based: \u4fdd\u8b77\u6574\u500b\u7db2\u8def\u62d3\u6a38\u67b6\u69cb\u3001\u7cfb\u7d71\u7684\u9632\u706b\u7246     (14) \u4e0a\u4e00\u6b21\u7684\u7bc4\u570d\uff0c\u5c31\u6c92\u6709\u5beb\u4e86    (15)   (a) \u4ee3\u8868\u843d\u5728\u7a97\u53e3\u7684\u5de6\u908a\uff0c\u662f\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305\uff0c\u6b64\u6642\u518d\u5ea6\u6536\u5230\u4ee3\u8868\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305  (b) \u6709\u5169\u7a2e\u60c5\u5f62  \u60c5\u6cc1\u4e00: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u800c\u4e14\u662f\u6c92\u6709\u5099\u63a5\u6536\u904e\u7684\uff0c\u5247\u63a5\u6536\u4ed6  \u60c5\u6cc1\u4e8c: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u7136\u800c\u662f\u88ab\u63a5\u6536\u904e\u7684\uff0c\u4ee3\u7b46\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305     \u5168\u65b0\u7684\u5c01\u5305\uff0c\u7a97\u53e3\u5411\u53f3\u6ed1\u52d5\u4e00\u500b\u5c01\u5305\u55ae\u4f4d\u4ee5\u63a5\u6536\u9019\u500b\u5c01\u5305     (16)   (a)size of args = 8bytes(char pointer is 8 bytes)  (b)return address will store the value of where the instruction of main is stored for return purpose, which vlaue is  0x08048fe5   buf is 4 bytes, and there are 4 bytes more for $ebp, so total 8 bytes of data to overflow to the return address, payload is \"A\" * 8 + (\\95\\88\\04\\08) due to x86 little endian architecture.", 
            "title": "2017final (Jan. 2 2018)"
        }, 
        {
            "location": "/univ_notes/statistics/stat/", 
            "text": "Statistics\n\n\nSpring 2018 \n\nLecturer: Chih Rung Chen \n\n\nCh3. Random variables and Probability Distributions\n\n\nRandom variables\n\n\n\n\nDefinition: A r.v. \nX\nX\n is called random if it outcome follows the rule of random.\n\n\n\n\nCh4. Decision making for single sample\n\n\nConcept correction\n\n\n\n\n(From stackoverflow)\n\n\u03c3\n\u03c3\n is the population standard deviation, which is generally unknown. Typically, \nX\nX\n (a capital letter) represents a value from the population. This is a random variable (it could take any of , typically, many values). A particular value of X is called \n{x}\n{x}\n (lower case) and has a definite value. If you have n different such sample values you might label them \nx_1,x_2,...,x_n.\nx_1,x_2,...,x_n.\n The average of n values from the population is also a random variable \n\\overline{X}\n\\overline{X}\n and it in turn might have a particular value for n particular sample values, \n\\overline{x}\n\\overline{x}\n. Given a random sample average \n\\overline{X}\n\\overline{X}\n, that sample will have a random sample standard deviation \nS\nS\n. A particular value for this random variable for a known sample of \nn\nn\n values is then \nS\nS\n. The random variable \n\\overline{X}\n\\overline{X}\n for n sample values has a smaller standard deviation than the original \nX\nX\n variable. Its population standard deviation is \n\u03c3_X\u00af = \u03c3 \\over \\sqrt{n}\n\u03c3_X\u00af = \u03c3 \\over \\sqrt{n}\n with sample standard deviation \ns_x\u00af=s \\over\\sqrt{n}.\ns_x\u00af=s \\over\\sqrt{n}.\n\n\n\n\nPart3. Hypothesis testing\n\n\nSet the null Hypothesis\n\n\n\n\nH_0\nH_0\n is the null hypothesis that the researcher want to overthrow(?) \nWe want to test this one\n\n\nH_1\nH_1\n is the alternative hypothesis that the researcher want to gather the proofs and prove it(?) \nWe want to test this one\n\n\nWe test a null hypothesis that is if there exist a (set) of sample that we can overthrow the null hypothesis and thus choose to support the alternative hypothesis.\n\n\nHypothesis testing parameters: \n\\mu ,p ,\\sigma\n\\mu ,p ,\\sigma\n\n\nProcedure \nH1\nH1\n the hypothesis of the researcher(\u7814\u7a76\u8005\u7684\u5047\u8aaa) and for its converse is \nH0\nH0\n () \n\nex:\n\u5de5\u4eba\u751f\u7522\u7684\u71c8\u6ce1\u58fd\u547d\u5c0f\u65bc25000\u5c0f\u6642(\u865b\u7121\u5047\u8aaa\u8207\u5c0d\u7acb\u5047\u8aaa\u4e0d\u80fd\u653e\u7d71\u8a08\u91cf\uff0c\u56e0\u70ba\u6211\u5011\u6709\u8208\u8da3\u7684\u662f\u6bcd\u9ad4\n\\mu\n\\mu\n\u800c\u4e0d\u662f\u6a23\u672c\n\\overline{X}\n\\overline{X}\n) \n\nans:\n \nH_1: \\mu_{night} \n 25000hrs  , and  ,  H_0: \\mu_{night} \\geq 25000\nH_1: \\mu_{night} < 25000hrs  , and  ,  H_0: \\mu_{night} \\geq 25000\n\n\n\n\nCheck the significance level\n\n\n\n\n\\alpha\n\\alpha\n is the significance level: \u865b\u7121\u5047\u8aaa \u5c31\u662f: \u9664\u975e\u6709\u7a4d\u6975\u8b49\u64da\u5426\u5247\u53ea\u597d\u63a5\u53d7\u7684\u5047\u8aaa\u3002\n\u4f8b\u5982 \"\u5169\u8b8a\u6578\u7121\u95dc\u806f\", \"\u5169\u7fa4\u9ad4\u7121\u5dee\u7570\" \u4e4b\u985e\u7684\u90fd\u662f\uff0c\u578bI\u8aa4 \u5c31\u662f: \u7576\u865b\u7121\u5047\u8aaa\u662f\u5c0d\u7684\u6642\u5019, \u4f60\u537b\u5224\u5b9a\u5b83\u662f\u932f\u7684\uff0c\u986f\u8457\u6c34\u6e96 \u5c31\u662f: \u4f60\u80fd\u5141\u8a31\u72af \u578bI\u8aa4 \u7684\u6a5f\u7387\u4e0a\u9650\u3002\n\n\nType1 error vs type2 error\n\n\n\nPower of test is if when rejecting \nH_0\nH_0\n and at the same time H1 is true\n\nPower=1 - \\beta\nPower=1 - \\beta\n\n\n\n\nSo the less p-value, the less probability that according to the current result, is less likely to be happen that \nSUPPOSE (NOTE!! SUPPOSE, NOT THE REAL ONE) \nH_0\nH_0\n IS TRUE\n\n\n\n\n\n\nA a small p-value means that the observed result is highly unlikely if the null hypothesis were true. Consequently, we conclude (since we do observe this result) that the null hypothesis is unlikely to be true, and reject it.\n\n\n\n\n(Self-recognition) the smaller the \n\\alpha\n\\alpha\n is the smaller area that, for example the dual side test error part(outer part) will be, causing the less error probability to reject \nH_0\nH_0\n which is equivalent to \nEven though I reject and describe a new stat , ex \n\\mu\n\\mu\n I still have the less chance to commit error\n\nFor example, \nH_0\nH_0\n says \"avg height = 175cm\",\n\n\n\\alpha\n\\alpha\n region 1 is \n\\mu \\lt 170\n\\mu \\lt 170\n \n\\mu \\gt 180\n\\mu \\gt 180\n\nand \n\\alpha\n\\alpha\n region 2 is \n\\mu \\lt 165\n\\mu \\lt 165\n \n\\mu \\gt 185\n\\mu \\gt 185\n\nsuppose \nH_0\nH_0\n is true, then region 2 covers \nLESS\n area then region 1. This result shows that the sample we observed is further shifted than region 1(\u4ea6\u5373\uff0c\u5340\u57df\u4e8c\u89c0\u6e2c\u5230\u7684\u6578\u64da\u76f8\u8f03\u65bc\u5340\u57df\u4e00\uff0c\u66f4\u986f\u5916\u5074\uff0c\u4ee3\u8868\u66f4\u504f\u96e2\u865b\u7121\u5047\u8a2d\uff0c\u68c4\u537b\u865b\u7121\u5047\u8a2d\u7684\u6b63\u78ba\u7387\u66f4\u597d\uff0c\u4ee3\u8868\u68c4\u537b\u865b\u7121\u5047\u8a2d\u72af\u932f\u7684\u53ef\u6027\u53ef\u4ee5\u964d\u4f4e)\n\n\n\n\nTest statistics\n\n\n\n\nPoint estimator\n\n\n\n\nDecide the rejection region", 
            "title": "Junior 2nd sem. Statistics"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#statistics", 
            "text": "Spring 2018  \nLecturer: Chih Rung Chen", 
            "title": "Statistics"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#ch3-random-variables-and-probability-distributions", 
            "text": "", 
            "title": "Ch3. Random variables and Probability Distributions"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#random-variables", 
            "text": "Definition: A r.v.  X X  is called random if it outcome follows the rule of random.", 
            "title": "Random variables"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#ch4-decision-making-for-single-sample", 
            "text": "", 
            "title": "Ch4. Decision making for single sample"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#concept-correction", 
            "text": "(From stackoverflow) \u03c3 \u03c3  is the population standard deviation, which is generally unknown. Typically,  X X  (a capital letter) represents a value from the population. This is a random variable (it could take any of , typically, many values). A particular value of X is called  {x} {x}  (lower case) and has a definite value. If you have n different such sample values you might label them  x_1,x_2,...,x_n. x_1,x_2,...,x_n.  The average of n values from the population is also a random variable  \\overline{X} \\overline{X}  and it in turn might have a particular value for n particular sample values,  \\overline{x} \\overline{x} . Given a random sample average  \\overline{X} \\overline{X} , that sample will have a random sample standard deviation  S S . A particular value for this random variable for a known sample of  n n  values is then  S S . The random variable  \\overline{X} \\overline{X}  for n sample values has a smaller standard deviation than the original  X X  variable. Its population standard deviation is  \u03c3_X\u00af = \u03c3 \\over \\sqrt{n} \u03c3_X\u00af = \u03c3 \\over \\sqrt{n}  with sample standard deviation  s_x\u00af=s \\over\\sqrt{n}. s_x\u00af=s \\over\\sqrt{n}.", 
            "title": "Concept correction"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#part3-hypothesis-testing", 
            "text": "", 
            "title": "Part3. Hypothesis testing"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#set-the-null-hypothesis", 
            "text": "H_0 H_0  is the null hypothesis that the researcher want to overthrow(?)  We want to test this one  H_1 H_1  is the alternative hypothesis that the researcher want to gather the proofs and prove it(?)  We want to test this one  We test a null hypothesis that is if there exist a (set) of sample that we can overthrow the null hypothesis and thus choose to support the alternative hypothesis.  Hypothesis testing parameters:  \\mu ,p ,\\sigma \\mu ,p ,\\sigma  Procedure  H1 H1  the hypothesis of the researcher(\u7814\u7a76\u8005\u7684\u5047\u8aaa) and for its converse is  H0 H0  ()  \nex: \u5de5\u4eba\u751f\u7522\u7684\u71c8\u6ce1\u58fd\u547d\u5c0f\u65bc25000\u5c0f\u6642(\u865b\u7121\u5047\u8aaa\u8207\u5c0d\u7acb\u5047\u8aaa\u4e0d\u80fd\u653e\u7d71\u8a08\u91cf\uff0c\u56e0\u70ba\u6211\u5011\u6709\u8208\u8da3\u7684\u662f\u6bcd\u9ad4 \\mu \\mu \u800c\u4e0d\u662f\u6a23\u672c \\overline{X} \\overline{X} )  \nans:   H_1: \\mu_{night}   25000hrs  , and  ,  H_0: \\mu_{night} \\geq 25000 H_1: \\mu_{night} < 25000hrs  , and  ,  H_0: \\mu_{night} \\geq 25000", 
            "title": "Set the null Hypothesis"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#check-the-significance-level", 
            "text": "\\alpha \\alpha  is the significance level: \u865b\u7121\u5047\u8aaa \u5c31\u662f: \u9664\u975e\u6709\u7a4d\u6975\u8b49\u64da\u5426\u5247\u53ea\u597d\u63a5\u53d7\u7684\u5047\u8aaa\u3002\n\u4f8b\u5982 \"\u5169\u8b8a\u6578\u7121\u95dc\u806f\", \"\u5169\u7fa4\u9ad4\u7121\u5dee\u7570\" \u4e4b\u985e\u7684\u90fd\u662f\uff0c\u578bI\u8aa4 \u5c31\u662f: \u7576\u865b\u7121\u5047\u8aaa\u662f\u5c0d\u7684\u6642\u5019, \u4f60\u537b\u5224\u5b9a\u5b83\u662f\u932f\u7684\uff0c\u986f\u8457\u6c34\u6e96 \u5c31\u662f: \u4f60\u80fd\u5141\u8a31\u72af \u578bI\u8aa4 \u7684\u6a5f\u7387\u4e0a\u9650\u3002  Type1 error vs type2 error  Power of test is if when rejecting  H_0 H_0  and at the same time H1 is true Power=1 - \\beta Power=1 - \\beta   So the less p-value, the less probability that according to the current result, is less likely to be happen that  SUPPOSE (NOTE!! SUPPOSE, NOT THE REAL ONE)  H_0 H_0  IS TRUE    A a small p-value means that the observed result is highly unlikely if the null hypothesis were true. Consequently, we conclude (since we do observe this result) that the null hypothesis is unlikely to be true, and reject it.   (Self-recognition) the smaller the  \\alpha \\alpha  is the smaller area that, for example the dual side test error part(outer part) will be, causing the less error probability to reject  H_0 H_0  which is equivalent to  Even though I reject and describe a new stat , ex  \\mu \\mu  I still have the less chance to commit error \nFor example,  H_0 H_0  says \"avg height = 175cm\",  \\alpha \\alpha  region 1 is  \\mu \\lt 170 \\mu \\lt 170   \\mu \\gt 180 \\mu \\gt 180 \nand  \\alpha \\alpha  region 2 is  \\mu \\lt 165 \\mu \\lt 165   \\mu \\gt 185 \\mu \\gt 185 \nsuppose  H_0 H_0  is true, then region 2 covers  LESS  area then region 1. This result shows that the sample we observed is further shifted than region 1(\u4ea6\u5373\uff0c\u5340\u57df\u4e8c\u89c0\u6e2c\u5230\u7684\u6578\u64da\u76f8\u8f03\u65bc\u5340\u57df\u4e00\uff0c\u66f4\u986f\u5916\u5074\uff0c\u4ee3\u8868\u66f4\u504f\u96e2\u865b\u7121\u5047\u8a2d\uff0c\u68c4\u537b\u865b\u7121\u5047\u8a2d\u7684\u6b63\u78ba\u7387\u66f4\u597d\uff0c\u4ee3\u8868\u68c4\u537b\u865b\u7121\u5047\u8a2d\u72af\u932f\u7684\u53ef\u6027\u53ef\u4ee5\u964d\u4f4e)", 
            "title": "Check the significance level"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#test-statistics", 
            "text": "Point estimator", 
            "title": "Test statistics"
        }, 
        {
            "location": "/univ_notes/statistics/stat/#decide-the-rejection-region", 
            "text": "", 
            "title": "Decide the rejection region"
        }, 
        {
            "location": "/univ_notes/general/social_psy/", 
            "text": "\u6881\u74ca\u6167\u8001\u5e2b\uff0c\u793e\u6703\u5fc3\u7406\u5b78\u671f\u672b\u7b46\u8a18(Ch4 Thin Slicing \u4e3b\u984c\u5230\u7b2c\u4e03\u7ae0\u5b8c)\n\n\nCh4\n\n\nCh 4.2\u521d\u59cb\u6548\u61c9\u7684\u5f71\u97ff\n\n\n\u6709\u5169\u7a2e\n\n\n\n\nPrimal effect:\u3000\u5b78\u7fd2\u4e00\u9023\u4e32\u6709\u5e8f\u5217\u95dc\u4fc2\u7684\u9805\u76ee\u6642\uff0c\u6392\u5217\u5728\u6700\u521d\u7684\u5b78\u7fd2\u6750\u6599\u8f03\u5bb9\u6613\u8a18\u61b6\u3002\n\n\nBelief perseverance: \u6211\u5011\u50be\u5411\u65bc\u5805\u6301\u521d\u59cb\u6f58\u6bb5\uff0c\u5373\u4fbf\u5f8c\u4f86\u7684\u8cc7\u8a0a\u8b93\u6211\u5011\u91cd\u65b0\u8003\u616e\u3002\n\n\n\n\n\u521d\u59cb\u6548\u61c9(\u7b2c\u4e00\u5370\u8c61)\u7684\u65b9\u6cd5\u8209\u4f8b:\n\n\n* Power posing experiment: \u5c55\u73fe\u9ad8\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u5411\u524d\u50be\uff0c\u800c\u5c55\u73fe\u4f4e\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u8737\u7e2e\u6210\u4e00\u5718\u3002\n\n\nCh4.3 \u6c7a\u5b9a\u3001\u601d\u8003\u5225\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a?\n\n\n\u6709\u5169\u7a2e\u7406\u8ad6\u5982\u4e0b\n\n\n\u6b78\u56e0\u7406\u8ad6(Attribution Theory)\n\n\n\n\n\u7531\u5fc3\u7406\u5b78\u5bb6 Fritz Heider\u63d0\u51fa\uff0c\u4ee3\u8868\u5982\u4f55\u89e3\u91cb\u81ea\u5df1\u548c\u4ed6\u4eba\u67d0\u4e9b\u884c\u70ba\u7684\u539f\u56e0(\u7c21\u800c\u8a00\u4e4b\u5c31\u662f\u5982\u4f55\u89e3\u91cb\u4e00\u500b\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a\uff0cwhy does he/she do such thing?)\uff0c\u6709\u5206\u5169\u7a2e\n\n\n\u5916\u5728\u6b78\u56e0:\u6307\u5c07\u500b\u9ad4\u884c\u70ba\u89e3\u91cb\u70ba\u60c5\u5883\uff08\u74b0\u5883\uff09\u56e0\u7d20\u4f7f\u7136\u8005\uff0c\u4f8b\u5982\u67d0\u4eba\u5c0d\u6211\u767c\u706b\u4e5f\u8a31\u662f\u56e0\u70ba\u5979\u88ab\u5de5\u4f5c\u641e\u5f97\u5f88\u7169\u8e81\u3002\n\n\n\u5167\u5728\u6b78\u56e0:\u6307\u500b\u9ad4\u5c07\u884c\u70ba\u4e4b\u767c\u751f\u89e3\u91cb\u70ba\u81ea\u5df1\u6027\u683c\u4f7f\u7136: \u4f8b\u5982\uff0c\u8aaa\u6117\u4eba\u5c0d\u6211\u767c\u706b\u662f\u56e0\u70ba\u4ed6\u7684\u500b\u6027\u6613\u6012\u3002\n\n\n\n\n\n\n\n\n\u5171\u8b8a\u6a21\u578b(Covariation Model)\n\n\n\n\n\u7531\u5fc3\u7406\u5b78\u5bb6 Harold Kelley\u63d0\u51fa\u8aaa \uff0c\u4eba\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u63a1\u5167\u5728\u6b78\u56e0\uff0c\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u5916\u5728\u6b78\u56e0\u3002\u6bd4\u8f03\u5224\u65b7\u4ed6\u4eba\u7684\u884c\u70ba\u5982\u4f55\u96a8\u8457\u6642\u9593\u3001\u5730\u9ede\u3001\u81ea\u8eab\u89d2\u8272\u3001\u53c3\u8207\u8005\u3001\u5176\u4ed6\u60c5\u5883\u56e0\u7d20\u800c\u300c\u4e00\u8d77\u6539\u8b8a\u300d\uff08\u82f1\u8a9e\uff1acovariate\uff09\u3002\u6b64\u969b\u6709\u4e09\u7a2e\u91cd\u8981\u7684\u8cc7\u8a0a\uff0c\u6216\u7a31\u4e09\u500b\u300c\u7dad\u5ea6\u300d\uff08\u9762\u5411\uff09\u7684\u8003\u91cf\u3002\n\n\n\u4ee5\u4e0a\u63d0\u5230\u7684\u4e09\u500b\u7dad\u5ea6\u5982\u4e0b\n\n\nConsensus \u5171\u8b58 (\u5225\u4eba\u9762\u5c0d\u76f8\u540c\u523a\u6fc0\u8207\u4e3b\u89d2\u6709\u76f8\u540c\u884c\u70ba\u8868\u73fe\u7684\u7a0b\u5ea6)\n\n\nDistinctiveness \u5340\u5225 (\u4e3b\u89d2\u9762\u5c0d\u4e0d\u540c\u523a\u6fc0\u884c\u70ba\u8868\u73fe\u76f8\u540c\u7684\u7a0b\u5ea6)\n\n\nConsistency \u4e00\u81f4 (\u8de8\u60c5\u5883\u548c\u6642\u9593\uff0c\u4e3b\u89d2\u9762\u5c0d\u67d0\u4e00\u523a\u6fc0\u8868\u73fe\u76f8\u540c\u884c\u70ba\u7684\u7a0b\u5ea6)\n\n\nConsensus \u548c Consistency\u7684\u5340\u5225\u5728\u65bc\uff0c\u524d\u8005\u662f\u6709\u6c92\u6709\u4e00\u7fa4\u4eba\u548c\u6211\u505a\u51fa\u4e00\u6a23\u7684\u884c\u70ba\uff0c\u5f8c\u8005\u662f\"\u81ea\u5df1\"\u662f\u5426\u5728\u8de8\u60c5\u5883\u548c\u6642\u9593\u7684\u884c\u70ba\u4e00\u81f4\u3002\n\n\n\n\n\n\n\u5167\u90e8\u898f\u56e0\u70ba\u4e3b\u6642\uff0c(L,L,H)\uff0c\u5916\u90e8\u6642\uff0c(H,H,H)\n\n\n\u5f88\u597d\u7406\u89e3\uff0c\u5167\u90e8\u6b78\u56e0\u70ba\u4e3b\uff0c\u56e0\u70ba\u6307\u552e\u81ea\u5df1\u7684\u6027\u683c\u5f71\u97ff\uff0c\u56e0\u6b64\u4e00\u81f4\u6027\u6703\u6700\u9ad8\uff0c\u5176\u4ed6\u524d\u5169\u500b\u548c\u5916\u90e8\u6bd4\u8f03\u6709\u95dc\u7684\u56e0\u7d20\u5c31\u4e0d\u95dc\n\n\n\u800c\u7576\u5916\u90e8\u6b78\u56e0\u70ba\u4e3b\u6642\uff0c\u524d\u5169\u500b\u548c\u5916\u90e8\u7684\u81ea\u7136\u662f\u4ee5\u9ad8\u6bd4\u7387\u70ba\u4e3b\uff0c\u800c\u6700\u5f8c\u4e00\u500b\u4e5f\u9ad8\u3002\n\n\n\u4ee5\u4e0b\u70ba \u7dad\u57fa\u767e\u79d1\u7684\u4f8b\u5b50: \n\n\n\u82e5\uff1a\u5171\u8b58\u6027\u9ad8\uff08\u5927\u5bb6\u90fd\u6703\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u9ad8\uff08\u8001\u95c6\u4e0d\u5e38\u7f75\u5176\u4ed6\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u5e38\u7f75\u6b64\u54e1\u5de5\uff0c\u5e7e\u4e4e\u662f\u4e00\u898b\u5230\u5c31\u7f75\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5916\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u523a\u6fc0\uff08\u54e1\u5de5\uff09\u8eab\u4e0a\u3002\n\n\n\u82e5\uff1a\u5171\u8b58\u6027\u4f4e\uff08\u9664\u4e86\u8001\u95c6\u4e4b\u5916\uff0c\u5176\u4ed6\u4eba\u4e0d\u600e\u9ebc\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u4f4e\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u8a31\u591a\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u6b64\u54e1\u5de5\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5167\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u884c\u70ba\u4eba\uff08\u8001\u95c6\uff09\u8eab\u4e0a\u3002\n\n\n\n\n\n\n\n\n\n\n\u4e09\u500b\u7dad\u5ea6\u4e0d\u4e00\u5b9a\u90fd\u6703\u540c\u6642\u5b58\u5728\uff0c\u56e0\u6b64Consistency, Distinctiveness \u8f03 Consensus\u5e38\u7528\n\n\n\n\n\u57fa\u672c\u6b78\u56e0\u504f\u8aa4(FAE)\n\n\n\n\n\u4eba\u5011\u5728\u8a55\u4f30\u4ed6\u4eba\u7684\u884c\u70ba\u6642\uff0c\u5373\u4f7f\u6709\u5145\u5206\u7684\u8b49\u64da\u652f\u6301\uff0c\u4f46\u4ecd\u7e3d\u662f\u50be\u5411\u65bc\u9ad8\u4f30\u5167\u90e8\u6216\u500b\u4eba\u56e0\u7d20\u7684\u5f71\u97ff\uff08\u4e00\u5b9a\u662f\u4ed6\u6709\u9019\u6a23\u7684\u4eba\u683c\uff0c\u624d\u505a\u51fa\u9019\u6a23\u7684\u884c\u70ba\uff09\uff0c\u800c\u975e\u5916\u5728\u60c5\u5883\u56e0\u7d20\uff08\u4e5f\u8a31\u662f\u60c5\u52e2\u6240\u8feb\uff0c\u6216\u9019\u500b\u5834\u6240\u6709\u7279\u6b8a\u7684\u6f5b\u898f\u5247\uff09\uff0c\u4ea6\u7a31\u4f5c correspondence bias \u5c0d\u61c9\u504f\u8aa4\uff0c\u56e0\u70ba\u6211\u5011\u90fd\u53ea\u95dc\u6ce8\u65bc\u4eba\u672c\u8eab\uff0c\u800c\u6c92\u6709\u6ce8\u610f\u5230\u5468\u570d\u74b0\u5883\u7684\u5f71\u97ff\u3002\n\n\n\n\n\u5169\u6b65\u9a5f\u6b78\u56e0(Two steps attribute)\n\n\n\n\n\u9996\u5148\u505a\u4e00\u500b\u5167\u90e8\u6b78\u56e0\uff0c\u9019\u6703\u662f\u5f88\u5feb\u7684\u53cd\u61c9\uff0c\u63a5\u8457\u6309\u7167\u60c5\u5883\u8abf\u6574\u6b78\u56e0\uff0c\u4f46\u8981\u8abf\u6574\u591a\u5c11\u5f88\u5bb9\u6613\u8abf\u6574\u4e0d\u5920\uff0c\u9700\u8981\u52aa\u529b\u8207\u610f\u8b58\u7684\u6ce8\u610f\u3002\n\n\n\u4ec0\u9ebc\u6642\u5019\u4ee3\u8868\u81ea\u5df1\u9032\u5165\u6162\u901f\u8abf\u6574\u968e\u6bb5\u4e86\u5462?\n\n\n\u59b3\u6709\u610f\u8b58\u5730\u505c\u4e0b\uff0c\u4e26\u4e14\u5728\u5224\u65b7\u524d\u4ed4\u7d30\u5be9\u601d\n\n\n\u59b3\u60f3\u8981\u505a\u51fa\u7cbe\u6e96\u7684\u5224\u65b7\n\n\n\u59b3\u61f7\u7591\u67d0\u4e9b\u884c\u70ba(\u4f8b\u5982:\u59b3\u61f7\u7591\u67d0\u4eba\u8aaa\u8b0a)\n\n\n\n\n\n\n\n\n\u81ea\u7acb\u6b78\u56e0\u504f\u5dee\n\n\n\n\n\u5373\u4eba\u5011\u901a\u5e38\u5c07\u81ea\u5df1\u7684\u6210\u529f\u6b78\u56e0\u65bc\u81ea\u5df1\u7684\u6027\u683c\u7279\u8cea\uff0c\u800c\u5c07\u81ea\u5df1\u7684\u5931\u6557\u6b78\u56e0\u65bc\u74b0\u5883\u5f71\u97ff\uff0c\u800c\u5c0d\u4ed6\u4eba\u5247\u6b63\u597d\u76f8\u53cd\u3002\n\n\n\n\n\u516c\u5e73\u4e16\u754c\u4fe1\u5ff5\n\n\n\n\n\u5047\u8a2d\u4e16\u754c\u662f\u516c\u5e73\u7684\uff0c\u5584\u6709\u5584\u5831\u60e1\u6709\u60e1\u5831\n\n\n\u512a\u9ede\u662f\u53ef\u4ee5\u76f8\u4fe1\u516c\u6b63\u56e0\u679c\u5831\u61c9\n\n\n\u7f3a\u9ede\u662f\u5bb9\u6613\u8b74\u8cac\u53d7\u5bb3\u4eba\uff0c\u4f8b\u5982\u8aaa\u88ab\u5f37\u66b4\u7684\u4eba\u5c31\u662f\u7a7f\u5f97\u592a\u66b4\u9732\n\n\n\n\n\n\n\n\n\n\nCh4.4 \u6587\u5316\u8207\u793e\u6703\u8a8d\u77e5\n\n\nHolistic vs Analytic Thinking\n\n\n\n\n\u6574\u9ad4: \u5c08\u6ce8\u4eba\u3001\u7269\u4e0a\u9762\uff0c\u8f03\u5c11\u5c08\u6ce8\u5728\u5c0d\u8ac7\u6216\u60c5\u5883\u3002\n\n\n\u5206\u6790: \u5c08\u6ce8\u5728\u4eba\u3001\u7269 \n\u800c\u4e14\n \u9084\u6709\u5468\u570d\u7684\u60c5\u5883\n\n\n\n\n\u5728\u57fa\u672c\u6b78\u56e0\u504f\u8aa4\u4e2d\u7684\u6587\u5316\u5dee\u7570\n\n\n\n\n\u500b\u4eba\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u50be\u5411\u6b78\u56e0(\u504f\u4eba\u683c\u7279\u8cea)\uff0c\u6bd4\u8f03\u50cf\u4eba\u683c\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u7f8e\u570b\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u81ea\u5df1\u7684\u52aa\u529b\u8207\u5929\u8ce6\u3002\n\n\n\u7fa4\u9ad4\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u60c5\u5883\u6b78\u56e0(\u504f\u5916\u90e8\u56e0\u7d20)\uff0c\u6bd4\u8f03\u50cf\u793e\u6703\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u65e5\u672c\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u662f\u5bb6\u5ead\u8207\u670b\u53cb\u5e2b\u9577\u7684\u529f\u52de\u3002\n\n\n\n\nCh5 \u81ea\u6211\n\n\n*[\u81ea\u6211]: self\n\n\nCh5.1 \u81ea\u6211\u6982\u5ff5\uff0c\u81ea\u6211\u6982\u5ff5\u5982\u4f55\u767c\u5c55\n\n\n\n\nself-concept \u81ea\u6211\u6982\u5ff5\uff0c\u4eba\u5011\u76f8\u4fe1\u81ea\u5df1\u64c1\u6709\u7684\u500b\u4eba\u7279\u8cea\n    The overall set of beliefs that people have about their personal attributes.\n\n\nOrigin of the self \u81ea\u6211\u7684\u8d77\u6e90\n\n\nChild's self-concept \u5c0f\u5b69\u7684\u81ea\u6211\u6982\u5ff5\n    \u5177\u9ad4\u3001\u53c3\u7167\u7269\u7406\u7279\u5fb5(\u5e74\u9f61\u3001\u6027\u5225\u3001\u9130\u5c45\u3001\u55dc\u597d)\n\n\nMaturing self-concept \u8da8\u6210\u719f\u7684\u81ea\u6211\u6982\u5ff5\n    \u6bd4\u8f03\u812b\u96e2\u7269\u7406\u7279\u5fb5\n    \u8f03\u591a\u300c\u5fc3\u7406\u72c0\u614b\u300d\u548c\u300c\u5225\u4eba\u5982\u4f55\u8a55\u65b7\u81ea\u5df1\u300d\n\n\n\u7279\u5fb5\u7684\u8b8a\u5316\u6703\u5f71\u97ff\u4eba\u7684\u81ea\u6211\uff1f\n\u4eba\u5011\u50be\u5411\u65bc\u89ba\u5f97\u300c\u9053\u5fb7\u300d\u7684\u8b8a\u5316(\u4f8b\u5982\uff1a\u7c97\u9b6f\u3001\u7a2e\u65cf\u6b67\u8996)\u6703\u6bd4\u300c\u77e5\u89ba\u300d\u7684\u8b8a\u5316(\u4f8b\uff1a\u8996\u529b\u5dee\u6234\u773c\u93e1)\u66f4\u5f71\u97ff\u4eba\u7684\u81ea\u6211\n\n\n\n\n\n\n\n\n\n\n\u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570\n\n\n\n\n\n\n\n\n\n\n\u5730\u5340\n\n\n\u7f8e\u570b\n\n\n\u65e5\u672c\n\n\n\n\n\n\n\n\n\n\n\u8afa\u8a9e(proverb)\n\n\nThe squeaky wheel gets the grease.\n\u5431\u5431\u97ff\u7684\u8f2a\u5b50\u6703\u88ab\u52a0\u4e0a\u6cb9\n\u6703\u5435\u7684\u5b69\u5b50\u6709\u7cd6\u5403(\u505a\u4e8b\u8981\u5c55\u73fe\u81ea\u6211\u7684\u614b\u5ea6)\n\n\nThe nail that stands out gets pounded down. \n \u68d2\u6253\u51fa\u982d\u9ce5(\u5c55\u73fe\u81ea\u6211\u5c31\u6703\u5403\u8667)\n\n\n\n\n\n\n\u81ea\u6211\u89c0\n(view of the self)\n\n\n\u7368\u7acb(independent)\n1. \u7531\u81ea\u5df1\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u4f86\u5b9a\u7fa9\u81ea\u6211\n2. \u7368\u7acb\u3001\u7368\u7279\u5f88\u91cd\u8981\n\n\n\u76f8\u4f9d(\ninter\ndependent)\n1. \u7531\u548c\u4ed6\u4eba\u7684\u95dc\u4fc2\u4f86\u5b9a\u7fa9\u81ea\u6211\n2. \u4ed6\u4eba\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u6703\u5f71\u97ff\u81ea\u6211\n3. \u9023\u7d50\u3001\u76f8\u4f9d\u5f88\u91cd\u8981\n4. \u6253\u58d3\u7368\u7279\u6027 (unique)\n\n\n\n\n\n\n \u4f8b\uff1a\u65e5\u672c\u7687\u592a\u5b50\u5983\u653e\u68c4\u9ad8\u5b78\u6b77\u5de5\u4f5c\u9078\u64c7\u626e\u6f14\u50b3\u7d71\u7684\u59bb\u5b50\u89d2\u8272\uff0c\u8a31\u591a\u897f\u65b9\u4eba\u7121\u6cd5\u7406\u89e3\u3002\n\n\n\n\n\n\n\n\n\n\n \u9019\u5c31\u662f\u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u81ea\u6211 \u7684\u529f\u80fd\n\n\nself-knowledge \u81ea\u6211\u8a8d\u77e5\n\u6211\u5011\u5982\u4f55\u77e5\u9053\u81ea\u5df1\u662f\u8ab0\n\n\nself control \u81ea\u6211\u63a7\u5236\n\u6211\u5011\u5982\u4f55\u4f5c\u8a08\u756b\u3001\u4e0b\u6c7a\u5b9a\n\n\nimpression management \u5370\u8c61\u7ba1\u7406\n\u6211\u5011\u5982\u4f55\u5728\u5c0d\u65b9\u9762\u524d\u8868\u73fe\u81ea\u5df1\uff0c\u4e26\u8b93\u5c0d\u65b9\u7528\u770b\u5f85\u81ea\u5df1\u662f\u5982\u81ea\u5df1\u6240\u671f\u671b\u7684\n\n\nself esteem \u81ea\u5c0a\n\u6211\u5011\u5982\u4f55\u5c0d\u81ea\u5df1\u4fdd\u6301\u4e00\u500b\u6b63\u9762\u7684\u8a55\u50f9\n\n\n\n\n\n\n\n\n\n\nCh5.2 \u5167\u7701\uff0c\u5167\u7701\u53ef\u4ee5\u4e86\u89e3\u81ea\u5df1\u5230\u4ec0\u9ebc\u7a0b\u5ea6\uff1f\n\n\n\u5167\u7701(introspection)\n\n\n\n\n\u4eba\u5011\u5411\u5167\u5be9\u8996\u81ea\u5df1\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u6a5f\u7684\u904e\u7a0b\n\n\n\u4eba\u5011\u5176\u5be6\u4e0d\u5e38\u4f9d\u8cf4\u5167\u7701\uff0c\u56e0\u70ba\uff1a\u5167\u7701\u6709\u6642\u5019\u4ee4\u4eba\u4e0d\u6109\u5feb\uff0c\u611f\u53d7\u548c\u884c\u70ba\u7684\u7406\u7531\u53ef\u80fd\u662f\u5916\u5728\u56e0\u7d20\u3002\n\n\n\n\n\u81ea\u6211\u5bdf\u89ba\u8ad6(Self-Awareness Theory)\n\n\n\n\n\u4e00\u500b\u4eba\u5011\u5c08\u6ce8\u65bc\u5c07\u81ea\u5df1\u7684\u884c\u70ba\u548c\u5167\u5728\uff0c\u5fc3\u7406\u7684\u57fa\u6e96\u6bd4\u8f03\u7684\u60f3\u6cd5\n\n\n\u6709\u6642\u4eba\u5011\u6703\u9003\u907f\u81ea\u6211\uff0c\u4e0d\u60f3\u9762\u5c0d\uff0c\u56e0\u70ba\u81ea\u6211\u5be9\u8996\u7684\u6642\u5019\u662f\u4e00\u7a2e\u9817\u70ba\u53ad\u60e1\u7684\u884c\u70ba(aversive)\n\n\n\u4e26\u975e\u6240\u6709\u7684\u9003\u907f\u81ea\u6211\u90fd\u4e0d\u597d\uff0c\u6709\u6642\u5019\u4e5f\u662f\u4e00\u7a2e\u5b97\u6559\u8868\u9054\u6216\u662f\u5fc3\u9748\u884c\u70ba\uff0c\u6291\u6216\u662f\u5728\u81ea\u6211\u5be9\u8996\u7684\u904e\u7a0b\u4e2d\u80fd\u8b93\u6211\u5011\u77e5\u9053\u4e8b\u60c5\u7684\u662f\u975e\u5c0d\u932f\u3002\n\n\n\n\n\u5224\u65b7\u6211\u5011\u70ba\u4f55\u611f\u53d7\u3001\u89e3\u91cb\u81ea\u5df1\u7684\u884c\u70ba(Judging Why We Feel the Way We Do)\n\n\n\n\n\u96e3\u4ee5\u65b7\u5b9a\uff0c\u4f8b\u5982\uff0c\u59b3\u70ba\u4ec0\u9ebc\u6703\u9677\u5165\u9019\u500b\u60c5\u7dd2\u3002\n\n\n\u4ee5\u56e0\u679c\u8ad6\u4f86\u89e3\u91cb: \u9020\u6210\u4e00\u500b\u4eba\u60f3\u6cd5\u548c\u884c\u70ba\u7684\u539f\u56e0\uff0c\u901a\u5e38\u6703\u7531\u6587\u5316\u4f86\u5b78\u7fd2\u3002\n\u4f46\u6a5f\u6a21\u548c\u7406\u8ad6\u4e26\u975e\u7d55\u5c0d\u6b63\u78ba\n\n\n\n\n\u5c0d\u65bc\u539f\u56e0\u7684\u81ea\u7701\u7684\u7d50\u679c(Consequences of Introspecting About Reasons)\n\n\n\n\n\u6211\u5011\u8a8d\u70ba\u614b\u5ea6\u7684\u6539\u8b8a\u53ef\u4ee5\u60f3\u5230\u6709\u67d0\u4e9b\u539f\u56e0\u4f86\u89e3\u91cb\u6b64\u7a2e\u8f49\u8b8a\uff0c\u540c\u6642\uff0c\u4eba\u5011\u5047\u5b9a\u4ed6\u5011\u7684\u614b\u5ea6\u8f49\u8b8a\u7684\u539f\u56e0\u662f\u5bb9\u6613\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u3002\n\n\n\u7f3a\u9ede\u5982\u4e0b\n\n\n\u53ea\u5c08\u6ce8\u65bc\u80fd\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u65b9\u5411\n\n\n\u4f46\u5c0d\u65bc\u96e3\u4ee5\u8868\u9054\u3001\u89e3\u91cb\u7684\u539f\u56e0\u901a\u5e38\u5c31\u5ffd\u7565\u6389\n\n\n\u4f46\u4e5f\u5c31\u662f\u90a3\u7a2e\u96e3\u4ee5\u89e3\u91cb\u7684\u539f\u56e0\u624d\u662f\u771f\u6b63\u5f71\u97ff\u9577\u9060\u7684\n\n\n\n\n\n\n\n\n\n\nCh5.3 \u4eba\u5011\u5982\u4f55\u4ee5\u89c0\u5bdf\u81ea\u5df1\u7684\u884c\u70ba\u4f86\u4e86\u89e3\u81ea\u5df1\n\n\n\u81ea\u6211\u77e5\u89ba\u8ad6(Self-Perception Theory)\n\n\n\n\n\u7576\u6211\u5011\u7684\u614b\u5ea6\u4e0d\u5b9a\u6642\uff0c\u6211\u5011\u6703\u8457\u91cd\u65bc\u63a8\u8ad6\u7576\u6642\u767c\u751f\u7684\u60c5\u666f\u3002\n\n\n\u4e0d\u5b9a\u6642\uff0c\u4e5f\u6703\u5f9e\u884c\u70ba\u4f86\u63a8\u65b7\u5167\u5728\u611f\u53d7\u3002\n\n\n\u6703\u60f3\u8981\u5224\u65b7\u9019\u4e9b\u884c\u70ba\u662f\u5426\u80fd\u53cd\u6620\u51fa\u5011\u7684\u611f\u53d7\u4ee5\u53ca\u9019\u500b\u60c5\u6cc1\u662f\u5426\u80fd\u53cd\u6620\u51fa\u6211\u70ba\u4f55\u90a3\u9ebc\u505a\u3002\n\n\n\n\n\u5167\u5916\u5728\u52d5\u6a5f(Intrinsic vs Extrinsic Motivation)\n\n\n\n\nIn: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u81ea\u5df1\u559c\u6b61\uff0c\u500b\u6027\u9a45\u4f7f\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u6211\u771f\u7684\u559c\u6b61\u548c\u4ed6\u4eba\u5408\u4f5c\u3002\n\n\nEx: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u6709\u5916\u5728\u5229\u76ca\uff0c\u800c\u975e\u672c\u8eab\u559c\u6b61\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u70ba\u4e86\u8cfa\u53d6\u6d25\u8cbc\u3002\n\n\n\u4f8b\u5982\u8003\u91cf\u5230\u5916\u5728\u52d5\u6a5f\uff0c\u5bb6\u9577\u53ef\u80fd\u6703\u7528\u91d1\u9322\u3001\u9ede\u6578\u3001\u73a9\u5177\u7b49\u7b49\u734e\u52f5\n\n\n\u4f46\u53ef\u80fd\u6703\u6709\u53cd\u6548\u679c\uff0c\u8b93\u5c0f\u670b\u53cb\u8b8a\u5f97\u592a\u552f\u5229\u662f\u5716\u3002\n\n\n\u904e\u5ea6\u8faf\u8b77\u6548\u61c9: \u4eba\u985e\u7684\u884c\u70ba\u4e2d\u5167\u5916\u5728\u52d5\u6a5f\u90fd\u6703\u6709\u6240\u4f5c\u7528\uff0c\u4f46\u662f\u6709\u6642\u5019\u6703\u628a\u5916\u5728\u52d5\u6a5f\u770b\u5f97\u592a\u5f37\u70c8\uff0c\u4ee5\u81f3\u65bc\u4f4e\u4f30\u5167\u5728\u52d5\u6a5f\u5e36\u4f86\u7684\u5f71\u97ff\u3002\n\n\n\u4ee5\u8868\u73fe\u70ba\u689d\u4ef6\u7684\u734e\u8cde\u8f03\u80fd\u964d\u4f4e\u5167\u5728\u8208\u8da3\u7684\u640d\u5bb3\uff0c\u539f\u56e0\u5728\u65bc\uff0c\u8868\u73fe\u7684\u597d\u624d\u80fd\u771f\u6b63\u4ee3\u8868\u4e00\u500b\u4eba\u559c\u6b61\u9019\u500b\u6771\u897f\uff0c\u800c\u4e0d\u662f\u70ba\u4e86\u505a\u800c\u505a\u3002\u5982\u679c\u53ea\u662f\u628a\u4e8b\u60c5\u505a\u5230\u4e86\u800c\u6c92\u6709\u505a\u597d\uff0c\u90a3\u4e26\u4e0d\u80fd\u4ee3\u8868\u4ed6\u771f\u6b63\u559c\u6b61\u9019\u4ef6\u4e8b\u60c5\u3002\n\n\n\n\n\u5fc3\u614b\n\n\n\n\n\u56fa\u5b9a: \u6211\u5011\u6709\u4e9b\u80fd\u529b\u7121\u6cd5\u6539\u8b8a\u7684\n\n\n\u6210\u9577: \u6211\u5011\u7684\u80fd\u529b\u662f\u53ef\u5851\u9020\u7684\uff0c\u96a8\u8457\u6210\u9577\u6539\u8b8a\n\n\n\u56fa\u5b9a\u5fc3\u614b\u5728\u6210\u9577\u4e2d\u5bb9\u6613\u88ab\u653e\u68c4\uff0c\u56e0\u70ba\u4e0d\u5408\u6642\u5b9c\n\n\n\n\n\u60c5\u7dd2\u4e8c\u56e0\u8ad6(2 Factor Theory of Emotion)\n\n\n\n\n\u610f\u8b58\u5230\u81ea\u5df1\u7684\u751f\u7406\u6fc0\u767c\u72c0\u614b(psysiological arousal)\n\n\n\u627e\u5c0b\u5c0d\u65bc\u6fc0\u767c\u904e\u5f8c\u7684\u751f\u7406\u72c0\u614b\u505a\u51fa\u5408\u7406\u7684\u89e3\u91cb\uff0c\u4ea6\u5373\u81ea\u6211\u77e5\u89ba\u7684\u904e\u7a0b\n\n\n\u4f46\u6709\u6642\u5019\u6703\u56e0\u70ba\u932f\u8aa4\u6b78\u56e0\u800c\u5c0e\u81f4\u60c5\u7dd2\u5224\u65b7\u5931\u771f(\u6881\u8001\u5e2b\u63d0\u5230\u7684)\u540a\u6a4b\u5be6\u9a57)\n\n\n\u8aa4\u5224\u7684\u60c5\u6cc1: \u4e8c\u56e0\u8ad6\u7684\u5224\u65b7\u65b9\u6cd5\uff0c\u901a\u5e38\u6703\u5f88\u4e3b\u89c0\uff0c\u4f9d\u8cf4\u65bc\u81ea\u5df1\u7684\u89e3\u91cb(\u4f8b\u5982\u7ad9\u5728\u540a\u6a4b\u81bd\u6230\u5fc3\u9a5a\uff0c\u5973\u751f\u8d70\u904e\u4f86\u6703\u4ee5\u70ba\u81ea\u5df1\u5c31\u662f\u559c\u6b61\u5979)\n\n\n\n\n\n\nCh5.4 \u4eba\u5011\u5982\u4f55\u7528\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u5df1\n\n\n\n\n\u81ea\u5c0a\u7531\u5468\u906d\u7684\u4eba\u578b\u5851\n\n\n\n\n\u7d93\u7531\u6bd4\u8f03\u81ea\u5df1\u548c\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u6211\n\n\n\n\n\u4f8b\u5982\u6bd4\u8f03\u80fd\u529b: \u6211\u8cfa\u591a\u5c11\uff0c\u4ed6\u8cfa\u591a\u5c11\uff0c\u4ed6\u591a\u6211\u5c11\uff0c\u6211\u8f03\u4e0d\u597d\u3002\n\n\n\u793e\u6703\u6bd4\u8f03\u8ad6(Social Comparsion Theory): \u6211\u5011\u7d93\u7531\u8207\u5225\u4eba\u6bd4\u8f03\u4f86\u5c0d\u81ea\u5df1\u7684\u614b\u5ea6\u8207\u80fd\u529b\u6709\u6240\u4e86\u89e3\u3002\u6703\u63a2\u8a0e\u5169\u500b\u91cd\u8981\u7684\u6771\u897f\n\n\n\u4f55\u6642\u9032\u5165\u4e86\u793e\u6703\u6bd4\u8f03\u8ad6: \u7576\u6211\u5011\u4e0d\u78ba\u5b9a\u7684\u6642\u5019(\u5c0d\u65bc\u81ea\u5df1\u7684\u80fd\u529b\u4e0d\u78ba\u5b9a\uff0c\u52e2\u5fc5\u5c31\u5f97\u6bd4\u8f03)\n\n\n\u59b3\u8ddf\u8ab0\u6bd4\u8f03: \u6700\u521d\u6703\u5148\u548c\u8eab\u908a\u7684\u4eba\n\n\n\u5411\u4e0a\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u597d\u7684\u4eba\u6bd4\u8f03\uff0c\u70ba\u4e86\u77e5\u9053\u81ea\u5df1\u7684\u6975\u9650\u4ee5\u53ca\u4e0d\u8db3\u3002\n\n\n\u5411\u4e0b\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u5dee\u7684\u4eba\u6bd4\u8f03\uff0c\u986f\u5f97\u81ea\u5df1\u8f03\u70ba\u512a\u8d8a\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u7d93\u7531\u5438\u6536\u4ed6\u4eba(\u5c0d\u6211\u7684)\u89c0\u611f\u4f86\u4e86\u89e3\u81ea\u6211\n\n\n\n\n\u5eab\u5229\u7684\u93e1\u4e2d\u81ea\u6211: \u501f\u4ed6\u4eba\u4e86\u89e3\u81ea\u5df1\u3002\n\n\n\u793e\u6703\u8abf\u7bc0(Social Tuning): \u4eba\u5011\u63a5\u53d7\u3001\u63a1\u7528\u4ed6\u4eba\u7684\u614b\u5ea6\u3002(\u6709\u6642\u4e0d\u592a\u6e96\u78ba\uff0c\u56e0\u70ba\u4eba\u5011\u50be\u5411\u65bc\u63a5\u53d7\u559c\u6b61\u7684\u4eba\u7684\u614b\u5ea6\u800c\u53cd\u4e4b\u4ea6\u7136)\n\n\n\n\n\u7d93\u7531\u5c0d\u4ed6\u4eba\u8aee\u8a62\u4f86\u4e86\u89e3\u81ea\u5df1\u7684\u672a\u4f86\n\n\n\n\n\u60c5\u611f\u9810\u6e2c(Affective Forecasts) \u4eba\u5011\u5c0d\u65bc\u672a\u4f86\u906d\u9047\u5230\u60c5\u7dd2(\u66f4\u7cbe\u78ba\u5730\u8aaa\uff0c\u60c5\u7dd2\u74b0\u5883)\u7684\u4f30\u8a08\u3001\u9810\u6e2c\u3002\n\n\n\n\n\n\n\n\nCh5.5 \u81ea\u6211\u63a7\u5236\uff0c\u8207\u5176\u57f7\u884c\u529f\u80fd\uff0c\u5565\u6642\u6210\u529f\u6291\u6216\u662f\u5931\u6557\u5462\n\n\n\n\n\u81ea\u6211\u63a7\u5236(Self Control): \u70ba\u73fe\u5728\u505a\u6c7a\u5b9a\u3001\u70ba\u672a\u4f86\u505a\u6e96\u5099\u3002\n\n\n\u6291\u5236\u60f3\u6cd5: \u6703\u60f3\u8981\u4e0d\u53bb\u60f3\u6211\u5011\u60f3\u5fd8\u8a18\u7684\u4e8b\u60c5\uff0c\u4f46\u5176\u5be6\u4e0d\u5bb9\u6613\uff0c\u4e5f\u4e0d\u90a3\u9ebc\u6709\u6548\u3002\n\n\n\u6d88\u8017\u6548\u61c9(Depleting Effect): \u5728\u4e00\u500b\u4eba\u683c\u65b9\u9762\u4ed8\u51fa\u52aa\u529b\uff0c\u5c31\u6703\u5728\u53e6\u4e00\u65b9\u9762\u6709\u6240\u6d88\u8017(\u4f8b\u5982\u5728\u4e0b\u5348\u7684\u6642\u5019\u4e0b\u8f09\u975e\u6cd5\u6b4c\u66f2\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u70ba\u6b64\u6642\u5c0d\u65bc\u5c0d\u6297\u90aa\u60e1\u80fd\u529b\u6709\u6240\u6d88\u8017)\n\n\n\n\n\n\nCh5.6 \u5370\u8c61\u7ba1\u7406(Impression Management) \u53c8\u53eb\u505a \u81ea\u6211\u5448\u73fe(Self Presentation)\n\n\n\n\n\u5370\u8c61\u7ba1\u7406(Impression Management):\u3000\u4eba\u5011\u6703\u5982\u4f55\u63cf\u7e6a\u81ea\u5df1\uff0c\u4f7f\u5f97\u5225\u4eba\u770b\u5f85\u81ea\u5df1(\u88ab\u770b)\u662f\u7b26\u671f\u671b\u7684\u3002\n\n\n\n\n\u9022\u8fce(Ingratiation)\u8207\u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping)\n\n\n\n\n\n\n\u9022\u8fce(Ingratiation): \u62cd\u99ac\u5c41\u3001\u8b9a\u7f8e\uff0c\u8b93\u81ea\u5df1\u662f\u80fd\u88ab\u4ed6\u4eba\u559c\u6b61\u7684(Making ourselves likable to another person)\u901a\u5e38\u662f\u5c0d\u65bc\u5730\u4f4d\u6bd4\u6211\u5011\u9ad8\u7684\u4eba\u9032\u884c\u9022\u8fce\u8ac2\u5a9a\u7684\u884c\u70ba\u3002\n\n\n\n\n\n\n\u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping): \u70ba\u81ea\u5df1\u7684\u904e\u932f\u627e\u7406\u7531\uff0c\u4f8b\u5982\u90fd\u5077\u61f6\u4e0d\u53bb\u7df4\u6821\u968a(\u53d6\u81ea\u4e2d\u6b63\u5927\u5b78\u5fc3\u7406\u71df: \u81ea\u6211\u8a2d\u969c\uff08self-handicapping\uff0c\u53c8\u7a31\u81ea\u6211\u8a2d\u9650\uff09\u6211\u5011\u50be\u5411\u5b89\u6392\u4e00\u500b\u60c5\u5883\uff0c\u8b93\u81ea\u5df1\u5728\u5931\u6557\u51fa\u73fe\u4e4b\u5f8c\uff0c\u4e0d\u6703\u8b93\u5225\u4eba\u89ba\u5f97\u662f\u81ea\u5df1\u80fd\u529b\u4e0d\u8db3\u800c\u964d\u4f4e\u81ea\u5df1\u7684\u81ea\u5c0a\uff0c\u4e5f\u5c31\u662f\u7559\u500b\u9000\u8def\u627e\u53f0\u968e\u4e0b\u3002)\uff0c\u5931\u6557\u537b\u8aaa\u4e0d\u662f\u81ea\u5df1\u6c92\u6709\u597d\u597d\u7df4\u7fd2\uff0c\u800c\u662f\u8aaa\u6c92\u6709\u6642\u9593\u7b49\u7b49\u3002\u81ea\u6211\u8a2d\u969c\u53c8\u5206\u70ba\u4ee5\u4e0b\u5169\u7a2e\n\n\n\n\n\u884c\u70ba\u81ea\u6211\u8a2d\u969c(Behavioral self-handicapping)\uff0c\u53cd\u5411\u5730\u505a\u4e00\u4e9b\u770b\u4f3c\u6703\u6e1b\u5c11\u6210\u529f\u6a5f\u7387\u7684\u884c\u70ba\uff0c\u56e0\u6b64\u5373\u4fbf\u4ed6\u5011\u5931\u6557\u4e86\u4e5f\u6709\u53f0\u968e\u4e0b\uff0c\u8aaa\u4ec0\u9ebc\u6211\u8003\u524d\u4e00\u5929\u90fd\u5728\u6253\u96fb\u73a9\u624d\u6703\u8003\u4e0d\u597d\uff0c\u800c\u4e0d\u662f\u6211\u4e0a\u8ab2\u4e0d\u8a8d\u771f\u3001\u638c\u63e1\u4e0d\u719f\u3002\n\n\n\u53e3\u982d\u81ea\u6211\u8a2d\u969c(Reported self-handicapping)\uff0c\u6c92\u6709\u505a\u4e00\u4e9b\u6703\u963b\u64cb\u6210\u529f\u7684\u4e8b\u60c5\uff0c\u4f46\u50be\u5411\u65bc\u627e\u85c9\u53e3\u3002\u4f8b\u5982\u8aaa\u8003\u4e0d\u597d\u662f\u56e0\u70ba\u8003\u8a66\u7684\u6642\u5019\u809a\u5b50\u75db\n\n\n\n\n\n\n\n\n\n\nCh5.7 \u81ea\u5c0a:\u6211\u5011\u5c0d\u81ea\u5df1\u7684\u611f\u53d7\n\n\n\n\nself esteem \u81ea\u5c0a: \u4eba\u5011\u5c0d\u81ea\u5df1\u7684\u6574\u9ad4\u8a55\u50f9(\u6b63\u3001\u8ca0\u9762)\n\n\n\u9ad8\u81ea\u5c0a\u7684\u512a\u9ede: \n\n\n\u5373\u4fbf\u74b0\u5883\u8271\u56f0\u7684\u6642\u5019\u4e5f\u80fd\u5805\u6301\u4f4f\u3002\n\n\n\n\n\n\n\u7121\u61fc\u6b7b\u4ea1(? \u4e0d\u61c2\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u500b \u5728ppt p79 \u7b2c\u4e00\u9805)\n\n\n\n\n\n\n\n\n\n\n\u81ea\u6200\u884c\u70ba(Narcissism) \u7531\u904e\u5ea6\u7684\u81ea\u6211\u6200\u611b\u4ee5\u53ca\u6b20\u7f3a\u5c0d\u4ed6\u4eba\u7684\u540c\u7406\u5fc3\u6240\u5f62\u6210\u3002", 
            "title": "Junior 2nd sem. Social Psychology"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch4-thin-slicing", 
            "text": "", 
            "title": "\u6881\u74ca\u6167\u8001\u5e2b\uff0c\u793e\u6703\u5fc3\u7406\u5b78\u671f\u672b\u7b46\u8a18(Ch4 Thin Slicing \u4e3b\u984c\u5230\u7b2c\u4e03\u7ae0\u5b8c)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch4", 
            "text": "", 
            "title": "Ch4"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch-42", 
            "text": "", 
            "title": "Ch 4.2\u521d\u59cb\u6548\u61c9\u7684\u5f71\u97ff"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_1", 
            "text": "Primal effect:\u3000\u5b78\u7fd2\u4e00\u9023\u4e32\u6709\u5e8f\u5217\u95dc\u4fc2\u7684\u9805\u76ee\u6642\uff0c\u6392\u5217\u5728\u6700\u521d\u7684\u5b78\u7fd2\u6750\u6599\u8f03\u5bb9\u6613\u8a18\u61b6\u3002  Belief perseverance: \u6211\u5011\u50be\u5411\u65bc\u5805\u6301\u521d\u59cb\u6f58\u6bb5\uff0c\u5373\u4fbf\u5f8c\u4f86\u7684\u8cc7\u8a0a\u8b93\u6211\u5011\u91cd\u65b0\u8003\u616e\u3002", 
            "title": "\u6709\u5169\u7a2e"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_2", 
            "text": "", 
            "title": "\u521d\u59cb\u6548\u61c9(\u7b2c\u4e00\u5370\u8c61)\u7684\u65b9\u6cd5\u8209\u4f8b:"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#power-posing-experiment", 
            "text": "", 
            "title": "* Power posing experiment: \u5c55\u73fe\u9ad8\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u5411\u524d\u50be\uff0c\u800c\u5c55\u73fe\u4f4e\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u8737\u7e2e\u6210\u4e00\u5718\u3002"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch43", 
            "text": "\u6709\u5169\u7a2e\u7406\u8ad6\u5982\u4e0b", 
            "title": "Ch4.3 \u6c7a\u5b9a\u3001\u601d\u8003\u5225\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a?"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#attribution-theory", 
            "text": "\u7531\u5fc3\u7406\u5b78\u5bb6 Fritz Heider\u63d0\u51fa\uff0c\u4ee3\u8868\u5982\u4f55\u89e3\u91cb\u81ea\u5df1\u548c\u4ed6\u4eba\u67d0\u4e9b\u884c\u70ba\u7684\u539f\u56e0(\u7c21\u800c\u8a00\u4e4b\u5c31\u662f\u5982\u4f55\u89e3\u91cb\u4e00\u500b\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a\uff0cwhy does he/she do such thing?)\uff0c\u6709\u5206\u5169\u7a2e  \u5916\u5728\u6b78\u56e0:\u6307\u5c07\u500b\u9ad4\u884c\u70ba\u89e3\u91cb\u70ba\u60c5\u5883\uff08\u74b0\u5883\uff09\u56e0\u7d20\u4f7f\u7136\u8005\uff0c\u4f8b\u5982\u67d0\u4eba\u5c0d\u6211\u767c\u706b\u4e5f\u8a31\u662f\u56e0\u70ba\u5979\u88ab\u5de5\u4f5c\u641e\u5f97\u5f88\u7169\u8e81\u3002  \u5167\u5728\u6b78\u56e0:\u6307\u500b\u9ad4\u5c07\u884c\u70ba\u4e4b\u767c\u751f\u89e3\u91cb\u70ba\u81ea\u5df1\u6027\u683c\u4f7f\u7136: \u4f8b\u5982\uff0c\u8aaa\u6117\u4eba\u5c0d\u6211\u767c\u706b\u662f\u56e0\u70ba\u4ed6\u7684\u500b\u6027\u6613\u6012\u3002", 
            "title": "\u6b78\u56e0\u7406\u8ad6(Attribution Theory)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#covariation-model", 
            "text": "\u7531\u5fc3\u7406\u5b78\u5bb6 Harold Kelley\u63d0\u51fa\u8aaa \uff0c\u4eba\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u63a1\u5167\u5728\u6b78\u56e0\uff0c\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u5916\u5728\u6b78\u56e0\u3002\u6bd4\u8f03\u5224\u65b7\u4ed6\u4eba\u7684\u884c\u70ba\u5982\u4f55\u96a8\u8457\u6642\u9593\u3001\u5730\u9ede\u3001\u81ea\u8eab\u89d2\u8272\u3001\u53c3\u8207\u8005\u3001\u5176\u4ed6\u60c5\u5883\u56e0\u7d20\u800c\u300c\u4e00\u8d77\u6539\u8b8a\u300d\uff08\u82f1\u8a9e\uff1acovariate\uff09\u3002\u6b64\u969b\u6709\u4e09\u7a2e\u91cd\u8981\u7684\u8cc7\u8a0a\uff0c\u6216\u7a31\u4e09\u500b\u300c\u7dad\u5ea6\u300d\uff08\u9762\u5411\uff09\u7684\u8003\u91cf\u3002  \u4ee5\u4e0a\u63d0\u5230\u7684\u4e09\u500b\u7dad\u5ea6\u5982\u4e0b  Consensus \u5171\u8b58 (\u5225\u4eba\u9762\u5c0d\u76f8\u540c\u523a\u6fc0\u8207\u4e3b\u89d2\u6709\u76f8\u540c\u884c\u70ba\u8868\u73fe\u7684\u7a0b\u5ea6)  Distinctiveness \u5340\u5225 (\u4e3b\u89d2\u9762\u5c0d\u4e0d\u540c\u523a\u6fc0\u884c\u70ba\u8868\u73fe\u76f8\u540c\u7684\u7a0b\u5ea6)  Consistency \u4e00\u81f4 (\u8de8\u60c5\u5883\u548c\u6642\u9593\uff0c\u4e3b\u89d2\u9762\u5c0d\u67d0\u4e00\u523a\u6fc0\u8868\u73fe\u76f8\u540c\u884c\u70ba\u7684\u7a0b\u5ea6)  Consensus \u548c Consistency\u7684\u5340\u5225\u5728\u65bc\uff0c\u524d\u8005\u662f\u6709\u6c92\u6709\u4e00\u7fa4\u4eba\u548c\u6211\u505a\u51fa\u4e00\u6a23\u7684\u884c\u70ba\uff0c\u5f8c\u8005\u662f\"\u81ea\u5df1\"\u662f\u5426\u5728\u8de8\u60c5\u5883\u548c\u6642\u9593\u7684\u884c\u70ba\u4e00\u81f4\u3002    \u5167\u90e8\u898f\u56e0\u70ba\u4e3b\u6642\uff0c(L,L,H)\uff0c\u5916\u90e8\u6642\uff0c(H,H,H)  \u5f88\u597d\u7406\u89e3\uff0c\u5167\u90e8\u6b78\u56e0\u70ba\u4e3b\uff0c\u56e0\u70ba\u6307\u552e\u81ea\u5df1\u7684\u6027\u683c\u5f71\u97ff\uff0c\u56e0\u6b64\u4e00\u81f4\u6027\u6703\u6700\u9ad8\uff0c\u5176\u4ed6\u524d\u5169\u500b\u548c\u5916\u90e8\u6bd4\u8f03\u6709\u95dc\u7684\u56e0\u7d20\u5c31\u4e0d\u95dc  \u800c\u7576\u5916\u90e8\u6b78\u56e0\u70ba\u4e3b\u6642\uff0c\u524d\u5169\u500b\u548c\u5916\u90e8\u7684\u81ea\u7136\u662f\u4ee5\u9ad8\u6bd4\u7387\u70ba\u4e3b\uff0c\u800c\u6700\u5f8c\u4e00\u500b\u4e5f\u9ad8\u3002  \u4ee5\u4e0b\u70ba \u7dad\u57fa\u767e\u79d1\u7684\u4f8b\u5b50:   \u82e5\uff1a\u5171\u8b58\u6027\u9ad8\uff08\u5927\u5bb6\u90fd\u6703\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u9ad8\uff08\u8001\u95c6\u4e0d\u5e38\u7f75\u5176\u4ed6\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u5e38\u7f75\u6b64\u54e1\u5de5\uff0c\u5e7e\u4e4e\u662f\u4e00\u898b\u5230\u5c31\u7f75\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5916\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u523a\u6fc0\uff08\u54e1\u5de5\uff09\u8eab\u4e0a\u3002  \u82e5\uff1a\u5171\u8b58\u6027\u4f4e\uff08\u9664\u4e86\u8001\u95c6\u4e4b\u5916\uff0c\u5176\u4ed6\u4eba\u4e0d\u600e\u9ebc\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u4f4e\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u8a31\u591a\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u6b64\u54e1\u5de5\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5167\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u884c\u70ba\u4eba\uff08\u8001\u95c6\uff09\u8eab\u4e0a\u3002      \u4e09\u500b\u7dad\u5ea6\u4e0d\u4e00\u5b9a\u90fd\u6703\u540c\u6642\u5b58\u5728\uff0c\u56e0\u6b64Consistency, Distinctiveness \u8f03 Consensus\u5e38\u7528", 
            "title": "\u5171\u8b8a\u6a21\u578b(Covariation Model)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#fae", 
            "text": "\u4eba\u5011\u5728\u8a55\u4f30\u4ed6\u4eba\u7684\u884c\u70ba\u6642\uff0c\u5373\u4f7f\u6709\u5145\u5206\u7684\u8b49\u64da\u652f\u6301\uff0c\u4f46\u4ecd\u7e3d\u662f\u50be\u5411\u65bc\u9ad8\u4f30\u5167\u90e8\u6216\u500b\u4eba\u56e0\u7d20\u7684\u5f71\u97ff\uff08\u4e00\u5b9a\u662f\u4ed6\u6709\u9019\u6a23\u7684\u4eba\u683c\uff0c\u624d\u505a\u51fa\u9019\u6a23\u7684\u884c\u70ba\uff09\uff0c\u800c\u975e\u5916\u5728\u60c5\u5883\u56e0\u7d20\uff08\u4e5f\u8a31\u662f\u60c5\u52e2\u6240\u8feb\uff0c\u6216\u9019\u500b\u5834\u6240\u6709\u7279\u6b8a\u7684\u6f5b\u898f\u5247\uff09\uff0c\u4ea6\u7a31\u4f5c correspondence bias \u5c0d\u61c9\u504f\u8aa4\uff0c\u56e0\u70ba\u6211\u5011\u90fd\u53ea\u95dc\u6ce8\u65bc\u4eba\u672c\u8eab\uff0c\u800c\u6c92\u6709\u6ce8\u610f\u5230\u5468\u570d\u74b0\u5883\u7684\u5f71\u97ff\u3002", 
            "title": "\u57fa\u672c\u6b78\u56e0\u504f\u8aa4(FAE)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#two-steps-attribute", 
            "text": "\u9996\u5148\u505a\u4e00\u500b\u5167\u90e8\u6b78\u56e0\uff0c\u9019\u6703\u662f\u5f88\u5feb\u7684\u53cd\u61c9\uff0c\u63a5\u8457\u6309\u7167\u60c5\u5883\u8abf\u6574\u6b78\u56e0\uff0c\u4f46\u8981\u8abf\u6574\u591a\u5c11\u5f88\u5bb9\u6613\u8abf\u6574\u4e0d\u5920\uff0c\u9700\u8981\u52aa\u529b\u8207\u610f\u8b58\u7684\u6ce8\u610f\u3002  \u4ec0\u9ebc\u6642\u5019\u4ee3\u8868\u81ea\u5df1\u9032\u5165\u6162\u901f\u8abf\u6574\u968e\u6bb5\u4e86\u5462?  \u59b3\u6709\u610f\u8b58\u5730\u505c\u4e0b\uff0c\u4e26\u4e14\u5728\u5224\u65b7\u524d\u4ed4\u7d30\u5be9\u601d  \u59b3\u60f3\u8981\u505a\u51fa\u7cbe\u6e96\u7684\u5224\u65b7  \u59b3\u61f7\u7591\u67d0\u4e9b\u884c\u70ba(\u4f8b\u5982:\u59b3\u61f7\u7591\u67d0\u4eba\u8aaa\u8b0a)", 
            "title": "\u5169\u6b65\u9a5f\u6b78\u56e0(Two steps attribute)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_3", 
            "text": "\u5373\u4eba\u5011\u901a\u5e38\u5c07\u81ea\u5df1\u7684\u6210\u529f\u6b78\u56e0\u65bc\u81ea\u5df1\u7684\u6027\u683c\u7279\u8cea\uff0c\u800c\u5c07\u81ea\u5df1\u7684\u5931\u6557\u6b78\u56e0\u65bc\u74b0\u5883\u5f71\u97ff\uff0c\u800c\u5c0d\u4ed6\u4eba\u5247\u6b63\u597d\u76f8\u53cd\u3002", 
            "title": "\u81ea\u7acb\u6b78\u56e0\u504f\u5dee"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_4", 
            "text": "\u5047\u8a2d\u4e16\u754c\u662f\u516c\u5e73\u7684\uff0c\u5584\u6709\u5584\u5831\u60e1\u6709\u60e1\u5831  \u512a\u9ede\u662f\u53ef\u4ee5\u76f8\u4fe1\u516c\u6b63\u56e0\u679c\u5831\u61c9  \u7f3a\u9ede\u662f\u5bb9\u6613\u8b74\u8cac\u53d7\u5bb3\u4eba\uff0c\u4f8b\u5982\u8aaa\u88ab\u5f37\u66b4\u7684\u4eba\u5c31\u662f\u7a7f\u5f97\u592a\u66b4\u9732", 
            "title": "\u516c\u5e73\u4e16\u754c\u4fe1\u5ff5"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch44", 
            "text": "", 
            "title": "Ch4.4 \u6587\u5316\u8207\u793e\u6703\u8a8d\u77e5"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#holistic-vs-analytic-thinking", 
            "text": "\u6574\u9ad4: \u5c08\u6ce8\u4eba\u3001\u7269\u4e0a\u9762\uff0c\u8f03\u5c11\u5c08\u6ce8\u5728\u5c0d\u8ac7\u6216\u60c5\u5883\u3002  \u5206\u6790: \u5c08\u6ce8\u5728\u4eba\u3001\u7269  \u800c\u4e14  \u9084\u6709\u5468\u570d\u7684\u60c5\u5883", 
            "title": "Holistic vs Analytic Thinking"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_5", 
            "text": "\u500b\u4eba\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u50be\u5411\u6b78\u56e0(\u504f\u4eba\u683c\u7279\u8cea)\uff0c\u6bd4\u8f03\u50cf\u4eba\u683c\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u7f8e\u570b\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u81ea\u5df1\u7684\u52aa\u529b\u8207\u5929\u8ce6\u3002  \u7fa4\u9ad4\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u60c5\u5883\u6b78\u56e0(\u504f\u5916\u90e8\u56e0\u7d20)\uff0c\u6bd4\u8f03\u50cf\u793e\u6703\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u65e5\u672c\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u662f\u5bb6\u5ead\u8207\u670b\u53cb\u5e2b\u9577\u7684\u529f\u52de\u3002", 
            "title": "\u5728\u57fa\u672c\u6b78\u56e0\u504f\u8aa4\u4e2d\u7684\u6587\u5316\u5dee\u7570"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch5", 
            "text": "*[\u81ea\u6211]: self", 
            "title": "Ch5 \u81ea\u6211"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch51", 
            "text": "self-concept \u81ea\u6211\u6982\u5ff5\uff0c\u4eba\u5011\u76f8\u4fe1\u81ea\u5df1\u64c1\u6709\u7684\u500b\u4eba\u7279\u8cea\n    The overall set of beliefs that people have about their personal attributes.  Origin of the self \u81ea\u6211\u7684\u8d77\u6e90  Child's self-concept \u5c0f\u5b69\u7684\u81ea\u6211\u6982\u5ff5\n    \u5177\u9ad4\u3001\u53c3\u7167\u7269\u7406\u7279\u5fb5(\u5e74\u9f61\u3001\u6027\u5225\u3001\u9130\u5c45\u3001\u55dc\u597d)  Maturing self-concept \u8da8\u6210\u719f\u7684\u81ea\u6211\u6982\u5ff5\n    \u6bd4\u8f03\u812b\u96e2\u7269\u7406\u7279\u5fb5\n    \u8f03\u591a\u300c\u5fc3\u7406\u72c0\u614b\u300d\u548c\u300c\u5225\u4eba\u5982\u4f55\u8a55\u65b7\u81ea\u5df1\u300d  \u7279\u5fb5\u7684\u8b8a\u5316\u6703\u5f71\u97ff\u4eba\u7684\u81ea\u6211\uff1f\n\u4eba\u5011\u50be\u5411\u65bc\u89ba\u5f97\u300c\u9053\u5fb7\u300d\u7684\u8b8a\u5316(\u4f8b\u5982\uff1a\u7c97\u9b6f\u3001\u7a2e\u65cf\u6b67\u8996)\u6703\u6bd4\u300c\u77e5\u89ba\u300d\u7684\u8b8a\u5316(\u4f8b\uff1a\u8996\u529b\u5dee\u6234\u773c\u93e1)\u66f4\u5f71\u97ff\u4eba\u7684\u81ea\u6211      \u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570      \u5730\u5340  \u7f8e\u570b  \u65e5\u672c      \u8afa\u8a9e(proverb)  The squeaky wheel gets the grease. \u5431\u5431\u97ff\u7684\u8f2a\u5b50\u6703\u88ab\u52a0\u4e0a\u6cb9 \u6703\u5435\u7684\u5b69\u5b50\u6709\u7cd6\u5403(\u505a\u4e8b\u8981\u5c55\u73fe\u81ea\u6211\u7684\u614b\u5ea6)  The nail that stands out gets pounded down.   \u68d2\u6253\u51fa\u982d\u9ce5(\u5c55\u73fe\u81ea\u6211\u5c31\u6703\u5403\u8667)    \u81ea\u6211\u89c0 (view of the self)  \u7368\u7acb(independent) 1. \u7531\u81ea\u5df1\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u4f86\u5b9a\u7fa9\u81ea\u6211 2. \u7368\u7acb\u3001\u7368\u7279\u5f88\u91cd\u8981  \u76f8\u4f9d( inter dependent) 1. \u7531\u548c\u4ed6\u4eba\u7684\u95dc\u4fc2\u4f86\u5b9a\u7fa9\u81ea\u6211 2. \u4ed6\u4eba\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u6703\u5f71\u97ff\u81ea\u6211 3. \u9023\u7d50\u3001\u76f8\u4f9d\u5f88\u91cd\u8981 4. \u6253\u58d3\u7368\u7279\u6027 (unique)     \u4f8b\uff1a\u65e5\u672c\u7687\u592a\u5b50\u5983\u653e\u68c4\u9ad8\u5b78\u6b77\u5de5\u4f5c\u9078\u64c7\u626e\u6f14\u50b3\u7d71\u7684\u59bb\u5b50\u89d2\u8272\uff0c\u8a31\u591a\u897f\u65b9\u4eba\u7121\u6cd5\u7406\u89e3\u3002       \u9019\u5c31\u662f\u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570        \u81ea\u6211 \u7684\u529f\u80fd  self-knowledge \u81ea\u6211\u8a8d\u77e5\n\u6211\u5011\u5982\u4f55\u77e5\u9053\u81ea\u5df1\u662f\u8ab0  self control \u81ea\u6211\u63a7\u5236\n\u6211\u5011\u5982\u4f55\u4f5c\u8a08\u756b\u3001\u4e0b\u6c7a\u5b9a  impression management \u5370\u8c61\u7ba1\u7406\n\u6211\u5011\u5982\u4f55\u5728\u5c0d\u65b9\u9762\u524d\u8868\u73fe\u81ea\u5df1\uff0c\u4e26\u8b93\u5c0d\u65b9\u7528\u770b\u5f85\u81ea\u5df1\u662f\u5982\u81ea\u5df1\u6240\u671f\u671b\u7684  self esteem \u81ea\u5c0a\n\u6211\u5011\u5982\u4f55\u5c0d\u81ea\u5df1\u4fdd\u6301\u4e00\u500b\u6b63\u9762\u7684\u8a55\u50f9", 
            "title": "Ch5.1 \u81ea\u6211\u6982\u5ff5\uff0c\u81ea\u6211\u6982\u5ff5\u5982\u4f55\u767c\u5c55"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch52", 
            "text": "", 
            "title": "Ch5.2 \u5167\u7701\uff0c\u5167\u7701\u53ef\u4ee5\u4e86\u89e3\u81ea\u5df1\u5230\u4ec0\u9ebc\u7a0b\u5ea6\uff1f"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#introspection", 
            "text": "\u4eba\u5011\u5411\u5167\u5be9\u8996\u81ea\u5df1\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u6a5f\u7684\u904e\u7a0b  \u4eba\u5011\u5176\u5be6\u4e0d\u5e38\u4f9d\u8cf4\u5167\u7701\uff0c\u56e0\u70ba\uff1a\u5167\u7701\u6709\u6642\u5019\u4ee4\u4eba\u4e0d\u6109\u5feb\uff0c\u611f\u53d7\u548c\u884c\u70ba\u7684\u7406\u7531\u53ef\u80fd\u662f\u5916\u5728\u56e0\u7d20\u3002", 
            "title": "\u5167\u7701(introspection)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#self-awareness-theory", 
            "text": "\u4e00\u500b\u4eba\u5011\u5c08\u6ce8\u65bc\u5c07\u81ea\u5df1\u7684\u884c\u70ba\u548c\u5167\u5728\uff0c\u5fc3\u7406\u7684\u57fa\u6e96\u6bd4\u8f03\u7684\u60f3\u6cd5  \u6709\u6642\u4eba\u5011\u6703\u9003\u907f\u81ea\u6211\uff0c\u4e0d\u60f3\u9762\u5c0d\uff0c\u56e0\u70ba\u81ea\u6211\u5be9\u8996\u7684\u6642\u5019\u662f\u4e00\u7a2e\u9817\u70ba\u53ad\u60e1\u7684\u884c\u70ba(aversive)  \u4e26\u975e\u6240\u6709\u7684\u9003\u907f\u81ea\u6211\u90fd\u4e0d\u597d\uff0c\u6709\u6642\u5019\u4e5f\u662f\u4e00\u7a2e\u5b97\u6559\u8868\u9054\u6216\u662f\u5fc3\u9748\u884c\u70ba\uff0c\u6291\u6216\u662f\u5728\u81ea\u6211\u5be9\u8996\u7684\u904e\u7a0b\u4e2d\u80fd\u8b93\u6211\u5011\u77e5\u9053\u4e8b\u60c5\u7684\u662f\u975e\u5c0d\u932f\u3002", 
            "title": "\u81ea\u6211\u5bdf\u89ba\u8ad6(Self-Awareness Theory)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#judging-why-we-feel-the-way-we-do", 
            "text": "\u96e3\u4ee5\u65b7\u5b9a\uff0c\u4f8b\u5982\uff0c\u59b3\u70ba\u4ec0\u9ebc\u6703\u9677\u5165\u9019\u500b\u60c5\u7dd2\u3002  \u4ee5\u56e0\u679c\u8ad6\u4f86\u89e3\u91cb: \u9020\u6210\u4e00\u500b\u4eba\u60f3\u6cd5\u548c\u884c\u70ba\u7684\u539f\u56e0\uff0c\u901a\u5e38\u6703\u7531\u6587\u5316\u4f86\u5b78\u7fd2\u3002 \u4f46\u6a5f\u6a21\u548c\u7406\u8ad6\u4e26\u975e\u7d55\u5c0d\u6b63\u78ba", 
            "title": "\u5224\u65b7\u6211\u5011\u70ba\u4f55\u611f\u53d7\u3001\u89e3\u91cb\u81ea\u5df1\u7684\u884c\u70ba(Judging Why We Feel the Way We Do)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#consequences-of-introspecting-about-reasons", 
            "text": "\u6211\u5011\u8a8d\u70ba\u614b\u5ea6\u7684\u6539\u8b8a\u53ef\u4ee5\u60f3\u5230\u6709\u67d0\u4e9b\u539f\u56e0\u4f86\u89e3\u91cb\u6b64\u7a2e\u8f49\u8b8a\uff0c\u540c\u6642\uff0c\u4eba\u5011\u5047\u5b9a\u4ed6\u5011\u7684\u614b\u5ea6\u8f49\u8b8a\u7684\u539f\u56e0\u662f\u5bb9\u6613\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u3002  \u7f3a\u9ede\u5982\u4e0b  \u53ea\u5c08\u6ce8\u65bc\u80fd\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u65b9\u5411  \u4f46\u5c0d\u65bc\u96e3\u4ee5\u8868\u9054\u3001\u89e3\u91cb\u7684\u539f\u56e0\u901a\u5e38\u5c31\u5ffd\u7565\u6389  \u4f46\u4e5f\u5c31\u662f\u90a3\u7a2e\u96e3\u4ee5\u89e3\u91cb\u7684\u539f\u56e0\u624d\u662f\u771f\u6b63\u5f71\u97ff\u9577\u9060\u7684", 
            "title": "\u5c0d\u65bc\u539f\u56e0\u7684\u81ea\u7701\u7684\u7d50\u679c(Consequences of Introspecting About Reasons)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch53", 
            "text": "", 
            "title": "Ch5.3 \u4eba\u5011\u5982\u4f55\u4ee5\u89c0\u5bdf\u81ea\u5df1\u7684\u884c\u70ba\u4f86\u4e86\u89e3\u81ea\u5df1"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#self-perception-theory", 
            "text": "\u7576\u6211\u5011\u7684\u614b\u5ea6\u4e0d\u5b9a\u6642\uff0c\u6211\u5011\u6703\u8457\u91cd\u65bc\u63a8\u8ad6\u7576\u6642\u767c\u751f\u7684\u60c5\u666f\u3002  \u4e0d\u5b9a\u6642\uff0c\u4e5f\u6703\u5f9e\u884c\u70ba\u4f86\u63a8\u65b7\u5167\u5728\u611f\u53d7\u3002  \u6703\u60f3\u8981\u5224\u65b7\u9019\u4e9b\u884c\u70ba\u662f\u5426\u80fd\u53cd\u6620\u51fa\u5011\u7684\u611f\u53d7\u4ee5\u53ca\u9019\u500b\u60c5\u6cc1\u662f\u5426\u80fd\u53cd\u6620\u51fa\u6211\u70ba\u4f55\u90a3\u9ebc\u505a\u3002", 
            "title": "\u81ea\u6211\u77e5\u89ba\u8ad6(Self-Perception Theory)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#intrinsic-vs-extrinsic-motivation", 
            "text": "In: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u81ea\u5df1\u559c\u6b61\uff0c\u500b\u6027\u9a45\u4f7f\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u6211\u771f\u7684\u559c\u6b61\u548c\u4ed6\u4eba\u5408\u4f5c\u3002  Ex: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u6709\u5916\u5728\u5229\u76ca\uff0c\u800c\u975e\u672c\u8eab\u559c\u6b61\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u70ba\u4e86\u8cfa\u53d6\u6d25\u8cbc\u3002  \u4f8b\u5982\u8003\u91cf\u5230\u5916\u5728\u52d5\u6a5f\uff0c\u5bb6\u9577\u53ef\u80fd\u6703\u7528\u91d1\u9322\u3001\u9ede\u6578\u3001\u73a9\u5177\u7b49\u7b49\u734e\u52f5  \u4f46\u53ef\u80fd\u6703\u6709\u53cd\u6548\u679c\uff0c\u8b93\u5c0f\u670b\u53cb\u8b8a\u5f97\u592a\u552f\u5229\u662f\u5716\u3002  \u904e\u5ea6\u8faf\u8b77\u6548\u61c9: \u4eba\u985e\u7684\u884c\u70ba\u4e2d\u5167\u5916\u5728\u52d5\u6a5f\u90fd\u6703\u6709\u6240\u4f5c\u7528\uff0c\u4f46\u662f\u6709\u6642\u5019\u6703\u628a\u5916\u5728\u52d5\u6a5f\u770b\u5f97\u592a\u5f37\u70c8\uff0c\u4ee5\u81f3\u65bc\u4f4e\u4f30\u5167\u5728\u52d5\u6a5f\u5e36\u4f86\u7684\u5f71\u97ff\u3002  \u4ee5\u8868\u73fe\u70ba\u689d\u4ef6\u7684\u734e\u8cde\u8f03\u80fd\u964d\u4f4e\u5167\u5728\u8208\u8da3\u7684\u640d\u5bb3\uff0c\u539f\u56e0\u5728\u65bc\uff0c\u8868\u73fe\u7684\u597d\u624d\u80fd\u771f\u6b63\u4ee3\u8868\u4e00\u500b\u4eba\u559c\u6b61\u9019\u500b\u6771\u897f\uff0c\u800c\u4e0d\u662f\u70ba\u4e86\u505a\u800c\u505a\u3002\u5982\u679c\u53ea\u662f\u628a\u4e8b\u60c5\u505a\u5230\u4e86\u800c\u6c92\u6709\u505a\u597d\uff0c\u90a3\u4e26\u4e0d\u80fd\u4ee3\u8868\u4ed6\u771f\u6b63\u559c\u6b61\u9019\u4ef6\u4e8b\u60c5\u3002", 
            "title": "\u5167\u5916\u5728\u52d5\u6a5f(Intrinsic vs Extrinsic Motivation)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_6", 
            "text": "\u56fa\u5b9a: \u6211\u5011\u6709\u4e9b\u80fd\u529b\u7121\u6cd5\u6539\u8b8a\u7684  \u6210\u9577: \u6211\u5011\u7684\u80fd\u529b\u662f\u53ef\u5851\u9020\u7684\uff0c\u96a8\u8457\u6210\u9577\u6539\u8b8a  \u56fa\u5b9a\u5fc3\u614b\u5728\u6210\u9577\u4e2d\u5bb9\u6613\u88ab\u653e\u68c4\uff0c\u56e0\u70ba\u4e0d\u5408\u6642\u5b9c", 
            "title": "\u5fc3\u614b"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#2-factor-theory-of-emotion", 
            "text": "\u610f\u8b58\u5230\u81ea\u5df1\u7684\u751f\u7406\u6fc0\u767c\u72c0\u614b(psysiological arousal)  \u627e\u5c0b\u5c0d\u65bc\u6fc0\u767c\u904e\u5f8c\u7684\u751f\u7406\u72c0\u614b\u505a\u51fa\u5408\u7406\u7684\u89e3\u91cb\uff0c\u4ea6\u5373\u81ea\u6211\u77e5\u89ba\u7684\u904e\u7a0b  \u4f46\u6709\u6642\u5019\u6703\u56e0\u70ba\u932f\u8aa4\u6b78\u56e0\u800c\u5c0e\u81f4\u60c5\u7dd2\u5224\u65b7\u5931\u771f(\u6881\u8001\u5e2b\u63d0\u5230\u7684)\u540a\u6a4b\u5be6\u9a57)  \u8aa4\u5224\u7684\u60c5\u6cc1: \u4e8c\u56e0\u8ad6\u7684\u5224\u65b7\u65b9\u6cd5\uff0c\u901a\u5e38\u6703\u5f88\u4e3b\u89c0\uff0c\u4f9d\u8cf4\u65bc\u81ea\u5df1\u7684\u89e3\u91cb(\u4f8b\u5982\u7ad9\u5728\u540a\u6a4b\u81bd\u6230\u5fc3\u9a5a\uff0c\u5973\u751f\u8d70\u904e\u4f86\u6703\u4ee5\u70ba\u81ea\u5df1\u5c31\u662f\u559c\u6b61\u5979)", 
            "title": "\u60c5\u7dd2\u4e8c\u56e0\u8ad6(2 Factor Theory of Emotion)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch54", 
            "text": "\u81ea\u5c0a\u7531\u5468\u906d\u7684\u4eba\u578b\u5851", 
            "title": "Ch5.4 \u4eba\u5011\u5982\u4f55\u7528\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u5df1"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_7", 
            "text": "\u4f8b\u5982\u6bd4\u8f03\u80fd\u529b: \u6211\u8cfa\u591a\u5c11\uff0c\u4ed6\u8cfa\u591a\u5c11\uff0c\u4ed6\u591a\u6211\u5c11\uff0c\u6211\u8f03\u4e0d\u597d\u3002  \u793e\u6703\u6bd4\u8f03\u8ad6(Social Comparsion Theory): \u6211\u5011\u7d93\u7531\u8207\u5225\u4eba\u6bd4\u8f03\u4f86\u5c0d\u81ea\u5df1\u7684\u614b\u5ea6\u8207\u80fd\u529b\u6709\u6240\u4e86\u89e3\u3002\u6703\u63a2\u8a0e\u5169\u500b\u91cd\u8981\u7684\u6771\u897f  \u4f55\u6642\u9032\u5165\u4e86\u793e\u6703\u6bd4\u8f03\u8ad6: \u7576\u6211\u5011\u4e0d\u78ba\u5b9a\u7684\u6642\u5019(\u5c0d\u65bc\u81ea\u5df1\u7684\u80fd\u529b\u4e0d\u78ba\u5b9a\uff0c\u52e2\u5fc5\u5c31\u5f97\u6bd4\u8f03)  \u59b3\u8ddf\u8ab0\u6bd4\u8f03: \u6700\u521d\u6703\u5148\u548c\u8eab\u908a\u7684\u4eba  \u5411\u4e0a\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u597d\u7684\u4eba\u6bd4\u8f03\uff0c\u70ba\u4e86\u77e5\u9053\u81ea\u5df1\u7684\u6975\u9650\u4ee5\u53ca\u4e0d\u8db3\u3002  \u5411\u4e0b\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u5dee\u7684\u4eba\u6bd4\u8f03\uff0c\u986f\u5f97\u81ea\u5df1\u8f03\u70ba\u512a\u8d8a\u3002", 
            "title": "\u7d93\u7531\u6bd4\u8f03\u81ea\u5df1\u548c\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u6211"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_8", 
            "text": "\u5eab\u5229\u7684\u93e1\u4e2d\u81ea\u6211: \u501f\u4ed6\u4eba\u4e86\u89e3\u81ea\u5df1\u3002  \u793e\u6703\u8abf\u7bc0(Social Tuning): \u4eba\u5011\u63a5\u53d7\u3001\u63a1\u7528\u4ed6\u4eba\u7684\u614b\u5ea6\u3002(\u6709\u6642\u4e0d\u592a\u6e96\u78ba\uff0c\u56e0\u70ba\u4eba\u5011\u50be\u5411\u65bc\u63a5\u53d7\u559c\u6b61\u7684\u4eba\u7684\u614b\u5ea6\u800c\u53cd\u4e4b\u4ea6\u7136)", 
            "title": "\u7d93\u7531\u5438\u6536\u4ed6\u4eba(\u5c0d\u6211\u7684)\u89c0\u611f\u4f86\u4e86\u89e3\u81ea\u6211"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#_9", 
            "text": "\u60c5\u611f\u9810\u6e2c(Affective Forecasts) \u4eba\u5011\u5c0d\u65bc\u672a\u4f86\u906d\u9047\u5230\u60c5\u7dd2(\u66f4\u7cbe\u78ba\u5730\u8aaa\uff0c\u60c5\u7dd2\u74b0\u5883)\u7684\u4f30\u8a08\u3001\u9810\u6e2c\u3002", 
            "title": "\u7d93\u7531\u5c0d\u4ed6\u4eba\u8aee\u8a62\u4f86\u4e86\u89e3\u81ea\u5df1\u7684\u672a\u4f86"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch55", 
            "text": "\u81ea\u6211\u63a7\u5236(Self Control): \u70ba\u73fe\u5728\u505a\u6c7a\u5b9a\u3001\u70ba\u672a\u4f86\u505a\u6e96\u5099\u3002  \u6291\u5236\u60f3\u6cd5: \u6703\u60f3\u8981\u4e0d\u53bb\u60f3\u6211\u5011\u60f3\u5fd8\u8a18\u7684\u4e8b\u60c5\uff0c\u4f46\u5176\u5be6\u4e0d\u5bb9\u6613\uff0c\u4e5f\u4e0d\u90a3\u9ebc\u6709\u6548\u3002  \u6d88\u8017\u6548\u61c9(Depleting Effect): \u5728\u4e00\u500b\u4eba\u683c\u65b9\u9762\u4ed8\u51fa\u52aa\u529b\uff0c\u5c31\u6703\u5728\u53e6\u4e00\u65b9\u9762\u6709\u6240\u6d88\u8017(\u4f8b\u5982\u5728\u4e0b\u5348\u7684\u6642\u5019\u4e0b\u8f09\u975e\u6cd5\u6b4c\u66f2\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u70ba\u6b64\u6642\u5c0d\u65bc\u5c0d\u6297\u90aa\u60e1\u80fd\u529b\u6709\u6240\u6d88\u8017)", 
            "title": "Ch5.5 \u81ea\u6211\u63a7\u5236\uff0c\u8207\u5176\u57f7\u884c\u529f\u80fd\uff0c\u5565\u6642\u6210\u529f\u6291\u6216\u662f\u5931\u6557\u5462"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch56-impression-management-self-presentation", 
            "text": "\u5370\u8c61\u7ba1\u7406(Impression Management):\u3000\u4eba\u5011\u6703\u5982\u4f55\u63cf\u7e6a\u81ea\u5df1\uff0c\u4f7f\u5f97\u5225\u4eba\u770b\u5f85\u81ea\u5df1(\u88ab\u770b)\u662f\u7b26\u671f\u671b\u7684\u3002", 
            "title": "Ch5.6 \u5370\u8c61\u7ba1\u7406(Impression Management) \u53c8\u53eb\u505a \u81ea\u6211\u5448\u73fe(Self Presentation)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ingratiationself-handicapping", 
            "text": "\u9022\u8fce(Ingratiation): \u62cd\u99ac\u5c41\u3001\u8b9a\u7f8e\uff0c\u8b93\u81ea\u5df1\u662f\u80fd\u88ab\u4ed6\u4eba\u559c\u6b61\u7684(Making ourselves likable to another person)\u901a\u5e38\u662f\u5c0d\u65bc\u5730\u4f4d\u6bd4\u6211\u5011\u9ad8\u7684\u4eba\u9032\u884c\u9022\u8fce\u8ac2\u5a9a\u7684\u884c\u70ba\u3002    \u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping): \u70ba\u81ea\u5df1\u7684\u904e\u932f\u627e\u7406\u7531\uff0c\u4f8b\u5982\u90fd\u5077\u61f6\u4e0d\u53bb\u7df4\u6821\u968a(\u53d6\u81ea\u4e2d\u6b63\u5927\u5b78\u5fc3\u7406\u71df: \u81ea\u6211\u8a2d\u969c\uff08self-handicapping\uff0c\u53c8\u7a31\u81ea\u6211\u8a2d\u9650\uff09\u6211\u5011\u50be\u5411\u5b89\u6392\u4e00\u500b\u60c5\u5883\uff0c\u8b93\u81ea\u5df1\u5728\u5931\u6557\u51fa\u73fe\u4e4b\u5f8c\uff0c\u4e0d\u6703\u8b93\u5225\u4eba\u89ba\u5f97\u662f\u81ea\u5df1\u80fd\u529b\u4e0d\u8db3\u800c\u964d\u4f4e\u81ea\u5df1\u7684\u81ea\u5c0a\uff0c\u4e5f\u5c31\u662f\u7559\u500b\u9000\u8def\u627e\u53f0\u968e\u4e0b\u3002)\uff0c\u5931\u6557\u537b\u8aaa\u4e0d\u662f\u81ea\u5df1\u6c92\u6709\u597d\u597d\u7df4\u7fd2\uff0c\u800c\u662f\u8aaa\u6c92\u6709\u6642\u9593\u7b49\u7b49\u3002\u81ea\u6211\u8a2d\u969c\u53c8\u5206\u70ba\u4ee5\u4e0b\u5169\u7a2e   \u884c\u70ba\u81ea\u6211\u8a2d\u969c(Behavioral self-handicapping)\uff0c\u53cd\u5411\u5730\u505a\u4e00\u4e9b\u770b\u4f3c\u6703\u6e1b\u5c11\u6210\u529f\u6a5f\u7387\u7684\u884c\u70ba\uff0c\u56e0\u6b64\u5373\u4fbf\u4ed6\u5011\u5931\u6557\u4e86\u4e5f\u6709\u53f0\u968e\u4e0b\uff0c\u8aaa\u4ec0\u9ebc\u6211\u8003\u524d\u4e00\u5929\u90fd\u5728\u6253\u96fb\u73a9\u624d\u6703\u8003\u4e0d\u597d\uff0c\u800c\u4e0d\u662f\u6211\u4e0a\u8ab2\u4e0d\u8a8d\u771f\u3001\u638c\u63e1\u4e0d\u719f\u3002  \u53e3\u982d\u81ea\u6211\u8a2d\u969c(Reported self-handicapping)\uff0c\u6c92\u6709\u505a\u4e00\u4e9b\u6703\u963b\u64cb\u6210\u529f\u7684\u4e8b\u60c5\uff0c\u4f46\u50be\u5411\u65bc\u627e\u85c9\u53e3\u3002\u4f8b\u5982\u8aaa\u8003\u4e0d\u597d\u662f\u56e0\u70ba\u8003\u8a66\u7684\u6642\u5019\u809a\u5b50\u75db", 
            "title": "\u9022\u8fce(Ingratiation)\u8207\u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping)"
        }, 
        {
            "location": "/univ_notes/general/social_psy/#ch57", 
            "text": "self esteem \u81ea\u5c0a: \u4eba\u5011\u5c0d\u81ea\u5df1\u7684\u6574\u9ad4\u8a55\u50f9(\u6b63\u3001\u8ca0\u9762)  \u9ad8\u81ea\u5c0a\u7684\u512a\u9ede:   \u5373\u4fbf\u74b0\u5883\u8271\u56f0\u7684\u6642\u5019\u4e5f\u80fd\u5805\u6301\u4f4f\u3002    \u7121\u61fc\u6b7b\u4ea1(? \u4e0d\u61c2\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u500b \u5728ppt p79 \u7b2c\u4e00\u9805)      \u81ea\u6200\u884c\u70ba(Narcissism) \u7531\u904e\u5ea6\u7684\u81ea\u6211\u6200\u611b\u4ee5\u53ca\u6b20\u7f3a\u5c0d\u4ed6\u4eba\u7684\u540c\u7406\u5fc3\u6240\u5f62\u6210\u3002", 
            "title": "Ch5.7 \u81ea\u5c0a:\u6211\u5011\u5c0d\u81ea\u5df1\u7684\u611f\u53d7"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/", 
            "text": "\u65e5\u672c\u6587\u5316\u8ad6\u8ab2\u5802\u7b46\u8a18\n\n\nLec1. Mar 7, 2018\n\n\n\n\n\n\n\u7167\u8449\u6a39\u6728\u6797\u6587\u5316:\u7167\u8449\u6a39\u6797\u6587\u5316\uff0c\u662f1970\u5e74\u4ee3\u4ee5\u4f86\u65e5\u672c\u4eba\u985e\u5b78\u5bb6\u63d0\u51fa\u65e5\u672c\u6587\u5316\u6e90\u982d\u7406\u8ad6\u3002\u63d0\u51fa\u559c\u746a\u62c9\u96c5\u5c71\u4ee5\u5357\u81f3\u65e5\u672c\u95dc\u897f\u6709\u4e00\u5e38\u7da0\u95ca\u8449\u6a39\u6797\uff0c\u5176\u4e2d\u4ee5\u96f2\u5357\u70ba\u4e2d\u5fc3\uff0c\u65e5\u672c\u7684\u6c34\u7a3b\u7a2e\u690d\u8207\u6b64\u6587\u5316\u6709\u95dc\u3002\n\nWikipedia\n \n\n1.\u7167\u4e0b\u53bb\u6a39\u8449\u6703\u9583\u9583\u767c\u5149\n\n\n\n\n\n\n\u65e5\u672c\u7a3b\u7c73\u4e3b\u8981\u662f\u4e2d\u570b\u9577\u6c5f\u6d41\u904e\u53bb\u7684\u8aaa\u6cd5\u6700\u70ba\u666e\u904d\uff0c\u4f46\u662f\u73fe\u5728\u7684\u58fd\u53f8\u7c73\u548c\u5927\u9678\u7684\u4e0d\u592a\u4e00\u6a23\uff0c\u5927\u9678\u7684\u4ee5\u84ec\u840a\u7c73\u70ba\u4e3b\u800c\u65e5\u672c\u662f\u504f\u58fd\u53f8\u7c73\u7684\u9ecf\u7a20\n\n\n\n\n\u6709\u975e\u5e38\u5927\u7684\u53e4\u58b3\n\n\n\u65e5\u8a9e\u7684\u6587\u5b57\u6587\u6cd5\u8fd1\u4f3c\u65bc\u6771\u570b\u5317\u65b9\u6c11\u65cf\n\n\n\u7167\u8449\u6a39\u6728\u6587\u5316\u53e4\u4ee3\u6709\u54ea\u4e9b\u4e8b\u60c5\u5462\n\n1.\u5973\u6027\u6587\u5316\u70ba\u4e2d\u5fc3\uff0c\u7537\u5973\u60c5\u610f\u76f8\u6295\u5f26\u6b4c\u5c0d\u5531\n\n\n\n\nLec3. Mar 21 2018\n\n\n\n\n\u7e2e\u5c0f\u6587\u5316\u662f\u65e5\u672c\u5927\u5b78\u6559\u6388\u63d0\u51fa\u7684\n\n\n\u9b4f\u5fd7\u7aa9\u4eba\u50b3\uff0c\u4e2d\u570b\u4eba\u8a18\u8f09\u4e86\u6700\u65e9\u7684\u65e5\u672c\u4eba\u6d3b\u52d5\u60c5\u5f62\uff0c\u984c\u5230\u4e86\u4e5d\u5dde\u7684 \n\u90aa\u99ac\u53f0\u570b\n\n\n\u53e4\u58b3\uff1a\u6574\u5ea7\u5c71\u90fd\u662f\u76f4\u7a74\u5f0f\n\n\n\u65e5\u672c\u4eba\u6700\u65e9\u53ef\u4ee5\u662f\uff1a\u7e69\u6587\u4eba\uff08\u6bd4\u5f4c\u751f\u4eba\u77ee\uff09\n\n\n\u4e2d\u570b\u5ead\u5712\u7684\u7279\u8272\u5728\u65bc\u5efa\u7bc9\u7269\u5c6c\u65bc\u98a8\u666f\u7684\u4e00\u90e8\u5206,\u800c\u4e14\u5176\u6a13\u3001\u4ead\u3001\u53f0\u3001\u69ad\u4e0a\u9762\u90fd\u61f8\u639b\u6abb\u806f,\u9019\u662f\u65e5\u672c\u5ead\u5712\u898b\u4e0d\u5230\u7684\u666f\u8c61\uff0c\u800c\u65e5\u672c\u9664\u4e86\u4e3b\u5efa\u7bc9\u4ee5\u5916\uff0c\u4e43\u662f\u770b\u4e0d\u5230\u4eba\u5de5\u5efa\u7bc9\u7684\uff0c\u6b64\u5916\u9084\u6703\u6709\u92ea\u4e0a\u767d\u6c99\u7684\u67af\u5c71\u6c34\u5ead\u5712\u4ee5\u53ca\u6eff\u4f48\u9752\u82d4\u7684\u5ead\u5712\uff0c\u524d\u8005\u8c61\u5fb5\u4e00\u6bba\u770b\u898b\u4e00\u500b\u5b87\u5b99\uff0c\u5f8c\u8005\u5247\u662f\u5728\u65e5\u672c\u6eab\u6696\u662f\u6f64\u4e2d\u57f9\u80b2\u51fa\u4f86\u9591\u975c\u6c23\u6c1b\u7684\u5ead\u5712\u3002\n\n\n\u65e5\u672c\u7684\u4e2d\u570b\u7f8e\u8853\u5c08\u5bb6\u6236\u7530\u798e\u4f51\u6559\u6388\u6307\u51fa,\u65e5\u672c\u7e6a\u756b\u4e2d\u51fa\u73fe\u7684\u706b\u7130\u3001\u96f2\u5f69\u3001\u6c34(\u6d6a\u82b1)\u3001\u5149\u7b49\u4e0d\u5b9a\u578b\u7269,\u5728\u73fe\u5b58\u7684\u4e2d\u570b\u7e6a\u756b\u4e2d\u898b\u4e0d\u5230\u3002\n\n\n\u4ff3\u53e5\u53ef\u4ee5\u4e0d\u7528\u62bc\u97fb \u4f46\u4e00\u5b9a\u89815+7+5 \u4e26\u4e14\u6709\u5b63\u8a9e\uff08\u65e5\u672c\u4eba\u6c11\u5c0d\u65bc\u5e7c\u5c0f\u6642\u4ee3\u6216\u6545\u9109\u4e00\u7a2e\u61f7\u5ff5\u7737\u6200\u4e4b\u60c5\uff09\n\n\n\u7ef3\u6587\u201d\u4e00\u8bcd\u6765\u6e90\u4e8e\u7f8e\u56fd\u52a8\u7269\u5b66\u5bb6\u6469\u65af\u5173\u4e8e\u5927\u68ee\u8d1d\u51a2\u9676\u5668\u53d1\u6398\u7684\u62a5\u544a\u3002\uff08\u53d6\u81ea\u767e\u5ea6\uff09\n\n\n\u5f4c\u751f\u6642\u4ee3\u662f\u5317\u6d77\u9053\u4e0e\u7409\u7403\u4ee5\u5916\u7684\u5168\u65e5\u672c\u5217\u5cf6\u7684\u4e00\u500b\u6642\u4ee3\u5283\u5206\uff0c\u8655\u65bc\u897f\u5143\u524d10\u4e16\u7d00\u5230\u897f\u51433\u4e16\u7d00\u4e2d\u671f\u3002 \u5f4c\u751f\u6642\u4ee3\u662f\u5728\u7d93\u6b77\u4e86\u4ee5\u63a1\u96c6\u70ba\u7d93\u6fdf\u4e3b\u9ad4\u7684\u7e69\u6587\u6642\u4ee3\u4e4b\u5f8c\uff0c\u4e00\u500b\u4e3b\u8981\u4f9d\u8cf4\u6c34\u7a3b\u7a2e\u690d\u7684\u751f\u7522\u7d93\u6fdf\u6642\u4ee3\u3002 \uff08\u53d6\u81ea\u7dad\u57fa\u767e\u79d1\uff09\n\n\n\u65e5\u672c\u795e\u8a71\u4e3b\u8981\u8a18\u8f09\u5728 \u53e4\u4e8b\u8a18\uff0c\u800c\u4e0d\u662f\u592a\u53e4\u8a18\n\n\n\u65e5\u672c\u7684\u53e4\u58b3\u7684\u5167\u90e8\u69cb\u9020\uff0c\u8d77\u5148\u90fd\u662f\u8c4e\u7a74\u5f0f\u77f3\u5ba4\uff0c\u4e00\u76f4\u5230\u4e94\u4e16\u7d00\u4e2d\u8449\u624d\u51fa\u73fe\u6a6b\u7a74\u5f0f\u77f3\u5ba4\u3002\u800c\u5230\u4e86\u53e4\u58b3\u6642\u4ee3\u7684\u5f8c\u671f\uff0c\u4e5f\u5c31\u662f\u897f\u5143\u516d\u4e03\u4e16\u7d00\u7684\u6642\u5019\uff0c\u6a6b\u7a74\u77f3\u5ba4\u5df2\u7d93\u666e\u53ca\u65bc\u65e5\u672c\u5168\u570b\u3002\n\n\n\n\nLec4. Mar 28 2018\n\n\n\n\n\u63a8\u8c37\u5929\u7687\u662f\u7b2c\u4e00\u4efb\u5973\u5929\u7687\n\n\n\u4e2d\u592e\u96c6\u6b0a\uff0c\u5728\u8056\u5fb7\u592a\u5b50\u7684\u6642\u4ee3\uff0c\u9694\u5e74\u9084\u9812\u4f48\u4e86\u5341\u4e03\u689d\u61b2\u6cd5\uff0c\u5728\u516c\u5143604\u5e74\n1.\u4ee5\u548c\u70ba\u8cb4\n\n2.\u7be4\u4fe1\u4e09\u5bf6:\u5ba3\u63da\u4f5b\u6559\u70ba\u570b\u6559\n\n\n\u98db\u9ce5\u6642\u4ee3:\u540c\u6642\u4e2d\u570b\u7684\u968b\u671d\u6642\u671f\uff0c\u6709\u8da3\u968b\u671d\u671d\u8ca2\uff0c\u5728\u5948\u826f\u9644\u8fd1\uff0c\u6b66\u529b\u9817\u70ba\u5f37\u5927\n\u5728\u6b64\u6642\u968b\u671d\u60f3\u8981\u9060\u4ea4\u8fd1\u653b\uff0c\u56e0\u70ba\u4ed6\u8981\u6253\u671d\u9bae\u534a\u5cf6\uff0c\u6240\u4ee5\u5148\u6d3e\u96a8\u99db\u5230\u65e5\u672c\uff0c\u5e0c\u671b\u65e5\u672c\u4e0d\u8981\u4f86\u5e72\u6d89\u3002\n\n\n\u65e5\u672c\u4ee5\u53d7\u6212\u6700\u53e4\u8001\u7684\u6728\u9020\u5efa\u7bc9:\u65e5\u672c\u5948\u826f\u6cd5\u9686\u5bfa\n\n\n\u5927\u5316(\u5e74\u865f\uff0c\u5927\u5316\u4e8c\u5e74\uff0c\u570b\u5bb6\u7684\u6539\u9020\u8a08\u756b)\u9769\u65b0:\u662f\u897f\u5143645\u5e74\u6642\u65e5\u672c\u7684\u4e00\u9023\u4e32\u793e\u6703\u653f\u6cbb\u6539\u9769\u3002 \u5176\u4e3b\u8981\u5167\u5bb9\u662f\u5ee2\u9664\u7576\u6642\u8c6a\u65cf\u5c08\u653f\u7684\u5236\u5ea6\uff0c\u4e26\u6548\u6cd5\u4e2d\u539f\u5510\u671d\u7687\u5e1d\u9ad4\u5236\u6210\u7acb\u4e2d\u592e\u96c6\u6b0a\u570b\u5bb6\uff0c\u5c0d\u65e5\u5f8c\u65e5\u672c\u6b77\u53f2\u767c\u5c55\u5f71\u97ff\u6df1\u9060\u3002\n1.\u4e2d\u592e\u96c6\u6b0a\uff0c\u985e\u4f3c\u4e2d\u570b\uff0c\u540c\u6642\u5b78\u7fd2\u4e2d\u570b\u7684\u6587\u5316\n\n2.\u7a05\u5236\u6539\u9769\n\n\n\u65e5\u672c\u6700\u65e9\u7684\u60c5\u6b4c\u5c0d\u5531: \u4f0a\u5354\u90a3\u5176VS\u4f0a\u5354\u90a3\u7f8e\n\n\n\u5929\u5ca9\u6236\u795e\u8a71\n1.\u9285\u93e1\n\n2.\u516b\u6b67\u5927\u86c7OROCUI \n\n3.\u5341\u5168\u528d \u662f\u4e00\u7a2e\u7d50\u69cb\u4e3b\u7fa9 \n\n4.\u8001\u592b\u5a66\u5973\u5152\u8b8a\u6210\u4e00\u96bb\u68b3\u5b50 \n\n\n\u5be9\u5224\n1.\u770b\u8ab0\u6c59\u7a62\uff0c\u5c31\u662f\u6709\u7f6a \u7528\u7953\u89e3\u9664\u5384\u904b\n\n2.\u5929\u6d25\u7f6a \u7834\u8fb2\u8015\u796d\u7940 \n\n3.\u570b\u6d25\u7f6a \u88ab\u96f7\u6253\u5230 \u8fb2\u4f5c\u7269\u88ab\u5403 \u59e6\u6deb\u602a\u76dc\n\n\n\n\n\u8a66\u5377\u89e3\u6790\n\n\n\u7b2c\u4e03\u5377\n\n\n\n\n\u300c\u5fa1\u6210\u6557\u5f0f\u76ee\u300d\u8207\u300c\u8c9e\u6c38\u5f0f\u76ee\u300d\u662f\u4e0d\u540c\u7684\u6cd5\u5178\u3002 \u932f \u540c\u4e00\u500b!\n\n\n\u662f\n\n\n\u938c\u5009\u4f5b\u6559\u7684\u7279\u8272\u6709\u4e09\uff1a\u7b2c\u4e00\u662f\u300c\u6613\u884c\u300d\uff0c\u7b2c\u4e8c\u662f\u300c\u9078\u64c7\u300d\uff0c\u7b2c\u4e09\u662f\u300c\u5c08\u4fee\u300d\u3002 \u662f\n\n\n\u300c\u60e1\u4eba\u6b63\u6a5f\u8aaa\u300d\u662f\u6cd5\u7136\u63d0\u51fa\u7684\u3002 \u662f\n\n\n\u69ae\u897f\u5728\u65e5\u672c\u958b\u5275\u4e86\u66f9\u6d1e\u5b97\u3002 \u932f \u61c9\u8a72\u662f \u9053\u5143\u79aa\u5e2b\n\n\n\u300a\u5f92\u7136\u8349\u300b\u662f\u5409\u7530\u517c\u597d\u6240\u8457\u3002 \u662f\n\n\n\u6771\u5927\u5bfa\u5357\u5927\u9580\u5169\u5074\u7684\u91d1\u525b\u529b\u58eb\u50cf\uff0c\u662f\u4ee5\u904b\u6176\u3001\u5feb\u6176\u3001\u5b9a\u89ba\u3001\u6e5b\u6176\u56db\u4eba\u70ba\u4e3b\u7684\u96d5\u523b\u5e2b\uff0c\u7e3d\u8ca0\u8cac\u4eba\u662f\u904b\u6176\u3002 \u662f\n\n\n\u4e0d\u77e5\u9053 \u61c9\u8a72 \u662f \u5427?\n\n\n\u7531\u5c07\u8ecd\u57f7\u653f\u7684\u653f\u6cbb\u7a31\u70ba\u300c\u9662\u653f\u300d\u3002  \u5426\u3002\u5929\u7687\u8b93\u4f4d\u800c\u81ea\u7a31\u4e0a\u7687\uff0c\u5728\u300c\u9662\u300d\u4e2d\u57f7\u653f\u7684\u653f\u6cbb\u5f62\u614b\n\n\n\u4fdd\u5143\u4e4b\u4e82\u7684\u610f\u7fa9\u662f\uff0c\u5f9e\u6b64\uff0c\u8cb4\u65cf\u8207\u6b66\u58eb\u7684\u5730\u4f4d\u9006\u8f49\uff0c\u65e5\u672c\u6b77\u53f2\u958b\u59cb\u9032\u5165\u4e03\u767e\u591a\u5e74\u7684\u6b66\u58eb\u793e\u6703\u3002 \u662f\n\n\n\u6b66\u58eb\u901a\u904e\u5206\u5c01\u571f\u5730\uff08\u4e5f\u53ef\u4ee5\u8aaa\u662f\u5206\u6563\u7684\u571f\u5730\u7d71\u6cbb\uff09\uff0c\u7de0\u7d50\u300c\u5fa1\u6069\u300d\u8207\u300c\u5949\u516c\u300d\u7684\u4e3b\u5f9e\u95dc\u4fc2\uff0c\u4f86\u7d71\u6cbb\u8fb2\u6c11\u7684\u5236\u5ea6\u7a31\u70ba\u5c01\u5efa\u5236\u5ea6\u3002 \u00a0 \u662f\n\n\n\n\n\u7b2c\u516b\u5377\n\n\n\n\n\u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c204 \u5012\u6578\u7b2c\u56db\u884c\n\n\n\u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c205 \u7b2c\u4e8c\u884c\n\n\n\u662f \n\n\n\u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e2d\u6bb5\n\n\n\u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e0b\u6bb5\uff0c\u7522\u696d\u8207\u90fd\u5e02\u7684\u767c\u9054\n\n\n\u5426\uff0c\u5728\u4eac\u90fd\u9644\u8fd1\u512a\u4e9b\u6751\u843d\u4e0d\u8a2d\u7f6e\u838a\u5712\u7684\u7ba1\u7406\u4eba\uff0c\u800c\u662f\u7531\u53eb\u6709\u529b\u7684\u8fb2\u6c11\u4f86\u4e3b\u5c0e\uff0c\u7531\u6240\u6709\u7684\u8fb2\u6c11\u806f\u5408\u81ea\u6cbb\uff0c\u9019\u7a2e\u806f\u5408\u7684\u81ea\u6cbb\u9ad4\u7a31\u70ba\u300e\u7e3d\u300f\uff08sou\uff09 \u8acb\u67e5\u95b1\u8ab2\u672c207\u4e2d\u6bb5\n\n\n\u662f", 
            "title": "Junior 2nd sem. Japanese Culture"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/#_1", 
            "text": "", 
            "title": "\u65e5\u672c\u6587\u5316\u8ad6\u8ab2\u5802\u7b46\u8a18"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/#lec1-mar-7-2018", 
            "text": "\u7167\u8449\u6a39\u6728\u6797\u6587\u5316:\u7167\u8449\u6a39\u6797\u6587\u5316\uff0c\u662f1970\u5e74\u4ee3\u4ee5\u4f86\u65e5\u672c\u4eba\u985e\u5b78\u5bb6\u63d0\u51fa\u65e5\u672c\u6587\u5316\u6e90\u982d\u7406\u8ad6\u3002\u63d0\u51fa\u559c\u746a\u62c9\u96c5\u5c71\u4ee5\u5357\u81f3\u65e5\u672c\u95dc\u897f\u6709\u4e00\u5e38\u7da0\u95ca\u8449\u6a39\u6797\uff0c\u5176\u4e2d\u4ee5\u96f2\u5357\u70ba\u4e2d\u5fc3\uff0c\u65e5\u672c\u7684\u6c34\u7a3b\u7a2e\u690d\u8207\u6b64\u6587\u5316\u6709\u95dc\u3002 Wikipedia   \n1.\u7167\u4e0b\u53bb\u6a39\u8449\u6703\u9583\u9583\u767c\u5149    \u65e5\u672c\u7a3b\u7c73\u4e3b\u8981\u662f\u4e2d\u570b\u9577\u6c5f\u6d41\u904e\u53bb\u7684\u8aaa\u6cd5\u6700\u70ba\u666e\u904d\uff0c\u4f46\u662f\u73fe\u5728\u7684\u58fd\u53f8\u7c73\u548c\u5927\u9678\u7684\u4e0d\u592a\u4e00\u6a23\uff0c\u5927\u9678\u7684\u4ee5\u84ec\u840a\u7c73\u70ba\u4e3b\u800c\u65e5\u672c\u662f\u504f\u58fd\u53f8\u7c73\u7684\u9ecf\u7a20   \u6709\u975e\u5e38\u5927\u7684\u53e4\u58b3  \u65e5\u8a9e\u7684\u6587\u5b57\u6587\u6cd5\u8fd1\u4f3c\u65bc\u6771\u570b\u5317\u65b9\u6c11\u65cf  \u7167\u8449\u6a39\u6728\u6587\u5316\u53e4\u4ee3\u6709\u54ea\u4e9b\u4e8b\u60c5\u5462 \n1.\u5973\u6027\u6587\u5316\u70ba\u4e2d\u5fc3\uff0c\u7537\u5973\u60c5\u610f\u76f8\u6295\u5f26\u6b4c\u5c0d\u5531", 
            "title": "Lec1. Mar 7, 2018"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/#lec3-mar-21-2018", 
            "text": "\u7e2e\u5c0f\u6587\u5316\u662f\u65e5\u672c\u5927\u5b78\u6559\u6388\u63d0\u51fa\u7684  \u9b4f\u5fd7\u7aa9\u4eba\u50b3\uff0c\u4e2d\u570b\u4eba\u8a18\u8f09\u4e86\u6700\u65e9\u7684\u65e5\u672c\u4eba\u6d3b\u52d5\u60c5\u5f62\uff0c\u984c\u5230\u4e86\u4e5d\u5dde\u7684  \u90aa\u99ac\u53f0\u570b  \u53e4\u58b3\uff1a\u6574\u5ea7\u5c71\u90fd\u662f\u76f4\u7a74\u5f0f  \u65e5\u672c\u4eba\u6700\u65e9\u53ef\u4ee5\u662f\uff1a\u7e69\u6587\u4eba\uff08\u6bd4\u5f4c\u751f\u4eba\u77ee\uff09  \u4e2d\u570b\u5ead\u5712\u7684\u7279\u8272\u5728\u65bc\u5efa\u7bc9\u7269\u5c6c\u65bc\u98a8\u666f\u7684\u4e00\u90e8\u5206,\u800c\u4e14\u5176\u6a13\u3001\u4ead\u3001\u53f0\u3001\u69ad\u4e0a\u9762\u90fd\u61f8\u639b\u6abb\u806f,\u9019\u662f\u65e5\u672c\u5ead\u5712\u898b\u4e0d\u5230\u7684\u666f\u8c61\uff0c\u800c\u65e5\u672c\u9664\u4e86\u4e3b\u5efa\u7bc9\u4ee5\u5916\uff0c\u4e43\u662f\u770b\u4e0d\u5230\u4eba\u5de5\u5efa\u7bc9\u7684\uff0c\u6b64\u5916\u9084\u6703\u6709\u92ea\u4e0a\u767d\u6c99\u7684\u67af\u5c71\u6c34\u5ead\u5712\u4ee5\u53ca\u6eff\u4f48\u9752\u82d4\u7684\u5ead\u5712\uff0c\u524d\u8005\u8c61\u5fb5\u4e00\u6bba\u770b\u898b\u4e00\u500b\u5b87\u5b99\uff0c\u5f8c\u8005\u5247\u662f\u5728\u65e5\u672c\u6eab\u6696\u662f\u6f64\u4e2d\u57f9\u80b2\u51fa\u4f86\u9591\u975c\u6c23\u6c1b\u7684\u5ead\u5712\u3002  \u65e5\u672c\u7684\u4e2d\u570b\u7f8e\u8853\u5c08\u5bb6\u6236\u7530\u798e\u4f51\u6559\u6388\u6307\u51fa,\u65e5\u672c\u7e6a\u756b\u4e2d\u51fa\u73fe\u7684\u706b\u7130\u3001\u96f2\u5f69\u3001\u6c34(\u6d6a\u82b1)\u3001\u5149\u7b49\u4e0d\u5b9a\u578b\u7269,\u5728\u73fe\u5b58\u7684\u4e2d\u570b\u7e6a\u756b\u4e2d\u898b\u4e0d\u5230\u3002  \u4ff3\u53e5\u53ef\u4ee5\u4e0d\u7528\u62bc\u97fb \u4f46\u4e00\u5b9a\u89815+7+5 \u4e26\u4e14\u6709\u5b63\u8a9e\uff08\u65e5\u672c\u4eba\u6c11\u5c0d\u65bc\u5e7c\u5c0f\u6642\u4ee3\u6216\u6545\u9109\u4e00\u7a2e\u61f7\u5ff5\u7737\u6200\u4e4b\u60c5\uff09  \u7ef3\u6587\u201d\u4e00\u8bcd\u6765\u6e90\u4e8e\u7f8e\u56fd\u52a8\u7269\u5b66\u5bb6\u6469\u65af\u5173\u4e8e\u5927\u68ee\u8d1d\u51a2\u9676\u5668\u53d1\u6398\u7684\u62a5\u544a\u3002\uff08\u53d6\u81ea\u767e\u5ea6\uff09  \u5f4c\u751f\u6642\u4ee3\u662f\u5317\u6d77\u9053\u4e0e\u7409\u7403\u4ee5\u5916\u7684\u5168\u65e5\u672c\u5217\u5cf6\u7684\u4e00\u500b\u6642\u4ee3\u5283\u5206\uff0c\u8655\u65bc\u897f\u5143\u524d10\u4e16\u7d00\u5230\u897f\u51433\u4e16\u7d00\u4e2d\u671f\u3002 \u5f4c\u751f\u6642\u4ee3\u662f\u5728\u7d93\u6b77\u4e86\u4ee5\u63a1\u96c6\u70ba\u7d93\u6fdf\u4e3b\u9ad4\u7684\u7e69\u6587\u6642\u4ee3\u4e4b\u5f8c\uff0c\u4e00\u500b\u4e3b\u8981\u4f9d\u8cf4\u6c34\u7a3b\u7a2e\u690d\u7684\u751f\u7522\u7d93\u6fdf\u6642\u4ee3\u3002 \uff08\u53d6\u81ea\u7dad\u57fa\u767e\u79d1\uff09  \u65e5\u672c\u795e\u8a71\u4e3b\u8981\u8a18\u8f09\u5728 \u53e4\u4e8b\u8a18\uff0c\u800c\u4e0d\u662f\u592a\u53e4\u8a18  \u65e5\u672c\u7684\u53e4\u58b3\u7684\u5167\u90e8\u69cb\u9020\uff0c\u8d77\u5148\u90fd\u662f\u8c4e\u7a74\u5f0f\u77f3\u5ba4\uff0c\u4e00\u76f4\u5230\u4e94\u4e16\u7d00\u4e2d\u8449\u624d\u51fa\u73fe\u6a6b\u7a74\u5f0f\u77f3\u5ba4\u3002\u800c\u5230\u4e86\u53e4\u58b3\u6642\u4ee3\u7684\u5f8c\u671f\uff0c\u4e5f\u5c31\u662f\u897f\u5143\u516d\u4e03\u4e16\u7d00\u7684\u6642\u5019\uff0c\u6a6b\u7a74\u77f3\u5ba4\u5df2\u7d93\u666e\u53ca\u65bc\u65e5\u672c\u5168\u570b\u3002", 
            "title": "Lec3. Mar 21 2018"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/#lec4-mar-28-2018", 
            "text": "\u63a8\u8c37\u5929\u7687\u662f\u7b2c\u4e00\u4efb\u5973\u5929\u7687  \u4e2d\u592e\u96c6\u6b0a\uff0c\u5728\u8056\u5fb7\u592a\u5b50\u7684\u6642\u4ee3\uff0c\u9694\u5e74\u9084\u9812\u4f48\u4e86\u5341\u4e03\u689d\u61b2\u6cd5\uff0c\u5728\u516c\u5143604\u5e74\n1.\u4ee5\u548c\u70ba\u8cb4 \n2.\u7be4\u4fe1\u4e09\u5bf6:\u5ba3\u63da\u4f5b\u6559\u70ba\u570b\u6559  \u98db\u9ce5\u6642\u4ee3:\u540c\u6642\u4e2d\u570b\u7684\u968b\u671d\u6642\u671f\uff0c\u6709\u8da3\u968b\u671d\u671d\u8ca2\uff0c\u5728\u5948\u826f\u9644\u8fd1\uff0c\u6b66\u529b\u9817\u70ba\u5f37\u5927\n\u5728\u6b64\u6642\u968b\u671d\u60f3\u8981\u9060\u4ea4\u8fd1\u653b\uff0c\u56e0\u70ba\u4ed6\u8981\u6253\u671d\u9bae\u534a\u5cf6\uff0c\u6240\u4ee5\u5148\u6d3e\u96a8\u99db\u5230\u65e5\u672c\uff0c\u5e0c\u671b\u65e5\u672c\u4e0d\u8981\u4f86\u5e72\u6d89\u3002  \u65e5\u672c\u4ee5\u53d7\u6212\u6700\u53e4\u8001\u7684\u6728\u9020\u5efa\u7bc9:\u65e5\u672c\u5948\u826f\u6cd5\u9686\u5bfa  \u5927\u5316(\u5e74\u865f\uff0c\u5927\u5316\u4e8c\u5e74\uff0c\u570b\u5bb6\u7684\u6539\u9020\u8a08\u756b)\u9769\u65b0:\u662f\u897f\u5143645\u5e74\u6642\u65e5\u672c\u7684\u4e00\u9023\u4e32\u793e\u6703\u653f\u6cbb\u6539\u9769\u3002 \u5176\u4e3b\u8981\u5167\u5bb9\u662f\u5ee2\u9664\u7576\u6642\u8c6a\u65cf\u5c08\u653f\u7684\u5236\u5ea6\uff0c\u4e26\u6548\u6cd5\u4e2d\u539f\u5510\u671d\u7687\u5e1d\u9ad4\u5236\u6210\u7acb\u4e2d\u592e\u96c6\u6b0a\u570b\u5bb6\uff0c\u5c0d\u65e5\u5f8c\u65e5\u672c\u6b77\u53f2\u767c\u5c55\u5f71\u97ff\u6df1\u9060\u3002\n1.\u4e2d\u592e\u96c6\u6b0a\uff0c\u985e\u4f3c\u4e2d\u570b\uff0c\u540c\u6642\u5b78\u7fd2\u4e2d\u570b\u7684\u6587\u5316 \n2.\u7a05\u5236\u6539\u9769  \u65e5\u672c\u6700\u65e9\u7684\u60c5\u6b4c\u5c0d\u5531: \u4f0a\u5354\u90a3\u5176VS\u4f0a\u5354\u90a3\u7f8e  \u5929\u5ca9\u6236\u795e\u8a71\n1.\u9285\u93e1 \n2.\u516b\u6b67\u5927\u86c7OROCUI  \n3.\u5341\u5168\u528d \u662f\u4e00\u7a2e\u7d50\u69cb\u4e3b\u7fa9  \n4.\u8001\u592b\u5a66\u5973\u5152\u8b8a\u6210\u4e00\u96bb\u68b3\u5b50   \u5be9\u5224\n1.\u770b\u8ab0\u6c59\u7a62\uff0c\u5c31\u662f\u6709\u7f6a \u7528\u7953\u89e3\u9664\u5384\u904b \n2.\u5929\u6d25\u7f6a \u7834\u8fb2\u8015\u796d\u7940  \n3.\u570b\u6d25\u7f6a \u88ab\u96f7\u6253\u5230 \u8fb2\u4f5c\u7269\u88ab\u5403 \u59e6\u6deb\u602a\u76dc", 
            "title": "Lec4. Mar 28 2018"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/#_2", 
            "text": "", 
            "title": "\u8a66\u5377\u89e3\u6790"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/#_3", 
            "text": "\u300c\u5fa1\u6210\u6557\u5f0f\u76ee\u300d\u8207\u300c\u8c9e\u6c38\u5f0f\u76ee\u300d\u662f\u4e0d\u540c\u7684\u6cd5\u5178\u3002 \u932f \u540c\u4e00\u500b!  \u662f  \u938c\u5009\u4f5b\u6559\u7684\u7279\u8272\u6709\u4e09\uff1a\u7b2c\u4e00\u662f\u300c\u6613\u884c\u300d\uff0c\u7b2c\u4e8c\u662f\u300c\u9078\u64c7\u300d\uff0c\u7b2c\u4e09\u662f\u300c\u5c08\u4fee\u300d\u3002 \u662f  \u300c\u60e1\u4eba\u6b63\u6a5f\u8aaa\u300d\u662f\u6cd5\u7136\u63d0\u51fa\u7684\u3002 \u662f  \u69ae\u897f\u5728\u65e5\u672c\u958b\u5275\u4e86\u66f9\u6d1e\u5b97\u3002 \u932f \u61c9\u8a72\u662f \u9053\u5143\u79aa\u5e2b  \u300a\u5f92\u7136\u8349\u300b\u662f\u5409\u7530\u517c\u597d\u6240\u8457\u3002 \u662f  \u6771\u5927\u5bfa\u5357\u5927\u9580\u5169\u5074\u7684\u91d1\u525b\u529b\u58eb\u50cf\uff0c\u662f\u4ee5\u904b\u6176\u3001\u5feb\u6176\u3001\u5b9a\u89ba\u3001\u6e5b\u6176\u56db\u4eba\u70ba\u4e3b\u7684\u96d5\u523b\u5e2b\uff0c\u7e3d\u8ca0\u8cac\u4eba\u662f\u904b\u6176\u3002 \u662f  \u4e0d\u77e5\u9053 \u61c9\u8a72 \u662f \u5427?  \u7531\u5c07\u8ecd\u57f7\u653f\u7684\u653f\u6cbb\u7a31\u70ba\u300c\u9662\u653f\u300d\u3002  \u5426\u3002\u5929\u7687\u8b93\u4f4d\u800c\u81ea\u7a31\u4e0a\u7687\uff0c\u5728\u300c\u9662\u300d\u4e2d\u57f7\u653f\u7684\u653f\u6cbb\u5f62\u614b  \u4fdd\u5143\u4e4b\u4e82\u7684\u610f\u7fa9\u662f\uff0c\u5f9e\u6b64\uff0c\u8cb4\u65cf\u8207\u6b66\u58eb\u7684\u5730\u4f4d\u9006\u8f49\uff0c\u65e5\u672c\u6b77\u53f2\u958b\u59cb\u9032\u5165\u4e03\u767e\u591a\u5e74\u7684\u6b66\u58eb\u793e\u6703\u3002 \u662f  \u6b66\u58eb\u901a\u904e\u5206\u5c01\u571f\u5730\uff08\u4e5f\u53ef\u4ee5\u8aaa\u662f\u5206\u6563\u7684\u571f\u5730\u7d71\u6cbb\uff09\uff0c\u7de0\u7d50\u300c\u5fa1\u6069\u300d\u8207\u300c\u5949\u516c\u300d\u7684\u4e3b\u5f9e\u95dc\u4fc2\uff0c\u4f86\u7d71\u6cbb\u8fb2\u6c11\u7684\u5236\u5ea6\u7a31\u70ba\u5c01\u5efa\u5236\u5ea6\u3002 \u00a0 \u662f", 
            "title": "\u7b2c\u4e03\u5377"
        }, 
        {
            "location": "/univ_notes/general/jp_cul/#_4", 
            "text": "\u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c204 \u5012\u6578\u7b2c\u56db\u884c  \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c205 \u7b2c\u4e8c\u884c  \u662f   \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e2d\u6bb5  \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e0b\u6bb5\uff0c\u7522\u696d\u8207\u90fd\u5e02\u7684\u767c\u9054  \u5426\uff0c\u5728\u4eac\u90fd\u9644\u8fd1\u512a\u4e9b\u6751\u843d\u4e0d\u8a2d\u7f6e\u838a\u5712\u7684\u7ba1\u7406\u4eba\uff0c\u800c\u662f\u7531\u53eb\u6709\u529b\u7684\u8fb2\u6c11\u4f86\u4e3b\u5c0e\uff0c\u7531\u6240\u6709\u7684\u8fb2\u6c11\u806f\u5408\u81ea\u6cbb\uff0c\u9019\u7a2e\u806f\u5408\u7684\u81ea\u6cbb\u9ad4\u7a31\u70ba\u300e\u7e3d\u300f\uff08sou\uff09 \u8acb\u67e5\u95b1\u8ab2\u672c207\u4e2d\u6bb5  \u662f", 
            "title": "\u7b2c\u516b\u5377"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/lcojindex/", 
            "text": "Index of leetcode_OJ\n\n\nleetcode_OJ(Old blog, from google blogger)\n \n\n\nWC76\n \n\n\nWC70\n \n\n\nWC74\n \n\n\nWC75\n \n\n\nWC76\n \n\n\nWC78\n \n\n\nWC79", 
            "title": "Index"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/lcojindex/#index-of-leetcode_oj", 
            "text": "leetcode_OJ(Old blog, from google blogger)    WC76    WC70    WC74    WC75    WC76    WC78    WC79", 
            "title": "Index of leetcode_OJ"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC67/", 
            "text": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Jan 14, 2018\n\n\nVirtual Contest time: Mar 24, 2018\n\n\n\n\nPA. \n762. Prime Number of Set Bits in Binary Representation\n \u4f4d\u5143\u64cd\u4f5c\u6c34\u984c\n\n\n\n\n\u601d\u8def\uff1a\u4f4d\u5143\u904b\u7b97\u6293\u4e00\uff0c\u770b\u770b\u4e00\u7684\u500b\u6578\u662f\u5426\u70ba\u8cea\u6578\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nbitcnt\n(\nint\n \nnum\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n;\n\n        \nwhile\n(\nnum\n \n \n0\n)\n\n        \n{\n\n            \nif\n(\nnum\n \n \n0x1\n)\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n            \nnum\n=\n1\n;\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n    \nbool\n \nis_prime\n(\nint\n \nnum\n)\n\n    \n{\n\n        \nif\n(\nnum\n \n==\n \n1\n)\n\n            \nreturn\n \nfalse\n;\n\n\n        \nfor\n(\nint\n \ni\n=\n2\n;\ni\n=\n(\nint\n)\nsqrt\n(\nnum\n);\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nnum\n \n%\n \ni\n \n==\n \n0\n)\n\n            \n{\n\n                \nreturn\n \nfalse\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ntrue\n;\n\n    \n}\n\n    \nint\n \ncountPrimeSetBits\n(\nint\n \nleft\n,\n \nint\n \nright\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n,\n \nbit\n \n=\n \n0\n;\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \nleft\n;\n \ni\n \n=\n \nright\n;\n \ni\n++\n)\n\n        \n{\n\n            \nbit\n \n=\n \nbitcnt\n(\ni\n);\n\n            \nif\n(\nis_prime\n(\nbit\n))\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPB. \n763. Partition Labels\n \u8caa\u5fc3\u6f14\u7b97\u6cd5\u63a8\u7406\u984c\n\n\n\n\n\u601d\u8def\uff1a\u5fc5\u9808\u8b93\u6240\u6709char\u958b\u59cb\u7d50\u675f\u5747\u5c6c\u65bc\u540c\u4e00\u500b\u5340\u584a\uff0c\u6545\u5229\u7528struct\u7d00\u9304\u6bcf\u4e00\u500bchar\u7684\u6700\u65e9\u958b\u59cb\u4f4d\u7f6e\uff0c\u8207\u6700\u665a\u7d50\u675f\u4f4d\u7f6e\u3002\u82e5\u5b57\u5143x\u7684\u958b\u59cb\u4f4d\u7f6ex_start\u4ecb\u65bc\u7576\u524d\u6700\u5c0f\u958b\u59cb(min_start)\u8207\u7d50\u675f(max_end)\u4e4b\u9593\uff0c\u4e26\u4e14\u5b57\u5143x\u7684\u7d50\u675f\u4f4d\u7f6e\u5927\u65bc\u7576\u524d\u7684max_end \u5247\u5fc5\u9808\u518d\u5c07max_end\u5ef6\u4f38\uff0c\u5426\u5247\u7121\u6cd5\u7b26\u5408\u984c\u76ee\u9700\u6c42\u8b93char\u6700\u5c0f\u958b\u59cb\u8207\u6700\u5927\u7d50\u675f\u8857\u4f4d\u5728\u540c\u4e00\u500b\u5340\u584a\u3002 \u6bcf\u6b21\u90fd\u627e\u7576\u524d\u6700\u9060\u7684\u4e26\u6aa2\u67e5\u662f\u5426\u66f4\u65b0\uff08\u5340\u57df\u6700\u512a\u89e3\uff09\uff0c\u662f\u5c6c\u65bc\u8caa\u5fc3\u7b97\u6cd5\u7684\u4e00\u7a2e\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nstruct\n \nstend\n\n    \n{\n\n        \nchar\n \nalpha\n;\n\n        \nint\n \nstart\n,\n \nend\n;\n\n    \n};\n\n    \nbool\n \nmycompare\n(\nstend\n \ns1\n,\n \nstend\n \ns2\n)\n\n    \n{\n\n        \nreturn\n \ns1\n.\nstart\n \n \ns2\n.\nstart\n;\n\n    \n}\n\n\n    \nvector\nint\n \npartitionLabels\n(\nstring\n \nstr\n)\n\n    \n{\n\n        \nint\n \ncount\n \n=\n \nstr\n.\nsize\n();\n\n        \nvector\nstend\n \nvec\n;\n\n        \nvec\n.\nresize\n(\n26\n);\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n26\n;\n \ni\n++\n)\n\n        \n{\n\n            \nvec\n[\ni\n].\nstart\n \n=\n \n-\n1\n;\n\n            \nvec\n[\ni\n].\nend\n \n=\n \n0\n;\n\n            \nvec\n[\ni\n].\nalpha\n \n=\n \n0\n;\n\n        \n}\n\n        \nvec\n[\nstr\n[\n0\n]\n-\na\n].\nstart\n \n=\n \n0\n;\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \n1\n;\n \ni\n \n \ncount\n;\n \ni\n++\n)\n\n        \n{\n\n            \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nalpha\n \n=\n \nstr\n[\ni\n];\n\n            \nif\n(\nvec\n[\nstr\n[\ni\n]\n-\na\n].\nstart\n \n==\n \n-\n1\n)\n\n            \n{\n\n                \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nstart\n \n=\n \ni\n;\n\n            \n}\n\n            \nif\n(\ni\n \n \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nend\n)\n\n            \n{\n\n                 \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nend\n \n=\n \ni\n;\n\n            \n}\n\n        \n}\n\n\n        \nint\n \nmin_start\n \n=\n \nvec\n[\nstr\n[\n0\n]\n-\na\n].\nstart\n;\n\n        \nint\n \nmax_end\n \n=\n \nvec\n[\nstr\n[\n0\n]\n-\na\n].\nend\n;\n\n        \n//greedy approach\n\n        \nint\n \npartition\n \n=\n \n0\n;\n\n        \nvector\nint\nres\n;\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \n0\n;\n \ni\n \n \ncount\n;\n \ni\n++\n)\n\n        \n{\n\n            \nif\n(\n \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nstart\n \n \nmin_start\n\n            \n \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nstart\n \n \nmax_end\n\n            \n \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nend\n \n \nmax_end\n \n)\n\n            \n{\n\n                \nmax_end\n \n=\n \nvec\n[\nstr\n[\ni\n]\n-\na\n].\nend\n;\n\n            \n}\n\n\n            \nif\n(\ni\n \n==\n \nmax_end\n \n||\n \ni\n \n==\n \ncount\n \n-\n \n1\n)\n//last will definitely cut over to match. just in case\n\n            \n{\n\n                \nif\n(\ni\n \n!=\n \ncount\n \n-\n \n1\n)\n\n                \n{\n\n                    \nres\n.\npush_back\n(\nmax_end\n \n-\n \nmin_start\n \n+\n \n1\n);\n\n                    \nmin_start\n \n=\n \nvec\n[\nstr\n[\ni\n \n+\n \n1\n]\n-\na\n].\nstart\n;\n\n                    \nmax_end\n \n=\n \nvec\n[\nstr\n[\ni\n \n+\n \n1\n]\n-\na\n].\nend\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nres\n.\npush_back\n(\nmax_end\n \n-\n \nmin_start\n \n+\n \n1\n);\n \n// a special case\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPC. \n764. Largest Plus Sign\n \u52d5\u614b\u898f\u5283\n\n\n\n\n\u7531\u65bc\u6bcf\u4e00\u9ede\u7684+\u865f\u4e2d\u5fc3\uff0c\u5468\u570d\u7684\u56db\u89d2\u90fd\u5fc5\u9808\u7b49\u9577\u70ba\u9023\u7e8c\u76841(\u91cd\u758a\u5b50\u554f\u984c)\uff0c\u82e5\u4e0d\u7b49\u9577\u5247\u53ea\u80fd\u76e1\u91cf\u5ef6\u4f38\u81f3\u300e\u56db\u89d2\u6700\u77ed\u7684\u89d2\u300f\u4f5c\u70ba\u672c\u6b21\u7684order(\u6700\u512a\u5b50\u7d50\u69cb)\uff0c\u56e0\u6b64\u63a1\u7528\u52d5\u614b\u898f\u5283\n\u9996\u5148\u628a\u56db\u500b\u65b9\u5411\uff08\u671d\u4e0a \u671d\u4e0b \u671d\u5de6 \u671d\u53f3 \u9023\u7e8c\u76841\u7d66\u8a18\u8f09 \u4f8b\u5982\u671d\u53f3\u884c\u9032 0110111 \n 0120123\n\u671d\u5de6\u884c\u9032\n 0210321 \u7684\u5beb\u6cd5\uff09\uff0c\u6700\u5f8c\u5168\u90e8\u8d70\u8a2a\u904e\u4e00\u904d\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u4e00\u9ede\u53d6min(u,d,l,r)\u9023\u7e8c\u4e00\u7684\u500b\u6578\u5c31\u662f\u7576\u524d\u80fd\u7d44\u6210\uff0b\u865f\u7684order\uff08\u5ea6\u6578\uff09\n\u6700\u5f8c\u91cd\u65b0\u8d70\u8a2a\u4e00\u904d\u627e\u51fa\u5c0d\u65bc\u6bcf\u4e00\u9ede\u6700\u5927\u7684order\u3002\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \norderOfLargestPlusSign\n(\nint\n \nMAXN\n,\n \nvector\nvector\nint\n \nmines\n)\n\n    \n{\n\n        \nint\n \norder\n \n=\n \n0\n,\n \ncount\n \n=\n \nmines\n.\nsize\n();\n\n        \nvector\nvector\nint\ndp_up\n(\nMAXN\n,\n \nvector\nint\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_down\n(\nMAXN\n,\n \nvector\nint\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_left\n(\nMAXN\n,\n \nvector\nint\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_right\n(\nMAXN\n,\n \nvector\nint\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_ans\n(\nMAXN\n,\n \nvector\nint\n(\nMAXN\n,\n \n0\n));\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \n0\n;\n \ni\n \n \ncount\n;\n \ni\n++\n)\n\n        \n{\n\n            \ndp_up\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n            \ndp_down\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n            \ndp_left\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n            \ndp_right\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n        \n}\n\n\n        \n//main dynamic programming\n\n        \n//up continuous (bottom up)\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \nMAXN\n \n-\n \n2\n;\nj\n \n=\n \n0\n;\n \nj\n--\n)\n\n            \n{\n\n                \nif\n(\ndp_up\n[\nj\n][\ni\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_up\n[\nj\n][\ni\n]\n \n=\n \ndp_up\n[\nj\n \n+\n \n1\n][\ni\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//down continuous (top down)\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n1\n;\nj\n \n \nMAXN\n;\n \nj\n++\n)\n\n            \n{\n\n                \nif\n(\ndp_down\n[\nj\n][\ni\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_down\n[\nj\n][\ni\n]\n \n=\n \ndp_down\n[\nj\n \n-\n \n1\n][\ni\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//left continuous\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \nMAXN\n \n-\n \n2\n;\nj\n \n=\n0\n \n;\nj\n--\n)\n\n            \n{\n\n                \nif\n(\ndp_left\n[\ni\n][\nj\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_left\n[\ni\n][\nj\n]\n \n=\n \ndp_left\n[\ni\n][\nj\n \n+\n \n1\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//right continuous\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n1\n;\nj\n \n \nMAXN\n;\n \nj\n++\n)\n\n            \n{\n\n                \nif\n(\ndp_right\n[\ni\n][\nj\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_right\n[\ni\n][\nj\n]\n \n=\n \ndp_right\n[\ni\n][\nj\n \n-\n \n1\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n\n        \n//check for direction since the plus sign has to satisfiy all the four direction, if one of the direction fails. it has to decrease to that direction\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n \nMAXN\n;\n \nj\n++\n)\n\n            \n{\n\n                \ndp_ans\n[\ni\n][\nj\n]\n \n=\n \nmin\n(\nmin\n(\ndp_up\n[\ni\n][\nj\n],\n \ndp_down\n[\ni\n][\nj\n]),\n \nmin\n(\ndp_left\n[\ni\n][\nj\n],\n \ndp_right\n[\ni\n][\nj\n]));\n\n                \nif\n(\ndp_ans\n[\ni\n][\nj\n]\n \n \norder\n)\n\n                \n{\n\n                    \norder\n \n=\n \ndp_ans\n[\ni\n][\nj\n];\n\n                \n}\n\n            \n}\n\n        \n}\n\n\n        \nreturn\n \norder\n;\n\n    \n}\n\n\n\n};", 
            "title": "WC67"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#leetcode_oj-wc75", 
            "text": "Contest time: Jan 14, 2018  Virtual Contest time: Mar 24, 2018", 
            "title": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#pa-762-prime-number-of-set-bits-in-binary-representation", 
            "text": "\u601d\u8def\uff1a\u4f4d\u5143\u904b\u7b97\u6293\u4e00\uff0c\u770b\u770b\u4e00\u7684\u500b\u6578\u662f\u5426\u70ba\u8cea\u6578  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44 class   Solution  {  public : \n     int   bitcnt ( int   num ) \n     { \n         int   cnt   =   0 ; \n         while ( num     0 ) \n         { \n             if ( num     0x1 ) \n             { \n                 cnt ++ ; \n             } \n             num = 1 ; \n         } \n         return   cnt ; \n     } \n     bool   is_prime ( int   num ) \n     { \n         if ( num   ==   1 ) \n             return   false ; \n\n         for ( int   i = 2 ; i = ( int ) sqrt ( num ); i ++ ) \n         { \n             if ( num   %   i   ==   0 ) \n             { \n                 return   false ; \n             } \n         } \n         return   true ; \n     } \n     int   countPrimeSetBits ( int   left ,   int   right ) \n     { \n         int   cnt   =   0 ,   bit   =   0 ; \n         for   ( size_t   i   =   left ;   i   =   right ;   i ++ ) \n         { \n             bit   =   bitcnt ( i ); \n             if ( is_prime ( bit )) \n             { \n                 cnt ++ ; \n             } \n         } \n         return   cnt ; \n     }  };", 
            "title": "PA. 762. Prime Number of Set Bits in Binary Representation \u4f4d\u5143\u64cd\u4f5c\u6c34\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#pb-763-partition-labels", 
            "text": "\u601d\u8def\uff1a\u5fc5\u9808\u8b93\u6240\u6709char\u958b\u59cb\u7d50\u675f\u5747\u5c6c\u65bc\u540c\u4e00\u500b\u5340\u584a\uff0c\u6545\u5229\u7528struct\u7d00\u9304\u6bcf\u4e00\u500bchar\u7684\u6700\u65e9\u958b\u59cb\u4f4d\u7f6e\uff0c\u8207\u6700\u665a\u7d50\u675f\u4f4d\u7f6e\u3002\u82e5\u5b57\u5143x\u7684\u958b\u59cb\u4f4d\u7f6ex_start\u4ecb\u65bc\u7576\u524d\u6700\u5c0f\u958b\u59cb(min_start)\u8207\u7d50\u675f(max_end)\u4e4b\u9593\uff0c\u4e26\u4e14\u5b57\u5143x\u7684\u7d50\u675f\u4f4d\u7f6e\u5927\u65bc\u7576\u524d\u7684max_end \u5247\u5fc5\u9808\u518d\u5c07max_end\u5ef6\u4f38\uff0c\u5426\u5247\u7121\u6cd5\u7b26\u5408\u984c\u76ee\u9700\u6c42\u8b93char\u6700\u5c0f\u958b\u59cb\u8207\u6700\u5927\u7d50\u675f\u8857\u4f4d\u5728\u540c\u4e00\u500b\u5340\u584a\u3002 \u6bcf\u6b21\u90fd\u627e\u7576\u524d\u6700\u9060\u7684\u4e26\u6aa2\u67e5\u662f\u5426\u66f4\u65b0\uff08\u5340\u57df\u6700\u512a\u89e3\uff09\uff0c\u662f\u5c6c\u65bc\u8caa\u5fc3\u7b97\u6cd5\u7684\u4e00\u7a2e  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69 class   Solution  {  public : \n     struct   stend \n     { \n         char   alpha ; \n         int   start ,   end ; \n     }; \n     bool   mycompare ( stend   s1 ,   stend   s2 ) \n     { \n         return   s1 . start     s2 . start ; \n     } \n\n     vector int   partitionLabels ( string   str ) \n     { \n         int   count   =   str . size (); \n         vector stend   vec ; \n         vec . resize ( 26 ); \n         for ( int   i   =   0 ;   i     26 ;   i ++ ) \n         { \n             vec [ i ]. start   =   - 1 ; \n             vec [ i ]. end   =   0 ; \n             vec [ i ]. alpha   =   0 ; \n         } \n         vec [ str [ 0 ] - a ]. start   =   0 ; \n         for   ( size_t   i   =   1 ;   i     count ;   i ++ ) \n         { \n             vec [ str [ i ] - a ]. alpha   =   str [ i ]; \n             if ( vec [ str [ i ] - a ]. start   ==   - 1 ) \n             { \n                 vec [ str [ i ] - a ]. start   =   i ; \n             } \n             if ( i     vec [ str [ i ] - a ]. end ) \n             { \n                  vec [ str [ i ] - a ]. end   =   i ; \n             } \n         } \n\n         int   min_start   =   vec [ str [ 0 ] - a ]. start ; \n         int   max_end   =   vec [ str [ 0 ] - a ]. end ; \n         //greedy approach \n         int   partition   =   0 ; \n         vector int res ; \n         for   ( size_t   i   =   0 ;   i     count ;   i ++ ) \n         { \n             if (   vec [ str [ i ] - a ]. start     min_start \n               vec [ str [ i ] - a ]. start     max_end \n               vec [ str [ i ] - a ]. end     max_end   ) \n             { \n                 max_end   =   vec [ str [ i ] - a ]. end ; \n             } \n\n             if ( i   ==   max_end   ||   i   ==   count   -   1 ) //last will definitely cut over to match. just in case \n             { \n                 if ( i   !=   count   -   1 ) \n                 { \n                     res . push_back ( max_end   -   min_start   +   1 ); \n                     min_start   =   vec [ str [ i   +   1 ] - a ]. start ; \n                     max_end   =   vec [ str [ i   +   1 ] - a ]. end ; \n                 } \n                 else \n                 { \n                     res . push_back ( max_end   -   min_start   +   1 );   // a special case \n                 } \n             } \n         } \n         return   res ; \n     }  };", 
            "title": "PB. 763. Partition Labels \u8caa\u5fc3\u6f14\u7b97\u6cd5\u63a8\u7406\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#pc-764-largest-plus-sign", 
            "text": "\u7531\u65bc\u6bcf\u4e00\u9ede\u7684+\u865f\u4e2d\u5fc3\uff0c\u5468\u570d\u7684\u56db\u89d2\u90fd\u5fc5\u9808\u7b49\u9577\u70ba\u9023\u7e8c\u76841(\u91cd\u758a\u5b50\u554f\u984c)\uff0c\u82e5\u4e0d\u7b49\u9577\u5247\u53ea\u80fd\u76e1\u91cf\u5ef6\u4f38\u81f3\u300e\u56db\u89d2\u6700\u77ed\u7684\u89d2\u300f\u4f5c\u70ba\u672c\u6b21\u7684order(\u6700\u512a\u5b50\u7d50\u69cb)\uff0c\u56e0\u6b64\u63a1\u7528\u52d5\u614b\u898f\u5283\n\u9996\u5148\u628a\u56db\u500b\u65b9\u5411\uff08\u671d\u4e0a \u671d\u4e0b \u671d\u5de6 \u671d\u53f3 \u9023\u7e8c\u76841\u7d66\u8a18\u8f09 \u4f8b\u5982\u671d\u53f3\u884c\u9032 0110111   0120123\n\u671d\u5de6\u884c\u9032  0210321 \u7684\u5beb\u6cd5\uff09\uff0c\u6700\u5f8c\u5168\u90e8\u8d70\u8a2a\u904e\u4e00\u904d\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u4e00\u9ede\u53d6min(u,d,l,r)\u9023\u7e8c\u4e00\u7684\u500b\u6578\u5c31\u662f\u7576\u524d\u80fd\u7d44\u6210\uff0b\u865f\u7684order\uff08\u5ea6\u6578\uff09\n\u6700\u5f8c\u91cd\u65b0\u8d70\u8a2a\u4e00\u904d\u627e\u51fa\u5c0d\u65bc\u6bcf\u4e00\u9ede\u6700\u5927\u7684order\u3002  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82 class   Solution  {  public : \n     int   orderOfLargestPlusSign ( int   MAXN ,   vector vector int   mines ) \n     { \n         int   order   =   0 ,   count   =   mines . size (); \n         vector vector int dp_up ( MAXN ,   vector int ( MAXN ,   1 )), \n         dp_down ( MAXN ,   vector int ( MAXN ,   1 )), \n         dp_left ( MAXN ,   vector int ( MAXN ,   1 )), \n         dp_right ( MAXN ,   vector int ( MAXN ,   1 )), \n         dp_ans ( MAXN ,   vector int ( MAXN ,   0 )); \n         for   ( size_t   i   =   0 ;   i     count ;   i ++ ) \n         { \n             dp_up [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n             dp_down [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n             dp_left [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n             dp_right [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n         } \n\n         //main dynamic programming \n         //up continuous (bottom up) \n         for ( int   i   =   0 ; i     MAXN ;   i ++ ) \n         { \n             for ( int   j   =   MAXN   -   2 ; j   =   0 ;   j -- ) \n             { \n                 if ( dp_up [ j ][ i ]   ==   1 ) \n                 { \n                     dp_up [ j ][ i ]   =   dp_up [ j   +   1 ][ i ]   +   1 ; \n                 } \n             } \n         } \n         //down continuous (top down) \n         for ( int   i   =   0 ; i     MAXN ;   i ++ ) \n         { \n             for ( int   j   =   1 ; j     MAXN ;   j ++ ) \n             { \n                 if ( dp_down [ j ][ i ]   ==   1 ) \n                 { \n                     dp_down [ j ][ i ]   =   dp_down [ j   -   1 ][ i ]   +   1 ; \n                 } \n             } \n         } \n         //left continuous \n         for ( int   i   =   0 ; i     MAXN ;   i ++ ) \n         { \n             for ( int   j   =   MAXN   -   2 ; j   = 0   ; j -- ) \n             { \n                 if ( dp_left [ i ][ j ]   ==   1 ) \n                 { \n                     dp_left [ i ][ j ]   =   dp_left [ i ][ j   +   1 ]   +   1 ; \n                 } \n             } \n         } \n         //right continuous \n         for ( int   i   =   0 ; i     MAXN ;   i ++ ) \n         { \n             for ( int   j   =   1 ; j     MAXN ;   j ++ ) \n             { \n                 if ( dp_right [ i ][ j ]   ==   1 ) \n                 { \n                     dp_right [ i ][ j ]   =   dp_right [ i ][ j   -   1 ]   +   1 ; \n                 } \n             } \n         } \n\n         //check for direction since the plus sign has to satisfiy all the four direction, if one of the direction fails. it has to decrease to that direction \n         for ( int   i   =   0 ;   i     MAXN ;   i ++ ) \n         { \n             for ( int   j   =   0 ;   j     MAXN ;   j ++ ) \n             { \n                 dp_ans [ i ][ j ]   =   min ( min ( dp_up [ i ][ j ],   dp_down [ i ][ j ]),   min ( dp_left [ i ][ j ],   dp_right [ i ][ j ])); \n                 if ( dp_ans [ i ][ j ]     order ) \n                 { \n                     order   =   dp_ans [ i ][ j ]; \n                 } \n             } \n         } \n\n         return   order ; \n     }  };", 
            "title": "PC. 764. Largest Plus Sign \u52d5\u614b\u898f\u5283"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC70/", 
            "text": "leetcode_OJ WC70 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Feb 4, 2018\n\n\nVirtual contest by myself: Mar 4, 2018\n\n\n\n\nPA. \n779. K-th Symbol in Grammar\n \u627e\u898f\u5f8b\u984c\n\n\n\n\n\u601d\u8def\uff1a\u627e\u898f\u5f8b\uff0c\u524d\u9762\u7684N\uff0c\u5be6\u969b\u4e0a\u662f\u969c\u773c\u6cd5\u3002\n\u4ee5\u4e0b\u7684N\u662f\u4e00(1-based)\n2 3 5 8 9 12 14 15\n\u5176-1\u5f8c\u4e8c\u9032\u4f4d\u8868\u793a\u6cd5\u70ba\uff1a\n0001\n0010\n0100\n0111\n1000\n1011\n1101\n1110\n\u6e1b\u4e00\u5f8c\u6709\u5947\u6578\u500b\u4e00\u5247\u70ba1 \u5426\u5247\u70ba0\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nkthGrammar\n(\nint\n \nnin\n,\n \nint\n \nkin\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n;\n\n        \nkin\n--\n;\n\n        \nwhile\n(\nkin\n)\n\n        \n{\n\n            \nif\n(\nkin\n1\n)\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n            \nkin\n=\n1\n;\n\n        \n}\n\n        \nreturn\n \ncnt\n1\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPB.\n\n\n\u88ab\u9396\u4f4f\u770b\u4e0d\u5230\uff20\uff20\uff0c\u4e8b\u5f8c\u8cfd\uff0c\u9700\u8981\u5347\u7d1a\u6210\u9ad8\u7d1a\u6703\u54e1\u624d\u6709\uff0c\u770b\u984c\u76ee\u662f\u5207\u5272\u4e8c\u5143\u6a39\n\n\nPC. \n777. Swap Adjacent in LR String\n \u5b57\u4e32\u5167\u90e8dfs\n\n\n\n\n\u932f\u8aa4\u601d\u8def \uff1a\u60f3\u8aaa\u7528\u64f4\u6563\u89e3\u6cd5\uff0cdfs\u4e0b\u53bb\u8996\u60c5\u6cc1\u4ea4\u63db\uff0c\u7136\u5403\u4e86\u4e00\u500b\u5927RE(stack overflow)\n\u5f8c\u4f86\u767c\u73fe\u662f\u5fd8\u4e86\u5bebvisited\uff1d \uff1d\uff0c\u6839\u672c\u8822\uff0c\u770b\u4f86\u9019\u65b9\u9762\u9084\u5f97\u591a\u591a\u78e8\u7df4\u9020\u5316\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n//Runtime Error (stack overflow)\n\n\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nbool\n \ncan\n \n=\n \nfalse\n;\n\n    \nbool\n \ncanTransform\n(\nstring\n \nstart\n,\n \nstring\n \nend\n)\n\n    \n{\n\n        \nif\n(\nstart\n \n==\n \nend\n)\n\n            \nreturn\n \n1\n;\n\n        \nelse\n\n        \n{\n\n            \ndfs\n(\nstart\n,\n \nend\n,\n \n0\n,\n \nstart\n.\nsize\n()\n-\n1\n);\n\n        \n}\n\n        \nreturn\n \ncan\n;\n\n    \n}\n\n    \nvoid\n \ndfs\n(\nstring\n \nstart\n,\n \nstring\n \nend\n,\n \nint\n \nlptr\n,\n \nint\n \nrptr\n)\n \n//quick sort-like recusrion\n\n    \n{\n\n        \nif\n(\nlptr\n \n=\n \nrptr\n)\n \n//length end\n\n        \n{\n\n            \nreturn\n \n;\n\n        \n}\n\n        \nif\n(\nstart\n \n==\n  \nend\n)\n\n        \n{\n\n            \ncan\n \n=\n \ntrue\n;\n\n            \nreturn\n \n;\n\n        \n}\n\n        \nint\n \nlen\n \n=\n \nstart\n.\nsize\n()\n \n \n1\n;\n\n        \nint\n \nlptr1\n \n=\n \nlptr\n,\n \nrptr1\n \n=\n \nlen\n;\n\n        \nint\n \nlptr2\n \n=\n \nlen\n \n+\n \n1\n,\n \nrptr2\n \n=\n \nrptr\n;\n\n        \nfor\n(\nint\n \npos\n \n=\n \nlptr\n;\npos\n \n=\n \nrptr\n;\npos\n++\n)\n\n        \n{\n\n            \nif\n(\nstart\n[\npos\n]\n==\nX\n \n \nstart\n[\npos\n+\n1\n]\n==\nL\n)\n\n            \n{\n\n                \nswap\n(\nstart\n[\npos\n],\nstart\n[\npos\n+\n1\n]);\n\n            \n}\n\n            \nelse\n \nif\n(\nstart\n[\npos\n]\n==\nR\n \n \nstart\n[\npos\n+\n1\n]\n==\nX\n)\n\n            \n{\n\n                \nswap\n(\nstart\n[\npos\n],\nstart\n[\npos\n+\n1\n]);\n\n            \n}\n\n        \n}\n\n        \ndfs\n(\nstart\n,\n \nend\n,\n \nlptr1\n,\n \nrptr1\n);\n\n        \ndfs\n(\nstart\n,\n \nend\n,\n \nlptr2\n,\n \nrptr2\n);\n\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\u6b63\u78ba\u601d\u8def\uff0c\u53c3\u8003\u4e86\u8a0e\u8ad6\u5340\u63d0\u793a\uff1a\u7531\u65bcR\u53ea\u80fd\u5411\u53f3\uff0c\u800cL\u53ea\u80fd\u5411\u5de6\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u900f\u904e\u5169\u500b\u6307\u6a19\u5728\u5169\u5b57\u4e32\u4e2d\u8dd1\uff0c\u627e\u5230\u7b2c\u4e00\u500b\u975eX\u7684\u5b57\u5143\uff0c\u82e5\u4e0d\u4e00\u6a23\u5247\u5fc5\u7136\u7121\u6cd5\u66ff\u63db\uff0c\u800c\u8981\u4f7f\u5f97R\u80fd\u5920\u66ff\u63db\u6210\u7d50\u679c\n\u552f\u6709start \u7684 R \u8f03 end \u7684 R \u5de6\u5074\uff0c\u624d\u6709\u6a5f\u6703\u5411\u53f3\uff0c\u82e5R\u5df2\u7d93\u592a\u53f3\u908a\u4e86\uff08\u4ea6\u5373\u8d85\u51faend\u7684R \uff09 \u4fbf\u662f\u63db\u4e0d\u904e\u53bb\u4e86\uff0c\u540c\u7406\u53ef\u5f97L\u7684\u6982\u5ff5\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nbool\n \ncan\n \n=\n \nfalse\n;\n\n    \nbool\n \ncanTransform\n(\nstring\n \nstart\n,\n \nstring\n \nend\n)\n\n    \n{\n\n        \nif\n(\nstart\n \n==\n \nend\n)\n\n            \nreturn\n \n1\n;\n\n        \nelse\n \nif\n(\nstart\n.\nsize\n()\n \n!=\n \nend\n.\nsize\n())\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n\n        \nint\n \nlen\n \n=\n \nstart\n.\nsize\n();\n\n        \nint\n \nptr1\n \n=\n \n0\n,\n \nptr2\n \n=\n \n0\n;\n\n        \nwhile\n(\nptr1\n \n \nlen\n \n \nptr2\n \n \nlen\n)\n \n//both in the boundary\n\n        \n{\n\n            \nwhile\n(\nptr1\n \n \nlen\n \n \nstart\n[\nptr1\n]\n \n==\n \nX\n)\n \n//iterate till not X in start\n\n                \nptr1\n++\n;\n\n\n            \nwhile\n(\nptr2\n \n \nlen\n \n \nend\n[\nptr2\n]\n \n==\n \nX\n)\n \n//iterate till not X in end\n\n                \nptr2\n++\n;\n\n\n            \nif\n(\nstart\n[\nptr1\n]\n \n!=\n \nend\n[\nptr2\n])\n \n//example  XL RX they are different, unable to swap\n\n                \nreturn\n \n0\n;\n\n\n            \n//iterate till next non X, both increment\n\n\n            \nif\n(\nstart\n[\nptr1\n]\n \n==\n \nR\n \n \nptr1\n \n \nptr2\n)\n \n//R of start is right to the R of end,\n\n            \n//R can only move right but this situation needs R to move left, which is a contradiction\n\n            \n//\u6ce8\u610f\u4e0d\u80fd\u5bebptr1 \n= ptr2 \u56e0\u70ba XRXL XRLX   XR\u90e8\u4efd\u5df2\u7d93\u6eff\u8db3\uff0c\u662f XR RX\u624d\u4e0d\u884c\uff01\uff01\n\n            \n{\n\n                \nreturn\n \n0\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nstart\n[\nptr1\n]\n \n==\n \nL\n \n \nptr2\n \n \nptr1\n)\n\n            \n//L of start is left to the L of end,\n\n            \n//L can only move left but this situation needs L to move right, which is a contradiction\n\n            \n{\n\n                \nreturn\n \n0\n;\n\n            \n}\n\n            \nptr1\n++\n;\n\n            \nptr2\n++\n;\n\n\n        \n}\n\n        \nreturn\n \n1\n;\n\n    \n}\n\n\n\n};", 
            "title": "WC70"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#leetcode_oj-wc70", 
            "text": "Contest time: Feb 4, 2018  Virtual contest by myself: Mar 4, 2018", 
            "title": "leetcode_OJ WC70 \u89e3\u984c\u5fc3\u5f97"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#pa-779-k-th-symbol-in-grammar", 
            "text": "\u601d\u8def\uff1a\u627e\u898f\u5f8b\uff0c\u524d\u9762\u7684N\uff0c\u5be6\u969b\u4e0a\u662f\u969c\u773c\u6cd5\u3002\n\u4ee5\u4e0b\u7684N\u662f\u4e00(1-based)\n2 3 5 8 9 12 14 15\n\u5176-1\u5f8c\u4e8c\u9032\u4f4d\u8868\u793a\u6cd5\u70ba\uff1a\n0001\n0010\n0100\n0111\n1000\n1011\n1101\n1110\n\u6e1b\u4e00\u5f8c\u6709\u5947\u6578\u500b\u4e00\u5247\u70ba1 \u5426\u5247\u70ba0    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   Solution  {  public : \n     int   kthGrammar ( int   nin ,   int   kin ) \n     { \n         int   cnt   =   0 ; \n         kin -- ; \n         while ( kin ) \n         { \n             if ( kin 1 ) \n             { \n                 cnt ++ ; \n             } \n             kin = 1 ; \n         } \n         return   cnt 1 ; \n     }  };", 
            "title": "PA. 779. K-th Symbol in Grammar \u627e\u898f\u5f8b\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#pb", 
            "text": "\u88ab\u9396\u4f4f\u770b\u4e0d\u5230\uff20\uff20\uff0c\u4e8b\u5f8c\u8cfd\uff0c\u9700\u8981\u5347\u7d1a\u6210\u9ad8\u7d1a\u6703\u54e1\u624d\u6709\uff0c\u770b\u984c\u76ee\u662f\u5207\u5272\u4e8c\u5143\u6a39", 
            "title": "PB."
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#pc-777-swap-adjacent-in-lr-string-dfs", 
            "text": "\u932f\u8aa4\u601d\u8def \uff1a\u60f3\u8aaa\u7528\u64f4\u6563\u89e3\u6cd5\uff0cdfs\u4e0b\u53bb\u8996\u60c5\u6cc1\u4ea4\u63db\uff0c\u7136\u5403\u4e86\u4e00\u500b\u5927RE(stack overflow)\n\u5f8c\u4f86\u767c\u73fe\u662f\u5fd8\u4e86\u5bebvisited\uff1d \uff1d\uff0c\u6839\u672c\u8822\uff0c\u770b\u4f86\u9019\u65b9\u9762\u9084\u5f97\u591a\u591a\u78e8\u7df4\u9020\u5316  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44 //Runtime Error (stack overflow)  class   Solution   {  public : \n     bool   can   =   false ; \n     bool   canTransform ( string   start ,   string   end ) \n     { \n         if ( start   ==   end ) \n             return   1 ; \n         else \n         { \n             dfs ( start ,   end ,   0 ,   start . size () - 1 ); \n         } \n         return   can ; \n     } \n     void   dfs ( string   start ,   string   end ,   int   lptr ,   int   rptr )   //quick sort-like recusrion \n     { \n         if ( lptr   =   rptr )   //length end \n         { \n             return   ; \n         } \n         if ( start   ==    end ) \n         { \n             can   =   true ; \n             return   ; \n         } \n         int   len   =   start . size ()     1 ; \n         int   lptr1   =   lptr ,   rptr1   =   len ; \n         int   lptr2   =   len   +   1 ,   rptr2   =   rptr ; \n         for ( int   pos   =   lptr ; pos   =   rptr ; pos ++ ) \n         { \n             if ( start [ pos ] == X     start [ pos + 1 ] == L ) \n             { \n                 swap ( start [ pos ], start [ pos + 1 ]); \n             } \n             else   if ( start [ pos ] == R     start [ pos + 1 ] == X ) \n             { \n                 swap ( start [ pos ], start [ pos + 1 ]); \n             } \n         } \n         dfs ( start ,   end ,   lptr1 ,   rptr1 ); \n         dfs ( start ,   end ,   lptr2 ,   rptr2 ); \n\n     }  };    \u6b63\u78ba\u601d\u8def\uff0c\u53c3\u8003\u4e86\u8a0e\u8ad6\u5340\u63d0\u793a\uff1a\u7531\u65bcR\u53ea\u80fd\u5411\u53f3\uff0c\u800cL\u53ea\u80fd\u5411\u5de6\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u900f\u904e\u5169\u500b\u6307\u6a19\u5728\u5169\u5b57\u4e32\u4e2d\u8dd1\uff0c\u627e\u5230\u7b2c\u4e00\u500b\u975eX\u7684\u5b57\u5143\uff0c\u82e5\u4e0d\u4e00\u6a23\u5247\u5fc5\u7136\u7121\u6cd5\u66ff\u63db\uff0c\u800c\u8981\u4f7f\u5f97R\u80fd\u5920\u66ff\u63db\u6210\u7d50\u679c\n\u552f\u6709start \u7684 R \u8f03 end \u7684 R \u5de6\u5074\uff0c\u624d\u6709\u6a5f\u6703\u5411\u53f3\uff0c\u82e5R\u5df2\u7d93\u592a\u53f3\u908a\u4e86\uff08\u4ea6\u5373\u8d85\u51faend\u7684R \uff09 \u4fbf\u662f\u63db\u4e0d\u904e\u53bb\u4e86\uff0c\u540c\u7406\u53ef\u5f97L\u7684\u6982\u5ff5    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 class   Solution   {  public : \n     bool   can   =   false ; \n     bool   canTransform ( string   start ,   string   end ) \n     { \n         if ( start   ==   end ) \n             return   1 ; \n         else   if ( start . size ()   !=   end . size ()) \n         { \n             return   0 ; \n         } \n\n         int   len   =   start . size (); \n         int   ptr1   =   0 ,   ptr2   =   0 ; \n         while ( ptr1     len     ptr2     len )   //both in the boundary \n         { \n             while ( ptr1     len     start [ ptr1 ]   ==   X )   //iterate till not X in start \n                 ptr1 ++ ; \n\n             while ( ptr2     len     end [ ptr2 ]   ==   X )   //iterate till not X in end \n                 ptr2 ++ ; \n\n             if ( start [ ptr1 ]   !=   end [ ptr2 ])   //example  XL RX they are different, unable to swap \n                 return   0 ; \n\n             //iterate till next non X, both increment \n\n             if ( start [ ptr1 ]   ==   R     ptr1     ptr2 )   //R of start is right to the R of end, \n             //R can only move right but this situation needs R to move left, which is a contradiction \n             //\u6ce8\u610f\u4e0d\u80fd\u5bebptr1  = ptr2 \u56e0\u70ba XRXL XRLX   XR\u90e8\u4efd\u5df2\u7d93\u6eff\u8db3\uff0c\u662f XR RX\u624d\u4e0d\u884c\uff01\uff01 \n             { \n                 return   0 ; \n             } \n             else   if ( start [ ptr1 ]   ==   L     ptr2     ptr1 ) \n             //L of start is left to the L of end, \n             //L can only move left but this situation needs L to move right, which is a contradiction \n             { \n                 return   0 ; \n             } \n             ptr1 ++ ; \n             ptr2 ++ ; \n\n         } \n         return   1 ; \n     }  };", 
            "title": "PC. 777. Swap Adjacent in LR String \u5b57\u4e32\u5167\u90e8dfs"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC74/", 
            "text": "leetcode_OJ WC74 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Mar 4, 2018\n\n\n\n\n\n\u4eca\u5929\u4e0a\u5348\u6253\uff0c\u5bb6\u88e1\u7684\u7db2\u8def\u901f\u5ea6\u53ea\u6709\u5b78\u6821\u7684\u767e\u5206\u4e4b\u4e00\u4e0d\u5230R\uff08\u4e0b\u8f09 10 \u4e0a\u50b34\uff09\uff0c\u52a0\u4e0aLeetCode\u7684server\u4e00\u76f4timeout\uff0c\u7528debug\u6a21\u5f0f\u4e00\u76f4\u7c97\u4e0d\u4e43\uff0c\u7279\u5224\u548c\u512a\u5316\u82b1\u4e86\u597d\u591a\u6642\u9593\u624d\u627e\u5230w\n\u4e0d\u904emap\u9084\u771f\u7684\u662f\u597d\u7528\uff0c\u800c\u4e14\u89c0\u6469\u4e86\u4e00\u4e0buwi\u548cdreamoon\u7684\u89e3\u6cd5\uff0c\u4e0d\u6127\u662f\u5967\u8cfd\u5927\u795eR\n\n\nPA. \n794. Valid Tic-Tac-Toe State\n \u89c0\u5bdf\u66b4\u529b\u984c\n\n\n\n\n\u601d\u8def\uff1a\u66b4\u529b\uff0b\u60c5\u6cc1\u908f\u8f2f\u7279\u5224\u3002\n\u984c\u76ee\u898f\u5247\u6240\u8ff0\u70ba\uff1a\n\n1\n2\n3\n4\n5\n6\nPlayers take turns placing characters into empty squares (\n \n).\nThe first player always places \nX\n characters, while the second player always places \nO\n characters.\n\nX\n and \nO\n characters are always placed into empty squares, never filled ones.\nThe game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.\n\n\n\n\n\u4e00\u5b9a\u8981\u662fx\u5148\u653b\uff0c\u4e26\u4e14\u6709\u4efb\u4e00\u65b9\u7372\u52dd\u5f8c\u5247\u4e0d\u53ef\u4ee5\u518d\u4e0b\u6a19\u8a18\uff0c\u7372\u52dd\u7684\u65b9\u6cd5\u540c\u50b3\u7d71\u4e95\u5b57\u904a\u6232\u3002\n\u5f9e\u908f\u8f2f\u4f86\u770b\uff0c\u9996\u5148\u6211\u5011\u7d71\u8a08o\u7684\u500b\u6578\u4ee5\u53cax\u7684\u500b\u6578\n\n\n\n\n\u7531\u65bc\u662f\u8f2a\u6d41\u9032\u884c \uff0c\u4e14\u5148x\u5f8co\uff0c\u56e0\u6b64x\u81f3\u591a\u6bd4o\u591a\u51fa1\uff0c\u800c\u4e14o\u4e0d\u53ef\u80fd\u5927\u65bcx\uff0c\u9019\u4e9b\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u5f62\uff0c\u53ef\u4ee5\u5148\u522a\u9664\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nif\n(\nxcnt\n==\n0\n \n \nocnt\n==\n1\n)\n\n\n{\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\nelse\n \nif\n(\nxcnt\nocnt\n+\n1\n \n||\n \nocnt\nxcnt\n+\n1\n)\n\n\n{\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\nelse\n \nif\n(\nocnt\n \n \nxcnt\n)\n\n\n{\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u63a5\u4e0b\u4f86\u6aa2\u67e5\u7372\u52dd\u7684\u60c5\u5f62\uff0c\u7576\u7372\u52dd\u6642\uff0c\u53ea\u80fd\u6709\u4e00\u6b21\u7684\u7372\u52dd\uff0c\u4ea6\u5373\u4e0d\u80fd\u6709ooo xxx\u540c\u6642\u51fa\u73fe\u7684\u60c5\u6cc1\n\u56e0\u6b64\u6211\u5011\u7528 win_cnt\u4f86\u7d71\u8a08\u7372\u52dd\u7684\u6b21\u6578\uff0c\u53ea\u8981 win_cnt\n1\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u7d50\u69cb\u3002\n\u800c\u5728\u7372\u52dd\u5f8c\uff0c\u53ef\u4ee5\u5224\u65b7\u662fx\u7372\u52dd\u6216\u662fo\u7372\u52dd\n\n\n\u82e5\u662fx\u7372\u52dd\uff0c\u5247o\u4e00\u5b9a\u4e0d\u53ef\u80fd\n=x \uff0c\u539f\u56e0\u4e43\u662fx\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u7d50\u675f\uff0c\u56e0\u6b64\u6b64\u6642\u7684x\u82e5\u662f\u6bd4o\u591a\u4e00\u5247\u6b63\u597d\u7b26\u5408\u898f\u5247\n\n\n\u800c\u82e5\u662fo\u7372\u52dd\uff0c\u5247o\u300e\u53ea\u80fd\u300f\u548cx\u4e00\u6a23\u591a\uff0c\u4e00\u6a23\u7684\u9053\u7406\uff0c\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u6703\u7d50\u675f\uff0c\u56e0\u6b64\u5c0d\u65bc\nxcnt\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u6cc1\n\n\n\u5b8c\u6574AC\u4ee3\u78bc\u5982\u4e0b\uff08\u7db2\u8def\u8d85\u5361\u9813\u7121\u6cd5\u4f7f\u7528debug\u6a21\u5f0f\uff0c\u53ea\u597d\u6012\u7528submit solution\u4f86\u9a57\u8b49\u6b63\u78ba\uff0c\u4e0d\u77e5\u4e0d\u89ba\u5403\u4e868\u500b\u7f70\u5206\u554a\u6b98\u5ff5...)\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n//[\nXOX\n,\nO O\n,\nXOX\n]\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nxcnt\n,\nocnt\n;\n\n    \nbool\n \nvalidTicTacToe\n(\nvector\nstring\n \nboard\n)\n\n    \n{\n\n        \nxcnt\n=\n0\n;\n\n        \nocnt\n=\n0\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\nboard\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n=\n0\n;\nj\nboard\n[\ni\n].\nsize\n();\nj\n++\n)\n\n            \n{\n\n                \nif\n(\nboard\n[\ni\n][\nj\n]\n==\nO\n)\n\n                \n{\n\n                    \nocnt\n++\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nboard\n[\ni\n][\nj\n]\n==\nX\n)\n\n                \n{\n\n                    \nxcnt\n++\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nif\n(\nxcnt\n==\n0\n \n \nocnt\n==\n1\n)\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n        \nelse\n \nif\n(\nxcnt\nocnt\n+\n1\n \n||\n \nocnt\nxcnt\n+\n1\n)\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n        \nelse\n \nif\n(\nocnt\n \n \nxcnt\n)\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n        \nelse\n \nif\n(\n!\ncheckwin\n(\nboard\n))\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n\n        \nreturn\n \n1\n;\n\n    \n}\n\n    \nbool\n \ncheckwin\n(\nvector\nstring\n \nboard\n)\n\n    \n{\n\n        \nint\n \nwin_cnt\n=\n0\n;\n\n        \nint\n \nxwin\n=\n0\n,\nowin\n=\n0\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\nboard\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nboard\n[\ni\n][\n0\n]\n==\nboard\n[\ni\n][\n1\n]\n \n \nboard\n[\ni\n][\n0\n]\n==\nboard\n[\ni\n][\n2\n]\n \n \nboard\n[\ni\n][\n0\n]\n!=\n \n)\n\n            \n{\n\n                \nif\n(\nboard\n[\ni\n][\n0\n]\n==\nX\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \n}\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n3\n;\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nboard\n[\n0\n][\ni\n]\n==\nboard\n[\n1\n][\ni\n]\n \n \nboard\n[\n0\n][\ni\n]\n==\nboard\n[\n2\n][\ni\n]\n \n \nboard\n[\n0\n][\ni\n]\n!=\n \n)\n\n            \n{\n\n                \nif\n(\nboard\n[\n0\n][\ni\n]\n==\nX\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \n}\n\n        \nif\n(\nboard\n[\n0\n][\n0\n]\n==\nboard\n[\n1\n][\n1\n]\n\n            \n \nboard\n[\n0\n][\n0\n]\n==\nboard\n[\n2\n][\n2\n]\n \n \nboard\n[\n0\n][\n0\n]\n!=\n \n)\n\n            \n{\n\n                \nif\n(\nboard\n[\n0\n][\n0\n]\n==\nX\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \nif\n(\nboard\n[\n0\n][\n2\n]\n==\nboard\n[\n1\n][\n1\n]\n\n            \n \nboard\n[\n0\n][\n2\n]\n==\nboard\n[\n2\n][\n0\n]\n \n \nboard\n[\n0\n][\n2\n]\n!=\n \n)\n\n            \n{\n\n                \nif\n(\nboard\n[\n0\n][\n2\n]\n==\nX\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \nif\n(\nwin_cnt\n==\n0\n)\n\n                \nreturn\n \n1\n;\n\n        \nelse\n \nif\n(\nwin_cnt\n==\n1\n)\n\n        \n{\n\n            \nif\n(\nxwin\n)\n\n            \n{\n\n                \nif\n(\nocnt\n=\nxcnt\n)\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nxcnt\n==\nocnt\n+\n1\n)\n\n                \n{\n\n                    \nreturn\n \n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n            \n}\n\n            \nelse\n \nif\n(\nowin\n)\n\n            \n{\n\n                \nif\n(\nocnt\nxcnt\n)\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nxcnt\n==\nocnt\n)\n\n                \n{\n\n                    \nreturn\n \n1\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nocnt\nxcnt\n)\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n            \n}\n\n\n        \n}\n\n        \nelse\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPB. \n792. Number of Matching Subsequences\n a \u662f\u5426\u70ba b\u7684\u5b50\u5e8f\u5217\uff0c\u7d93\u5178\u5b57\u4e32\u554f\u984c\n\n\n\u7d93\u5178\u984c\u76ee\uff0c\u770b\u770bword[i]\u662f\u5426\u70bastr\u7684subsequence\n* \u601d\u8def\uff1a\u5169\u500b\u6307\u6a19\u5206\u5225\u8fed\u4ee3str\u548cword[i]\uff0c\u770b\u5230\u4e00\u6a23\u7684\u4fbf\u5c07word\u7684\u6307\u91dd\u5411\u524d\uff0c\u5982\u679c\u6307\u91dd\u6700\u5f8c\uff1d\uff1d\u9577\u5ea6\u5247\u5b58\u5728\uff0c\u5426\u5247\u5373\u7121\n\n\n\u7c21\u55ae\u7684\u60f3\u6cd5\u537bTLE\u4e86\uff0c\u56e0\u70ba\u6709\u5927\u91cf\u91cd\u8907\u7684word[i]\u9700\u8981\u88ab\u91cd\u8907\u64cd\u4f5c\uff0c\u56e0\u6b64\u6539\u7528map\u512a\u5316\u7d71\u8a08\u5404\u7a2eword\u7684\u51fa\u73fe\u6b21\u6578\uff0c\u518d\u5c07subseq\u7b26\u5408\u7684\u72c0\u6cc1\u52a0\u4e0amap-\nsecond\u8a08\u6578\u5668\u5373\u53ef\n\n\nmap\u512a\u5316\u904e\u5f8cAC\u5982\u4e0b\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nnumMatchingSubseq\n(\nstring\n \nstr\n,\n \nvector\nstring\n \nwords\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n;\n\n        \nmap\nstring\n,\nint\n \nmymap\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n \n;\ni\nwords\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \nmymap\n[\nwords\n[\ni\n]]\n++\n;\n\n        \n}\n\n        \nfor\n(\nstd\n::\nmap\nstring\n,\nint\n::\niterator\n \nit\n=\nmymap\n.\nbegin\n()\n \n;\nit\n!=\nmymap\n.\nend\n();\nit\n++\n)\n\n        \n{\n\n            \nstd\n::\nsize_t\n \nfd\n \n=\n \nstr\n.\nfind\n(\nit\n-\nfirst\n);\n\n            \ncout\nit\n-\nfirst\n , \nit\n-\nsecond\nendl\n;\n\n            \nif\n(\nit\n-\nfirst\n.\nsize\n()\nstr\n.\nsize\n())\n\n            \n{\n\n                \ncontinue\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nfd\n \n!=\n \nstd\n::\nstring\n::\nnpos\n)\n\n            \n{\n\n                \ncnt\n+=\nit\n-\nsecond\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nissubseq\n(\nit\n-\nfirst\n,\n \nstr\n,\n \nit\n-\nfirst\n.\nsize\n(),\n \nstr\n.\nsize\n()))\n\n            \n{\n\n                \ncnt\n+=\nit\n-\nsecond\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n    \nbool\n \nissubseq\n(\nstring\n \nstr1\n,\n \nstring\n \nstr2\n,\n \nint\n \nlen1\n,\n \nint\n \nlen2\n)\n\n    \n{\n\n        \nint\n \nsame_idx\n \n=\n \n0\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\nlen2\n \n \nsame_idx\nlen1\n;\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nstr1\n[\nsame_idx\n]\n \n==\n \nstr2\n[\ni\n])\n\n                \nsame_idx\n++\n;\n\n        \n}\n\n        \nreturn\n \n(\nsame_idx\n==\nlen1\n);\n\n    \n}\n\n\n};\n\n\n\n\n\n\nPC. \n792. Number of Matching Subsequences\n \u627e\u898f\u5f8b\u63a8\u7406\u984c\n\n\n\n\u6709\u9ede\u5fae\u5999\u7684\u4e00\u984c\uff0c\u770b\u4f3c\u7c21\u55ae\u5be6\u969b\u4e0a\u4e0d\u597d\u62ff\u5206\n\u672c\u4f86\u7684\u7b97\u6cd5\u5982\u4e0b\uff0c\u7e3d\u662f\u591a\u4e00\u500b\u6216\u5c11\u4e00\u500b\uff0c\u56e0\u70ba\u5728\u9032\u5165\u7684\u908a\u754c\u554f\u984c\u6c92\u6709\u62ff\u634f\u597d\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nnumSubarrayBoundedMax\n(\nvector\nint\n \narr\n,\n \nint\n \nlow\n,\n \nint\n \nup\n)\n\n    \n{\n\n        \nint\n \nmax_val\n \n=\n \n0\n,\n \ncan\n \n=\n \n0\n,\n \ncnt\n \n=\n \n0\n;\n\n        \nint\n \npre_max_val\n \n=\n \n0\n,\n \ndist\n \n=\n \n0\n;\n\n        \nFORI\n(\narr\n.\nsize\n())\n\n        \n{\n\n            \npre_max_val\n \n=\n \narr\n[\ni\n];\n\n            \nmax_val\n \n=\n \narr\n[\ni\n];\n\n            \ndist\n \n=\n \n0\n;\n\n            \nfor\n(\nint\n \nj\n=\ni\n+\n1\n;\nj\narr\n.\nsize\n();\nj\n++\n)\n\n            \n{\n\n                \npre_max_val\n \n=\n \nmax_val\n;\n\n                \nmax_val\n \n=\n \nmax\n(\nmax_val\n,\n \narr\n[\nj\n]);\n\n                \nif\n(\nmax_val\n \n \nlow\n \n||\n \nmax_val\n \n \nup\n)\n\n                \n{\n\n                    \nbreak\n;\n\n                \n}\n\n                \ndist\n \n=\n \nj\n \n-\n \ni\n;\n\n            \n}\n\n            \nif\n(\n \npre_max_val\n \n=\nlow\n \n \npre_max_val\n \n=\n \nup\n)\n\n            \n{\n\n                \ncnt\n \n+=\n \n(\ndist\n \n==\n \n0\n \n)\n \n?\n \n1\n \n:\n \ndist\n \n+\n \n1\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\u5f8c\u4f86\u53c3\u8003\u4e86\n\u5927\u795e\u7684\u89e3\u6cd5\n\uff0c\u7406\u89e3\u5f8c\u5982\u4e0b \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n//algorithm and source credit to : https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/discuss/117612/C++-O(n)-solution-with-explanations\n\n\n\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nint\n \nnumSubarrayBoundedMax\n(\nvector\nint\n \nA\n,\n \nint\n \nL\n,\n \nint\n \nR\n)\n\n    \n{\n\n        \nint\n \nres\n \n=\n \n0\n,\n \nheads\n \n=\n \n0\n,\n \ntails\n \n=\n \n0\n;\n\n        \nfor\n \n(\nint\n \nval\n \n:\n \nA\n)\n\n        \n{\n\n            \nif\n \n(\nL\n \n=\n \nval\n \n \nval\n \n=\n \nR\n)\n\n            \n{\n\n                \n//\u5982\u679c\u627e\u5230\u4e00\u500b\u7b26\u5408\u5340\u9593\u7684\u6578\u503c\uff0c\u5247\u4e4b\u524d\u8eab\u70batail\u7684\uff0c\u5168\u90e8\u53ef\u4ee5\u88ab\u63d0\u62d4\u70bahead\uff0c\u5728\u52a0\u4e0a\u81ea\u5df1\u672c\u8eab\u65b0\u627e\u5230\u7684\u6578\u5b57\uff0c\u56e0\u6b64head += tails + 1\n\n                \n//\u800cres\u8b8a\u53ef\u4ee5\u65b0\u589e\u90a3\u500b\u9577\u5ea6\n\n                \nheads\n+=\n \ntails\n \n+\n \n1\n;\n\n                \ntails\n \n=\n \n0\n;\n\n                \nres\n \n+=\n \nheads\n;\n\n            \n}\n\n            \nelse\n \nif\n \n(\nval\n \n \nL\n)\n\n            \n{\n\n                \n//\u5c0f\u65bcL\u7684\u6578\u5b57\u53ef\u4ee5\u4f5c\u70ba\u5340\u9593\u6578\u5217\u5ef6\u4f38\u7684\u5c3e\u90e8\uff0c \u56e0\u6b64\u9663\u5217\u53c8\u5728\u5ef6\u9577\u65b9\u624d\u7684head\u6578\u76ee\n\n                \n//\u8209\u4f8b\uff1aL=32 R=69 \u4eca\u5df2\u7d93iterate\uff0c[55 36] \u5df2\u7d93\u6709\u4e09\u500b\u4e86 \u5728\u591a\u4e00\u500b5\u5f8c\uff0c\u4fbf\u53ef\u6709[55] [36] [55,36] [55 36 55] [36 55]\n\n                \n//\u56e0\u70ba\u81ea\u5df1\u4e0d\u7b97\u5728LR\u5340\u9593 \u56e0\u6b64\u53ea\u80fd\u3000+= heads \u800c\u4e0d\u9700\u8981\u518d\u52a0\u4e00\n\n                \ntails\n++\n;\n\n                \nres\n \n+=\n \nheads\n;\n\n            \n}\n\n            \nelse\n\n            \n{\n\n                \nheads\n \n=\n \n0\n;\n\n                \ntails\n \n=\n \n0\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\u4ee5[73,55,36,5,55,14,9,7,72,52]\n\n32 \n\n69 \n\n\u4f86\u770b\uff0c\u6f14\u7b97\u6cd5\u8dd1\u51fa\u5f8c\u4e09\u8b8a\u6578\u7684\u7d50\u679c\u5982\u4e0b\n\n\n\nPD. \n793. Preimage Size of Factorial Zeroes Function\n \u9ad8\u96e3\u5ea6\u627emod\u898f\u5f8b\u6578\u5b78\u984c\n\n\n\u89e3\u4e0d\u7c97\u4e43\uff0c\u5148\u653e\u7f6e\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nint\n \npreimageSizeFZF\n(\nint\n \nkin\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n,\n \nfactorial\n \n=\n \n0\n,\n \nzeros\n \n=\n \n0\n,\n \ncurrent_pow\n \n=\n \n25\n;\n\n        \nwhile\n(\n1\n)\n\n        \n{\n\n            \nif\n(\nfactorial\n \n==\n  \ncurrent_pow\n \n*\n \n5\n)\n\n            \n{\n\n                \ncout\n factorial is now \nfactorial\n current_pow is now \ncurrent_pow\nendl\n;\n\n                \ncurrent_pow\n*=\n5\n;\n\n            \n}\n\n            \nif\n(\nfactorial\n \n%\n \ncurrent_pow\n \n==\n \n0\n \n \nfactorial\n)\n\n            \n{\n\n                \nzeros\n \n+=\n \n((\nint\n)(\nlog\n(\nfactorial\n)\n \n/\n \nlog\n(\n5\n)));\n\n                \ncout\n factorial is of 25 multiple \nfactorial\n zeros \nzeros\n \n add \n((\nint\n)(\nlog\n(\nfactorial\n)\n \n/\n \nlog\n(\n5\n)))\nendl\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nfactorial\n \n%\n \n5\n \n==\n0\n \n \nfactorial\n)\n\n            \n{\n\n                \ncout\n factorial not 25 \nfactorial\nendl\n;\n\n                \nzeros\n++\n;\n\n            \n}\n\n\n            \nif\n(\nzeros\n \n==\n \nkin\n)\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nzeros\n \n \nkin\n)\n\n            \n{\n\n                \nbreak\n;\n\n            \n}\n\n            \ncout\n factorial \nfactorial\n zeros \nzeros\nendl\n;\n\n            \nfactorial\n++\n;\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n    \n//compare 2 casting, one is the original integer value of log and the other is the double type log, if they are equal of each other\n\n    \n//in double precision\n\n    \n//then this is correct one\n\n    \nbool\n \nis_powoffive\n(\nint\n \nreal\n,\n \nint\n \nbase\n)\n\n    \n{\n\n        \nint\n \ninteger\n \n=\n \n(\nint\n)(\nlog\n(\nreal\n)\n/\nlog\n(\nbase\n));\n\n        \ndouble\n \nprecised\n \n=\n \n(\nlog\n(\nreal\n)\n/\nlog\n(\nbase\n));\n\n        \nreturn\n \ninteger\n \n==\n \nprecised\n;\n\n    \n}\n\n\n};", 
            "title": "WC74"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#leetcode_oj-wc74", 
            "text": "Contest time: Mar 4, 2018   \n\u4eca\u5929\u4e0a\u5348\u6253\uff0c\u5bb6\u88e1\u7684\u7db2\u8def\u901f\u5ea6\u53ea\u6709\u5b78\u6821\u7684\u767e\u5206\u4e4b\u4e00\u4e0d\u5230R\uff08\u4e0b\u8f09 10 \u4e0a\u50b34\uff09\uff0c\u52a0\u4e0aLeetCode\u7684server\u4e00\u76f4timeout\uff0c\u7528debug\u6a21\u5f0f\u4e00\u76f4\u7c97\u4e0d\u4e43\uff0c\u7279\u5224\u548c\u512a\u5316\u82b1\u4e86\u597d\u591a\u6642\u9593\u624d\u627e\u5230w\n\u4e0d\u904emap\u9084\u771f\u7684\u662f\u597d\u7528\uff0c\u800c\u4e14\u89c0\u6469\u4e86\u4e00\u4e0buwi\u548cdreamoon\u7684\u89e3\u6cd5\uff0c\u4e0d\u6127\u662f\u5967\u8cfd\u5927\u795eR", 
            "title": "leetcode_OJ WC74 \u89e3\u984c\u5fc3\u5f97"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pa-794-valid-tic-tac-toe-state", 
            "text": "\u601d\u8def\uff1a\u66b4\u529b\uff0b\u60c5\u6cc1\u908f\u8f2f\u7279\u5224\u3002\n\u984c\u76ee\u898f\u5247\u6240\u8ff0\u70ba\uff1a 1\n2\n3\n4\n5\n6 Players take turns placing characters into empty squares (   ).\nThe first player always places  X  characters, while the second player always places  O  characters. X  and  O  characters are always placed into empty squares, never filled ones.\nThe game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.  \n\u4e00\u5b9a\u8981\u662fx\u5148\u653b\uff0c\u4e26\u4e14\u6709\u4efb\u4e00\u65b9\u7372\u52dd\u5f8c\u5247\u4e0d\u53ef\u4ee5\u518d\u4e0b\u6a19\u8a18\uff0c\u7372\u52dd\u7684\u65b9\u6cd5\u540c\u50b3\u7d71\u4e95\u5b57\u904a\u6232\u3002\n\u5f9e\u908f\u8f2f\u4f86\u770b\uff0c\u9996\u5148\u6211\u5011\u7d71\u8a08o\u7684\u500b\u6578\u4ee5\u53cax\u7684\u500b\u6578   \u7531\u65bc\u662f\u8f2a\u6d41\u9032\u884c \uff0c\u4e14\u5148x\u5f8co\uff0c\u56e0\u6b64x\u81f3\u591a\u6bd4o\u591a\u51fa1\uff0c\u800c\u4e14o\u4e0d\u53ef\u80fd\u5927\u65bcx\uff0c\u9019\u4e9b\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u5f62\uff0c\u53ef\u4ee5\u5148\u522a\u9664  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 if ( xcnt == 0     ocnt == 1 )  { \n     return   0 ;  }  else   if ( xcnt ocnt + 1   ||   ocnt xcnt + 1 )  { \n     return   0 ;  }  else   if ( ocnt     xcnt )  { \n     return   0 ;  }    \u63a5\u4e0b\u4f86\u6aa2\u67e5\u7372\u52dd\u7684\u60c5\u5f62\uff0c\u7576\u7372\u52dd\u6642\uff0c\u53ea\u80fd\u6709\u4e00\u6b21\u7684\u7372\u52dd\uff0c\u4ea6\u5373\u4e0d\u80fd\u6709ooo xxx\u540c\u6642\u51fa\u73fe\u7684\u60c5\u6cc1\n\u56e0\u6b64\u6211\u5011\u7528 win_cnt\u4f86\u7d71\u8a08\u7372\u52dd\u7684\u6b21\u6578\uff0c\u53ea\u8981 win_cnt 1\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u7d50\u69cb\u3002\n\u800c\u5728\u7372\u52dd\u5f8c\uff0c\u53ef\u4ee5\u5224\u65b7\u662fx\u7372\u52dd\u6216\u662fo\u7372\u52dd  \u82e5\u662fx\u7372\u52dd\uff0c\u5247o\u4e00\u5b9a\u4e0d\u53ef\u80fd =x \uff0c\u539f\u56e0\u4e43\u662fx\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u7d50\u675f\uff0c\u56e0\u6b64\u6b64\u6642\u7684x\u82e5\u662f\u6bd4o\u591a\u4e00\u5247\u6b63\u597d\u7b26\u5408\u898f\u5247  \u800c\u82e5\u662fo\u7372\u52dd\uff0c\u5247o\u300e\u53ea\u80fd\u300f\u548cx\u4e00\u6a23\u591a\uff0c\u4e00\u6a23\u7684\u9053\u7406\uff0c\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u6703\u7d50\u675f\uff0c\u56e0\u6b64\u5c0d\u65bc xcnt\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u6cc1  \u5b8c\u6574AC\u4ee3\u78bc\u5982\u4e0b\uff08\u7db2\u8def\u8d85\u5361\u9813\u7121\u6cd5\u4f7f\u7528debug\u6a21\u5f0f\uff0c\u53ea\u597d\u6012\u7528submit solution\u4f86\u9a57\u8b49\u6b63\u78ba\uff0c\u4e0d\u77e5\u4e0d\u89ba\u5403\u4e868\u500b\u7f70\u5206\u554a\u6b98\u5ff5...)    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144 //[ XOX , O O , XOX ]  class   Solution  {  public : \n     int   xcnt , ocnt ; \n     bool   validTicTacToe ( vector string   board ) \n     { \n         xcnt = 0 ; \n         ocnt = 0 ; \n         for ( int   i = 0 ; i board . size (); i ++ ) \n         { \n             for ( int   j = 0 ; j board [ i ]. size (); j ++ ) \n             { \n                 if ( board [ i ][ j ] == O ) \n                 { \n                     ocnt ++ ; \n                 } \n                 else   if ( board [ i ][ j ] == X ) \n                 { \n                     xcnt ++ ; \n                 } \n             } \n         } \n         if ( xcnt == 0     ocnt == 1 ) \n         { \n             return   0 ; \n         } \n         else   if ( xcnt ocnt + 1   ||   ocnt xcnt + 1 ) \n         { \n             return   0 ; \n         } \n         else   if ( ocnt     xcnt ) \n         { \n             return   0 ; \n         } \n         else   if ( ! checkwin ( board )) \n         { \n             return   0 ; \n         } \n\n         return   1 ; \n     } \n     bool   checkwin ( vector string   board ) \n     { \n         int   win_cnt = 0 ; \n         int   xwin = 0 , owin = 0 ; \n         for ( int   i = 0 ; i board . size (); i ++ ) \n         { \n             if ( board [ i ][ 0 ] == board [ i ][ 1 ]     board [ i ][ 0 ] == board [ i ][ 2 ]     board [ i ][ 0 ] !=   ) \n             { \n                 if ( board [ i ][ 0 ] == X ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         } \n         for ( int   i = 0 ; i 3 ; i ++ ) \n         { \n             if ( board [ 0 ][ i ] == board [ 1 ][ i ]     board [ 0 ][ i ] == board [ 2 ][ i ]     board [ 0 ][ i ] !=   ) \n             { \n                 if ( board [ 0 ][ i ] == X ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         } \n         if ( board [ 0 ][ 0 ] == board [ 1 ][ 1 ] \n               board [ 0 ][ 0 ] == board [ 2 ][ 2 ]     board [ 0 ][ 0 ] !=   ) \n             { \n                 if ( board [ 0 ][ 0 ] == X ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         if ( board [ 0 ][ 2 ] == board [ 1 ][ 1 ] \n               board [ 0 ][ 2 ] == board [ 2 ][ 0 ]     board [ 0 ][ 2 ] !=   ) \n             { \n                 if ( board [ 0 ][ 2 ] == X ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         if ( win_cnt == 0 ) \n                 return   1 ; \n         else   if ( win_cnt == 1 ) \n         { \n             if ( xwin ) \n             { \n                 if ( ocnt = xcnt ) \n                 { \n                     return   0 ; \n                 } \n                 else   if ( xcnt == ocnt + 1 ) \n                 { \n                     return   1 ; \n                 } \n                 else \n                 { \n                     return   0 ; \n                 } \n             } \n             else   if ( owin ) \n             { \n                 if ( ocnt xcnt ) \n                 { \n                     return   0 ; \n                 } \n                 else   if ( xcnt == ocnt ) \n                 { \n                     return   1 ; \n                 } \n                 else   if ( ocnt xcnt ) \n                 { \n                     return   0 ; \n                 } \n             } \n\n         } \n         else \n         { \n             return   0 ; \n         } \n     }  };", 
            "title": "PA. 794. Valid Tic-Tac-Toe State \u89c0\u5bdf\u66b4\u529b\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pb-792-number-of-matching-subsequences-a-b", 
            "text": "\u7d93\u5178\u984c\u76ee\uff0c\u770b\u770bword[i]\u662f\u5426\u70bastr\u7684subsequence\n* \u601d\u8def\uff1a\u5169\u500b\u6307\u6a19\u5206\u5225\u8fed\u4ee3str\u548cword[i]\uff0c\u770b\u5230\u4e00\u6a23\u7684\u4fbf\u5c07word\u7684\u6307\u91dd\u5411\u524d\uff0c\u5982\u679c\u6307\u91dd\u6700\u5f8c\uff1d\uff1d\u9577\u5ea6\u5247\u5b58\u5728\uff0c\u5426\u5247\u5373\u7121  \u7c21\u55ae\u7684\u60f3\u6cd5\u537bTLE\u4e86\uff0c\u56e0\u70ba\u6709\u5927\u91cf\u91cd\u8907\u7684word[i]\u9700\u8981\u88ab\u91cd\u8907\u64cd\u4f5c\uff0c\u56e0\u6b64\u6539\u7528map\u512a\u5316\u7d71\u8a08\u5404\u7a2eword\u7684\u51fa\u73fe\u6b21\u6578\uff0c\u518d\u5c07subseq\u7b26\u5408\u7684\u72c0\u6cc1\u52a0\u4e0amap- second\u8a08\u6578\u5668\u5373\u53ef  map\u512a\u5316\u904e\u5f8cAC\u5982\u4e0b  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41 class   Solution  {  public : \n     int   numMatchingSubseq ( string   str ,   vector string   words ) \n     { \n         int   cnt   =   0 ; \n         map string , int   mymap ; \n         for ( int   i = 0   ; i words . size (); i ++ ) \n         { \n             mymap [ words [ i ]] ++ ; \n         } \n         for ( std :: map string , int :: iterator   it = mymap . begin ()   ; it != mymap . end (); it ++ ) \n         { \n             std :: size_t   fd   =   str . find ( it - first ); \n             cout it - first  ,  it - second endl ; \n             if ( it - first . size () str . size ()) \n             { \n                 continue ; \n             } \n             else   if ( fd   !=   std :: string :: npos ) \n             { \n                 cnt += it - second ; \n             } \n             else   if ( issubseq ( it - first ,   str ,   it - first . size (),   str . size ())) \n             { \n                 cnt += it - second ; \n             } \n         } \n         return   cnt ; \n     } \n     bool   issubseq ( string   str1 ,   string   str2 ,   int   len1 ,   int   len2 ) \n     { \n         int   same_idx   =   0 ; \n         for ( int   i = 0 ; i len2     same_idx len1 ; i ++ ) \n         { \n             if ( str1 [ same_idx ]   ==   str2 [ i ]) \n                 same_idx ++ ; \n         } \n         return   ( same_idx == len1 ); \n     }  };", 
            "title": "PB. 792. Number of Matching Subsequences a \u662f\u5426\u70ba b\u7684\u5b50\u5e8f\u5217\uff0c\u7d93\u5178\u5b57\u4e32\u554f\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pc-792-number-of-matching-subsequences", 
            "text": "\u6709\u9ede\u5fae\u5999\u7684\u4e00\u984c\uff0c\u770b\u4f3c\u7c21\u55ae\u5be6\u969b\u4e0a\u4e0d\u597d\u62ff\u5206\n\u672c\u4f86\u7684\u7b97\u6cd5\u5982\u4e0b\uff0c\u7e3d\u662f\u591a\u4e00\u500b\u6216\u5c11\u4e00\u500b\uff0c\u56e0\u70ba\u5728\u9032\u5165\u7684\u908a\u754c\u554f\u984c\u6c92\u6709\u62ff\u634f\u597d  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 #define FORI(n) for(int i = 0; i   n; ++ i)  class   Solution  {  public : \n     int   numSubarrayBoundedMax ( vector int   arr ,   int   low ,   int   up ) \n     { \n         int   max_val   =   0 ,   can   =   0 ,   cnt   =   0 ; \n         int   pre_max_val   =   0 ,   dist   =   0 ; \n         FORI ( arr . size ()) \n         { \n             pre_max_val   =   arr [ i ]; \n             max_val   =   arr [ i ]; \n             dist   =   0 ; \n             for ( int   j = i + 1 ; j arr . size (); j ++ ) \n             { \n                 pre_max_val   =   max_val ; \n                 max_val   =   max ( max_val ,   arr [ j ]); \n                 if ( max_val     low   ||   max_val     up ) \n                 { \n                     break ; \n                 } \n                 dist   =   j   -   i ; \n             } \n             if (   pre_max_val   = low     pre_max_val   =   up ) \n             { \n                 cnt   +=   ( dist   ==   0   )   ?   1   :   dist   +   1 ; \n             } \n         } \n         return   cnt ; \n     }  };    \u5f8c\u4f86\u53c3\u8003\u4e86 \u5927\u795e\u7684\u89e3\u6cd5 \uff0c\u7406\u89e3\u5f8c\u5982\u4e0b    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34 //algorithm and source credit to : https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/discuss/117612/C++-O(n)-solution-with-explanations  class   Solution   {  public : \n     int   numSubarrayBoundedMax ( vector int   A ,   int   L ,   int   R ) \n     { \n         int   res   =   0 ,   heads   =   0 ,   tails   =   0 ; \n         for   ( int   val   :   A ) \n         { \n             if   ( L   =   val     val   =   R ) \n             { \n                 //\u5982\u679c\u627e\u5230\u4e00\u500b\u7b26\u5408\u5340\u9593\u7684\u6578\u503c\uff0c\u5247\u4e4b\u524d\u8eab\u70batail\u7684\uff0c\u5168\u90e8\u53ef\u4ee5\u88ab\u63d0\u62d4\u70bahead\uff0c\u5728\u52a0\u4e0a\u81ea\u5df1\u672c\u8eab\u65b0\u627e\u5230\u7684\u6578\u5b57\uff0c\u56e0\u6b64head += tails + 1 \n                 //\u800cres\u8b8a\u53ef\u4ee5\u65b0\u589e\u90a3\u500b\u9577\u5ea6 \n                 heads +=   tails   +   1 ; \n                 tails   =   0 ; \n                 res   +=   heads ; \n             } \n             else   if   ( val     L ) \n             { \n                 //\u5c0f\u65bcL\u7684\u6578\u5b57\u53ef\u4ee5\u4f5c\u70ba\u5340\u9593\u6578\u5217\u5ef6\u4f38\u7684\u5c3e\u90e8\uff0c \u56e0\u6b64\u9663\u5217\u53c8\u5728\u5ef6\u9577\u65b9\u624d\u7684head\u6578\u76ee \n                 //\u8209\u4f8b\uff1aL=32 R=69 \u4eca\u5df2\u7d93iterate\uff0c[55 36] \u5df2\u7d93\u6709\u4e09\u500b\u4e86 \u5728\u591a\u4e00\u500b5\u5f8c\uff0c\u4fbf\u53ef\u6709[55] [36] [55,36] [55 36 55] [36 55] \n                 //\u56e0\u70ba\u81ea\u5df1\u4e0d\u7b97\u5728LR\u5340\u9593 \u56e0\u6b64\u53ea\u80fd\u3000+= heads \u800c\u4e0d\u9700\u8981\u518d\u52a0\u4e00 \n                 tails ++ ; \n                 res   +=   heads ; \n             } \n             else \n             { \n                 heads   =   0 ; \n                 tails   =   0 ; \n             } \n         } \n         return   res ; \n     }  };   \n\u4ee5[73,55,36,5,55,14,9,7,72,52] \n32  \n69  \n\u4f86\u770b\uff0c\u6f14\u7b97\u6cd5\u8dd1\u51fa\u5f8c\u4e09\u8b8a\u6578\u7684\u7d50\u679c\u5982\u4e0b", 
            "title": "PC. 792. Number of Matching Subsequences \u627e\u898f\u5f8b\u63a8\u7406\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pd-793-preimage-size-of-factorial-zeroes-function-mod", 
            "text": "\u89e3\u4e0d\u7c97\u4e43\uff0c\u5148\u653e\u7f6e  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 class   Solution   {  public : \n     int   preimageSizeFZF ( int   kin ) \n     { \n         int   cnt   =   0 ,   factorial   =   0 ,   zeros   =   0 ,   current_pow   =   25 ; \n         while ( 1 ) \n         { \n             if ( factorial   ==    current_pow   *   5 ) \n             { \n                 cout  factorial is now  factorial  current_pow is now  current_pow endl ; \n                 current_pow *= 5 ; \n             } \n             if ( factorial   %   current_pow   ==   0     factorial ) \n             { \n                 zeros   +=   (( int )( log ( factorial )   /   log ( 5 ))); \n                 cout  factorial is of 25 multiple  factorial  zeros  zeros    add  (( int )( log ( factorial )   /   log ( 5 ))) endl ; \n             } \n             else   if ( factorial   %   5   == 0     factorial ) \n             { \n                 cout  factorial not 25  factorial endl ; \n                 zeros ++ ; \n             } \n\n             if ( zeros   ==   kin ) \n             { \n                 cnt ++ ; \n             } \n             else   if ( zeros     kin ) \n             { \n                 break ; \n             } \n             cout  factorial  factorial  zeros  zeros endl ; \n             factorial ++ ; \n         } \n         return   cnt ; \n     } \n     //compare 2 casting, one is the original integer value of log and the other is the double type log, if they are equal of each other \n     //in double precision \n     //then this is correct one \n     bool   is_powoffive ( int   real ,   int   base ) \n     { \n         int   integer   =   ( int )( log ( real ) / log ( base )); \n         double   precised   =   ( log ( real ) / log ( base )); \n         return   integer   ==   precised ; \n     }  };", 
            "title": "PD. 793. Preimage Size of Factorial Zeroes Function \u9ad8\u96e3\u5ea6\u627emod\u898f\u5f8b\u6578\u5b78\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC75/", 
            "text": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Mar 11, 2018\n\n\n\n\n\u773c\u775b\u767c\u708e\uff0c\u6253\u6263\u9014\u4e2d\u9817\u4e0d\u8212\u670d\uff0c\u53ea\u6709\u5feb\u901f\u89e3\u51faPA\u5f8c\uff0cPB DFS\u6c92\u5beb\u597d\u4e0d\u65b7WA\uff0cPD\u7528\u66b4\u529b\u89e3\u7136\u4e26\u5375TLE\uff0c\u5c31\uff0c\u5beb\u500b\u7db2\u8a8c\u4f86\u6aa2\u8a0e\u5427 \n\n\nPA. \n796. Rotate String\n \u7c21\u55ae\u5b57\u4e32\u984c\n\n\n\n\n\u601d\u8def\uff1a\u6c34\u984c\u4e0d\u89e3\u91cb\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nbool\n \nrotateString\n(\nstring\n \naa\n,\n \nstring\n \nbb\n)\n\n    \n{\n\n        \nstring\n \ntmp\n=\naa\n;\n\n        \nstring\n \ntmp2\n;\n\n        \nFORI\n(\naa\n.\nsize\n())\n\n        \n{\n\n            \ntmp2\n=\ntmp\n[\n0\n];\n\n            \ntmp\n \n=\n \ntmp\n.\nsubstr\n(\n1\n,\naa\n.\nsize\n()\n-\n1\n);\n\n            \ntmp\n+=\ntmp2\n;\n\n            \nif\n(\ntmp\n \n==\n \nbb\n)\n\n                \nreturn\n \n1\n;\n\n        \n}\n\n        \nreturn\n \n0\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPB. \n797. ALl path from src to dst\n \u5716\u8ad6\u984c\uff0c\u8d77\u7d42\u9ede\u6240\u6709\u53ef\u80fd\u8def\u5f91 \n\n\n\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91\uff0c\u5716\u8ad6\u6f14\u7b97\u6cd5\u7d93\u5178\u984c\u76ee!!!!!!!!!!!!!!!!!!!!!\n \n\n\n\n\n\u601d\u8def\uff1adfs\u6df1\u5ea6\u512a\u5148\u641c\u7d22 \n\n\n\n\n\u9019\u500b\u662fWA\u7684\u4ee3\u78bc\uff0c\u7e3d\u6703\u6709\u4e9bcase\u6c92\u6709\u627e\u5230\uff0c\u56e0\u70ba\u5728output deg\u90a3\u88e1\u7684\u908f\u8f2f\u4e9b\u8a31\u932f\u8aa4 \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\nvector\nint\n \nallPathsSourceTarget\n(\nvector\nvector\nint\n \ngraph\n)\n\n    \n{\n\n\n        \nint\n \ntarget\n \n=\n \n0\n;\n\n        \nint\n \npos\n \n=\n \n0\n,\n \ntotal_size\n \n=\n \n0\n;\n\n        \nvector\nint\n \nres_part\n,\n \noutput_deg\n;\n\n        \noutput_deg\n.\nresize\n(\ngraph\n.\nsize\n());\n\n        \nvector\nvector\nint\n \nfinal_res\n;\n\n        \nFORI\n(\ngraph\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\ngraph\n[\ni\n].\nsize\n()\n==\n0\n)\n\n            \n{\n\n                \ntarget\n \n=\n \ni\n;\n\n            \n}\n\n            \nelse\n\n            \n{\n\n                \ntotal_size\n+=\ngraph\n[\ni\n].\nsize\n();\n\n                \noutput_deg\n[\ni\n]\n \n=\n \ngraph\n[\ni\n].\nsize\n();\n\n            \n}\n\n        \n}\n\n        \nint\n \nvisited\n \n=\n \n0\n,\n \ni\n=\n0\n,\n \ntmp\n,\n \nundone\n \n=\n \n1\n;\n\n        \nwhile\n(\nvisited\n \n!=\n \ntotal_size\n)\n\n        \n{\n\n            \nres_part\n.\npush_back\n(\npos\n);\n\n            \nif\n(\noutput_deg\n[\npos\n])\n\n            \n{\n\n                \ntmp\n \n=\n \npos\n;\n\n                \npos\n \n=\n \ngraph\n[\npos\n][\noutput_deg\n[\npos\n]\n-\n1\n];\n\n                \noutput_deg\n[\ntmp\n]\n--\n;\n\n                \nvisited\n++\n;\n\n            \n}\n\n            \nelse\n\n            \n{\n\n                \nFORI\n(\noutput_deg\n.\nsize\n())\n\n                \n{\n\n                    \nif\n(\noutput_deg\n[\ni\n])\n\n                        \npos\n \n=\n \noutput_deg\n[\ni\n];\n\n                \n}\n\n            \n}\n\n            \nif\n(\ngraph\n[\npos\n].\nsize\n()\n==\n0\n)\n\n            \n{\n\n                \npos\n \n=\n \n0\n;\n\n                \nres_part\n.\npush_back\n(\ntarget\n);\n\n                \nfinal_res\n.\npush_back\n(\nres_part\n);\n\n                \nres_part\n.\nclear\n();\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nfinal_res\n;\n\n    \n}\n\n\n\n};\n\n\n\n\n\n\n\u9019\u500b\u662f\u6b63\u78ba\u89e3\u6cd5\u7684\u4ee3\u78bc\uff0c\u4f7f\u7528\u7684\u6f14\u7b97\u6cd5\u4fbf\u662f\uff1aDFS\u6df1\u5ea6\u512a\u5148\u641c\u7d22\uff0c\u4ee5\u627e\u51fa\u8d77\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91 \n\n\nGeekforgeeks reference\n\n\nweibo\n\nweibo\u7684\u4f5c\u6cd5\u63a1\u7528\u975e\u905e\u8ff4\u505a\u6cd5 \n\n1.\u9078\u53d6\u8d77\u9ede\n\n2.\u79fb\u52d5\uff0c\u79fb\u5230\u7684\u9ede\u628a\u5b83\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u82e5\u8a72\u9ede\u4e0d\u662f\u7d42\u9ede\uff0c\u5247\u64f4\u6563\u67e5\u627e\u5468\u570d\u300e\u9084\u6c92\u6709\u8d70\u904e\u7684\u9ede\u300f\n\n3.\u8d70\u5230\u4e86\u7d42\u9ede\u4e4b\u5f8c\uff0c\u300e\u9000\u56de\u4e0a\u4e00\u6b65\u300f\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u500b\u6b65\u9a5f\uff0c\u56e0\u70ba\u9084\u6709\u53ef\u80fd\u6709\u5176\u4ed6\u8def\u5f91\uff0c\u6545\u5f9e\u7d42\u9ede\u7684\u4e0a\u4e00\u500b\u6b65\u9a5f\n\n4.\u4e0b\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c\u539f\u672c44\u884c\u7684return\u5beb\u4e0a\u5f8c\u6703\u9020\u6210\u7b54\u6848\u6e1b\u5c11\uff0c\u539f\u56e0\u5728\u65bc\u505abacktrace\u7684\u6642\u5019\uff0c\u9000\u56de\u5305\u522e\u7d42\u9ede\u4e5f\u8981\u6a19\u8a18\u70ba\u6c92\u6709\u8d70\u8a2a\u904e\uff0c\n\u5982\u679c\u7d42\u9ede\u4ecd\u7136\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u90a3\u9ebc\u4e4b\u5f8c\u7b2c\u4e8c\u689d\u8def\u5f91\u8981\u8d70\u5230\u7d42\u9ede\u7684\u6642\u5019\u4fbf\u6703\u770b\u5230\u7d42\u9ede\u5df2\u7d93\u8d70\u8a2a\u904e\uff0c\u4fbf\u4e0d\u518d\u5411\u524d\u8d70\u53bb\u7d42\u9ede\uff0c\u800c\u5c0e\u81f4\u7d50\u679c\u4e0d\u9f4a\u5168\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\nvector\n \nint\nfinal_res\n;\n\n    \nvector\nint\nres\n,\n \nvisited\n;\n\n    \nstack\nint\n \ntraversed_path\n;\n\n    \nvector\nvector\nint\n \nallPathsSourceTarget\n(\nvector\nvector\nint\n \ngraph\n)\n \n//graph in adjacency list\n\n    \n{\n\n        \nint\n \ndst\n;\n\n        \nFORI\n(\ngraph\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\ngraph\n[\ni\n].\nsize\n()\n==\n0\n)\n\n            \n{\n\n                \ndst\n \n=\n \ni\n;\n\n            \n}\n\n            \nvisited\n.\npush_back\n(\nfalse\n);\n\n        \n}\n\n        \ndfs\n(\n0\n,\ndst\n,\nres\n,\ngraph\n);\n\n        \nreturn\n \nfinal_res\n;\n\n    \n}\n\n    \nvoid\n \ndfs\n(\nint\n \ncur_node\n,\n \nint\n \ndst\n,\n \nvector\nint\n \nres\n,\n \nvector\nvector\nint\n \ngraph\n)\n\n    \n{\n\n\n        \ntraversed_path\n.\npush\n(\ncur_node\n);\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \ntrue\n;\n\n        \nif\n(\ncur_node\n \n==\n \ndst\n)\n\n        \n{\n\n\n            \nstack\nint\n \ncopied_stk\n \n=\n \ntraversed_path\n;\n\n            \nwhile\n(\ncopied_stk\n.\nsize\n())\n\n            \n{\n\n                \nres\n.\npush_back\n(\ncopied_stk\n.\ntop\n());\n\n                \ncopied_stk\n.\npop\n();\n\n            \n}\n\n            \nreverse\n(\nres\n.\nbegin\n(),\n \nres\n.\nend\n());\n\n\n            \nfinal_res\n.\npush_back\n(\nres\n);\n\n            \nres\n.\nclear\n();\n\n            \n//return ;\n\n        \n}\n\n        \nelse\n\n        \n{\n\n\n            \nFORI\n(\ngraph\n[\ncur_node\n].\nsize\n())\n\n            \n{\n\n                \nif\n(\n!\nvisited\n[\ngraph\n[\ncur_node\n][\ni\n]])\n\n                \n{\n\n                    \ndfs\n(\ngraph\n[\ncur_node\n][\ni\n],\n \ndst\n,\n \nres\n,\n \ngraph\n);\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//back trace if there will be still some nodes have to be visited but now path are blocked since adj nodes are marked visited\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \nfalse\n;\n\n        \ncur_node\n \n=\n \ntraversed_path\n.\ntop\n();\n\n        \ntraversed_path\n.\npop\n();\n\n    \n}\n\n\n\n};\n\n\n\n\n\n\nPC. \n799. Champagne Tower\n \u6578\u5b78\u898f\u5283\u8207\u89c0\u5bdf\u984c\n\n\n\n\n\u601d\u8def\uff1a\u96d6\u7136\u984c\u76ee\u6709\u9ede\u5687\u4eba\uff0c\u4f46\u53ea\u662f\u500b\u969c\u773c\u6cd5\uff0c\u525b\u958b\u59cb\u60f3\u8aaa\u4e00\u6b21\u5728\u7b2c\u4e00\u76c3\u6dfb\u52a0\u4e00\u6b21\uff0c\u518d\u8b93\u6bcf\u4e00\u6b21\u7684\u6d41\u6c34\u4f9d\u5e8f\u5f80\u4e0b\u6d41\u7ac4\uff0c\u5982\u679c\u6709\u676f\u5b50\u5df2\u7d93\u6eff\u6c34\u4f4d\uff0c\u5c31\u5c07row++\n\u518d\u5ea6\u5f80\u4e0b\u6d41\u7ac4\uff0c\u76f4\u5230\u5e95\uff0c\u7136\u4e0d\u50c5\u6642\u9593\u8907\u96dc\u5ea6\u592a\u9ad8\u4e5f\u5728\u7b2c260\u500b\u6e2c\u8cc7WA\u4e86 \n\n\n\n\n\u4e8b\u5be6\u4e0a\uff0c\u53ea\u8981\u5148\u5c07\u6700\u9ad8\u7684\u90a3\u4e00\u676f\u6c34\uff0c\u4efb\u610f\u88dd\u6eff\u4ed6\u7684pour\u91cf\uff0c\u5148\u4e0d\u7528\u5728\u4e4e\u662f\u5426\u5df2\u7d93\u8d85\u51fa\u6eff\u6c34\u4f4d\uff0c\u53ea\u8981\u5148\u628a\u591a\u51fa\u7684\u6c34\u4f9d\u5e8f\u6d41\u7ac4\uff0c\u4e26\u4e14\u5de6\u53f3\u5747\u5206\u5373\u53ef\uff0c\u800c\u6703\u591a\u51fa\u7684\u6c34\u4f4d\u5c31\u662f\n\u7576\u524d\u6c34\u4f4d - \u4e00\u676f\u6c34 \u4e4b\u5f8c\u518d\u5c07\u9019\u500b\u5806\u51fa\u7684\u6c34\u4f4d\u8a55\u5206\u7d66\u6a13\u4e0b\u5169\u676f\u5373\u53ef\u3002\n\n\u5f88\u667a\u969c\u7684\u662f \u4ee5\u70ba\u6a13\u4e0b\u5169\u676f\u662f row+1 col-1 and row+1 col+1\n \u5229\u99ac\u62ff\u4e86\u4e00\u500bRE\uff0c\u5be6\u969b\u4e0a\u61c9\u8a72\u662fcol col+1\u5566w\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \ndouble\n \nchampagneTower\n(\nint\n \npoured\n,\n \nint\n \nquery_row\n,\n \nint\n \nquery_glass\n)\n\n    \n{\n\n        \nvector\nvector\n \ndouble\n \n \n \ncups\n;\n\n        \ncups\n.\nresize\n(\n101\n);\n \n//padding\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n101\n;\ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n=\n0\n;\nj\n=\ni\n;\nj\n++\n)\n\n            \n{\n\n                \ncups\n[\ni\n].\npush_back\n(\n0.0\n);\n\n            \n}\n\n        \n}\n\n        \ncups\n[\n0\n][\n0\n]\n \n=\n \npoured\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n100\n;\ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n=\n0\n;\nj\n=\ni\n;\nj\n++\n)\n\n            \n{\n\n                \nif\n(\ncups\n[\ni\n][\nj\n]\n \n=\n \n1.0\n)\n\n                \n{\n\n                    \ncups\n[\ni\n+\n1\n][\nj\n]\n \n+=\n \n(\ncups\n[\ni\n][\nj\n]\n \n-\n \n1.0\n)\n \n/\n \n2.0\n \n;\n\n                    \ncups\n[\ni\n+\n1\n][\nj\n+\n1\n]\n \n+=\n \n(\ncups\n[\ni\n][\nj\n]\n \n-\n \n1.0\n)\n \n/\n \n2.0\n \n;\n\n                    \ncups\n[\ni\n][\nj\n]\n \n=\n \n1.0\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncups\n[\nquery_row\n][\nquery_glass\n];\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPD. \n800. Smallest rotation with highest score\n \u6578\u5b78\u63a8\u7406+\u5340\u9593\u67e5\u8a62\u7dda\u6027\u512a\u5316O(N)\n\n\n\u6b64\u984c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u4e00\u5b9a\u8981\u5728O(N)\uff0c\u5fc5\u9808\u4f7f\u7528\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\uff0c\u5927\u795e\u5ba4\u53cb\u99ac\u4e0a\u60f3\u5230\u7dda\u6bb5\u6a39segment tree\u67e5\u627e\n\n\n\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\u6982\u5ff5\uff0c\u5f9e\u66b4\u529b\u5230NlogN \u5230N\n \n\n* \u601d\u8def\uff0c\u53ef\u4ee5\u770b\u51fa\u6709\u5169\u7a2e\u60c5\u5f62\uff0c\u4e00\u7a2e\u662f\u672c\u4f86\u5c31\u6703\u5f97\u5206\u7684(value \n= index)\uff0c\u4e00\u7a2e\u662f\u9084\u6c92\u6709\u5f97\u5206\u7684 else\n\n\u7b2c\u4e00\u985e\u578b\n\n\u9996\u5148\u7b2c\u4e00\u7a2e\u672c\u4f86\u5c31\u53ef\u4ee5\u5f97\u5206\uff0c\u4f8b\u5982[2,3,1,4,0]\u4e2d\u76841 , 0\uff0c\u5411\u53f3\u79fb\u52d5\u81ea\u7136\u53ef\u4ee5\u5f97\u5206\uff0c\u6240\u4ee5\u4ed6\u7684\u53f3\u908a\u53ef\u4ee5\u7684\u6b65\u6578\u4fbf\u662f[index+1(\u76f4\u63a5\u5411\u5de6\u79fb\u52d5\u5230\u6700\u53f3\u5074\uff08\u8d85\u904e\u5f8c\u91cd\u65b0\u5f9e\u7d50\u5c3e\u56de\u4f86\uff09\uff0c\u5fc5\u7136\u7b26\u5408\u7684\u958b\u5916\u639b\u6a21\u5f0f),len-1\uff08\u79fb\u52d5\u5230\u4ed6\u4e0b\u4e00\u500b\uff09]\n\u4ee5\u53ca[0(\u4e0d\u52d5)\uff0cindex - value\uff08\u4f8b\u5982\u4e0a\u9762\u76841\u57282 \u81f3\u591a\u79fb\u52d5\u52301\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 2 - 1 \u4e00\u6b65\uff09] \n\n\u7b2c\u4e8c\u985e\u578b\n\n\u800c\u53e6\u5916\u4e00\u7a2e\u7576\u524d\u7121\u6cd5\u5f97\u5206\u7684\uff0c\u4fbf\u8981[index+1 (\u958b\u5916\u639b\u79fb\u5230\u6700\u53f3\u908a), total_len - (value - index)(\u7e7c\u7e8c\u79fb\u52d5\uff0cvalue - index \u4ee3\u8868\u8207\u6700\u5927\u79fb\u52d5\u6b21\u6578\u7684\u76f8\u5dee\uff0c\u4e5f\u5c31\u662f\u5b83\u5fc5\u9808\u5411\u53f3\u79fb\u52d5val - index\u9019\u500b\u5dee\u503c\u624d\u6709\u5206\uff0c\u5411\u53f3\u79fb\u52d5\u7684\u81f3\u5c11\u6b21\u6578\uff0c\u63db\u904e\u4f86\u8b1b\u7528 len \u4f86\u6263\u9664\u5c31\u662f\u5411\u5de6\u79fb\u52d5\u7684\u6700\u5927\u6b21\u6578)]\n\n\n\n\u6c42\u51fa\u6bcf\u4e00\u500b\u6578\u5b57\u61c9\u8a72\u6709\u7684\u5340\u9593\uff0c\u628a\u4ed6\u5011\u6620\u5c04\u5230\u5340\u9593\u67e5\u8a62\u6bb5\uff0c\u4f7f\u7528python\u7684pair\u8868\u793a\u958b\u59cb\u548c\u7d50\u675f \n\n\n1\n2\n3\n4\n5\n6\nfor\n \nindex\n,\n \nvalue\n \nin\n \nenumerate\n(\narr\n):\n\n    \nif\n \nindex\n \n \nvalue\n:\n \n#one segment for this ones\n\n        \npair\n.\nappend\n([\nindex\n \n+\n \n1\n \n,\ntotal_len\n \n-\n \n(\nvalue\n \n-\n \nindex\n)])\n \n#segment start and end\n\n    \nelse\n:\n \n#two segments for this one\n\n        \npair\n.\nappend\n([\nindex\n \n+\n \n1\n,\n \ntotal_len\n \n-\n \n1\n])\n\n        \npair\n.\nappend\n([\n0\n,\n \nindex\n \n-\n \nvalue\n])\n\n\n\n\n\n\n\u6700\u5f8c\u627e\u5230prefix sum (\u52a0\u7e3d\u5230\u6b64\u6642\u7684\u7e3d\u548c)\uff0c\u601d\u7dd2\u898b\u8a3b\u89e3 \n\n\n1\n2\n3\n4\nsegment_query\n \n=\n \n[\n0\n]\n \n*\n \n(\ntotal_len\n \n+\n \n1\n)\n  \n#aux arrat for the prefix sum, segment query\n\n\nfor\n \ni\n \nin\n \nrange\n \n(\nlen\n(\npair\n)):\n \n#+1 padding\n\n    \nsegment_query\n[\npair\n[\ni\n][\n0\n]]\n \n+=\n \n1\n \n#go in the interval, overlapping with all the other segment\n\n    \nsegment_query\n[\npair\n[\ni\n][\n1\n]\n \n+\n \n1\n]\n \n-=\n \n1\n \n#leave the interval, cancelling the infulence of segment overlapping\n\n\n\n\n\n\n\u6574\u9ad4AC\u4ee3\u78bc\u5982\u4e0b \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nclass\n \nSolution\n:\n\n    \ndef\n \nbestRotation\n(\nself\n,\n \narr\n):\n\n        \nbest\n \n=\n \n0\n\n        \nshift\n \n=\n \n0\n\n        \ntotal_len\n \n=\n \nlen\n(\narr\n)\n\n        \n#start_pos_arr = []\n\n        \npair\n \n=\n \n[]\n\n        \n#initial the start_pos_arr to record the starting position of the given array\n\n        \n#initial score\n\n        \nfor\n \nindex\n,\n \nvalue\n \nin\n \nenumerate\n(\narr\n):\n\n            \nif\n \nindex\n \n \nvalue\n:\n \n#one segment for this ones\n\n                \npair\n.\nappend\n([\nindex\n \n+\n \n1\n \n,\ntotal_len\n \n-\n \n(\nvalue\n \n-\n \nindex\n)])\n \n#segment start and end\n\n            \nelse\n:\n \n#two segments for this one\n\n                \npair\n.\nappend\n([\nindex\n \n+\n \n1\n,\n \ntotal_len\n \n-\n \n1\n])\n\n                \npair\n.\nappend\n([\n0\n,\n \nindex\n \n-\n \nvalue\n])\n\n\n\n        \nsegment_query\n \n=\n \n[\n0\n]\n \n*\n \n(\ntotal_len\n \n+\n \n1\n)\n  \n#aux arrat for the prefix sum, segment query\n\n        \nfor\n \ni\n \nin\n \nrange\n \n(\nlen\n(\npair\n)):\n \n#+1 padding\n\n            \nsegment_query\n[\npair\n[\ni\n][\n0\n]]\n \n+=\n \n1\n \n#go in the interval, overlapping with all the other segment\n\n            \nsegment_query\n[\npair\n[\ni\n][\n1\n]\n \n+\n \n1\n]\n \n-=\n \n1\n \n#leave the interval, cancelling the infulence of segment overlapping\n\n\n        \ncur_pts\n \n=\n \n0\n\n        \nfor\n \ni\n \nin\n \nrange\n \n(\nlen\n(\nsegment_query\n)):\n\n             \ncur_pts\n \n+=\n \nsegment_query\n[\ni\n]\n\n             \nif\n(\n \ncur_pts\n \n \nbest\n):\n\n                 \nbest\n \n=\n \ncur_pts\n\n                 \nshift\n \n=\n \ni\n\n\n        \nreturn\n \nshift", 
            "title": "WC75"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#leetcode_oj-wc75", 
            "text": "Contest time: Mar 11, 2018   \u773c\u775b\u767c\u708e\uff0c\u6253\u6263\u9014\u4e2d\u9817\u4e0d\u8212\u670d\uff0c\u53ea\u6709\u5feb\u901f\u89e3\u51faPA\u5f8c\uff0cPB DFS\u6c92\u5beb\u597d\u4e0d\u65b7WA\uff0cPD\u7528\u66b4\u529b\u89e3\u7136\u4e26\u5375TLE\uff0c\u5c31\uff0c\u5beb\u500b\u7db2\u8a8c\u4f86\u6aa2\u8a0e\u5427", 
            "title": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pa-796-rotate-string", 
            "text": "\u601d\u8def\uff1a\u6c34\u984c\u4e0d\u89e3\u91cb  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 #define FORI(n) for(int i = 0; i   n; ++ i)  class   Solution  {  public : \n     bool   rotateString ( string   aa ,   string   bb ) \n     { \n         string   tmp = aa ; \n         string   tmp2 ; \n         FORI ( aa . size ()) \n         { \n             tmp2 = tmp [ 0 ]; \n             tmp   =   tmp . substr ( 1 , aa . size () - 1 ); \n             tmp += tmp2 ; \n             if ( tmp   ==   bb ) \n                 return   1 ; \n         } \n         return   0 ; \n     }  };", 
            "title": "PA. 796. Rotate String \u7c21\u55ae\u5b57\u4e32\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pb-797-all-path-from-src-to-dst", 
            "text": "\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91\uff0c\u5716\u8ad6\u6f14\u7b97\u6cd5\u7d93\u5178\u984c\u76ee!!!!!!!!!!!!!!!!!!!!!     \u601d\u8def\uff1adfs\u6df1\u5ea6\u512a\u5148\u641c\u7d22    \u9019\u500b\u662fWA\u7684\u4ee3\u78bc\uff0c\u7e3d\u6703\u6709\u4e9bcase\u6c92\u6709\u627e\u5230\uff0c\u56e0\u70ba\u5728output deg\u90a3\u88e1\u7684\u908f\u8f2f\u4e9b\u8a31\u932f\u8aa4    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55 #define FORI(n) for(int i = 0; i   n; ++ i)  class   Solution  {  public : \n     vector vector int   allPathsSourceTarget ( vector vector int   graph ) \n     { \n\n         int   target   =   0 ; \n         int   pos   =   0 ,   total_size   =   0 ; \n         vector int   res_part ,   output_deg ; \n         output_deg . resize ( graph . size ()); \n         vector vector int   final_res ; \n         FORI ( graph . size ()) \n         { \n             if ( graph [ i ]. size () == 0 ) \n             { \n                 target   =   i ; \n             } \n             else \n             { \n                 total_size += graph [ i ]. size (); \n                 output_deg [ i ]   =   graph [ i ]. size (); \n             } \n         } \n         int   visited   =   0 ,   i = 0 ,   tmp ,   undone   =   1 ; \n         while ( visited   !=   total_size ) \n         { \n             res_part . push_back ( pos ); \n             if ( output_deg [ pos ]) \n             { \n                 tmp   =   pos ; \n                 pos   =   graph [ pos ][ output_deg [ pos ] - 1 ]; \n                 output_deg [ tmp ] -- ; \n                 visited ++ ; \n             } \n             else \n             { \n                 FORI ( output_deg . size ()) \n                 { \n                     if ( output_deg [ i ]) \n                         pos   =   output_deg [ i ]; \n                 } \n             } \n             if ( graph [ pos ]. size () == 0 ) \n             { \n                 pos   =   0 ; \n                 res_part . push_back ( target ); \n                 final_res . push_back ( res_part ); \n                 res_part . clear (); \n             } \n         } \n         return   final_res ; \n     }  };    \u9019\u500b\u662f\u6b63\u78ba\u89e3\u6cd5\u7684\u4ee3\u78bc\uff0c\u4f7f\u7528\u7684\u6f14\u7b97\u6cd5\u4fbf\u662f\uff1aDFS\u6df1\u5ea6\u512a\u5148\u641c\u7d22\uff0c\u4ee5\u627e\u51fa\u8d77\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91   Geekforgeeks reference  weibo \nweibo\u7684\u4f5c\u6cd5\u63a1\u7528\u975e\u905e\u8ff4\u505a\u6cd5  \n1.\u9078\u53d6\u8d77\u9ede \n2.\u79fb\u52d5\uff0c\u79fb\u5230\u7684\u9ede\u628a\u5b83\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u82e5\u8a72\u9ede\u4e0d\u662f\u7d42\u9ede\uff0c\u5247\u64f4\u6563\u67e5\u627e\u5468\u570d\u300e\u9084\u6c92\u6709\u8d70\u904e\u7684\u9ede\u300f \n3.\u8d70\u5230\u4e86\u7d42\u9ede\u4e4b\u5f8c\uff0c\u300e\u9000\u56de\u4e0a\u4e00\u6b65\u300f\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u500b\u6b65\u9a5f\uff0c\u56e0\u70ba\u9084\u6709\u53ef\u80fd\u6709\u5176\u4ed6\u8def\u5f91\uff0c\u6545\u5f9e\u7d42\u9ede\u7684\u4e0a\u4e00\u500b\u6b65\u9a5f \n4.\u4e0b\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c\u539f\u672c44\u884c\u7684return\u5beb\u4e0a\u5f8c\u6703\u9020\u6210\u7b54\u6848\u6e1b\u5c11\uff0c\u539f\u56e0\u5728\u65bc\u505abacktrace\u7684\u6642\u5019\uff0c\u9000\u56de\u5305\u522e\u7d42\u9ede\u4e5f\u8981\u6a19\u8a18\u70ba\u6c92\u6709\u8d70\u8a2a\u904e\uff0c\n\u5982\u679c\u7d42\u9ede\u4ecd\u7136\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u90a3\u9ebc\u4e4b\u5f8c\u7b2c\u4e8c\u689d\u8def\u5f91\u8981\u8d70\u5230\u7d42\u9ede\u7684\u6642\u5019\u4fbf\u6703\u770b\u5230\u7d42\u9ede\u5df2\u7d93\u8d70\u8a2a\u904e\uff0c\u4fbf\u4e0d\u518d\u5411\u524d\u8d70\u53bb\u7d42\u9ede\uff0c\u800c\u5c0e\u81f4\u7d50\u679c\u4e0d\u9f4a\u5168   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59 #define FORI(n) for(int i = 0; i   n; ++ i)  class   Solution  {  public : \n     vector vector   int final_res ; \n     vector int res ,   visited ; \n     stack int   traversed_path ; \n     vector vector int   allPathsSourceTarget ( vector vector int   graph )   //graph in adjacency list \n     { \n         int   dst ; \n         FORI ( graph . size ()) \n         { \n             if ( graph [ i ]. size () == 0 ) \n             { \n                 dst   =   i ; \n             } \n             visited . push_back ( false ); \n         } \n         dfs ( 0 , dst , res , graph ); \n         return   final_res ; \n     } \n     void   dfs ( int   cur_node ,   int   dst ,   vector int   res ,   vector vector int   graph ) \n     { \n\n         traversed_path . push ( cur_node ); \n         visited [ cur_node ]   =   true ; \n         if ( cur_node   ==   dst ) \n         { \n\n             stack int   copied_stk   =   traversed_path ; \n             while ( copied_stk . size ()) \n             { \n                 res . push_back ( copied_stk . top ()); \n                 copied_stk . pop (); \n             } \n             reverse ( res . begin (),   res . end ()); \n\n             final_res . push_back ( res ); \n             res . clear (); \n             //return ; \n         } \n         else \n         { \n\n             FORI ( graph [ cur_node ]. size ()) \n             { \n                 if ( ! visited [ graph [ cur_node ][ i ]]) \n                 { \n                     dfs ( graph [ cur_node ][ i ],   dst ,   res ,   graph ); \n                 } \n             } \n         } \n         //back trace if there will be still some nodes have to be visited but now path are blocked since adj nodes are marked visited \n         visited [ cur_node ]   =   false ; \n         cur_node   =   traversed_path . top (); \n         traversed_path . pop (); \n     }  };", 
            "title": "PB. 797. ALl path from src to dst \u5716\u8ad6\u984c\uff0c\u8d77\u7d42\u9ede\u6240\u6709\u53ef\u80fd\u8def\u5f91 "
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pc-799-champagne-tower", 
            "text": "\u601d\u8def\uff1a\u96d6\u7136\u984c\u76ee\u6709\u9ede\u5687\u4eba\uff0c\u4f46\u53ea\u662f\u500b\u969c\u773c\u6cd5\uff0c\u525b\u958b\u59cb\u60f3\u8aaa\u4e00\u6b21\u5728\u7b2c\u4e00\u76c3\u6dfb\u52a0\u4e00\u6b21\uff0c\u518d\u8b93\u6bcf\u4e00\u6b21\u7684\u6d41\u6c34\u4f9d\u5e8f\u5f80\u4e0b\u6d41\u7ac4\uff0c\u5982\u679c\u6709\u676f\u5b50\u5df2\u7d93\u6eff\u6c34\u4f4d\uff0c\u5c31\u5c07row++\n\u518d\u5ea6\u5f80\u4e0b\u6d41\u7ac4\uff0c\u76f4\u5230\u5e95\uff0c\u7136\u4e0d\u50c5\u6642\u9593\u8907\u96dc\u5ea6\u592a\u9ad8\u4e5f\u5728\u7b2c260\u500b\u6e2c\u8cc7WA\u4e86    \u4e8b\u5be6\u4e0a\uff0c\u53ea\u8981\u5148\u5c07\u6700\u9ad8\u7684\u90a3\u4e00\u676f\u6c34\uff0c\u4efb\u610f\u88dd\u6eff\u4ed6\u7684pour\u91cf\uff0c\u5148\u4e0d\u7528\u5728\u4e4e\u662f\u5426\u5df2\u7d93\u8d85\u51fa\u6eff\u6c34\u4f4d\uff0c\u53ea\u8981\u5148\u628a\u591a\u51fa\u7684\u6c34\u4f9d\u5e8f\u6d41\u7ac4\uff0c\u4e26\u4e14\u5de6\u53f3\u5747\u5206\u5373\u53ef\uff0c\u800c\u6703\u591a\u51fa\u7684\u6c34\u4f4d\u5c31\u662f\n\u7576\u524d\u6c34\u4f4d - \u4e00\u676f\u6c34 \u4e4b\u5f8c\u518d\u5c07\u9019\u500b\u5806\u51fa\u7684\u6c34\u4f4d\u8a55\u5206\u7d66\u6a13\u4e0b\u5169\u676f\u5373\u53ef\u3002 \u5f88\u667a\u969c\u7684\u662f \u4ee5\u70ba\u6a13\u4e0b\u5169\u676f\u662f row+1 col-1 and row+1 col+1  \u5229\u99ac\u62ff\u4e86\u4e00\u500bRE\uff0c\u5be6\u969b\u4e0a\u61c9\u8a72\u662fcol col+1\u5566w   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 class   Solution  {  public : \n     double   champagneTower ( int   poured ,   int   query_row ,   int   query_glass ) \n     { \n         vector vector   double       cups ; \n         cups . resize ( 101 );   //padding \n         for ( int   i = 0 ; i 101 ; i ++ ) \n         { \n             for ( int   j = 0 ; j = i ; j ++ ) \n             { \n                 cups [ i ]. push_back ( 0.0 ); \n             } \n         } \n         cups [ 0 ][ 0 ]   =   poured ; \n         for ( int   i = 0 ; i 100 ; i ++ ) \n         { \n             for ( int   j = 0 ; j = i ; j ++ ) \n             { \n                 if ( cups [ i ][ j ]   =   1.0 ) \n                 { \n                     cups [ i + 1 ][ j ]   +=   ( cups [ i ][ j ]   -   1.0 )   /   2.0   ; \n                     cups [ i + 1 ][ j + 1 ]   +=   ( cups [ i ][ j ]   -   1.0 )   /   2.0   ; \n                     cups [ i ][ j ]   =   1.0 ; \n                 } \n             } \n         } \n         return   cups [ query_row ][ query_glass ]; \n     }  };", 
            "title": "PC. 799. Champagne Tower \u6578\u5b78\u898f\u5283\u8207\u89c0\u5bdf\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pd-800-smallest-rotation-with-highest-score-on", 
            "text": "\u6b64\u984c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u4e00\u5b9a\u8981\u5728O(N)\uff0c\u5fc5\u9808\u4f7f\u7528\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\uff0c\u5927\u795e\u5ba4\u53cb\u99ac\u4e0a\u60f3\u5230\u7dda\u6bb5\u6a39segment tree\u67e5\u627e  \u5340\u9593\u67e5\u8a62\u7b97\u6cd5\u6982\u5ff5\uff0c\u5f9e\u66b4\u529b\u5230NlogN \u5230N   \n* \u601d\u8def\uff0c\u53ef\u4ee5\u770b\u51fa\u6709\u5169\u7a2e\u60c5\u5f62\uff0c\u4e00\u7a2e\u662f\u672c\u4f86\u5c31\u6703\u5f97\u5206\u7684(value  = index)\uff0c\u4e00\u7a2e\u662f\u9084\u6c92\u6709\u5f97\u5206\u7684 else \n\u7b2c\u4e00\u985e\u578b \n\u9996\u5148\u7b2c\u4e00\u7a2e\u672c\u4f86\u5c31\u53ef\u4ee5\u5f97\u5206\uff0c\u4f8b\u5982[2,3,1,4,0]\u4e2d\u76841 , 0\uff0c\u5411\u53f3\u79fb\u52d5\u81ea\u7136\u53ef\u4ee5\u5f97\u5206\uff0c\u6240\u4ee5\u4ed6\u7684\u53f3\u908a\u53ef\u4ee5\u7684\u6b65\u6578\u4fbf\u662f[index+1(\u76f4\u63a5\u5411\u5de6\u79fb\u52d5\u5230\u6700\u53f3\u5074\uff08\u8d85\u904e\u5f8c\u91cd\u65b0\u5f9e\u7d50\u5c3e\u56de\u4f86\uff09\uff0c\u5fc5\u7136\u7b26\u5408\u7684\u958b\u5916\u639b\u6a21\u5f0f),len-1\uff08\u79fb\u52d5\u5230\u4ed6\u4e0b\u4e00\u500b\uff09]\n\u4ee5\u53ca[0(\u4e0d\u52d5)\uff0cindex - value\uff08\u4f8b\u5982\u4e0a\u9762\u76841\u57282 \u81f3\u591a\u79fb\u52d5\u52301\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 2 - 1 \u4e00\u6b65\uff09]  \n\u7b2c\u4e8c\u985e\u578b \n\u800c\u53e6\u5916\u4e00\u7a2e\u7576\u524d\u7121\u6cd5\u5f97\u5206\u7684\uff0c\u4fbf\u8981[index+1 (\u958b\u5916\u639b\u79fb\u5230\u6700\u53f3\u908a), total_len - (value - index)(\u7e7c\u7e8c\u79fb\u52d5\uff0cvalue - index \u4ee3\u8868\u8207\u6700\u5927\u79fb\u52d5\u6b21\u6578\u7684\u76f8\u5dee\uff0c\u4e5f\u5c31\u662f\u5b83\u5fc5\u9808\u5411\u53f3\u79fb\u52d5val - index\u9019\u500b\u5dee\u503c\u624d\u6709\u5206\uff0c\u5411\u53f3\u79fb\u52d5\u7684\u81f3\u5c11\u6b21\u6578\uff0c\u63db\u904e\u4f86\u8b1b\u7528 len \u4f86\u6263\u9664\u5c31\u662f\u5411\u5de6\u79fb\u52d5\u7684\u6700\u5927\u6b21\u6578)]  \u6c42\u51fa\u6bcf\u4e00\u500b\u6578\u5b57\u61c9\u8a72\u6709\u7684\u5340\u9593\uff0c\u628a\u4ed6\u5011\u6620\u5c04\u5230\u5340\u9593\u67e5\u8a62\u6bb5\uff0c\u4f7f\u7528python\u7684pair\u8868\u793a\u958b\u59cb\u548c\u7d50\u675f   1\n2\n3\n4\n5\n6 for   index ,   value   in   enumerate ( arr ): \n     if   index     value :   #one segment for this ones \n         pair . append ([ index   +   1   , total_len   -   ( value   -   index )])   #segment start and end \n     else :   #two segments for this one \n         pair . append ([ index   +   1 ,   total_len   -   1 ]) \n         pair . append ([ 0 ,   index   -   value ])    \u6700\u5f8c\u627e\u5230prefix sum (\u52a0\u7e3d\u5230\u6b64\u6642\u7684\u7e3d\u548c)\uff0c\u601d\u7dd2\u898b\u8a3b\u89e3   1\n2\n3\n4 segment_query   =   [ 0 ]   *   ( total_len   +   1 )    #aux arrat for the prefix sum, segment query  for   i   in   range   ( len ( pair )):   #+1 padding \n     segment_query [ pair [ i ][ 0 ]]   +=   1   #go in the interval, overlapping with all the other segment \n     segment_query [ pair [ i ][ 1 ]   +   1 ]   -=   1   #leave the interval, cancelling the infulence of segment overlapping    \u6574\u9ad4AC\u4ee3\u78bc\u5982\u4e0b    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 class   Solution : \n     def   bestRotation ( self ,   arr ): \n         best   =   0 \n         shift   =   0 \n         total_len   =   len ( arr ) \n         #start_pos_arr = [] \n         pair   =   [] \n         #initial the start_pos_arr to record the starting position of the given array \n         #initial score \n         for   index ,   value   in   enumerate ( arr ): \n             if   index     value :   #one segment for this ones \n                 pair . append ([ index   +   1   , total_len   -   ( value   -   index )])   #segment start and end \n             else :   #two segments for this one \n                 pair . append ([ index   +   1 ,   total_len   -   1 ]) \n                 pair . append ([ 0 ,   index   -   value ]) \n\n\n         segment_query   =   [ 0 ]   *   ( total_len   +   1 )    #aux arrat for the prefix sum, segment query \n         for   i   in   range   ( len ( pair )):   #+1 padding \n             segment_query [ pair [ i ][ 0 ]]   +=   1   #go in the interval, overlapping with all the other segment \n             segment_query [ pair [ i ][ 1 ]   +   1 ]   -=   1   #leave the interval, cancelling the infulence of segment overlapping \n\n         cur_pts   =   0 \n         for   i   in   range   ( len ( segment_query )): \n              cur_pts   +=   segment_query [ i ] \n              if (   cur_pts     best ): \n                  best   =   cur_pts \n                  shift   =   i \n\n         return   shift", 
            "title": "PD. 800. Smallest rotation with highest score \u6578\u5b78\u63a8\u7406+\u5340\u9593\u67e5\u8a62\u7dda\u6027\u512a\u5316O(N)"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC76/", 
            "text": "leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Mar 18, 2018\n\n\n\n\nPA. \n800. Similar RGB Color\n \u9ebb\u7169\u7684\u6c34\u984c\n\n\n\u5982\u984c\u76ee\u6240\u8ff0\uff0c\u6703\u9700\u8981\u7528\u5230\u4e00\u4e9b\u4f4d\u5143\u904b\u7b97\uff0c\u56e0\u6b64\u7a0d\u5acc\u9ebb\u7169\uff0c\u5c45\u7136\u5beb\u4e86\u4e00\u500b\u591a\u5c0f\u6642\u624d\u5beb\u51fa\u4f86\u3002\n\u4e2d\u9014\u9084\u88ab\u8b8a\u66f4\u7684\u984c\u8aaa\u660e\u800d\u4e86\u4e00\u9053\uff0c\u800c\u4e14\u984c\u76ee\u8aaa\u660e\u6839\u672c\u8aaa\u932f\u4e86gg\u3002\n\n\ncti itc \u53ef\u4ee5\u5728\u5341\u516d\u9032\u4f4d\u548cchar\u4e92\u76f8\u8f49\u63db\uff0c\u9817\u70ba\u65b9\u4fbf\u3002\u800cstringstream\u53ef\u4ee5\u628a\u5b57\u4e32\u5728\u8996\u70ba\u8f38\u5165\u8655\u7406\u4e00\u6b21\u8f49\u6210\u5341\u516d\u76e1\u4f4d\u5728\u8f38\u5165\u7d66\u6574\u6578\u3002\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\n#include\n \ncstdlib\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \ncti\n(\nchar\n \nc\n)\n\n    \n{\n\n        \nif\n \n(\n \n0\n=\nc\n \n \nc\n=\n9\n \n)\n \nreturn\n \nc\n-\n0\n;\n\n        \nelse\n \nreturn\n \n10\n+\nc\n-\na\n;\n\n    \n}\n\n    \nchar\n \nitc\n(\nint\n \ni\n)\n\n    \n{\n\n        \nif\n \n(\n0\n=\ni\n \n \ni\n=\n9\n)\n \nreturn\n \n0\n+\ni\n;\n\n        \nelse\n \nreturn\n \na\n+\ni\n-\n10\n;\n\n    \n}\n\n    \nstring\n \nsimilarRGB\n(\nstring\n \ncolor\n)\n\n    \n{\n\n        \nint\n \ndist\n \n=\n \n0\n,\n \nbest\n \n=\n \n99999999\n;\n\n        \nint\n \noriginal\n \n=\n \n0\n;\n\n        \ncolor\n \n=\n \ncolor\n.\nsubstr\n(\n1\n,\n6\n);\n\n        \nstringstream\n \nss\n;\n\n        \nss\nhex\ncolor\n;\n\n        \nss\noriginal\n;\n\n\n        \nint\n \nR\n,\nG\n,\nB\n,\nnr\n,\nng\n,\nnb\n,\nnr1\n,\nng1\n,\nnb1\n;\n\n        \nstring\n \nsr\n,\nsg\n,\nsb\n;\n\n\n        \nR\n=\noriginal\n \n \n0xff0000\n;\n\n        \nG\n=\noriginal\n \n \n0xff00\n;\n\n        \nB\n=\noriginal\n \n \n0xff\n;\n\n        \nR\n=\n16\n;\n\n        \nG\n=\n8\n;\n\n\n        \n//find smallest R\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \n16\n;\ni\n++\n)\n\n        \n{\n\n            \nnr\n \n=\n \ni\n4\n \n|\n \ni\n;\n\n            \nif\n(\nabs\n(\nnr\n-\nR\n)\nbest\n)\n\n            \n{\n\n                \nsr\n=\n;\n\n                \nbest\n \n=\n \nabs\n(\nnr\n-\nR\n);\n\n                \nnr\n \n=\n \ni\n;\n\n                \nsr\n \n+=\n \nitc\n(\ni\n);\n\n            \n}\n\n        \n}\n\n        \n//fins smallest G\n\n        \nbest\n \n=\n \n99999999\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \n16\n;\ni\n++\n)\n\n        \n{\n\n            \nng\n \n=\n \ni\n4\n \n|\n \ni\n;\n\n            \nif\n(\nabs\n(\nng\n-\nG\n)\nbest\n)\n\n            \n{\n\n                \nsg\n=\n;\n\n                \nbest\n \n=\n \nabs\n(\nng\n-\nG\n);\n\n                \nng\n \n=\n \ni\n;\n\n                \nsg\n \n+=\n \nitc\n(\ni\n);\n\n            \n}\n\n        \n}\n\n        \n//find smallest B\n\n        \nbest\n \n=\n \n99999999\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \n16\n;\ni\n++\n)\n\n        \n{\n\n            \nnb\n \n=\n \ni\n4\n \n|\n \ni\n;\n\n            \nif\n(\nabs\n(\nnb\n-\nB\n)\nbest\n)\n\n            \n{\n\n                \nsb\n=\n;\n\n                \nbest\n \n=\n \nabs\n(\nnb\n-\nB\n);\n\n                \nnb\n \n=\n \ni\n;\n\n                \nsb\n \n+=\n \nitc\n(\ni\n);\n\n            \n}\n\n        \n}\n\n\n        \nreturn\n \n#\n+\nsr\n+\nsr\n+\nsg\n+\nsg\n+\nsb\n+\nsb\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\nPB.\n801. Minimum Swaps To Make Sequences Increasing\n \u52d5\u614b\u898f\u5283\n\n\n\u5f9e\u984c\u76ee\u7684\u6027\u8cea\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u500b\u968e\u6bb5\u5747\u8981\u4e0d\u65b7\u6c42\u89e3\u9019\u500b\u968e\u6bb5\u662f\u5426\u8981\u4ea4\u63db\uff08\u91cd\u758a\u5b50\u554f\u984c\uff09\uff0c\u4ee5\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5e8f\u5217\u3002\n\u4f46\u662f\u5728\u6bcf\u4e00\u500b\u905e\u589e\u4e2d\uff0c\u5982\u679c\u6bcf\u4e00\u500b\u5143\u7d20\u548c\u5b83\u524d\u4e00\u500b\u5143\u7d20\u90fd\u7b26\u5408\u56b4\u683c\u589e\uff08\u6700\u512a\u5b50\u7d50\u69cb\uff09\uff0c\u90a3\u9ebc\u6574\u500b\u6578\u5217\u4e5f\u6703\u662f\u4e00\u500b\u56b4\u683c\u589e\u3002\n\u6b64\u5916\uff0c\u5982\u679c\u672c\u4f86\u5c31\u7b26\u5408\u56b4\u683c\u589e\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\uff0c\u6216\u662f\u56e0\u70ba\u4e4b\u524d\u7684\u4ea4\u63db(\u81f3i-1)\u800c\u5c0e\u81f4\u7b2ci\u500b\u9700\u8981\u66ff\u63db\uff0c\u4fbf\u9700\u8981\u6aa2\u67e5\u6b64\u6b21\u662f\u5426\u8981\u63db\uff0c\u4e5f\u5c31\u662f\u5411\u524d\u6aa2\u67e5\u5230\u524d\u4e00\u500b\u3002\n\u56e0\u6b64\u65e2\u6709\u7b26\u5408\u91cd\u758a\u5b50\u554f\u984c\uff0c\u53c8\u6709\u6700\u512a\u5b50\u7d50\u69cb\uff0c\u90a3\u5c31\u662f\u52d5\u614b\u898f\u5283\u8a66\u7528\u7684\u7bc4\u570d\u56c9\n\n\u53c3\u8003\u9023\u7d50:\u4ec0\u9ebc\u6642\u5019\u7528\u52d5\u614b\u898f\u5283\u6f14\u7b97\u6cd5\n \n\n\n\u51fa\u984c\u8005\u89e3\u6790\n\n\n\u89e3\u6790\u7684\u7ffb\u8b6f\u7fd4\u898b\u7a0b\u5f0f\u78bc\u4e2d\u7684\u8a3b\u89e3\n \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nint\n \nminSwap\n(\nvector\nint\n \nA\n,\n \nvector\nint\n \nB\n)\n\n    \n{\n\n        \nint\n \nsz\n \n=\n \nA\n.\nsize\n();\n\n        \nvector\nint\n \nswap\n(\nsz\n,\n \nINT_MAX\n),\nunswap\n(\nsz\n,\n \nINT_MAX\n);\n\n        \n//calculating the step of swapped or not till this place.\n\n        \nunswap\n[\n0\n]\n \n=\n \n0\n;\n\n        \nswap\n[\n0\n]\n \n=\n \n1\n;\n\n\n        \nfor\n(\nint\n \ni\n \n=\n \n1\n;\ni\n \n \nsz\n;\ni\n++\n)\n\n        \n{\n\n            \n//\u5982\u679c\u5169\u65b9\u90fd\u4f9d\u7136\u7b26\u5408\u905e\u589e\uff0c\u5247\u53ef\u4ee5\u4e00\u6b21\u63db\u5169\u500bcolumn\u6216\u662f\u90fd\u4e0d\u8981\u63db\uff0c\u56e0\u70ba\u4e4b\u524d\u7684\u5df2\u7d93\u7b26\u5408\u56b4\u683c\u905e\u589e\n\n            \nif\n(\nA\n[\ni\n \n-\n \n1\n]\n \n \nA\n[\ni\n]\n \n \nB\n[\ni\n \n-\n \n1\n]\n \n \nB\n[\ni\n])\n\n            \n//\u63a8\u7406\u904e\u4f86\u5fc5\u5b9a\u4e5f\u6703\u7e7c\u7e8c\u56b4\u683c\u905e\u589e\uff0c\u5426\u5247\u5c31\u6703\u88ab\u66ff\u63db\u4e86\n\n            \n{\n\n                \nunswap\n[\ni\n]\n \n=\n \nmin\n(\nunswap\n[\ni\n \n-\n \n1\n],\n \nunswap\n[\ni\n]);\n\n                \n//\u5982\u679c\u4e0d\u8981\u66ff\u63db\uff0c\u5c31\u662f\u4f9d\u7136\u7dad\u6301\u8ddf\u4e0a\u4e00\u6b21\u4e00\u6a23\u7684\u672a\u66ff\u63db\u6578\u5b57\uff08\u9019\u4e00\u6b21\u662fintmax \u6240\u4ee5\u4e00\u5b9a\u6703\u53d6\u5230\u8f03\u5c0f\u7684\uff09\n\n\n\n                \nswap\n[\ni\n]\n \n=\n \nmin\n(\nswap\n[\ni\n \n-\n \n1\n]\n \n+\n \n1\n,\n \nswap\n[\ni\n]);\n\n                \n//\u5982\u679c\u8981\u66ff\u63db\uff0c\u90a3\u9ebc\u5148\u524d\u7d2f\u7a4d\u7684\u66ff\u63db\u6b21\u6578\u5230\u9019\u88e1\u5c31\u6703\u518d\u591a\u4e00\u6b21\uff0c\u56e0\u70ba\u73fe\u5728\u591a\u7684i\u53c8\u8981\u518d\u63db\u4e00\u6b21\u4e86\u3002\n\n            \n}\n\n\n            \n//\u82e5\u662f\u9019\u7a2e\u4ea4\u53c9\u7b26\u5408\u5f62\uff0c\u5247i\u6216\u662fi-1\u4f4d\u7f6e\u53ef\u4ee5\u6709\u4e00\u500b\u5fc5\u8981\u88ab\u66ff\u63db\uff0c\u4e5f\u5c31\u662fi, i-1\u6703\u6709\u905e\u589e\u5f62\u6210\u3002\uff08\u9019\u7a2e\u610f\u601d\u5c31\u662f\u8aaa\uff0c\u56e0\u70baA B\u7684\u300e\u96d9\u91cd\u7b26\u5408\u300f\u905e\u589e\u5728\u6b64\u88ab\u6253\u65b7\u4e86\u300f\n\n            \n//\u56e0\u70ba\u88ab\u6253\u65b7\uff0c\u52e2\u5fc5\u5f97\u5229\u7528\u4ea4\u63db\u5176\u4e2d\u4e00\u500b\uff0c\u4f8b\u5982\u5c07i or i-1 \u5176\u4e2d\u4e4b\u4e00\u5404\u81ea\u66ff\u63db\u5373\u53ef\u3002\n\n            \nif\n(\nA\n[\ni\n \n-\n \n1\n]\n \n \nB\n[\ni\n]\n \n \nB\n[\ni\n \n-\n \n1\n]\n \n \nA\n[\ni\n])\n\n            \n{\n\n                \nunswap\n[\ni\n]\n \n=\n \nmin\n(\nunswap\n[\ni\n],\n \nswap\n[\ni\n \n-\n \n1\n]);\n\n                \n//\u5982\u679c\u4e0d\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u4f9d\u7136\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u9ebc\u5148\u524d\u7684\u52e2\u5fc5\u90fd\u8981\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5f97\u66ff\u63db\u4e0a\u4e00\u500b\n\n                \n//\u4e5f\u5c31\u662f\u8a0e\u8ad6\u4e32\u88e1\u9762\u6240\u8aaa\u7684\uff1athe cost n2 of having a legal sequence up to column i that ends with column i not flipped, is going //to be the cost s1 of having a legal sequence up to column i-1 that ends in column i-1 flipped\n\n\n                \nswap\n[\ni\n]\n \n=\n \nmin\n(\nunswap\n[\ni\n \n-\n \n1\n]\n \n+\n \n1\n,\n \nswap\n[\ni\n]);\n\n                \n//\u5982\u679c\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u624d\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u5c31\u4ee3\u8868\u5148\u524d\u5230i-1\u90fd\u8981\u662f\u6301\u7e8c\u56b4\u683c\u589e\uff0c\u56e0\u6b64\u5f9e\u9019\u88e1\u958b\u59cb\u66ff\u63db\u5c31\u662f\u7b97\u5148\u524d\u6c92\u66ff\u63db\u4f46\u9019\u500b\u6709\u66ff\u63db\uff0c\u6240\u4ee5\u662f\u5f9eunswap + 1\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nmin\n(\nswap\n[\nsz\n \n-\n \n1\n],\n \nunswap\n[\nsz\n \n-\n \n1\n]);\n\n\n    \n}\n\n\n};\n\n\n\n\n\n\nPC. \n802. Find Eventual Safe States\n \u5716\u8ad6\u7d93\u5178\u984c\uff0c\u67e5\u627e\u74b0\u4ee5\u53ca\u53ef\u80fd\u89f8\u53ca\u74b0\u4e4b\u6240\u6709\u9ede\n\n\n\u5229\u7528\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4f86\u5132\u5b58\u6240\u6709\u9ede\u7684\u985e\u578b -1\u4ee3\u8868\u5c1a\u672a\u8655\u7406 0\u4ee3\u8868\u4e0d\u5728\u74b0\u4e0a\uff0c\u6216\u662f\u4e0d\u53ef\u80fd\u89f8\u53ca\u5230\u4ed6\u4eba\u7684\u74b0 1\u4ee3\u8868\u662f\u74b0\u7684\u4e00\u90e8\u5206\n\u512a\u5316\u53ea\u5c0b\u627e\u9084\u6c92\u8655\u7406\u904e\u5f97\u9ede\uff0c\u5176\u4ed6\u518d\u628a\u6a19\u8a18\u70ba0\u7684\u9ede\uff0c\u653e\u5230\u7d50\u679c\u88e1\u9762\u3002\n\n\u4f46\u4f9d\u7136\u512a\u5316\u4e0d\u5920TLE:( \u5148\u653e\u7f6e\u5427 \n\n\nWrong Answer 37/111 \u8907\u96dc\u7684\u66b4\u529b\u4f5c\u6cd5\uff0c\u9084\u6703\u932f\n \n\n\nTLE 81/111 \u63d0\u65e9\u8df3\u51fa\uff0c\u4f46\u4f9d\u7136TLE\n \n\n\u4ee5\u4e0b\u4ee3\u78bc\u512a\u5316\u5230 101/111 \u4f46\u4f9d\u7136TLE\u4e86 \u5148\u300e\u7cbe\u795e\u300fac\u4e00\u4e0b\u3002\n\u4ee3\u78bc\u908f\u8f2f\u898b\u8a3b\u89e3\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\nint\n \nres\n,\n \nvisited\n,\n \nin_cycle\n;\n\n    \nvector\nint\n \neventualSafeNodes\n(\nvector\nvector\nint\n \ngraph\n)\n\n    \n{\n\n        \nin_cycle\n.\nresize\n(\ngraph\n.\nsize\n());\n\n        \nfill\n(\nin_cycle\n.\nbegin\n(),\n \nin_cycle\n.\nend\n(),\n \n-\n1\n);\n \n//-1 for unprocessed, 1 for in cycle and 0 for not in cycle\n\n        \nFORI\n(\ngraph\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\nin_cycle\n[\ni\n]\n \n==\n \n-\n1\n)\n \n//if this node is not the terminal node\n\n            \n{\n\n                \nif\n(\ngraph\n[\ni\n].\nsize\n())\n \n//the node which unsure in a node should be processed, otherwiswe, just dont do\n\n                \n{\n\n                    \nvisited\n.\nresize\n(\ngraph\n.\nsize\n());\n\n                    \nfill\n(\nvisited\n.\nbegin\n(),\n \nvisited\n.\nend\n(),\n \n0\n);\n\n                    \n// cout\nStart from \ni\nendl;\n\n                    \nif\n(\n!\ndfs\n(\ni\n,\n \ni\n,\n \ngraph\n,\n \n0\n))\n\n                    \n{\n\n                        \nin_cycle\n[\ni\n]\n \n=\n \n0\n;\n\n                    \n}\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nin_cycle\n[\ni\n]\n \n=\n \n0\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n// cout\n is in_cycle \n;\n\n        \nFORI\n(\nin_cycle\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\nin_cycle\n[\ni\n]\n \n==\n \n0\n)\n\n            \n{\n\n                \nres\n.\npush_back\n(\ni\n);\n\n            \n}\n\n            \n// cout\nin_cycle[i]\n \n;\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n    \nbool\n \ndfs\n(\nint\n \ncur_node\n,\n \nint\n \nstart\n,\n \nvector\nvector\nint\n \ngraph\n,\nint\n \nstep\n)\n\n    \n{\n\n        \n// cout\n DFS to \ncur_node\nendl;\n\n        \n// cout\n is in_cycle \n;\n\n        \nFORI\n(\nin_cycle\n.\nsize\n())\n\n        \n{\n\n            \ncout\nin_cycle\n[\ni\n]\n \n;\n\n        \n}\n\n        \n// cout\nendl;\n\n        \nif\n(\nin_cycle\n[\ncur_node\n]\n \n==\n \n1\n)\n\n        \n{\n\n            \n// cout\nHit a node that causes cycle \nendl;\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n        \nelse\n \nif\n(\nin_cycle\n[\ncur_node\n]\n \n==\n \n0\n)\n  \n//reach the node that will not form a cycle, which is safe\n\n        \n{\n\n            \nreturn\n \nfalse\n;\n\n        \n}\n\n        \nif\n(\nvisited\n[\ncur_node\n]\n \n==\n \n1\n)\n \n//visit the visited node again, that is a cycle\n\n        \n{\n\n            \n// cout\nHit a node that visited before, CYCLE CONFIRMED!! now cur_node is \ncur_node\nendl;\n\n            \nin_cycle\n[\ncur_node\n]\n \n=\n \n1\n;\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n\n        \n//traversed_path.push_back(cur_node);\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \n1\n;\n\n        \nFORI\n(\ngraph\n[\ncur_node\n].\nsize\n())\n \n//search the next node that can be traversed from the current node\n\n        \n{\n\n            \n//if this node will connect to its neighbor that forms a circle, than cur_node will be treated as circle-hazard as well\n\n            \n//cout\ni\nendl;\n\n            \nif\n(\ndfs\n(\ngraph\n[\ncur_node\n][\ni\n],\n \nstart\n,\n \ngraph\n,\n \nstep\n \n+\n \n1\n))\n\n            \n{\n\n                \nin_cycle\n[\ncur_node\n]\n \n=\n \n1\n;\n\n                \n// cout\nNode \ncur_node\n connect to \ni\n that forms a cycle \nendl;\n\n                \nreturn\n \ntrue\n;\n\n            \n}\n\n        \n}\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \n0\n;\n \n//if next traverse meet the terminal, it does not count as meet before that form a cycle since terminal is OK to meet again\n\n        \nin_cycle\n[\ncur_node\n]\n \n=\n \n0\n;\n//this node is terminal since the aforementioned FORI wont get in, so this is the node with output degree zero\n\n        \nreturn\n \nfalse\n;\n\n    \n}\n\n\n};", 
            "title": "WC76"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#leetcode_oj-wc76", 
            "text": "Contest time: Mar 18, 2018", 
            "title": "leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#pa-800-similar-rgb-color", 
            "text": "\u5982\u984c\u76ee\u6240\u8ff0\uff0c\u6703\u9700\u8981\u7528\u5230\u4e00\u4e9b\u4f4d\u5143\u904b\u7b97\uff0c\u56e0\u6b64\u7a0d\u5acc\u9ebb\u7169\uff0c\u5c45\u7136\u5beb\u4e86\u4e00\u500b\u591a\u5c0f\u6642\u624d\u5beb\u51fa\u4f86\u3002\n\u4e2d\u9014\u9084\u88ab\u8b8a\u66f4\u7684\u984c\u8aaa\u660e\u800d\u4e86\u4e00\u9053\uff0c\u800c\u4e14\u984c\u76ee\u8aaa\u660e\u6839\u672c\u8aaa\u932f\u4e86gg\u3002  cti itc \u53ef\u4ee5\u5728\u5341\u516d\u9032\u4f4d\u548cchar\u4e92\u76f8\u8f49\u63db\uff0c\u9817\u70ba\u65b9\u4fbf\u3002\u800cstringstream\u53ef\u4ee5\u628a\u5b57\u4e32\u5728\u8996\u70ba\u8f38\u5165\u8655\u7406\u4e00\u6b21\u8f49\u6210\u5341\u516d\u76e1\u4f4d\u5728\u8f38\u5165\u7d66\u6574\u6578\u3002  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75 #define FORI(n) for(int i = 0; i   n; ++ i)  #include   cstdlib  class   Solution  {  public : \n     int   cti ( char   c ) \n     { \n         if   (   0 = c     c = 9   )   return   c - 0 ; \n         else   return   10 + c - a ; \n     } \n     char   itc ( int   i ) \n     { \n         if   ( 0 = i     i = 9 )   return   0 + i ; \n         else   return   a + i - 10 ; \n     } \n     string   similarRGB ( string   color ) \n     { \n         int   dist   =   0 ,   best   =   99999999 ; \n         int   original   =   0 ; \n         color   =   color . substr ( 1 , 6 ); \n         stringstream   ss ; \n         ss hex color ; \n         ss original ; \n\n         int   R , G , B , nr , ng , nb , nr1 , ng1 , nb1 ; \n         string   sr , sg , sb ; \n\n         R = original     0xff0000 ; \n         G = original     0xff00 ; \n         B = original     0xff ; \n         R = 16 ; \n         G = 8 ; \n\n         //find smallest R \n         for ( int   i   =   0 ; i     16 ; i ++ ) \n         { \n             nr   =   i 4   |   i ; \n             if ( abs ( nr - R ) best ) \n             { \n                 sr = ; \n                 best   =   abs ( nr - R ); \n                 nr   =   i ; \n                 sr   +=   itc ( i ); \n             } \n         } \n         //fins smallest G \n         best   =   99999999 ; \n         for ( int   i   =   0 ; i     16 ; i ++ ) \n         { \n             ng   =   i 4   |   i ; \n             if ( abs ( ng - G ) best ) \n             { \n                 sg = ; \n                 best   =   abs ( ng - G ); \n                 ng   =   i ; \n                 sg   +=   itc ( i ); \n             } \n         } \n         //find smallest B \n         best   =   99999999 ; \n         for ( int   i   =   0 ; i     16 ; i ++ ) \n         { \n             nb   =   i 4   |   i ; \n             if ( abs ( nb - B ) best ) \n             { \n                 sb = ; \n                 best   =   abs ( nb - B ); \n                 nb   =   i ; \n                 sb   +=   itc ( i ); \n             } \n         } \n\n         return   # + sr + sr + sg + sg + sb + sb ; \n     }  };", 
            "title": "PA. 800. Similar RGB Color \u9ebb\u7169\u7684\u6c34\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#pb801-minimum-swaps-to-make-sequences-increasing", 
            "text": "\u5f9e\u984c\u76ee\u7684\u6027\u8cea\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u500b\u968e\u6bb5\u5747\u8981\u4e0d\u65b7\u6c42\u89e3\u9019\u500b\u968e\u6bb5\u662f\u5426\u8981\u4ea4\u63db\uff08\u91cd\u758a\u5b50\u554f\u984c\uff09\uff0c\u4ee5\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5e8f\u5217\u3002\n\u4f46\u662f\u5728\u6bcf\u4e00\u500b\u905e\u589e\u4e2d\uff0c\u5982\u679c\u6bcf\u4e00\u500b\u5143\u7d20\u548c\u5b83\u524d\u4e00\u500b\u5143\u7d20\u90fd\u7b26\u5408\u56b4\u683c\u589e\uff08\u6700\u512a\u5b50\u7d50\u69cb\uff09\uff0c\u90a3\u9ebc\u6574\u500b\u6578\u5217\u4e5f\u6703\u662f\u4e00\u500b\u56b4\u683c\u589e\u3002\n\u6b64\u5916\uff0c\u5982\u679c\u672c\u4f86\u5c31\u7b26\u5408\u56b4\u683c\u589e\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\uff0c\u6216\u662f\u56e0\u70ba\u4e4b\u524d\u7684\u4ea4\u63db(\u81f3i-1)\u800c\u5c0e\u81f4\u7b2ci\u500b\u9700\u8981\u66ff\u63db\uff0c\u4fbf\u9700\u8981\u6aa2\u67e5\u6b64\u6b21\u662f\u5426\u8981\u63db\uff0c\u4e5f\u5c31\u662f\u5411\u524d\u6aa2\u67e5\u5230\u524d\u4e00\u500b\u3002\n\u56e0\u6b64\u65e2\u6709\u7b26\u5408\u91cd\u758a\u5b50\u554f\u984c\uff0c\u53c8\u6709\u6700\u512a\u5b50\u7d50\u69cb\uff0c\u90a3\u5c31\u662f\u52d5\u614b\u898f\u5283\u8a66\u7528\u7684\u7bc4\u570d\u56c9 \u53c3\u8003\u9023\u7d50:\u4ec0\u9ebc\u6642\u5019\u7528\u52d5\u614b\u898f\u5283\u6f14\u7b97\u6cd5    \u51fa\u984c\u8005\u89e3\u6790  \u89e3\u6790\u7684\u7ffb\u8b6f\u7fd4\u898b\u7a0b\u5f0f\u78bc\u4e2d\u7684\u8a3b\u89e3     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41 #define FORI(n) for(int i = 0; i   n; ++ i)  class   Solution   {  public : \n     int   minSwap ( vector int   A ,   vector int   B ) \n     { \n         int   sz   =   A . size (); \n         vector int   swap ( sz ,   INT_MAX ), unswap ( sz ,   INT_MAX ); \n         //calculating the step of swapped or not till this place. \n         unswap [ 0 ]   =   0 ; \n         swap [ 0 ]   =   1 ; \n\n         for ( int   i   =   1 ; i     sz ; i ++ ) \n         { \n             //\u5982\u679c\u5169\u65b9\u90fd\u4f9d\u7136\u7b26\u5408\u905e\u589e\uff0c\u5247\u53ef\u4ee5\u4e00\u6b21\u63db\u5169\u500bcolumn\u6216\u662f\u90fd\u4e0d\u8981\u63db\uff0c\u56e0\u70ba\u4e4b\u524d\u7684\u5df2\u7d93\u7b26\u5408\u56b4\u683c\u905e\u589e \n             if ( A [ i   -   1 ]     A [ i ]     B [ i   -   1 ]     B [ i ]) \n             //\u63a8\u7406\u904e\u4f86\u5fc5\u5b9a\u4e5f\u6703\u7e7c\u7e8c\u56b4\u683c\u905e\u589e\uff0c\u5426\u5247\u5c31\u6703\u88ab\u66ff\u63db\u4e86 \n             { \n                 unswap [ i ]   =   min ( unswap [ i   -   1 ],   unswap [ i ]); \n                 //\u5982\u679c\u4e0d\u8981\u66ff\u63db\uff0c\u5c31\u662f\u4f9d\u7136\u7dad\u6301\u8ddf\u4e0a\u4e00\u6b21\u4e00\u6a23\u7684\u672a\u66ff\u63db\u6578\u5b57\uff08\u9019\u4e00\u6b21\u662fintmax \u6240\u4ee5\u4e00\u5b9a\u6703\u53d6\u5230\u8f03\u5c0f\u7684\uff09 \n\n\n                 swap [ i ]   =   min ( swap [ i   -   1 ]   +   1 ,   swap [ i ]); \n                 //\u5982\u679c\u8981\u66ff\u63db\uff0c\u90a3\u9ebc\u5148\u524d\u7d2f\u7a4d\u7684\u66ff\u63db\u6b21\u6578\u5230\u9019\u88e1\u5c31\u6703\u518d\u591a\u4e00\u6b21\uff0c\u56e0\u70ba\u73fe\u5728\u591a\u7684i\u53c8\u8981\u518d\u63db\u4e00\u6b21\u4e86\u3002 \n             } \n\n             //\u82e5\u662f\u9019\u7a2e\u4ea4\u53c9\u7b26\u5408\u5f62\uff0c\u5247i\u6216\u662fi-1\u4f4d\u7f6e\u53ef\u4ee5\u6709\u4e00\u500b\u5fc5\u8981\u88ab\u66ff\u63db\uff0c\u4e5f\u5c31\u662fi, i-1\u6703\u6709\u905e\u589e\u5f62\u6210\u3002\uff08\u9019\u7a2e\u610f\u601d\u5c31\u662f\u8aaa\uff0c\u56e0\u70baA B\u7684\u300e\u96d9\u91cd\u7b26\u5408\u300f\u905e\u589e\u5728\u6b64\u88ab\u6253\u65b7\u4e86\u300f \n             //\u56e0\u70ba\u88ab\u6253\u65b7\uff0c\u52e2\u5fc5\u5f97\u5229\u7528\u4ea4\u63db\u5176\u4e2d\u4e00\u500b\uff0c\u4f8b\u5982\u5c07i or i-1 \u5176\u4e2d\u4e4b\u4e00\u5404\u81ea\u66ff\u63db\u5373\u53ef\u3002 \n             if ( A [ i   -   1 ]     B [ i ]     B [ i   -   1 ]     A [ i ]) \n             { \n                 unswap [ i ]   =   min ( unswap [ i ],   swap [ i   -   1 ]); \n                 //\u5982\u679c\u4e0d\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u4f9d\u7136\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u9ebc\u5148\u524d\u7684\u52e2\u5fc5\u90fd\u8981\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5f97\u66ff\u63db\u4e0a\u4e00\u500b \n                 //\u4e5f\u5c31\u662f\u8a0e\u8ad6\u4e32\u88e1\u9762\u6240\u8aaa\u7684\uff1athe cost n2 of having a legal sequence up to column i that ends with column i not flipped, is going //to be the cost s1 of having a legal sequence up to column i-1 that ends in column i-1 flipped \n\n                 swap [ i ]   =   min ( unswap [ i   -   1 ]   +   1 ,   swap [ i ]); \n                 //\u5982\u679c\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u624d\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u5c31\u4ee3\u8868\u5148\u524d\u5230i-1\u90fd\u8981\u662f\u6301\u7e8c\u56b4\u683c\u589e\uff0c\u56e0\u6b64\u5f9e\u9019\u88e1\u958b\u59cb\u66ff\u63db\u5c31\u662f\u7b97\u5148\u524d\u6c92\u66ff\u63db\u4f46\u9019\u500b\u6709\u66ff\u63db\uff0c\u6240\u4ee5\u662f\u5f9eunswap + 1 \n             } \n         } \n         return   min ( swap [ sz   -   1 ],   unswap [ sz   -   1 ]); \n\n     }  };", 
            "title": "PB.801. Minimum Swaps To Make Sequences Increasing \u52d5\u614b\u898f\u5283"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#pc-802-find-eventual-safe-states", 
            "text": "\u5229\u7528\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4f86\u5132\u5b58\u6240\u6709\u9ede\u7684\u985e\u578b -1\u4ee3\u8868\u5c1a\u672a\u8655\u7406 0\u4ee3\u8868\u4e0d\u5728\u74b0\u4e0a\uff0c\u6216\u662f\u4e0d\u53ef\u80fd\u89f8\u53ca\u5230\u4ed6\u4eba\u7684\u74b0 1\u4ee3\u8868\u662f\u74b0\u7684\u4e00\u90e8\u5206\n\u512a\u5316\u53ea\u5c0b\u627e\u9084\u6c92\u8655\u7406\u904e\u5f97\u9ede\uff0c\u5176\u4ed6\u518d\u628a\u6a19\u8a18\u70ba0\u7684\u9ede\uff0c\u653e\u5230\u7d50\u679c\u88e1\u9762\u3002 \n\u4f46\u4f9d\u7136\u512a\u5316\u4e0d\u5920TLE:( \u5148\u653e\u7f6e\u5427   Wrong Answer 37/111 \u8907\u96dc\u7684\u66b4\u529b\u4f5c\u6cd5\uff0c\u9084\u6703\u932f    TLE 81/111 \u63d0\u65e9\u8df3\u51fa\uff0c\u4f46\u4f9d\u7136TLE   \n\u4ee5\u4e0b\u4ee3\u78bc\u512a\u5316\u5230 101/111 \u4f46\u4f9d\u7136TLE\u4e86 \u5148\u300e\u7cbe\u795e\u300fac\u4e00\u4e0b\u3002\n\u4ee3\u78bc\u908f\u8f2f\u898b\u8a3b\u89e3  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 #define FORI(n) for(int i = 0; i   n; ++ i)  class   Solution  {  public : \n     vector int   res ,   visited ,   in_cycle ; \n     vector int   eventualSafeNodes ( vector vector int   graph ) \n     { \n         in_cycle . resize ( graph . size ()); \n         fill ( in_cycle . begin (),   in_cycle . end (),   - 1 );   //-1 for unprocessed, 1 for in cycle and 0 for not in cycle \n         FORI ( graph . size ()) \n         { \n             if ( in_cycle [ i ]   ==   - 1 )   //if this node is not the terminal node \n             { \n                 if ( graph [ i ]. size ())   //the node which unsure in a node should be processed, otherwiswe, just dont do \n                 { \n                     visited . resize ( graph . size ()); \n                     fill ( visited . begin (),   visited . end (),   0 ); \n                     // cout Start from  i endl; \n                     if ( ! dfs ( i ,   i ,   graph ,   0 )) \n                     { \n                         in_cycle [ i ]   =   0 ; \n                     } \n                 } \n                 else \n                 { \n                     in_cycle [ i ]   =   0 ; \n                 } \n             } \n         } \n         // cout  is in_cycle  ; \n         FORI ( in_cycle . size ()) \n         { \n             if ( in_cycle [ i ]   ==   0 ) \n             { \n                 res . push_back ( i ); \n             } \n             // cout in_cycle[i]   ; \n         } \n         return   res ; \n     } \n     bool   dfs ( int   cur_node ,   int   start ,   vector vector int   graph , int   step ) \n     { \n         // cout  DFS to  cur_node endl; \n         // cout  is in_cycle  ; \n         FORI ( in_cycle . size ()) \n         { \n             cout in_cycle [ i ]   ; \n         } \n         // cout endl; \n         if ( in_cycle [ cur_node ]   ==   1 ) \n         { \n             // cout Hit a node that causes cycle  endl; \n             return   true ; \n         } \n         else   if ( in_cycle [ cur_node ]   ==   0 )    //reach the node that will not form a cycle, which is safe \n         { \n             return   false ; \n         } \n         if ( visited [ cur_node ]   ==   1 )   //visit the visited node again, that is a cycle \n         { \n             // cout Hit a node that visited before, CYCLE CONFIRMED!! now cur_node is  cur_node endl; \n             in_cycle [ cur_node ]   =   1 ; \n             return   true ; \n         } \n\n         //traversed_path.push_back(cur_node); \n         visited [ cur_node ]   =   1 ; \n         FORI ( graph [ cur_node ]. size ())   //search the next node that can be traversed from the current node \n         { \n             //if this node will connect to its neighbor that forms a circle, than cur_node will be treated as circle-hazard as well \n             //cout i endl; \n             if ( dfs ( graph [ cur_node ][ i ],   start ,   graph ,   step   +   1 )) \n             { \n                 in_cycle [ cur_node ]   =   1 ; \n                 // cout Node  cur_node  connect to  i  that forms a cycle  endl; \n                 return   true ; \n             } \n         } \n         visited [ cur_node ]   =   0 ;   //if next traverse meet the terminal, it does not count as meet before that form a cycle since terminal is OK to meet again \n         in_cycle [ cur_node ]   =   0 ; //this node is terminal since the aforementioned FORI wont get in, so this is the node with output degree zero \n         return   false ; \n     }  };", 
            "title": "PC. 802. Find Eventual Safe States \u5716\u8ad6\u7d93\u5178\u984c\uff0c\u67e5\u627e\u74b0\u4ee5\u53ca\u53ef\u80fd\u89f8\u53ca\u74b0\u4e4b\u6240\u6709\u9ede"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC78/", 
            "text": "leetcode_OJ WC78 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Apr 1, 2018\n\n\n\n\nPA. \n811. Subdomain Visit Count\n substr + map \u6d3b\u7528\u6c34\u984c\n\n\n\n\n\u601d\u8def\uff1a\u7c21\u55ae\u7684\u6c34\u984c\uff0c\u7528substr\u88c1\u5207\u7db2\u57df\u540d\u7a31\u5f8c\u518dhash\u5230\u7d71\u8a08\u6578\u5b57\uff0c\u4ee5stoi\u51fd\u6578\u4f86\u5c07string\u7684\u6578\u5b57\u8f49\u6210\u7d71\u8a08\u503c\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\n#define pb push_back\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\nstring\n \nsubdomainVisits\n(\nvector\nstring\n \ncpdomains\n)\n\n    \n{\n\n        \nmap\nstring\n \n,\nint\n \nmymap\n;\n\n        \nvector\nvector\n \nint\n \n \ndotpos\n;\n\n        \nvector\nint\n \nvisit\n;\n \n//each domain visit\n\n        \ndotpos\n.\nresize\n(\ncpdomains\n.\nsize\n());\n\n        \n//cpdomains[i].size() - 1\n\n        \nFORI\n(\ncpdomains\n.\nsize\n())\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \ncpdomains\n[\ni\n].\nsize\n()\n \n-\n \n1\n;\n \nj\n \n=\n \n0\n;\n \nj\n--\n)\n\n            \n{\n\n                \nif\n(\ncpdomains\n[\ni\n][\nj\n]\n \n==\n \n.\n)\n\n                \n{\n\n                    \ndotpos\n[\ni\n].\npb\n(\nj\n);\n\n                \n}\n\n                \nelse\n \nif\n(\ncpdomains\n[\ni\n][\nj\n]\n \n==\n \n \n)\n\n                \n{\n\n                    \ndotpos\n[\ni\n].\npb\n(\nj\n);\n\n                    \nbreak\n;\n\n                \n}\n\n            \n}\n\n        \n}\n \n//subdomain pos\n\n        \nstring\n \ntmp\n;\n\n        \nFORI\n(\ncpdomains\n.\nsize\n())\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n \ncpdomains\n[\ni\n].\nsize\n();\n \nj\n++\n)\n\n            \n{\n\n                \nif\n(\ncpdomains\n[\ni\n][\nj\n]\n \n==\n \n \n)\n\n                \n{\n\n                    \ntmp\n \n=\n \ncpdomains\n[\ni\n].\nsubstr\n(\n0\n,\nj\n \n+\n \n1\n);\n\n                    \nint\n \ntmp2\n \n=\n \nstoi\n(\ntmp\n);\n\n                    \nvisit\n.\npb\n(\ntmp2\n);\n\n                    \nbreak\n;\n\n                \n}\n\n            \n}\n\n        \n}\n \n//times\n\n        \nint\n \nposcnt\n \n=\n \n0\n;\n\n        \nFORI\n(\ncpdomains\n.\nsize\n())\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n \ndotpos\n[\ni\n].\nsize\n();\n \nj\n++\n)\n\n            \n{\n\n                \ntmp\n \n=\n \ncpdomains\n[\ni\n].\nsubstr\n(\ndotpos\n[\ni\n][\nj\n]\n \n+\n \n1\n,\n \ncpdomains\n[\ni\n].\nsize\n()\n \n-\n \ndotpos\n[\ni\n][\nj\n]\n \n+\n \n1\n);\n\n                \nmymap\n[\ntmp\n]\n \n+=\n \nvisit\n[\ni\n];\n\n            \n}\n\n        \n}\n//accumulate\n\n\n        \nvector\nstring\n \nres\n;\n\n        \nstring\n \ntimestr\n;\n\n        \nfor\n(\nmap\nstring\n,\n \nint\n::\niterator\n \nit\n \n=\n \nmymap\n.\nbegin\n();\n \nit\n \n!=\n \nmymap\n.\nend\n();\n \n++\nit\n)\n\n        \n{\n\n            \ntimestr\n \n=\n \nto_string\n(\nit\n-\nsecond\n);\n\n            \nres\n.\npb\n(\ntimestr\n \n+\n \n \n \n+\n \nit\n-\nfirst\n);\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPB.\n809. Expressive Words\n \u5b57\u4e32\u96d9\u6307\u6a19\u63a8\u7406\u89c0\u5bdf\u984c\n\n\n\n\n\u601d\u8def\uff1a\u4e0d\u7b97\u96e3\u7684\u984c\u76ee\uff0c\u53ea\u662f\u984c\u76ee\u6709\u9ede\u542b\u7cca\u4e0d\u597d\u61c2\uff0c\u5be6\u969b\u4e0a\u610f\u601d\u70ba \u82e5\u4ee5word\u7684char\u4f86\u5ef6\u4f38\u6210\u529f\uff08\u5ef6\u4f38\u6210\u529f\u7684\u5b9a\u7fa9\u70ba\uff1a\u4e26\u5217\u7684char\u9054\u5230\u4e09\u500b\u4ee5\u4e0a\uff09\"\u4e26\u4e14\" \u7d93\u7531\u6210\u529f\u5ef6\u4f38\u7684char\n\u6700\u5f8c\u80fd\u9054\u5230\u76ee\u6a19\u5b57\u4e32\uff0c\u4fbf\u662f\u4e00\u500bexpressive word\u8f49\u63db\n\u4f8b\u5982\uff1adddiiiinnssssssoooo \u82e5\u70ba\u76ee\u6a19\u5b57\u4e32\n\u5247 dinnsoo \u53ef\u4ee5 \u56e0\u70ba d+dd(\u5ef6\u4f38\u9054\u52303) i+iii(\u5ef6\u4f38\u9054\u52304) nn=nn s+sssss(\u5ef6\u4f38\u9054\u52306) o+ooo(\u5ef6\u4f38\u9054\u52304) \u6700\u5f8c\u80fd\u7d44\u6210\u76ee\u6a19\u5b57\u4e32\nddinnso\u4e5f\u53ef(\u7576\u521d\u4ee5\u70ba\u8981dd\u8996\u70ba\u4e00\u7d44\u4f86\u5ef6\u795e \uff0c\u800cddd / dd \u53ea\u67091.5\u500d\u4e0d\u884c\uff0c\u7136\u800c\u984c\u76ee\u53ea\u8981\u6c42\u5ef6\u4f38\uff0c\u56e0\u6b64\u4e5f\u80fd\u7528\u55ae\u4e00\u5b57\u5143\u6e4a\u6210\uff0c\u662f\u6545\u4ee5\u55ae\u4e00\u5b57\u5143\u5ef6\u4f38\u662f\u4e00\u7a2e\u4fdd\u96aa\u7684\u4f5c\u6cd5)\n\n\n\n\n\u53c8\u5982 ddinsoo\u4fbf\u4e0d\u884c\uff0c\u4e43\u662f\u65bc n+n\u53ea\u5ef6\u4f38\u4e86\u5169\u6b21\uff0c\u7121\u6cd5\u9054\u9663\uff0c\u56e0\u6b64\u52e2\u5fc5\u7121\u6cd5\u505a\u6210\u539f\u672c\u7684\u76ee\u6a19\u5b57\u4e32\u800c\u653e\u68c4\u3002\n\n\n\u7528\u4e0a\u8ff0\u7684\u60f3\u6cd5\u4fbf\u80fd\u5beb\u51fa\u4ee5\u4e0bac\u4ee3\u78bc\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n#define FORI(n) for(int i = 0; i \n n; ++ i)\n\n\n#define pb push_back\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nexpressiveWords\n(\nstring\n \nstr\n,\n \nvector\nstring\n \nwords\n)\n\n    \n{\n\n        \nint\n \nres\n \n=\n \n0\n,\n \ncan\n \n=\n \n0\n,\n \ncnt\n \n=\n \n0\n,\n \ntotal_len\n \n=\n \n0\n,\n \nextend_len\n \n=\n \n0\n,\n \ngroup_len\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n \nwords\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \ncan\n \n=\n \n1\n;\n \n//can --\n \u53ef\u5ef6\u4f38\u6e4a\u51fa\u7d50\u679c\n\n            \nint\n \nk\n \n=\n \n0\n;\n\n            \ntotal_len\n \n=\n \nwords\n[\ni\n].\nsize\n();\n \n//\u7b2ci\u500b\u6aa2\u6e2cword\u7684\u9577\u5ea6\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\nj\n \n \nwords\n[\ni\n].\nsize\n();)\n\n            \n{\n\n                \nextend_len\n \n=\n \n0\n;\n\n                \ngroup_len\n \n=\n \n1\n;\n\n                \nif\n(\nwords\n[\ni\n][\nj\n]\n \n!=\n \nstr\n[\nk\n])\n\n                \n{\n\n                    \ncan\n \n=\n \n0\n;\n \n//\u82e5\u6709\u4e0d\u4e00\u6a23\u7684\uff0c\u52e2\u5fc5\u7121\u6cd5\u6e4a\u6210\uff0c\n\n                    \nbreak\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nwhile\n(\nj\n \n!=\n \nwords\n[\ni\n].\nsize\n()\n \n-\n \n1\n \n \nwords\n[\ni\n][\nj\n \n+\n \n1\n]\n \n==\n \nwords\n[\ni\n][\nj\n])\n \n//\u627e\u51fa\u5728word\u4e2d\uff0c\u76f8\u9023\u4e00\u6a23\u7684\u7d44\u6210\u4e00\u7fa4\u7684\u9577\u5ea6\n\n                    \n{\n\n                        \nj\n++\n;\n\n                        \ngroup_len\n++\n;\n\n                    \n}\n\n                    \nwhile\n(\n1\n)\n \n//able to extend\n\n                    \n{\n\n                        \nif\n(\nwords\n[\ni\n][\nj\n]\n \n==\n \nstr\n[\nk\n])\n//\u5ef6\u4f38\n\n                        \n{\n\n                            \nk\n++\n;\n\n                            \nextend_len\n++\n;\n\n                        \n}\n\n                        \nelse\n \n//\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa\n\n                        \n{\n\n                            \n// can = 0; \u9019\u500bcan = 0\u4e0d\u53ef\u4ee5\u52a0\uff0c\u56e0\u70ba\u9019\u662f\u518d\u5ef6\u6df1\u5f8c\u5224\u65b7\u8df3\u51fa\u7684\u689d\u4ef6\uff0c\u4e26\u4e0d\u662f\u767c\u73femismatch\n\n                            \nbreak\n;\n\n                        \n}\n\n                    \n}\n\n\n                    \n//last character extend\n\n                    \nwhile\n(\nk\n \n \nstr\n.\nsize\n()\n \n \nj\n \n==\n \nwords\n[\ni\n].\nsize\n()\n-\n1\n)\n \n//\u7d50\u5c3e\u7279\u4f8b\uff0c\u7e7c\u7e8c\u5ef6\u4f38\n\n                    \n{\n\n                        \nif\n(\nwords\n[\ni\n][\nj\n]\n \n==\n \nstr\n[\nk\n])\n \n//\u5ef6\u4f38\n\n                        \n{\n\n                            \nk\n++\n;\n\n                            \nextend_len\n++\n;\n\n                        \n}\n\n                        \nelse\n \n//\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa\n\n                        \n{\n\n                            \ncan\n \n=\n \n0\n;\n \n//\u5728\u6b64\u7684can \u4fbf\u8981\u52a0\u5165 = 0 \u4f8b\u5982 target = abcd \u4f46\u662f word = abc \u800c \u6b64\u6642j\u6703\u5361\u5728size - 1 \u4e4b\u5f8ck\u7e7c\u7e8c\u8d70\u5230d\u767c\u73fe\u4e0d\u4e00\u6a23\u4fbf\u662f\u7121\u6cd5\u7d44\u6210\n\n                            \nbreak\n;\n\n                        \n}\n\n                    \n}\n\n\n                    \nif\n(\nextend_len\n \n \ngroup_len\n)\n \n//\u82e5\u5ef6\u4f38\u7684\u9577\u5ea6\u5c0f\u65bc\u539f\u672c\u9577\u5ea6\u4e5f\u4e0d\u884c\n\n                    \n{\n\n                        \ncan\n \n=\n \n0\n;\n\n                        \nbreak\n;\n\n                    \n}\n\n\n                    \nif\n(\nextend_len\n \n=\n \n3\n)\n \n//if extend, should \n=3 (as a group per unit)\n\n                    \n{\n\n                        \ntotal_len\n \n+=\n \nextend_len\n \n-\n \ngroup_len\n \n;\n \n// aa\u5ef6\u4f38\u6210 aaaa \u5ef6\u4f38\u7684\u9577\u5ea6\u70ba 2 \u800c\u975e 4 \u6545\u8981\u6263\u9664\u672c\u8eab\u7fa4\u7d44\u9577\u5ea6\n\n                    \n}\n\n                    \nj\n++\n;\n\n                \n}\n\n            \n}\n\n            \nif\n(\ntotal_len\n \n!=\n \nstr\n.\nsize\n())\n \n//\u82e5\u6700\u5f8c\u4f9d\u7136\u9577\u5ea6\u9644\u7b49\uff0c\u4e5f\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6545can=0\n\n            \n{\n\n                \ncan\n \n=\n \n0\n;\n\n            \n}\n\n            \nif\n(\ncan\n)\n\n            \n{\n\n                \nres\n++\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPC. \n808. Soup Servings\n \u6709\u9ede\u96e3\u89c0\u5bdf\u51fa\u898f\u5f8b\u7684\u52d5\u614b\u898f\u5283\u984c(\u65bd\u5de5\u4e2d)\n\n\n\n\n\u601d\u8def\uff1a\u4ee5\u6bcf25\u6beb\u5347\u70ba\u55ae\u4f4d\u5207\u5272\uff0c\u56e0\u6b64\u5148\u628aa b\u6e6f\u7a2e\u7684\u4efd\u91cf/25\u5316\u7e41\u70ba\u7c21\u3002\n\n\u63a5\u8457\uff0c\u4ee5dp\u8868\u793a\u300e\u5df2\u7d93\u6d88\u8cbb\u7684\u6e6f\u7a2e\u4efd\u91cf\u300f a\u6e6f\u7a2e\u70barow b\u70bacol\uff0c\u7531\u65bc\u6bcf\u4e00\u683c\u5747\u4ee3\u8868\u6d88\u8017\u7684\u4efd\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u63a1\u7528\u7531\u5e95\u5c64\u63a8\u4e0a\u4f86\u7684\u65b9\u5f0f\uff0c\u5c07\u6bcf\u4e00\u683c\u7531\u4e4b\u524d\u7684\u56db\u9805\u9ede\u63a8\u5f97\uff0c\u4e26\u4e14\u9010\u6b65\u69cb\u7bc9\u5230serve\u4efd\u3002\n\n\u800c\u7336\u5982\u984c\u76ee\u6240\u8aaa\uff0c\u540c\u6642\u8b93ab\u6e6f\u7a2e\u8017\u76e1\u6642\uff0c\u9700\u8981\u4e58\u4e0a0.5\u7684\u4fc2\u6578\uff0c\u800c\u8017\u76e1a\u6e6f\u7a2e\uff0c\u56e0\u70ba\u662f\u76ee\u6a19\uff0c\u6545\u4e58\u4e0a1\u4fc2\u6578\uff0c\u7136\u800c\u8017\u76e1b\u6e6f\u7a2e\u4e26\u4e0d\u662f\u6211\u5011\u6240\u8981\u7684\uff0c\u6545\u4e58\u4e0a0\u4fc2\u6578\n\n\u5982\u4e0b\u67e5\u770b\u6bcf\u4e00\u7a2e\u6d88\u8cbb\uff08\u5be6\u969b\u4e0a\u662f\u5f9e0 0\u958b\u59cb\u770b\u300e\u5df2\u7d93\u300f\u6d88\u8017\u7684\u6e6f\u7a2e\u4efd\u91cf\uff0c\u6162\u6162\u758a\u5230serve\u4efd\uff0c\u9700\u6ce8\u610f\u8981\u5c07serve + 1\u4f86\u4f5c\u70badp\u65b9\u9663\u7684\u56e0\u5728\u65bc\u6211\u5011\u8981\u6d88\u8017\u52300\u4efd\u800c\u975e1\u4efd\uff0c\u56e0\u6b64\u5728dp\u8868\u683c\u5fc5\u9808 + 1\u4f5c\u70ba\u521d\u59cb\u5316\u7684\u5927\u5c0f\u908a\u754c\uff0c\u6700\u5f8c\u8ff4\u5708\u4e5f\u8dd1\u5230\u7b49\u65bcserve\u624d\u505c\u4e0b\uff0c\u800c\u975e\u5c0f\u65bcserve\n\n\n\n\n\u4ee5\u4e0b\u70ba\u8fed\u4ee3\u7248\u672c\u7684\u7a0b\u5f0f\u78bc\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nif\n(\ni\n \n-\n \n4\n \n=\n \n0\n \n \nj\n \n=\n0\n)\n\n\n{\n\n    \ndir1\n \n=\n \n0.5\n;\n\n\n}\n\n\nelse\n \nif\n(\ni\n \n-\n \n4\n \n=\n \n0\n)\n\n\n{\n\n    \ndir1\n \n=\n \n1\n;\n\n\n}\n\n\nelse\n \nif\n(\nj\n \n=\n \n0\n)\n\n\n{\n\n    \ndir1\n \n=\n \n0\n;\n\n\n}\n\n\nelse\n\n\n{\n\n    \ndir1\n \n=\n \ndp\n[\ni\n \n-\n \n4\n][\nj\n];\n\n\n}\n\n\n\n\n\n\n(\u5728\u984c\u76ee\u4ee5\u4e0b\u7684\u6bcf\u500b\u56de\u5708\u5224\u65b7\u5f0f\u4fbf\u53ef\u4ee5\u770b\u5230\uff0c\u8a73\u7d30\u5206\u6790\u8acb\u898b\u7a0b\u5f0f\u78bc\u8a3b\u89e3)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \ndouble\n \nsoupServings\n(\nint\n \nall\n)\n\n    \n{\n\n        \nif\n(\nall\n \n \n6000\n)\n \n//monotonically increasing since A is always used more than B. (by empirical method)\n\n            \nreturn\n \n1.0\n;\n\n\n        \nint\n \nserve\n \n=\n \nceil\n(\nall\n \n/\n \n25.0\n)\n \n;\n \n//25 ml as a serving unit,\n\n        \n//\u4e00\u5b9a\u8981\u7528ceil\u56e0\u70ba\u5373\u4fbf\u662f\u6c92\u6709\u6eff25ml\u4e5f\u8981\u5b8c\u6574\u7684\u8655\u7406\u5b8c\u7562\uff0c\u6545\u5f97\u7528ceil\u4f86\u5c07\u672a\u6eff\u4e00\u55ae\u4f4d\u7684\u6e6f\u7a2e\u8655\u7406\uff0c\u65e2\u6709\u7684cpp\u9664\u6cd5\u6703\u6368\u53bb\n\n        \nvector\nvector\n \ndouble\n \n \ndp\n(\nserve\n \n+\n \n1\n,\n \nvector\ndouble\n(\nserve\n \n+\n \n1\n,\n \n0\n));\n \n//each grid represent the rest amount(unit) of a and be which //comes to here\n\n        \n//A row, B col\n\n        \ndouble\n \ndir1\n,\n \ndir2\n,\n \ndir3\n,\n \ndir4\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n=\n \nserve\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n=\n \nserve\n;\n \nj\n++\n)\n\n            \n{\n\n                \nif\n(\ni\n \n-\n \n4\n \n=\n \n0\n \n \nj\n \n=\n0\n)\n\n                \n{\n\n                    \ndir1\n \n=\n \n0.5\n;\n\n                \n}\n\n                \nelse\n \nif\n(\ni\n \n-\n \n4\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir1\n \n=\n \n1\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nj\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir1\n \n=\n \n0\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \ndir1\n \n=\n \ndp\n[\ni\n \n-\n \n4\n][\nj\n];\n\n                \n}\n\n\n                \nif\n(\ni\n \n-\n \n3\n \n=\n \n0\n \n \nj\n \n-\n \n1\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir2\n \n=\n \n0.5\n;\n\n                \n}\n\n                \nelse\n \nif\n(\ni\n \n-\n \n3\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir2\n \n=\n \n1\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nj\n \n-\n \n1\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir2\n \n=\n \n0\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \ndir2\n \n=\n \ndp\n[\ni\n \n-\n \n3\n][\nj\n \n-\n \n1\n];\n\n                \n}\n\n\n\n                \nif\n(\ni\n \n-\n \n2\n \n=\n \n0\n \n \nj\n \n-\n \n2\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir3\n \n=\n \n0.5\n;\n\n                \n}\n\n                \nelse\n \nif\n(\ni\n \n-\n \n2\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir3\n \n=\n \n1\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nj\n \n-\n \n2\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir3\n \n=\n \n0\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \ndir3\n \n=\n \ndp\n[\ni\n \n-\n \n2\n][\nj\n \n-\n \n2\n];\n\n                \n}\n\n\n\n                \nif\n(\ni\n \n-\n \n1\n \n=\n \n0\n \n \nj\n \n-\n \n3\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir4\n \n=\n \n0.5\n;\n\n                \n}\n\n                \nelse\n \nif\n(\ni\n \n-\n \n1\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir4\n \n=\n \n1\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nj\n \n-\n \n3\n \n=\n \n0\n)\n\n                \n{\n\n                    \ndir4\n \n=\n \n0\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \ndir4\n \n=\n \ndp\n[\ni\n \n-\n \n1\n][\nj\n \n-\n \n3\n];\n\n                \n}\n\n                \ndp\n[\ni\n][\nj\n]\n \n=\n \n0.25\n \n*\n \n(\ndir1\n \n+\n \ndir2\n \n+\n \ndir3\n \n+\n \ndir4\n);\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ndp\n[\nserve\n][\nserve\n];\n\n    \n}\n\n\n};", 
            "title": "WC78"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#leetcode_oj-wc78", 
            "text": "Contest time: Apr 1, 2018", 
            "title": "leetcode_OJ WC78 \u89e3\u984c\u5fc3\u5f97"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#pa-811-subdomain-visit-count-substr-map", 
            "text": "\u601d\u8def\uff1a\u7c21\u55ae\u7684\u6c34\u984c\uff0c\u7528substr\u88c1\u5207\u7db2\u57df\u540d\u7a31\u5f8c\u518dhash\u5230\u7d71\u8a08\u6578\u5b57\uff0c\u4ee5stoi\u51fd\u6578\u4f86\u5c07string\u7684\u6578\u5b57\u8f49\u6210\u7d71\u8a08\u503c  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 #define FORI(n) for(int i = 0; i   n; ++ i)  #define pb push_back  class   Solution  {  public : \n     vector string   subdomainVisits ( vector string   cpdomains ) \n     { \n         map string   , int   mymap ; \n         vector vector   int     dotpos ; \n         vector int   visit ;   //each domain visit \n         dotpos . resize ( cpdomains . size ()); \n         //cpdomains[i].size() - 1 \n         FORI ( cpdomains . size ()) \n         { \n             for ( int   j   =   cpdomains [ i ]. size ()   -   1 ;   j   =   0 ;   j -- ) \n             { \n                 if ( cpdomains [ i ][ j ]   ==   . ) \n                 { \n                     dotpos [ i ]. pb ( j ); \n                 } \n                 else   if ( cpdomains [ i ][ j ]   ==     ) \n                 { \n                     dotpos [ i ]. pb ( j ); \n                     break ; \n                 } \n             } \n         }   //subdomain pos \n         string   tmp ; \n         FORI ( cpdomains . size ()) \n         { \n             for ( int   j   =   0 ;   j     cpdomains [ i ]. size ();   j ++ ) \n             { \n                 if ( cpdomains [ i ][ j ]   ==     ) \n                 { \n                     tmp   =   cpdomains [ i ]. substr ( 0 , j   +   1 ); \n                     int   tmp2   =   stoi ( tmp ); \n                     visit . pb ( tmp2 ); \n                     break ; \n                 } \n             } \n         }   //times \n         int   poscnt   =   0 ; \n         FORI ( cpdomains . size ()) \n         { \n             for ( int   j   =   0 ;   j     dotpos [ i ]. size ();   j ++ ) \n             { \n                 tmp   =   cpdomains [ i ]. substr ( dotpos [ i ][ j ]   +   1 ,   cpdomains [ i ]. size ()   -   dotpos [ i ][ j ]   +   1 ); \n                 mymap [ tmp ]   +=   visit [ i ]; \n             } \n         } //accumulate \n\n         vector string   res ; \n         string   timestr ; \n         for ( map string ,   int :: iterator   it   =   mymap . begin ();   it   !=   mymap . end ();   ++ it ) \n         { \n             timestr   =   to_string ( it - second ); \n             res . pb ( timestr   +       +   it - first ); \n         } \n         return   res ; \n     }  };", 
            "title": "PA. 811. Subdomain Visit Count substr + map \u6d3b\u7528\u6c34\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#pb809-expressive-words", 
            "text": "\u601d\u8def\uff1a\u4e0d\u7b97\u96e3\u7684\u984c\u76ee\uff0c\u53ea\u662f\u984c\u76ee\u6709\u9ede\u542b\u7cca\u4e0d\u597d\u61c2\uff0c\u5be6\u969b\u4e0a\u610f\u601d\u70ba \u82e5\u4ee5word\u7684char\u4f86\u5ef6\u4f38\u6210\u529f\uff08\u5ef6\u4f38\u6210\u529f\u7684\u5b9a\u7fa9\u70ba\uff1a\u4e26\u5217\u7684char\u9054\u5230\u4e09\u500b\u4ee5\u4e0a\uff09\"\u4e26\u4e14\" \u7d93\u7531\u6210\u529f\u5ef6\u4f38\u7684char\n\u6700\u5f8c\u80fd\u9054\u5230\u76ee\u6a19\u5b57\u4e32\uff0c\u4fbf\u662f\u4e00\u500bexpressive word\u8f49\u63db\n\u4f8b\u5982\uff1adddiiiinnssssssoooo \u82e5\u70ba\u76ee\u6a19\u5b57\u4e32\n\u5247 dinnsoo \u53ef\u4ee5 \u56e0\u70ba d+dd(\u5ef6\u4f38\u9054\u52303) i+iii(\u5ef6\u4f38\u9054\u52304) nn=nn s+sssss(\u5ef6\u4f38\u9054\u52306) o+ooo(\u5ef6\u4f38\u9054\u52304) \u6700\u5f8c\u80fd\u7d44\u6210\u76ee\u6a19\u5b57\u4e32\nddinnso\u4e5f\u53ef(\u7576\u521d\u4ee5\u70ba\u8981dd\u8996\u70ba\u4e00\u7d44\u4f86\u5ef6\u795e \uff0c\u800cddd / dd \u53ea\u67091.5\u500d\u4e0d\u884c\uff0c\u7136\u800c\u984c\u76ee\u53ea\u8981\u6c42\u5ef6\u4f38\uff0c\u56e0\u6b64\u4e5f\u80fd\u7528\u55ae\u4e00\u5b57\u5143\u6e4a\u6210\uff0c\u662f\u6545\u4ee5\u55ae\u4e00\u5b57\u5143\u5ef6\u4f38\u662f\u4e00\u7a2e\u4fdd\u96aa\u7684\u4f5c\u6cd5)   \u53c8\u5982 ddinsoo\u4fbf\u4e0d\u884c\uff0c\u4e43\u662f\u65bc n+n\u53ea\u5ef6\u4f38\u4e86\u5169\u6b21\uff0c\u7121\u6cd5\u9054\u9663\uff0c\u56e0\u6b64\u52e2\u5fc5\u7121\u6cd5\u505a\u6210\u539f\u672c\u7684\u76ee\u6a19\u5b57\u4e32\u800c\u653e\u68c4\u3002  \u7528\u4e0a\u8ff0\u7684\u60f3\u6cd5\u4fbf\u80fd\u5beb\u51fa\u4ee5\u4e0bac\u4ee3\u78bc   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 #define FORI(n) for(int i = 0; i   n; ++ i)  #define pb push_back  class   Solution  {  public : \n     int   expressiveWords ( string   str ,   vector string   words ) \n     { \n         int   res   =   0 ,   can   =   0 ,   cnt   =   0 ,   total_len   =   0 ,   extend_len   =   0 ,   group_len ; \n         for ( int   i   =   0 ; i     words . size (); i ++ ) \n         { \n             can   =   1 ;   //can --  \u53ef\u5ef6\u4f38\u6e4a\u51fa\u7d50\u679c \n             int   k   =   0 ; \n             total_len   =   words [ i ]. size ();   //\u7b2ci\u500b\u6aa2\u6e2cword\u7684\u9577\u5ea6 \n             for ( int   j   =   0 ; j     words [ i ]. size ();) \n             { \n                 extend_len   =   0 ; \n                 group_len   =   1 ; \n                 if ( words [ i ][ j ]   !=   str [ k ]) \n                 { \n                     can   =   0 ;   //\u82e5\u6709\u4e0d\u4e00\u6a23\u7684\uff0c\u52e2\u5fc5\u7121\u6cd5\u6e4a\u6210\uff0c \n                     break ; \n                 } \n                 else \n                 { \n                     while ( j   !=   words [ i ]. size ()   -   1     words [ i ][ j   +   1 ]   ==   words [ i ][ j ])   //\u627e\u51fa\u5728word\u4e2d\uff0c\u76f8\u9023\u4e00\u6a23\u7684\u7d44\u6210\u4e00\u7fa4\u7684\u9577\u5ea6 \n                     { \n                         j ++ ; \n                         group_len ++ ; \n                     } \n                     while ( 1 )   //able to extend \n                     { \n                         if ( words [ i ][ j ]   ==   str [ k ]) //\u5ef6\u4f38 \n                         { \n                             k ++ ; \n                             extend_len ++ ; \n                         } \n                         else   //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa \n                         { \n                             // can = 0; \u9019\u500bcan = 0\u4e0d\u53ef\u4ee5\u52a0\uff0c\u56e0\u70ba\u9019\u662f\u518d\u5ef6\u6df1\u5f8c\u5224\u65b7\u8df3\u51fa\u7684\u689d\u4ef6\uff0c\u4e26\u4e0d\u662f\u767c\u73femismatch \n                             break ; \n                         } \n                     } \n\n                     //last character extend \n                     while ( k     str . size ()     j   ==   words [ i ]. size () - 1 )   //\u7d50\u5c3e\u7279\u4f8b\uff0c\u7e7c\u7e8c\u5ef6\u4f38 \n                     { \n                         if ( words [ i ][ j ]   ==   str [ k ])   //\u5ef6\u4f38 \n                         { \n                             k ++ ; \n                             extend_len ++ ; \n                         } \n                         else   //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa \n                         { \n                             can   =   0 ;   //\u5728\u6b64\u7684can \u4fbf\u8981\u52a0\u5165 = 0 \u4f8b\u5982 target = abcd \u4f46\u662f word = abc \u800c \u6b64\u6642j\u6703\u5361\u5728size - 1 \u4e4b\u5f8ck\u7e7c\u7e8c\u8d70\u5230d\u767c\u73fe\u4e0d\u4e00\u6a23\u4fbf\u662f\u7121\u6cd5\u7d44\u6210 \n                             break ; \n                         } \n                     } \n\n                     if ( extend_len     group_len )   //\u82e5\u5ef6\u4f38\u7684\u9577\u5ea6\u5c0f\u65bc\u539f\u672c\u9577\u5ea6\u4e5f\u4e0d\u884c \n                     { \n                         can   =   0 ; \n                         break ; \n                     } \n\n                     if ( extend_len   =   3 )   //if extend, should  =3 (as a group per unit) \n                     { \n                         total_len   +=   extend_len   -   group_len   ;   // aa\u5ef6\u4f38\u6210 aaaa \u5ef6\u4f38\u7684\u9577\u5ea6\u70ba 2 \u800c\u975e 4 \u6545\u8981\u6263\u9664\u672c\u8eab\u7fa4\u7d44\u9577\u5ea6 \n                     } \n                     j ++ ; \n                 } \n             } \n             if ( total_len   !=   str . size ())   //\u82e5\u6700\u5f8c\u4f9d\u7136\u9577\u5ea6\u9644\u7b49\uff0c\u4e5f\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6545can=0 \n             { \n                 can   =   0 ; \n             } \n             if ( can ) \n             { \n                 res ++ ; \n             } \n         } \n         return   res ; \n     }  };", 
            "title": "PB.809. Expressive Words \u5b57\u4e32\u96d9\u6307\u6a19\u63a8\u7406\u89c0\u5bdf\u984c"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#pc-808-soup-servings", 
            "text": "\u601d\u8def\uff1a\u4ee5\u6bcf25\u6beb\u5347\u70ba\u55ae\u4f4d\u5207\u5272\uff0c\u56e0\u6b64\u5148\u628aa b\u6e6f\u7a2e\u7684\u4efd\u91cf/25\u5316\u7e41\u70ba\u7c21\u3002 \n\u63a5\u8457\uff0c\u4ee5dp\u8868\u793a\u300e\u5df2\u7d93\u6d88\u8cbb\u7684\u6e6f\u7a2e\u4efd\u91cf\u300f a\u6e6f\u7a2e\u70barow b\u70bacol\uff0c\u7531\u65bc\u6bcf\u4e00\u683c\u5747\u4ee3\u8868\u6d88\u8017\u7684\u4efd\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u63a1\u7528\u7531\u5e95\u5c64\u63a8\u4e0a\u4f86\u7684\u65b9\u5f0f\uff0c\u5c07\u6bcf\u4e00\u683c\u7531\u4e4b\u524d\u7684\u56db\u9805\u9ede\u63a8\u5f97\uff0c\u4e26\u4e14\u9010\u6b65\u69cb\u7bc9\u5230serve\u4efd\u3002 \n\u800c\u7336\u5982\u984c\u76ee\u6240\u8aaa\uff0c\u540c\u6642\u8b93ab\u6e6f\u7a2e\u8017\u76e1\u6642\uff0c\u9700\u8981\u4e58\u4e0a0.5\u7684\u4fc2\u6578\uff0c\u800c\u8017\u76e1a\u6e6f\u7a2e\uff0c\u56e0\u70ba\u662f\u76ee\u6a19\uff0c\u6545\u4e58\u4e0a1\u4fc2\u6578\uff0c\u7136\u800c\u8017\u76e1b\u6e6f\u7a2e\u4e26\u4e0d\u662f\u6211\u5011\u6240\u8981\u7684\uff0c\u6545\u4e58\u4e0a0\u4fc2\u6578 \n\u5982\u4e0b\u67e5\u770b\u6bcf\u4e00\u7a2e\u6d88\u8cbb\uff08\u5be6\u969b\u4e0a\u662f\u5f9e0 0\u958b\u59cb\u770b\u300e\u5df2\u7d93\u300f\u6d88\u8017\u7684\u6e6f\u7a2e\u4efd\u91cf\uff0c\u6162\u6162\u758a\u5230serve\u4efd\uff0c\u9700\u6ce8\u610f\u8981\u5c07serve + 1\u4f86\u4f5c\u70badp\u65b9\u9663\u7684\u56e0\u5728\u65bc\u6211\u5011\u8981\u6d88\u8017\u52300\u4efd\u800c\u975e1\u4efd\uff0c\u56e0\u6b64\u5728dp\u8868\u683c\u5fc5\u9808 + 1\u4f5c\u70ba\u521d\u59cb\u5316\u7684\u5927\u5c0f\u908a\u754c\uff0c\u6700\u5f8c\u8ff4\u5708\u4e5f\u8dd1\u5230\u7b49\u65bcserve\u624d\u505c\u4e0b\uff0c\u800c\u975e\u5c0f\u65bcserve   \u4ee5\u4e0b\u70ba\u8fed\u4ee3\u7248\u672c\u7684\u7a0b\u5f0f\u78bc  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 if ( i   -   4   =   0     j   = 0 )  { \n     dir1   =   0.5 ;  }  else   if ( i   -   4   =   0 )  { \n     dir1   =   1 ;  }  else   if ( j   =   0 )  { \n     dir1   =   0 ;  }  else  { \n     dir1   =   dp [ i   -   4 ][ j ];  }    (\u5728\u984c\u76ee\u4ee5\u4e0b\u7684\u6bcf\u500b\u56de\u5708\u5224\u65b7\u5f0f\u4fbf\u53ef\u4ee5\u770b\u5230\uff0c\u8a73\u7d30\u5206\u6790\u8acb\u898b\u7a0b\u5f0f\u78bc\u8a3b\u89e3)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92 class   Solution  {  public : \n     double   soupServings ( int   all ) \n     { \n         if ( all     6000 )   //monotonically increasing since A is always used more than B. (by empirical method) \n             return   1.0 ; \n\n         int   serve   =   ceil ( all   /   25.0 )   ;   //25 ml as a serving unit, \n         //\u4e00\u5b9a\u8981\u7528ceil\u56e0\u70ba\u5373\u4fbf\u662f\u6c92\u6709\u6eff25ml\u4e5f\u8981\u5b8c\u6574\u7684\u8655\u7406\u5b8c\u7562\uff0c\u6545\u5f97\u7528ceil\u4f86\u5c07\u672a\u6eff\u4e00\u55ae\u4f4d\u7684\u6e6f\u7a2e\u8655\u7406\uff0c\u65e2\u6709\u7684cpp\u9664\u6cd5\u6703\u6368\u53bb \n         vector vector   double     dp ( serve   +   1 ,   vector double ( serve   +   1 ,   0 ));   //each grid represent the rest amount(unit) of a and be which //comes to here \n         //A row, B col \n         double   dir1 ,   dir2 ,   dir3 ,   dir4 ; \n         for ( int   i   =   0 ;   i   =   serve ;   i ++ ) \n         { \n             for ( int   j   =   0 ;   j   =   serve ;   j ++ ) \n             { \n                 if ( i   -   4   =   0     j   = 0 ) \n                 { \n                     dir1   =   0.5 ; \n                 } \n                 else   if ( i   -   4   =   0 ) \n                 { \n                     dir1   =   1 ; \n                 } \n                 else   if ( j   =   0 ) \n                 { \n                     dir1   =   0 ; \n                 } \n                 else \n                 { \n                     dir1   =   dp [ i   -   4 ][ j ]; \n                 } \n\n                 if ( i   -   3   =   0     j   -   1   =   0 ) \n                 { \n                     dir2   =   0.5 ; \n                 } \n                 else   if ( i   -   3   =   0 ) \n                 { \n                     dir2   =   1 ; \n                 } \n                 else   if ( j   -   1   =   0 ) \n                 { \n                     dir2   =   0 ; \n                 } \n                 else \n                 { \n                     dir2   =   dp [ i   -   3 ][ j   -   1 ]; \n                 } \n\n\n                 if ( i   -   2   =   0     j   -   2   =   0 ) \n                 { \n                     dir3   =   0.5 ; \n                 } \n                 else   if ( i   -   2   =   0 ) \n                 { \n                     dir3   =   1 ; \n                 } \n                 else   if ( j   -   2   =   0 ) \n                 { \n                     dir3   =   0 ; \n                 } \n                 else \n                 { \n                     dir3   =   dp [ i   -   2 ][ j   -   2 ]; \n                 } \n\n\n                 if ( i   -   1   =   0     j   -   3   =   0 ) \n                 { \n                     dir4   =   0.5 ; \n                 } \n                 else   if ( i   -   1   =   0 ) \n                 { \n                     dir4   =   1 ; \n                 } \n                 else   if ( j   -   3   =   0 ) \n                 { \n                     dir4   =   0 ; \n                 } \n                 else \n                 { \n                     dir4   =   dp [ i   -   1 ][ j   -   3 ]; \n                 } \n                 dp [ i ][ j ]   =   0.25   *   ( dir1   +   dir2   +   dir3   +   dir4 ); \n             } \n         } \n         return   dp [ serve ][ serve ]; \n     }  };", 
            "title": "PC. 808. Soup Servings \u6709\u9ede\u96e3\u89c0\u5bdf\u51fa\u898f\u5f8b\u7684\u52d5\u614b\u898f\u5283\u984c(\u65bd\u5de5\u4e2d)"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC79/", 
            "text": "leetcode_OJ WC79 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Apr 1, 2018\n\n\n\n\nPA. \n812. Largest Triangle Area\n \u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f\n\n\n\n\n\u601d\u8def\uff1a\u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f\u5373\u53ef\uff0c\u7a0b\u5f0f\u78bc\u4e2d\u7684 a b c \u5206\u5225\u70ba\u4e09\u89d2\u5f62\u7684\u4e09\u908a\uff0cs\u70ba\u9031\u9577\u7684\u4e00\u534a\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \ndouble\n \nlargestTriangleArea\n(\nvector\nvector\nint\n \npoints\n)\n\n    \n{\n\n        \n//points = 50, butr force OK\n\n        \ndouble\n \na\n \n=\n \n0.0f\n,\n \nb\n \n=\n \n0.0f\n,\nc\n \n=\n \n0.0f\n \n,\ns\n \n=\n \n0.0f\n,\n \narea\n \n=\n \n0.0f\n,\n \nmax_area\n \n=\n \n0.0f\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \npoints\n.\nsize\n()\n \n-\n \n2\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \ni\n \n+\n \n1\n;\n \nj\n \n \npoints\n.\nsize\n()\n \n-\n \n1\n;\n \nj\n++\n)\n\n            \n{\n\n                \nfor\n(\nint\n \nk\n \n=\n \nj\n \n+\n \n1\n;\n \nk\n \n \npoints\n.\nsize\n();\n \nk\n++\n)\n\n                \n{\n\n                    \na\n \n=\n \ndist\n(\npoints\n[\ni\n],\npoints\n[\nj\n]);\n\n                    \nb\n \n=\n \ndist\n(\npoints\n[\nj\n],\npoints\n[\nk\n]);\n\n                    \nc\n \n=\n \ndist\n(\npoints\n[\ni\n],\npoints\n[\nk\n]);\n\n                    \ns\n \n=\n \n(\na\n \n+\n \nb\n \n+\n \nc\n)\n \n/\n \n2.0f\n;\n\n                    \narea\n \n=\n \nsqrt\n(\ns\n \n*\n \n(\ns\n \n-\n \na\n)\n \n*\n \n(\ns\n \n-\n \nb\n)\n \n*\n \n(\ns\n \n-\n \nc\n));\n\n                    \nmax_area\n \n=\n \nmax\n(\nmax_area\n,\n \narea\n);\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nmax_area\n;\n\n    \n}\n\n    \ndouble\n \ndist\n(\nvector\nint\n \np1\n,\n \nvector\nint\n \np2\n)\n\n    \n{\n\n        \nreturn\n \nsqrt\n(\nabs\n(\np1\n[\n0\n]\n \n-\n \np2\n[\n0\n])\n \n*\n \nabs\n(\np1\n[\n0\n]\n \n-\n \np2\n[\n0\n])\n \n+\n \nabs\n(\np1\n[\n1\n]\n \n-\n \np2\n[\n1\n])\n \n*\n \nabs\n(\np1\n[\n1\n]\n \n-\n \np2\n[\n1\n]));\n\n    \n}\n\n\n\n};\n\n\n\n\n\n\n\nPB. \n814. Binary Tree Pruning\n \u4e8c\u5143\u6a39\u4fee\u526a\n\n\n\n\n\u984c\u610f\uff1a\u5c0d\u65bc\u4e00\u500b\u53ea\u6709\u6578\u503c\u70ba0 or 1\u7684\u4e8c\u5143\u6a39\uff0c\u5018\u82e5\u6b64\u7bc0\u9ede\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\u5747\u70ba0\uff0c\u5247\u522a\u9664\u6b64\u7bc0\u9ede\u4ee5\u53ca\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\uff0c\u7b97\u662f\u6f38\u6f38\u5f04\u61c2\u905e\u8ff4\u7684\u57f7\u884c\u539f\u5247\u4e86\uff0c\u4e5f\u6bd4\u8f03\u770b\u5f97\u61c2\u5c0d\u65bc\u8655\u7406\u6a39\u7684\u984c\u76ee\u3002\n\u7576\u4e0d\u77e5\u9053\u905e\u8ff4\u600e\u9ebc\u8dd1\u6642\uff0c\u53ef\u4ee5\u5148\u7528\u5c0f\u7684\u4f8b\u5b50\u4f86\u8f14\u52a9\u9a57\u8b49\n\n\n\u601d\u8def\uff1a\u4f7f\u7528\u905e\u8ff4\uff0c\u5f80\u4e0b\u8d70\u8a2a\uff0c\u300e\u552f\u4e00\u6709\u9700\u8981\u522a\u9664\u7684\u7bc0\u9ede\u4fbf\u662f\uff0c\u81ea\u5df1\u70ba\u96f6\uff0c\u4e26\u4e14\u8a72\u5e95\u4e0b\u6240\u6709\u5b50\u6a39\u90fd\u53ea\u6709\u6578\u503c\u70ba0\u7684\u7bc0\u9ede\uff08\u5305\u542b0\u4f5c\u70baleaf\u4e5f\u61c9\u8a72\u522a\u9664\uff0c\u56e0\u6b64\u53ef\u4ee5\u5207\u51fa\u6578\u500b\u72c0\u6cc1\uff09\u300f\n\n1.\u5c0d\u65bcnull\u7bc0\u9ede\uff0c\u8fd4\u56de0\u5373\u53ef\uff0c\u56e0\u70ba\u5df2\u7d93\u6c92\u6709\u5fc5\u8981\u64cd\u4f5c\uff0c\u5148\u4ee5 if \u5de6\u5b50\u6a39\u53f3\u5b50\u6a39\u5747true\u5fc5\u9808\u522a\u9664\u4e14\u81ea\u5df1\u4e5f\u662f0 \u4f86\u5224\u65b7\u522a\u9664\uff0c\u4ea6\u5373\n\n1\n(\nif\n \npruneit\n(\nleft\n)\n \n \npruneit\n(\nright\n)\n \n \nval\n \n==\n \n0\n)\n \nbr\n \n/\nbr\n \n/\n\n\n\n\n\n2.\u4f46\u7531\u65bc   null\n-0-\nnull\u7684\u7bc0\u9ede \u5169\u500bnull\u8fd4\u56de0\u6703\u4f7f\u5f97\u9019\u7a2e\u7bc0\u9ede\u522a\u4e0d\u6389\uff0c\u56e0\u6b64\u7279\u5224\u4e00\u500b\n\n1\n2\n3\n4\nif\n(\ncur\n-\nleft\n \n==\n \nNULL\n \n \ncur\n-\nright\n \n==\n \nNULL\n \n \ncur\n-\nval\n \n==\n \n0\n)\n\n\n{\n\n    \nreturn\n \n1\n;\n\n\n}\n\n\n\n\n\n\n\n3.\u5c0d\u65bc true\n-0-\nnull \u6216\u662f null\n-0-\ntrue \u5be6\u969b\u4e0a\u4e5f\u90fd\u5fc5\u9808\u522a\u9664\uff0c\u4f46\u7531\u65bc(if pruneit(left) \n pruneit(right) \n val == 0)and\u4e32\u63a5\u908f\u8f2f\u7684\u95dc\u4fc2\uff0c\u4e5f\u6703\u522a\u4e0d\u6389\uff0c\u6545\u589e\u52a0\u5169\u500b\u7279\u5224 \n\n\n1\n2\n3\n4\nif\n(\ncur\n-\nleft\n \n==\n \nNULL\n \n \ncur\n-\nright\n  \n \npruneit\n(\ncur\n-\nright\n)\n \n \ncur\n-\nval\n \n==\n \n0\n)\n\n\n{\n\n    \nreturn\n \n1\n;\n\n\n}\n\n\n\n\n\n\n1\n2\n3\n4\nif\n(\ncur\n-\nleft\n \n \ncur\n-\nright\n \n==\n \nNULL\n \n \npruneit\n(\ncur\n-\nleft\n)\n \n \ncur\n-\nval\n \n==\n \n0\n)\n\n\n{\n\n    \nreturn\n \n1\n;\n\n\n}\n\n\n\n\n\n\n\n4.\n\u5c0d\u65bc \u6578\u503c\u70ba1\u7684node\uff0c\u7121\u9808\u8655\u7406\uff0c\u56e0\u6b64\u8fd4\u56de left_check \n right_check \n (cur-\nval == 0);\n\u4f8b\u5982 \n\n                  1 \n\n                 / \n\n                    0 \n\n              /           | \n\n            true  true \n\n\u5247\u6700\u5f8c0\u8fd4\u56de true \n true \n val == 0 \u905e\u8ff4\u7d50\u675f\u5f8c\u8fd4\u56de\u7d661\uff0c1\u7684 left_check = pruneit(cur-\nleft);\u4fbf\u6703\u8857\u6536\u5230true\uff0c\u5c07\u5176\u526a\u6389\uff0c\u5b8c\u6210prune\u3002\n\n5.\u7279\u5225\u8655\u7406\u9023\u6839\u62d4\u8d77\u7684\u60c5\u5f62\n\n1\n2\n3\n4\nif\n(\npruneit\n(\nroot\n))\n \n//last one for root\n\n\n{\n\n    \nroot\n \n=\n \nNULL\n;\n\n\n}\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n/**\n\n\n * Definition for a binary tree node.\n\n\n * struct TreeNode {\n\n\n *     int val;\n\n\n *     TreeNode *left;\n\n\n *     TreeNode *right;\n\n\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n\n\n * };\n\n\n */\n\n \n/**\n\n\n  * Definition for a binary tree node.\n\n\n  * struct TreeNode {\n\n\n  *     int val;\n\n\n  *     TreeNode *left;\n\n\n  *     TreeNode *right;\n\n\n  *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n\n\n  * };\n\n\n  */\n\n \nclass\n \nSolution\n\n \n{\n\n \npublic\n:\n\n     \nTreeNode\n*\n \npruneTree\n(\nTreeNode\n*\n \nroot\n)\n\n     \n{\n\n         \nif\n(\npruneit\n(\nroot\n))\n \n//last one for root\n\n         \n{\n\n             \nroot\n \n=\n \nNULL\n;\n\n         \n}\n\n         \nreturn\n \nroot\n;\n\n     \n}\n\n     \nbool\n \npruneit\n(\nTreeNode\n*\n \ncur\n)\n \n//1 for need prune\n\n     \n{\n\n         \nif\n(\ncur\n \n==\n \nNULL\n)\n\n         \n{\n\n             \nreturn\n \n0\n;\n\n         \n}\n\n         \n//due to left_check \n right_check \n (cur-\nval == 0); null\n-0-\nnull should also be deleted\n\n         \nif\n(\ncur\n-\nleft\n \n==\n \nNULL\n \n \ncur\n-\nright\n \n==\n \nNULL\n \n \ncur\n-\nval\n \n==\n \n0\n)\n\n         \n{\n\n             \nreturn\n \n1\n;\n\n         \n}\n\n         \n//due to left_check \n right_check \n (cur-\nval == 0);  null\n-0-\ntrue should also be deleted\n\n         \nif\n(\ncur\n-\nleft\n \n==\n \nNULL\n \n \ncur\n-\nright\n  \n \npruneit\n(\ncur\n-\nright\n)\n \n \ncur\n-\nval\n \n==\n \n0\n)\n\n         \n{\n\n             \nreturn\n \n1\n;\n\n         \n}\n\n         \n//due to left_check \n right_check \n (cur-\nval == 0); true\n-0-\nnull should also be deleted\n\n         \nif\n(\ncur\n-\nleft\n \n \ncur\n-\nright\n \n==\n \nNULL\n \n \npruneit\n(\ncur\n-\nleft\n)\n \n \ncur\n-\nval\n \n==\n \n0\n)\n\n         \n{\n\n             \nreturn\n \n1\n;\n\n         \n}\n\n\n\n         \nbool\n \nleft_check\n \n=\n \npruneit\n(\ncur\n-\nleft\n);\n\n         \nbool\n \nright_check\n \n=\n \npruneit\n(\ncur\n-\nright\n);\n\n\n         \nif\n(\nleft_check\n)\n \n//if left subtree needs to be pruned\n\n         \n{\n\n             \ncur\n-\nleft\n \n=\n \nNULL\n;\n\n         \n}\n\n         \nif\n(\nright_check\n)\n \n//if right subtree needs to be pruned\n\n         \n{\n\n             \ncur\n-\nright\n \n=\n \nNULL\n;\n\n         \n}\n\n\n         \nreturn\n \nleft_check\n \n \nright_check\n \n \n(\ncur\n-\nval\n \n==\n \n0\n);\n \n//subtree only delete for this one\n\n\n     \n}\n\n \n};\n\n\n\n\n\n\n\n\nPC. \n813. Largest Sum of Averages\n\u7565\u5acc\u9ebb\u7169\u7684\u52d5\u614b\u898f\u5283\u984c\u76ee\n\n\n\n\n\u601d\u8def\uff1a\u52d5\u614b\u898f\u5283\uff0c\u5207\u5272\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u5b50\u554f\u984c\uff0c\u5728\u7531\u5c0d\u61c9\u7684\u5b50\u554f\u984c\u5c07\u4ee5\u524d\u7b97\u904e\u5f97\u5b50\u554f\u984c\u6578\u503c\u53d6\u51fa\uff0c\u6700\u5f8c\u52a0\u7e3d\uff0c\u800c\u5728\u9019\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u52a0\u7e3d\u6578\u503c\uff0c\u518d\u9078\u53d6\u6700\u5927\u7684\uff0c\u4f5c\u70ba\u7576\u524d\u52d5\u614b\u898f\u5283\u7684\u6578\u503c\u3002\n\n\n\u8a73\u7d30\u6d41\u7a0b\u63a8\u5c0e\uff0c\u8acb\u898b\n\n\n\n\n\n\u5167\u9644\u8a3b\u89e3\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \ndouble\n \nlargestSumOfAverages\n(\nvector\nint\n \narr\n,\n \nint\n \nkin\n)\n\n    \n{\n\n        \ndouble\n \ndp\n[\n105\n][\n105\n]\n \n=\n \n{\n0.0f\n};\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \narr\n.\nsize\n();\n \ni\n++\n)\n\n        \n{\n\n            \ndouble\n \nsum\n \n=\n \n0.0f\n;\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n=\n \ni\n;\n \nj\n++\n)\n\n            \n{\n\n                \nsum\n \n+=\n \narr\n[\nj\n];\n\n            \n}\n\n            \ndp\n[\n0\n][\ni\n]\n \n=\n \nsum\n \n/\n \n(\ndouble\n)\n \n(\ni\n \n+\n \n1\n);\n\n        \n}\n\n        \ndouble\n \ncur_val\n \n=\n \n0.0f\n,\n \nmax_val\n \n=\n \n0.0f\n,\n \nsegment_avg\n \n=\n \n0.0\n,\n \nsegment_avg2\n \n=\n \n0.0f\n;\n\n\n        \nfor\n(\nint\n \ni\n \n=\n \n1\n;\n \ni\n \n \nkin\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \ni\n;\n \nj\n \n \narr\n.\nsize\n();\n \nj\n++\n)\n\n            \n{\n\n                \ncur_val\n \n=\n \n0.0f\n,\n \nmax_val\n \n=\n \n0.0f\n;\n\n                \nif\n(\nj\n \n \ni\n)\n\n                \n{\n\n                    \ncontinue\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nj\n \n==\n \ni\n)\n\n                \n{\n\n                    \nsegment_avg\n \n=\n \n0.0f\n;\n\n                    \nfor\n(\nint\n \nk\n \n=\n \n0\n;\n \nk\n \n=\n \nj\n;\n \nk\n++\n)\n\n                    \n{\n\n                        \nsegment_avg\n \n+=\n \narr\n[\nk\n];\n\n                    \n}\n\n                    \ndp\n[\ni\n][\nj\n]\n \n=\n \nsegment_avg\n;\n\n                \n}\n\n                \nelse\n \nif\n(\ni\n \n==\n \n1\n)\n\n                \n{\n\n                    \nfor\n(\nint\n \nk\n \n=\n \n1\n;\n \nk\n \n=\n \nj\n;\n \nk\n++\n)\n\n                    \n{\n\n                        \nsegment_avg\n \n=\n \n0.0f\n;\n\n                        \nsegment_avg2\n \n=\n \n0.0f\n;\n\n                        \nfor\n(\nint\n \nl\n \n=\n \n0\n;\n \nl\n \n \nk\n;\n \nl\n++\n)\n\n                        \n{\n\n                            \nsegment_avg\n \n+=\n \narr\n[\nl\n];\n\n                        \n}\n\n                        \nfor\n(\nint\n \nm\n \n=\n \nk\n;\n \nm\n \n=\n \nj\n;\n \nm\n++\n)\n\n                        \n{\n\n                            \nsegment_avg2\n \n+=\n \narr\n[\nm\n];\n\n                        \n}\n\n                        \nmax_val\n \n=\n \nmax\n(\nmax_val\n,\n \nsegment_avg\n \n/\n \nk\n \n+\n \nsegment_avg2\n \n/\n \ndouble\n(\nj\n \n-\n \nk\n \n+\n \n1\n));\n\n                    \n}\n\n                    \ndp\n[\ni\n][\nj\n]\n \n=\n \nmax_val\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nfor\n(\nint\n \nn\n \n=\n \nj\n;\n \nn\n \n=\n \ni\n;\n \nn\n--\n)\n \n//let\ns say the slice is zero based, for the i th slice, the smallest group\n\n                    \n//should contain at least i element ex: 1 2 3 4 for 3 slice then at least in DP 12 [3 4](grouped for current slice) is OK\n\n                    \n//but for 1 [2 3 4](grouped for current slice) is not right\n\n                    \n{\n\n                        \nsegment_avg\n \n=\n \n0.0f\n;\n\n                        \nfor\n(\nint\n \nk\n \n=\n \nj\n;\n \nk\n \n=\n \nn\n;\n \nk\n--\n)\n \n//forward to accumulate and the average\n\n                        \n/*\n\n\n                        let\ns say the slice is zero based, for the n th slice.\n\n\n                        ex: for 1 2 3 4 5 and slice for 3 ()as the slice group need to search for the 2-slice of best line(row)\n\n\n                        we will then check (1 2 3 4)(search for i = slice - 1 for the SUBPROBLEM OF SIZE - 1 and j = 3 (since 1 2 3 4 till 4th element)) [5]\n\n\n                        which is value = dp[2][3] + avg(5) = 8.5 + 5 = 13.5\n\n\n                        the same is true for\n\n\n                        (1 2 3) [4 5] value =  dp[2][2] + avg(4 5) = 6 + 4.5 = 10.5\n\n\n                        (1 2) [3 4 5] value = dp[2][1] + avg(3,4,5) =\n\n\n                        (1) [2 3 4 5] //unable to do since the smallest group is less then i - 1 = 3 - 1 = 2\n\n\n                        then we take the max value of these calculation for dp[i][j]\n\n\n                        */\n\n                        \n{\n\n                            \nsegment_avg\n \n+=\n \narr\n[\nk\n];\n\n                        \n}\n\n                        \n//the other part of from 0 to i - 1 there are i elements to search for the previous saved (best value) dp grid\n\n                        \ncur_val\n \n=\n \ndp\n[\ni\n \n-\n \n1\n][\nn\n \n-\n \n1\n]\n \n+\n \nsegment_avg\n \n/\n \n(\ndouble\n)(\nj\n \n-\n \nn\n \n+\n \n1\n);\n\n                        \nmax_val\n \n=\n \nmax\n(\nmax_val\n,\n \ncur_val\n);\n\n                    \n}\n\n                    \ndp\n[\ni\n][\nj\n]\n \n=\n \nmax_val\n;\n\n                    \n//after choosing the max_val of the dp\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ndp\n[\nkin\n \n-\n \n1\n][\narr\n.\nsize\n()\n \n-\n \n1\n];\n\n    \n}\n\n\n};", 
            "title": "WC79"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC79/#leetcode_oj-wc79", 
            "text": "Contest time: Apr 1, 2018", 
            "title": "leetcode_OJ WC79 \u89e3\u984c\u5fc3\u5f97"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC79/#pa-812-largest-triangle-area", 
            "text": "\u601d\u8def\uff1a\u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f\u5373\u53ef\uff0c\u7a0b\u5f0f\u78bc\u4e2d\u7684 a b c \u5206\u5225\u70ba\u4e09\u89d2\u5f62\u7684\u4e09\u908a\uff0cs\u70ba\u9031\u9577\u7684\u4e00\u534a    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 class   Solution  {  public : \n     double   largestTriangleArea ( vector vector int   points ) \n     { \n         //points = 50, butr force OK \n         double   a   =   0.0f ,   b   =   0.0f , c   =   0.0f   , s   =   0.0f ,   area   =   0.0f ,   max_area   =   0.0f ; \n         for ( int   i   =   0 ;   i     points . size ()   -   2 ;   i ++ ) \n         { \n             for ( int   j   =   i   +   1 ;   j     points . size ()   -   1 ;   j ++ ) \n             { \n                 for ( int   k   =   j   +   1 ;   k     points . size ();   k ++ ) \n                 { \n                     a   =   dist ( points [ i ], points [ j ]); \n                     b   =   dist ( points [ j ], points [ k ]); \n                     c   =   dist ( points [ i ], points [ k ]); \n                     s   =   ( a   +   b   +   c )   /   2.0f ; \n                     area   =   sqrt ( s   *   ( s   -   a )   *   ( s   -   b )   *   ( s   -   c )); \n                     max_area   =   max ( max_area ,   area ); \n                 } \n             } \n         } \n         return   max_area ; \n     } \n     double   dist ( vector int   p1 ,   vector int   p2 ) \n     { \n         return   sqrt ( abs ( p1 [ 0 ]   -   p2 [ 0 ])   *   abs ( p1 [ 0 ]   -   p2 [ 0 ])   +   abs ( p1 [ 1 ]   -   p2 [ 1 ])   *   abs ( p1 [ 1 ]   -   p2 [ 1 ])); \n     }  };", 
            "title": "PA. 812. Largest Triangle Area \u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC79/#pb-814-binary-tree-pruning", 
            "text": "\u984c\u610f\uff1a\u5c0d\u65bc\u4e00\u500b\u53ea\u6709\u6578\u503c\u70ba0 or 1\u7684\u4e8c\u5143\u6a39\uff0c\u5018\u82e5\u6b64\u7bc0\u9ede\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\u5747\u70ba0\uff0c\u5247\u522a\u9664\u6b64\u7bc0\u9ede\u4ee5\u53ca\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\uff0c\u7b97\u662f\u6f38\u6f38\u5f04\u61c2\u905e\u8ff4\u7684\u57f7\u884c\u539f\u5247\u4e86\uff0c\u4e5f\u6bd4\u8f03\u770b\u5f97\u61c2\u5c0d\u65bc\u8655\u7406\u6a39\u7684\u984c\u76ee\u3002\n\u7576\u4e0d\u77e5\u9053\u905e\u8ff4\u600e\u9ebc\u8dd1\u6642\uff0c\u53ef\u4ee5\u5148\u7528\u5c0f\u7684\u4f8b\u5b50\u4f86\u8f14\u52a9\u9a57\u8b49  \u601d\u8def\uff1a\u4f7f\u7528\u905e\u8ff4\uff0c\u5f80\u4e0b\u8d70\u8a2a\uff0c\u300e\u552f\u4e00\u6709\u9700\u8981\u522a\u9664\u7684\u7bc0\u9ede\u4fbf\u662f\uff0c\u81ea\u5df1\u70ba\u96f6\uff0c\u4e26\u4e14\u8a72\u5e95\u4e0b\u6240\u6709\u5b50\u6a39\u90fd\u53ea\u6709\u6578\u503c\u70ba0\u7684\u7bc0\u9ede\uff08\u5305\u542b0\u4f5c\u70baleaf\u4e5f\u61c9\u8a72\u522a\u9664\uff0c\u56e0\u6b64\u53ef\u4ee5\u5207\u51fa\u6578\u500b\u72c0\u6cc1\uff09\u300f \n1.\u5c0d\u65bcnull\u7bc0\u9ede\uff0c\u8fd4\u56de0\u5373\u53ef\uff0c\u56e0\u70ba\u5df2\u7d93\u6c92\u6709\u5fc5\u8981\u64cd\u4f5c\uff0c\u5148\u4ee5 if \u5de6\u5b50\u6a39\u53f3\u5b50\u6a39\u5747true\u5fc5\u9808\u522a\u9664\u4e14\u81ea\u5df1\u4e5f\u662f0 \u4f86\u5224\u65b7\u522a\u9664\uff0c\u4ea6\u5373 1 ( if   pruneit ( left )     pruneit ( right )     val   ==   0 )   br   / br   /   \n2.\u4f46\u7531\u65bc   null -0- null\u7684\u7bc0\u9ede \u5169\u500bnull\u8fd4\u56de0\u6703\u4f7f\u5f97\u9019\u7a2e\u7bc0\u9ede\u522a\u4e0d\u6389\uff0c\u56e0\u6b64\u7279\u5224\u4e00\u500b 1\n2\n3\n4 if ( cur - left   ==   NULL     cur - right   ==   NULL     cur - val   ==   0 )  { \n     return   1 ;  }    \n3.\u5c0d\u65bc true -0- null \u6216\u662f null -0- true \u5be6\u969b\u4e0a\u4e5f\u90fd\u5fc5\u9808\u522a\u9664\uff0c\u4f46\u7531\u65bc(if pruneit(left)   pruneit(right)   val == 0)and\u4e32\u63a5\u908f\u8f2f\u7684\u95dc\u4fc2\uff0c\u4e5f\u6703\u522a\u4e0d\u6389\uff0c\u6545\u589e\u52a0\u5169\u500b\u7279\u5224   1\n2\n3\n4 if ( cur - left   ==   NULL     cur - right      pruneit ( cur - right )     cur - val   ==   0 )  { \n     return   1 ;  }    1\n2\n3\n4 if ( cur - left     cur - right   ==   NULL     pruneit ( cur - left )     cur - val   ==   0 )  { \n     return   1 ;  }    \n4.\n\u5c0d\u65bc \u6578\u503c\u70ba1\u7684node\uff0c\u7121\u9808\u8655\u7406\uff0c\u56e0\u6b64\u8fd4\u56de left_check   right_check   (cur- val == 0);\n\u4f8b\u5982  \n                  1  \n                 /  \n                    0  \n              /           |  \n            true  true  \n\u5247\u6700\u5f8c0\u8fd4\u56de true   true   val == 0 \u905e\u8ff4\u7d50\u675f\u5f8c\u8fd4\u56de\u7d661\uff0c1\u7684 left_check = pruneit(cur- left);\u4fbf\u6703\u8857\u6536\u5230true\uff0c\u5c07\u5176\u526a\u6389\uff0c\u5b8c\u6210prune\u3002 \n5.\u7279\u5225\u8655\u7406\u9023\u6839\u62d4\u8d77\u7684\u60c5\u5f62 1\n2\n3\n4 if ( pruneit ( root ))   //last one for root  { \n     root   =   NULL ;  }     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68 /**   * Definition for a binary tree node.   * struct TreeNode {   *     int val;   *     TreeNode *left;   *     TreeNode *right;   *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}   * };   */ \n  /**    * Definition for a binary tree node.    * struct TreeNode {    *     int val;    *     TreeNode *left;    *     TreeNode *right;    *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}    * };    */ \n  class   Solution \n  { \n  public : \n      TreeNode *   pruneTree ( TreeNode *   root ) \n      { \n          if ( pruneit ( root ))   //last one for root \n          { \n              root   =   NULL ; \n          } \n          return   root ; \n      } \n      bool   pruneit ( TreeNode *   cur )   //1 for need prune \n      { \n          if ( cur   ==   NULL ) \n          { \n              return   0 ; \n          } \n          //due to left_check   right_check   (cur- val == 0); null -0- null should also be deleted \n          if ( cur - left   ==   NULL     cur - right   ==   NULL     cur - val   ==   0 ) \n          { \n              return   1 ; \n          } \n          //due to left_check   right_check   (cur- val == 0);  null -0- true should also be deleted \n          if ( cur - left   ==   NULL     cur - right      pruneit ( cur - right )     cur - val   ==   0 ) \n          { \n              return   1 ; \n          } \n          //due to left_check   right_check   (cur- val == 0); true -0- null should also be deleted \n          if ( cur - left     cur - right   ==   NULL     pruneit ( cur - left )     cur - val   ==   0 ) \n          { \n              return   1 ; \n          } \n\n\n          bool   left_check   =   pruneit ( cur - left ); \n          bool   right_check   =   pruneit ( cur - right ); \n\n          if ( left_check )   //if left subtree needs to be pruned \n          { \n              cur - left   =   NULL ; \n          } \n          if ( right_check )   //if right subtree needs to be pruned \n          { \n              cur - right   =   NULL ; \n          } \n\n          return   left_check     right_check     ( cur - val   ==   0 );   //subtree only delete for this one \n\n      } \n  };", 
            "title": "PB. 814. Binary Tree Pruning \u4e8c\u5143\u6a39\u4fee\u526a"
        }, 
        {
            "location": "/programming_practice/leetcode_OJ/WC79/#pc-813-largest-sum-of-averages", 
            "text": "\u601d\u8def\uff1a\u52d5\u614b\u898f\u5283\uff0c\u5207\u5272\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u5b50\u554f\u984c\uff0c\u5728\u7531\u5c0d\u61c9\u7684\u5b50\u554f\u984c\u5c07\u4ee5\u524d\u7b97\u904e\u5f97\u5b50\u554f\u984c\u6578\u503c\u53d6\u51fa\uff0c\u6700\u5f8c\u52a0\u7e3d\uff0c\u800c\u5728\u9019\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u52a0\u7e3d\u6578\u503c\uff0c\u518d\u9078\u53d6\u6700\u5927\u7684\uff0c\u4f5c\u70ba\u7576\u524d\u52d5\u614b\u898f\u5283\u7684\u6578\u503c\u3002  \u8a73\u7d30\u6d41\u7a0b\u63a8\u5c0e\uff0c\u8acb\u898b   \u5167\u9644\u8a3b\u89e3  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87 class   Solution  {  public : \n     double   largestSumOfAverages ( vector int   arr ,   int   kin ) \n     { \n         double   dp [ 105 ][ 105 ]   =   { 0.0f }; \n         for ( int   i   =   0 ;   i     arr . size ();   i ++ ) \n         { \n             double   sum   =   0.0f ; \n             for ( int   j   =   0 ;   j   =   i ;   j ++ ) \n             { \n                 sum   +=   arr [ j ]; \n             } \n             dp [ 0 ][ i ]   =   sum   /   ( double )   ( i   +   1 ); \n         } \n         double   cur_val   =   0.0f ,   max_val   =   0.0f ,   segment_avg   =   0.0 ,   segment_avg2   =   0.0f ; \n\n         for ( int   i   =   1 ;   i     kin ;   i ++ ) \n         { \n             for ( int   j   =   i ;   j     arr . size ();   j ++ ) \n             { \n                 cur_val   =   0.0f ,   max_val   =   0.0f ; \n                 if ( j     i ) \n                 { \n                     continue ; \n                 } \n                 else   if ( j   ==   i ) \n                 { \n                     segment_avg   =   0.0f ; \n                     for ( int   k   =   0 ;   k   =   j ;   k ++ ) \n                     { \n                         segment_avg   +=   arr [ k ]; \n                     } \n                     dp [ i ][ j ]   =   segment_avg ; \n                 } \n                 else   if ( i   ==   1 ) \n                 { \n                     for ( int   k   =   1 ;   k   =   j ;   k ++ ) \n                     { \n                         segment_avg   =   0.0f ; \n                         segment_avg2   =   0.0f ; \n                         for ( int   l   =   0 ;   l     k ;   l ++ ) \n                         { \n                             segment_avg   +=   arr [ l ]; \n                         } \n                         for ( int   m   =   k ;   m   =   j ;   m ++ ) \n                         { \n                             segment_avg2   +=   arr [ m ]; \n                         } \n                         max_val   =   max ( max_val ,   segment_avg   /   k   +   segment_avg2   /   double ( j   -   k   +   1 )); \n                     } \n                     dp [ i ][ j ]   =   max_val ; \n                 } \n                 else \n                 { \n                     for ( int   n   =   j ;   n   =   i ;   n -- )   //let s say the slice is zero based, for the i th slice, the smallest group \n                     //should contain at least i element ex: 1 2 3 4 for 3 slice then at least in DP 12 [3 4](grouped for current slice) is OK \n                     //but for 1 [2 3 4](grouped for current slice) is not right \n                     { \n                         segment_avg   =   0.0f ; \n                         for ( int   k   =   j ;   k   =   n ;   k -- )   //forward to accumulate and the average \n                         /*                          let s say the slice is zero based, for the n th slice.                          ex: for 1 2 3 4 5 and slice for 3 ()as the slice group need to search for the 2-slice of best line(row)                          we will then check (1 2 3 4)(search for i = slice - 1 for the SUBPROBLEM OF SIZE - 1 and j = 3 (since 1 2 3 4 till 4th element)) [5]                          which is value = dp[2][3] + avg(5) = 8.5 + 5 = 13.5                          the same is true for                          (1 2 3) [4 5] value =  dp[2][2] + avg(4 5) = 6 + 4.5 = 10.5                          (1 2) [3 4 5] value = dp[2][1] + avg(3,4,5) =                          (1) [2 3 4 5] //unable to do since the smallest group is less then i - 1 = 3 - 1 = 2                          then we take the max value of these calculation for dp[i][j]                          */ \n                         { \n                             segment_avg   +=   arr [ k ]; \n                         } \n                         //the other part of from 0 to i - 1 there are i elements to search for the previous saved (best value) dp grid \n                         cur_val   =   dp [ i   -   1 ][ n   -   1 ]   +   segment_avg   /   ( double )( j   -   n   +   1 ); \n                         max_val   =   max ( max_val ,   cur_val ); \n                     } \n                     dp [ i ][ j ]   =   max_val ; \n                     //after choosing the max_val of the dp \n                 } \n             } \n         } \n         return   dp [ kin   -   1 ][ arr . size ()   -   1 ]; \n     }  };", 
            "title": "PC. 813. Largest Sum of Averages\u7565\u5acc\u9ebb\u7169\u7684\u52d5\u614b\u898f\u5283\u984c\u76ee"
        }, 
        {
            "location": "/univ_notes/cs_project/cs_proj/", 
            "text": "CS Graduation Project Meeting\n\n\nMar 7, 2018 bootcamp\n\n\nWelcome to coVis lab\n\n\u76f8\u6a5f\u53c3\u6578\uff0c\u5167\u5916\u90e8\u53c3\u6578\uff0c\u5f71\u50cf\u8207\u76f8\u6a5f\u6821\u6b63\uff0c\u5728\u7121\u4eba\u6a5f\u5132\u5b58\u4e09\u570d\u7a7a\u9593\u5f71\u50cf\u6703\u7528\u5230 \n\n\nMar 14, 2018 bootcamp", 
            "title": "CS Graduation Project"
        }, 
        {
            "location": "/univ_notes/cs_project/cs_proj/#cs-graduation-project-meeting", 
            "text": "", 
            "title": "CS Graduation Project Meeting"
        }, 
        {
            "location": "/univ_notes/cs_project/cs_proj/#mar-7-2018-bootcamp", 
            "text": "Welcome to coVis lab \n\u76f8\u6a5f\u53c3\u6578\uff0c\u5167\u5916\u90e8\u53c3\u6578\uff0c\u5f71\u50cf\u8207\u76f8\u6a5f\u6821\u6b63\uff0c\u5728\u7121\u4eba\u6a5f\u5132\u5b58\u4e09\u570d\u7a7a\u9593\u5f71\u50cf\u6703\u7528\u5230", 
            "title": "Mar 7, 2018 bootcamp"
        }, 
        {
            "location": "/univ_notes/cs_project/cs_proj/#mar-14-2018-bootcamp", 
            "text": "", 
            "title": "Mar 14, 2018 bootcamp"
        }
    ]
}
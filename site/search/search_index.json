{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to alfons0329's Blog\n\n\n\n\nAbout Me\n\n\nEducation\n\n\n\n\nBS in Dept. of Computer Science at National Chaio Tung University Taiwan (Sep 2015 - Jun 2019)\n    --- Successfully Applied to Exchange Student Program in Dept. of Computer Science in Carnegie Mellon University (Jan 2019 - May 2019) \n\n\nOverall GPA 3.91/4.3, Major 4.07/4.3 \n\n\nMost Relevant Courses: Intro to Machine Learning, Operating System, STM32 Embedded Microprocessor Lab, Network Security, UAVAutopilot and Computer Vision\n\n\nFavorite area in CS: Machine Learning, Computer Security and Computer Vision\n\n\nStarted to learn programming in Oct. 2015 from zero\n\n\nTime stamp of learning programming language \n\nOct. 2015 C in Intro to Computer Science and Programming\n\nFeb. 2016 C++ in Object-Oriented programming \nGitHub repository of this course\n\nMar. 2016 Verilog in Digital Circuit Lab \nGitHub repository of this course\n\nJun. 2017 JavaScript, processing simple HTML and CSS in my own website practice\nGitHub repository of this course\n\nSep. 2017 Python in Intro to Machine Learning \nGitHub repository of this course\n\nSep. 2017 ARM Assembly in Microprocessor Lab \nGitHub repository of this course\n\n\n\n\nMy GitHub personal page\n\n\nCheck here\n\n\nExperience and achievements in professional area \n\n\n2016 NTU Hackathon Winner, Category: Smart Life \nGitHub repo\n , we build an eye-care sensor which notifies user to set a period for easing one's eyes along with some game-like feature to make it more interesting\nParticipated in 2017 MakeNTU Hackthon, a hackathon mainly focus on software-hardware integration \nGitHub repo\n, we build a dog house with weight-sensor, once someone throw in a garbage, the feeder will work in order to feed the dog, want to make the balance between recycling and animal caring \n\n\nLeadership and extracurricular activities\n\n\nAug. 2015 - Sep. 2016 Swimming Team in National Chiao Tung University, Participated in 2 inter-collegiate swimming competition \n\n\nUniversity graduation projcts\n\n\nLanguage abilities \n\n\nTOEIC 925 and TOEFL iBT102(26/28/23/25) both on First try \n\nWant to try on Japanese JLPT N3(Intermediate level) on Jul. 2018",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-alfons0329s-blog",
            "text": "",
            "title": "Welcome to alfons0329's Blog"
        },
        {
            "location": "/#about-me",
            "text": "",
            "title": "About Me"
        },
        {
            "location": "/#education",
            "text": "BS in Dept. of Computer Science at National Chaio Tung University Taiwan (Sep 2015 - Jun 2019)\n    --- Successfully Applied to Exchange Student Program in Dept. of Computer Science in Carnegie Mellon University (Jan 2019 - May 2019)   Overall GPA 3.91/4.3, Major 4.07/4.3   Most Relevant Courses: Intro to Machine Learning, Operating System, STM32 Embedded Microprocessor Lab, Network Security, UAVAutopilot and Computer Vision  Favorite area in CS: Machine Learning, Computer Security and Computer Vision  Started to learn programming in Oct. 2015 from zero  Time stamp of learning programming language  \nOct. 2015 C in Intro to Computer Science and Programming \nFeb. 2016 C++ in Object-Oriented programming  GitHub repository of this course \nMar. 2016 Verilog in Digital Circuit Lab  GitHub repository of this course \nJun. 2017 JavaScript, processing simple HTML and CSS in my own website practice GitHub repository of this course \nSep. 2017 Python in Intro to Machine Learning  GitHub repository of this course \nSep. 2017 ARM Assembly in Microprocessor Lab  GitHub repository of this course",
            "title": "Education"
        },
        {
            "location": "/#my-github-personal-page",
            "text": "Check here",
            "title": "My GitHub personal page"
        },
        {
            "location": "/#experience-and-achievements-in-professional-area",
            "text": "2016 NTU Hackathon Winner, Category: Smart Life  GitHub repo  , we build an eye-care sensor which notifies user to set a period for easing one's eyes along with some game-like feature to make it more interesting\nParticipated in 2017 MakeNTU Hackthon, a hackathon mainly focus on software-hardware integration  GitHub repo , we build a dog house with weight-sensor, once someone throw in a garbage, the feeder will work in order to feed the dog, want to make the balance between recycling and animal caring",
            "title": "Experience and achievements in professional area "
        },
        {
            "location": "/#leadership-and-extracurricular-activities",
            "text": "Aug. 2015 - Sep. 2016 Swimming Team in National Chiao Tung University, Participated in 2 inter-collegiate swimming competition",
            "title": "Leadership and extracurricular activities"
        },
        {
            "location": "/#university-graduation-projcts",
            "text": "",
            "title": "University graduation projcts"
        },
        {
            "location": "/#language-abilities",
            "text": "TOEIC 925 and TOEFL iBT102(26/28/23/25) both on First try  \nWant to try on Japanese JLPT N3(Intermediate level) on Jul. 2018",
            "title": "Language abilities "
        },
        {
            "location": "/univ_notes/intro_ml/intro_ml/",
            "text": "",
            "title": "Junior 1st sem. Intro. to Machine Learning"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/",
            "text": "Microprocessor Lab\n\n\nFall 2017\n\nLecturer: \nS.L. Tsao\n in CS@NCTU \n\nTime: 5EF @EDB27_NCTU 3IJK @EC222_NCTU\n\n\nMicroprocessor Lab Final Project\n\n\n\n\n\n\nCourse Introduction \n\nThis course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester.\n\n\n\n\n\n\nGoal of this course \n\nTo briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own.\n\n\n\n\n\n\nEmbedded board spec:\n\n1.Nucleo STM32L476RG ARM Microarchitecture \n\n2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided) \n\n3.GPIO Available \n\n\nDetailed specs\n \n\n\n\n\n\n\nIDE for this course\n\nEclipse  AC6 System Workbench for STM32 where JRE7 is required in your system\n\n\n\n\n\n\n1.Download from \nHere for Linux version\n\n\n\n\nLab project and final project \n\nThere are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are\ntypically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language.\n\n\n\n\nAbout my final project\n\n\n\n\nProject name: The RGB Ambient light. \n\n\nFeatures: \n\n1.Fully-customizable RGB proportion control. \n\n2.Color cycle speed controller (faster->original)\n\n3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings\n\n\nGitHub repo for this final project\n\n\nProject demo video\n\n\n\n\nPart0. Origin of this idea and preparation\n\n\n\n\n\n\nOrigin of this idea \n\nI once have the fully-customizable dynamic RGB LED backlit keyboard \nSteelSeries APEXM 650\n \n On account of having not much time in the end of semester(machine learning final project + compiler design final project.)\nMy \nteammate\n and I decided to do it.\n\n\n\n\n\n\nPreparation of materials and tools for this project \n\n1.A STM32L476RG Embedded board\n\n2.Breadboard\n\n3.4pin RGB LED*5 \nClick here\n\n4.R1000 Resistor\n\n5.Some Dupont cables\n\n\n\n\n\n\nPart1. Circuit connection\n\n\n1.Parallel connection of 5 RGB LEDs on the breadboard.\n\n2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output.\n\n3.Connect the keypad to the STM32.\n\n4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter).\n\n5.The GPIO Connection is like.\n\n6.Overall GPIO port configuration.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\nGPIOB\n->\nASCR\n \n|=\n \n0\nb1\n;\n \n//turn on the analog controller in PB0\n\n\n\nvoid\n \nkeypad_init\n()\n//keypad along with GPIO Init together\n\n\n{\n\n\n    \nRCC\n->\nAHB2ENR\n   \n|=\n \n0\nb00000000000000000000000000000111\n;\n \n//open port A,B,C\n\n                      \n//10987654321098765432109876543210\n\n    \nGPIOC\n->\nMODER\n   \n&=\n \n0\nb11111111111111111111111100000000\n;\n \n//pc 3 2 1 0 as input of keypad\n\n    \nGPIOC\n->\nMODER\n   \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n->\nPUPDR\n   \n&=\n \n0\nb11111111111111111111111100000000\n;\n\n    \nGPIOC\n->\nPUPDR\n   \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n->\nOSPEEDR\n \n&=\n \n0\nb11111111111111111111111100000000\n;\n\n    \nGPIOC\n->\nOSPEEDR\n \n|=\n \n0\nb00000000000000000000000001010101\n;\n\n    \nGPIOC\n->\nODR\n     \n|=\n \n0\nb00000000000000000000000000001111\n;\n\n                      \n//10987654321098765432109876543210\n\n    \nGPIOB\n->\nMODER\n   \n&=\n \n0\nb11111111111111110000000011111111\n;\n \n//pb 7 6 5 4 as output of keypad\n\n    \nGPIOB\n->\nPUPDR\n   \n&=\n \n0\nb11111111111111110000000011111111\n;\n\n    \nGPIOB\n->\nPUPDR\n   \n|=\n \n0\nb00000000000000001010101000000000\n;\n\n\n\n\n}\n\n\n\nvoid\n \nGPIO_init_AF\n()\n \n//GPIO Alternate Function Init\n\n\n{\n\n    \n/***************pin and alternate function***************\n\n\n     * PB3 + AF1 which is corresponding to TIM2_CH2 RED\n\n\n     * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN\n\n\n     * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE\n\n\n     ********************************************************/\n\n                       \n//10987654321098765432109876543210\n\n    \nGPIOA\n->\nMODER\n    \n&=\n \n0\nb11111111111111111100111111110011\n;\n\n    \nGPIOA\n->\nMODER\n    \n|=\n \n0\nb00000000000000000010000000001000\n;\n\n    \n//PortA Pin        //10987654321098765432109876543210\n\n    \nGPIOA\n->\nAFR\n[\n0\n]\n   \n=\n  \n0\nb00000010000100000000000000100000\n;\n\n\n    \n//PB3 TIM2_CH2\n\n    \nGPIOB\n->\nAFR\n[\n0\n]\n   \n&=\n \n~\nGPIO_AFRL_AFSEL3\n;\n//AFR[0] LOW\n\n    \nGPIOB\n->\nAFR\n[\n0\n]\n   \n|=\n \n(\n0\nb0001\n<<\nGPIO_AFRL_AFSEL3_Pos\n);\n//PB3 Alternate function mode\n\n\n}\n\n\n\n\n\n\n\nPart2. Key idea of this project\n\n\nThe PWM(Pulse Width Modulation) \nWiki\n\nPWM cycle (HV/ALL) = The proportion where light lights, the longer HV lasts, the brighter of the certain part of RGB(either one) will do.\n\nThe Pulse Width can be used to simulate the analog output like this.\n\n\nPWM Video\n\nThe same is true of other 3 colors, configuring with the following code and expanations.\n\n\n Basic logic for this project \n\nInitialize system -> PWM and timer configuration -> Presskey -> Color changing scheme along with ADC light intensity detection for power saving.\n\n1\n2\n3\n4\nint\n \nkeypad_value\n[\n4\n][\n4\n]\n \n=\n \n{{\n0\n,\n1\n,\n2\n,\n3\n},\n\n                          \n{\n4\n,\n5\n,\n6\n,\n7\n},\n\n                          \n{\n8\n,\n9\n,\n10\n,\n11\n},\n\n                          \n{\n12\n,\n13\n,\n14\n,\n15\n}};\n\n\n\n\n\nkeypad explanation \n\n0 red+\n\n1 green+\n\n2 blue+\n\n3 cycle_speed+\n\n4 red-\n\n5 green-\n\n6 blue-\n\n7 customize mode(0 1 2 4 5 6 applicable)\n\n8 only red\n\n9 only green\n\n10 only blue\n\n11 light ADC mode\n\n12 red+greren\n\n13 green+blue\n\n14 red+blue\n\n15 off system, remember the last state, s.t. user configuration is not lost after shut down\n\n\n Setup the PWM channel\n\nRefer to \nthis pdf\n for PWM channel-GPIO port configuration, each port has its corresponding PWM channel and built-in system clock, be sure to make it right! \n\n\nMore understanding and details are written in comments of the following source code.\n\nPlease refer to \np.1006-1039\n of \nthis pdf\n to see how to config the PWM cycle with certain registers in timer.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\nvoid\n \nTimer_init\n()\n \n//Use 3\n\n\n{\n\n    \n// PA3 + AF1 which is corresponding to TIM2_CH1\n\n    \n// PA1 + AF2 which is corresponding to TIM5_CH2\n\n    \n// PA6 + AF2 which is corresponding to TIM3_CH1\n\n    \nRCC\n->\nAPB1ENR1\n \n|=\n \nRCC_APB1ENR1_TIM2EN\n;\n\n    \nRCC\n->\nAPB1ENR1\n \n|=\n \nRCC_APB1ENR1_TIM3EN\n;\n\n    \nRCC\n->\nAPB1ENR1\n \n|=\n \nRCC_APB1ENR1_TIM5EN\n;\n\n\n    \n//setting for timer 2\n\n    \nTIM2\n->\nCR1\n \n&=\n \n0x0000\n;\n \n//p1027 Turned on the counter as the count up mode\n\n    \nTIM2\n->\nARR\n \n=\n \n(\nuint32_t\n)\nSECOND_SLICE\n;\n//Reload value\n\n    \nTIM2\n->\nPSC\n \n=\n \n(\nuint32_t\n)\nCOUNT_UP\n;\n//Prescaler\n\n    \nTIM2\n->\nEGR\n \n=\n \nTIM_EGR_UG\n;\n     \n//update the counter again p1035\n\n\n    \n//setting for timer 3\n\n    \nTIM3\n->\nCR1\n \n&=\n \n0x0000\n;\n \n//p1027 Turned on the counter as the count up mode\n\n    \nTIM3\n->\nARR\n \n=\n \n(\nuint32_t\n)\nSECOND_SLICE\n;\n//Reload value\n\n    \nTIM3\n->\nPSC\n \n=\n \n(\nuint32_t\n)\nCOUNT_UP\n;\n//Prescaler\n\n    \nTIM3\n->\nEGR\n \n=\n \nTIM_EGR_UG\n;\n//Reinitialize the counter\n\n\n    \n//setting for timer 5\n\n    \nTIM5\n->\nCR1\n \n&=\n \n0x0000\n;\n \n//p1027 Turned on the counter as the count up mode\n\n    \nTIM5\n->\nARR\n \n=\n \n(\nuint32_t\n)\nSECOND_SLICE\n;\n//Reload value\n\n    \nTIM5\n->\nPSC\n \n=\n \n(\nuint32_t\n)\nCOUNT_UP\n;\n//Prescaler\n\n    \nTIM5\n->\nEGR\n \n=\n \nTIM_EGR_UG\n;\n//Reinitialize the counter\n\n\n}\n\n\n\n\nvoid\n \nPWM_channel_init\n()\n\n\n{\n\n    \n/***********************setting for the TIM2_CH2 RED**************************/\n\n    \n// PB3 + AF1 which is corresponding to TIM2_CH2 RED\n\n    \n//Output compare 2 mode\n\n    \nTIM2\n->\nCCMR1\n \n&=\n \n~\nTIM_CCMR1_OC2M\n;\n\n    \n//110: PWM mode 1: TIMx_CNT<TIMx_CCR2-->active, or inactive\n\n    \nTIM2\n->\nCCMR1\n \n|=\n \n(\n0\nb0110\n \n<<\n \nTIM_CCMR1_OC2M_Pos\n);\n\n\n    \n//Output Compare 2 Preload Enable\n\n    \nTIM2\n->\nCCMR1\n \n&=\n \n~\nTIM_CCMR1_OC2PE\n;\n//OCxPE\n\n    \n//1: enable TIMx_CCR1 Preload\n\n    \nTIM2\n->\nCCMR1\n \n|=\n \n(\n0\nb1\n \n<<\n \nTIM_CCMR1_OC2PE_Pos\n);\n\n    \n//enable auto reload pre-load\n\n    \nTIM2\n->\nCR1\n \n|=\n \nTIM_CR1_ARPE\n;\n\n\n    \n//duty cycle initial 50 (CCR2/ARR)\n\n    \n//TIM2->CCR2 = duty_cycle_R;\n\n    \n//enable output compare\n\n    \nTIM2\n->\nCCER\n \n|=\n \nTIM_CCER_CC2E\n;\n\n\n    \n/***********************setting for the TIM5_CH2 GREEN**************************/\n\n    \n// PA1 + AF2 which is corresponding to TIM5_CH2 GREEN\n\n    \n//Output compare 2 mode\n\n    \nTIM5\n->\nCCMR1\n \n&=\n \n~\nTIM_CCMR1_OC2M\n;\n\n    \n//110: PWM mode 1: TIMx_CNT<TIMx_CCR2-->active, or inactive\n\n    \nTIM5\n->\nCCMR1\n \n|=\n \n(\n0\nb0110\n \n<<\n \nTIM_CCMR1_OC2M_Pos\n);\n\n\n    \n//Output Compare 2 Preload Enable\n\n    \nTIM5\n->\nCCMR1\n \n&=\n \n~\nTIM_CCMR1_OC2PE\n;\n//OCxPE\n\n    \n//1: enable TIMx_CCR1 Preload\n\n    \nTIM5\n->\nCCMR1\n \n|=\n \n(\n0\nb1\n \n<<\n \nTIM_CCMR1_OC2PE_Pos\n);\n\n    \n//enable auto reload pre-load\n\n    \nTIM5\n->\nCR1\n \n|=\n \nTIM_CR1_ARPE\n;\n\n\n    \n//duty cycle initial 50 (CCR2/ARR)\n\n    \n//TIM5->CCR2 = duty_cycle_G;\n\n    \n//enable output compare\n\n    \nTIM5\n->\nCCER\n \n|=\n \nTIM_CCER_CC2E\n;\n\n\n    \n/***********************setting for the TIM3_CH1 BLUE**************************/\n\n    \n// PA6 + AF2 which is corresponding to TIM3_CH1 BLUE\n\n    \n//Output compare 2 mode\n\n    \nTIM3\n->\nCCMR1\n \n&=\n \n~\nTIM_CCMR1_OC1M\n;\n\n    \n//110: PWM mode 1: TIMx_CNT<TIMx_CCR2-->active, or inactive\n\n    \nTIM3\n->\nCCMR1\n \n|=\n \n(\n0\nb0110\n \n<<\n \nTIM_CCMR1_OC1M_Pos\n);\n\n\n    \n//Output Compare 2 Preload Enable\n\n    \nTIM3\n->\nCCMR1\n \n&=\n \n~\nTIM_CCMR1_OC1PE\n;\n//OCxPE\n\n    \n//1: enable TIMx_CCR1 Preload\n\n    \nTIM3\n->\nCCMR1\n \n|=\n \n(\n0\nb1\n \n<<\n \nTIM_CCMR1_OC1PE_Pos\n);\n\n    \n//enable auto reload pre-load\n\n    \nTIM3\n->\nCR1\n \n|=\n \nTIM_CR1_ARPE\n;\n\n\n    \n//duty cycle initial 50 (CCR2/ARR)\n\n    \n//TIM3->CCR1 = duty_cycle_B;\n\n    \n//enable output compare\n\n    \nTIM3\n->\nCCER\n \n|=\n \nTIM_CCER_CC1E\n;\n\n\n\n}\n\n\n\n\n\n*\n\n\nPart3. It's time to change the color.\n\n\n\n\n\n\nInitialize to different duty cycle. \n\nEach color has its own PWM cycle, by setting the PWM cycle differently, we will be able to interleave 3 colors\nand mixing them together since there pulse waves have \"time shifting (or say phase shifting)\" to each other. \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n#define RED_START 10\n\n\n#define GREEN_START 91\n\n\n#define BLUE_START 172\n\n\n\nduty_cycle_R\n \n=\n \nRED_START\n;\n\n\nduty_cycle_G\n \n=\n \nGREEN_START\n;\n\n\nduty_cycle_B\n \n=\n \nBLUE_START\n;\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \n//use the time delay mode to make the interleaving and the color changing scheme\n\n    \nfpu_enable\n();\n\n    \nkeypad_init\n();\n\n    \nGPIO_init_AF\n();\n\n    \nTimer_init\n();\n\n    \nconfigureADC\n();\n\n    \nstartADC\n();\n\n    \nduty_cycle_R\n \n=\n \nRED_START\n;\n\n    \nduty_cycle_G\n \n=\n \nGREEN_START\n;\n\n    \nduty_cycle_B\n \n=\n \nBLUE_START\n;\n\n    \ncur_state\n \n=\n \nCYCLE_MODE\n;\n\n    \nwhile\n(\n1\n)\n\n    \n{\n\n        \nPWM_channel_init\n();\n\n        \nchromatic_scheme\n(\nkeypad_scan\n());\n\n    \n}\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\n\n\n\nIncrease, decrease and cycle. \n\nstate_color is the state indicating whether to increase the pulse cycle or decrease, with an view to simulating the sin-wave-like phase wave. \n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nvoid\n \ncycle_mode\n(\nint\n \ndelay_time\n){\n\n    \nPWM_channel_init\n();\n\n    \nif\n \n(\nstate_R\n){\n\n        \nif\n \n(\nduty_cycle_R\n \n>\n \nSECOND_SLICE\n){\n\n            \nstate_R\n \n=\n \n0\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_R\n \n+=\n \n20\n;\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nduty_cycle_R\n \n<\n \n20\n){\n\n            \nstate_R\n \n=\n \n1\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_R\n \n-=\n \n20\n;\n\n        \n}\n\n    \n}\n\n\n    \nif\n \n(\nstate_G\n){\n\n        \nif\n \n(\nduty_cycle_G\n \n>\n \nSECOND_SLICE\n){\n\n            \nstate_G\n \n=\n \n0\n;\n\n    \n}\n \nelse\n \n{\n\n        \nduty_cycle_G\n \n+=\n \n40\n;\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nduty_cycle_G\n \n<\n \n40\n){\n\n            \nstate_G\n \n=\n \n1\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_G\n \n-=\n \n40\n;\n\n        \n}\n\n    \n}\n\n\n    \nif\n \n(\nstate_B\n){\n\n        \nif\n \n(\nduty_cycle_B\n \n>\n \nSECOND_SLICE\n){\n\n            \nstate_B\n \n=\n \n0\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_B\n \n+=\n \n50\n;\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nduty_cycle_B\n \n<\n \n50\n){\n\n            \nstate_B\n \n=\n \n1\n;\n\n        \n}\n \nelse\n \n{\n\n            \nduty_cycle_B\n \n-=\n \n50\n;\n\n        \n}\n\n    \n}\n\n    \nset_timer\n();\n\n    \nstart_timer\n();\n\n    \ndelay_ms\n(\ndelay_time\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nCustomizable mode \n\nIf it is in the customize mode, we are able to increase the proportion of color, to achieve that, just increase/decrease the duty cycle of that color. DELTA_VALUE is used to adjust the amount of duty cycle applied in PWM mode.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ncase\n \n4\n:\n\n\n{\n\n    \nif\n(\nduty_cycle_R\n \n>\n \nDELTA_VALUE\n)\n\n        \nduty_cycle_R\n \n-=\n \nDELTA_VALUE\n;\n \n(\nor\n \nadd\n \nthe\n \nDELTA_VALUE\n)\n\n    \nelse\n\n        \nduty_cycle_R\n \n=\n \n0\n;\n\n    \nbreak\n;\n\n\n}\n\n\n\n\n\n\n\nPart4. More idea: the ADC of light-sensitive resistor\n\n\nThe Earth is now facing the serve global warming, it is vital for us to construct a power saving model, consequently Alice and I came out the idea of using the\nADC to detect the light intensity.\n\nConcept of ADC configuration credit to \nmy classmate's hackMD\n (Add later)\nThe stronger the intensity, the dimmer the light to be to saving the energy since this module is aimed for atmosphere night light. \n\n\nADC Code is here\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\ncase\n \n11\n:\n\n\n{\n\n    \n// light ADC mode for keypad key11\n\n    \ncur_state\n \n=\n \nLIGHT_MODE\n;\n\n    \nbreak\n;\n\n\n}\n\n\n\nif\n(\ncur_state\n \n==\n \nLIGHT_MODE\n)\n\n\n{\n\n    \nget_light_resistor\n();\n\n    \nlight\n \n=\n \n255\n-\n((\nresistor_value\n-\nREF_LIGHT\n)\n/\n10\n);\n\n    \nduty_cycle_R\n \n=\n \nlight\n;\n\n    \nduty_cycle_G\n \n=\n \nlight\n;\n\n    \nduty_cycle_B\n \n=\n \nlight\n;\n\n    \nset_timer\n();\n\n    \nstart_timer\n();\n\n\n}\n\n\n\n\n\n\n\nPart5. Done all.\n\n\nReally thanks to my teammate \nchialice123\n who helps me alot during the semester and in the final project making the project score over 90 and overall semester score to be 95 (93 original and +2 adjust), and \nvava24680\n for teaching me some concepts of ADC configuration.\n\n\nProject demo video",
            "title": "Junior 1st sem. STM32 Microprocessor Embedded Lab"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#microprocessor-lab",
            "text": "Fall 2017 \nLecturer:  S.L. Tsao  in CS@NCTU  \nTime: 5EF @EDB27_NCTU 3IJK @EC222_NCTU",
            "title": "Microprocessor Lab"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#microprocessor-lab-final-project",
            "text": "Course Introduction  \nThis course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester.    Goal of this course  \nTo briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own.    Embedded board spec: \n1.Nucleo STM32L476RG ARM Microarchitecture  \n2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided)  \n3.GPIO Available   Detailed specs      IDE for this course Eclipse  AC6 System Workbench for STM32 where JRE7 is required in your system    1.Download from  Here for Linux version   Lab project and final project  \nThere are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are\ntypically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language.",
            "title": "Microprocessor Lab Final Project"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#about-my-final-project",
            "text": "Project name: The RGB Ambient light.   Features:  \n1.Fully-customizable RGB proportion control.  \n2.Color cycle speed controller (faster->original) \n3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings  GitHub repo for this final project  Project demo video",
            "title": "About my final project"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part0-origin-of-this-idea-and-preparation",
            "text": "Origin of this idea  \nI once have the fully-customizable dynamic RGB LED backlit keyboard  SteelSeries APEXM 650    On account of having not much time in the end of semester(machine learning final project + compiler design final project.)\nMy  teammate  and I decided to do it.    Preparation of materials and tools for this project  \n1.A STM32L476RG Embedded board \n2.Breadboard \n3.4pin RGB LED*5  Click here \n4.R1000 Resistor \n5.Some Dupont cables",
            "title": "Part0. Origin of this idea and preparation"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part1-circuit-connection",
            "text": "1.Parallel connection of 5 RGB LEDs on the breadboard. \n2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output. \n3.Connect the keypad to the STM32. \n4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter). \n5.The GPIO Connection is like. \n6.Overall GPIO port configuration.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 GPIOB -> ASCR   |=   0 b1 ;   //turn on the analog controller in PB0  void   keypad_init () //keypad along with GPIO Init together  { \n\n     RCC -> AHB2ENR     |=   0 b00000000000000000000000000000111 ;   //open port A,B,C \n                       //10987654321098765432109876543210 \n     GPIOC -> MODER     &=   0 b11111111111111111111111100000000 ;   //pc 3 2 1 0 as input of keypad \n     GPIOC -> MODER     |=   0 b00000000000000000000000001010101 ; \n     GPIOC -> PUPDR     &=   0 b11111111111111111111111100000000 ; \n     GPIOC -> PUPDR     |=   0 b00000000000000000000000001010101 ; \n     GPIOC -> OSPEEDR   &=   0 b11111111111111111111111100000000 ; \n     GPIOC -> OSPEEDR   |=   0 b00000000000000000000000001010101 ; \n     GPIOC -> ODR       |=   0 b00000000000000000000000000001111 ; \n                       //10987654321098765432109876543210 \n     GPIOB -> MODER     &=   0 b11111111111111110000000011111111 ;   //pb 7 6 5 4 as output of keypad \n     GPIOB -> PUPDR     &=   0 b11111111111111110000000011111111 ; \n     GPIOB -> PUPDR     |=   0 b00000000000000001010101000000000 ;  }  void   GPIO_init_AF ()   //GPIO Alternate Function Init  { \n     /***************pin and alternate function***************       * PB3 + AF1 which is corresponding to TIM2_CH2 RED       * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN       * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE       ********************************************************/ \n                        //10987654321098765432109876543210 \n     GPIOA -> MODER      &=   0 b11111111111111111100111111110011 ; \n     GPIOA -> MODER      |=   0 b00000000000000000010000000001000 ; \n     //PortA Pin        //10987654321098765432109876543210 \n     GPIOA -> AFR [ 0 ]     =    0 b00000010000100000000000000100000 ; \n\n     //PB3 TIM2_CH2 \n     GPIOB -> AFR [ 0 ]     &=   ~ GPIO_AFRL_AFSEL3 ; //AFR[0] LOW \n     GPIOB -> AFR [ 0 ]     |=   ( 0 b0001 << GPIO_AFRL_AFSEL3_Pos ); //PB3 Alternate function mode  }",
            "title": "Part1. Circuit connection"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part2-key-idea-of-this-project",
            "text": "The PWM(Pulse Width Modulation)  Wiki \nPWM cycle (HV/ALL) = The proportion where light lights, the longer HV lasts, the brighter of the certain part of RGB(either one) will do. \nThe Pulse Width can be used to simulate the analog output like this.  PWM Video \nThe same is true of other 3 colors, configuring with the following code and expanations.   Basic logic for this project  \nInitialize system -> PWM and timer configuration -> Presskey -> Color changing scheme along with ADC light intensity detection for power saving. 1\n2\n3\n4 int   keypad_value [ 4 ][ 4 ]   =   {{ 0 , 1 , 2 , 3 }, \n                           { 4 , 5 , 6 , 7 }, \n                           { 8 , 9 , 10 , 11 }, \n                           { 12 , 13 , 14 , 15 }};   \nkeypad explanation  \n0 red+ \n1 green+ \n2 blue+ \n3 cycle_speed+ \n4 red- \n5 green- \n6 blue- \n7 customize mode(0 1 2 4 5 6 applicable) \n8 only red \n9 only green \n10 only blue \n11 light ADC mode \n12 red+greren \n13 green+blue \n14 red+blue \n15 off system, remember the last state, s.t. user configuration is not lost after shut down   Setup the PWM channel \nRefer to  this pdf  for PWM channel-GPIO port configuration, each port has its corresponding PWM channel and built-in system clock, be sure to make it right!   More understanding and details are written in comments of the following source code. \nPlease refer to  p.1006-1039  of  this pdf  to see how to config the PWM cycle with certain registers in timer.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89 void   Timer_init ()   //Use 3  { \n     // PA3 + AF1 which is corresponding to TIM2_CH1 \n     // PA1 + AF2 which is corresponding to TIM5_CH2 \n     // PA6 + AF2 which is corresponding to TIM3_CH1 \n     RCC -> APB1ENR1   |=   RCC_APB1ENR1_TIM2EN ; \n     RCC -> APB1ENR1   |=   RCC_APB1ENR1_TIM3EN ; \n     RCC -> APB1ENR1   |=   RCC_APB1ENR1_TIM5EN ; \n\n     //setting for timer 2 \n     TIM2 -> CR1   &=   0x0000 ;   //p1027 Turned on the counter as the count up mode \n     TIM2 -> ARR   =   ( uint32_t ) SECOND_SLICE ; //Reload value \n     TIM2 -> PSC   =   ( uint32_t ) COUNT_UP ; //Prescaler \n     TIM2 -> EGR   =   TIM_EGR_UG ;       //update the counter again p1035 \n\n     //setting for timer 3 \n     TIM3 -> CR1   &=   0x0000 ;   //p1027 Turned on the counter as the count up mode \n     TIM3 -> ARR   =   ( uint32_t ) SECOND_SLICE ; //Reload value \n     TIM3 -> PSC   =   ( uint32_t ) COUNT_UP ; //Prescaler \n     TIM3 -> EGR   =   TIM_EGR_UG ; //Reinitialize the counter \n\n     //setting for timer 5 \n     TIM5 -> CR1   &=   0x0000 ;   //p1027 Turned on the counter as the count up mode \n     TIM5 -> ARR   =   ( uint32_t ) SECOND_SLICE ; //Reload value \n     TIM5 -> PSC   =   ( uint32_t ) COUNT_UP ; //Prescaler \n     TIM5 -> EGR   =   TIM_EGR_UG ; //Reinitialize the counter  }  void   PWM_channel_init ()  { \n     /***********************setting for the TIM2_CH2 RED**************************/ \n     // PB3 + AF1 which is corresponding to TIM2_CH2 RED \n     //Output compare 2 mode \n     TIM2 -> CCMR1   &=   ~ TIM_CCMR1_OC2M ; \n     //110: PWM mode 1: TIMx_CNT<TIMx_CCR2-->active, or inactive \n     TIM2 -> CCMR1   |=   ( 0 b0110   <<   TIM_CCMR1_OC2M_Pos ); \n\n     //Output Compare 2 Preload Enable \n     TIM2 -> CCMR1   &=   ~ TIM_CCMR1_OC2PE ; //OCxPE \n     //1: enable TIMx_CCR1 Preload \n     TIM2 -> CCMR1   |=   ( 0 b1   <<   TIM_CCMR1_OC2PE_Pos ); \n     //enable auto reload pre-load \n     TIM2 -> CR1   |=   TIM_CR1_ARPE ; \n\n     //duty cycle initial 50 (CCR2/ARR) \n     //TIM2->CCR2 = duty_cycle_R; \n     //enable output compare \n     TIM2 -> CCER   |=   TIM_CCER_CC2E ; \n\n     /***********************setting for the TIM5_CH2 GREEN**************************/ \n     // PA1 + AF2 which is corresponding to TIM5_CH2 GREEN \n     //Output compare 2 mode \n     TIM5 -> CCMR1   &=   ~ TIM_CCMR1_OC2M ; \n     //110: PWM mode 1: TIMx_CNT<TIMx_CCR2-->active, or inactive \n     TIM5 -> CCMR1   |=   ( 0 b0110   <<   TIM_CCMR1_OC2M_Pos ); \n\n     //Output Compare 2 Preload Enable \n     TIM5 -> CCMR1   &=   ~ TIM_CCMR1_OC2PE ; //OCxPE \n     //1: enable TIMx_CCR1 Preload \n     TIM5 -> CCMR1   |=   ( 0 b1   <<   TIM_CCMR1_OC2PE_Pos ); \n     //enable auto reload pre-load \n     TIM5 -> CR1   |=   TIM_CR1_ARPE ; \n\n     //duty cycle initial 50 (CCR2/ARR) \n     //TIM5->CCR2 = duty_cycle_G; \n     //enable output compare \n     TIM5 -> CCER   |=   TIM_CCER_CC2E ; \n\n     /***********************setting for the TIM3_CH1 BLUE**************************/ \n     // PA6 + AF2 which is corresponding to TIM3_CH1 BLUE \n     //Output compare 2 mode \n     TIM3 -> CCMR1   &=   ~ TIM_CCMR1_OC1M ; \n     //110: PWM mode 1: TIMx_CNT<TIMx_CCR2-->active, or inactive \n     TIM3 -> CCMR1   |=   ( 0 b0110   <<   TIM_CCMR1_OC1M_Pos ); \n\n     //Output Compare 2 Preload Enable \n     TIM3 -> CCMR1   &=   ~ TIM_CCMR1_OC1PE ; //OCxPE \n     //1: enable TIMx_CCR1 Preload \n     TIM3 -> CCMR1   |=   ( 0 b1   <<   TIM_CCMR1_OC1PE_Pos ); \n     //enable auto reload pre-load \n     TIM3 -> CR1   |=   TIM_CR1_ARPE ; \n\n     //duty cycle initial 50 (CCR2/ARR) \n     //TIM3->CCR1 = duty_cycle_B; \n     //enable output compare \n     TIM3 -> CCER   |=   TIM_CCER_CC1E ;  }   \n*",
            "title": "Part2. Key idea of this project"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part3-its-time-to-change-the-color",
            "text": "Initialize to different duty cycle.  \nEach color has its own PWM cycle, by setting the PWM cycle differently, we will be able to interleave 3 colors\nand mixing them together since there pulse waves have \"time shifting (or say phase shifting)\" to each other.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 #define RED_START 10  #define GREEN_START 91  #define BLUE_START 172  duty_cycle_R   =   RED_START ;  duty_cycle_G   =   GREEN_START ;  duty_cycle_B   =   BLUE_START ;  int   main ()  { \n     //use the time delay mode to make the interleaving and the color changing scheme \n     fpu_enable (); \n     keypad_init (); \n     GPIO_init_AF (); \n     Timer_init (); \n     configureADC (); \n     startADC (); \n     duty_cycle_R   =   RED_START ; \n     duty_cycle_G   =   GREEN_START ; \n     duty_cycle_B   =   BLUE_START ; \n     cur_state   =   CYCLE_MODE ; \n     while ( 1 ) \n     { \n         PWM_channel_init (); \n         chromatic_scheme ( keypad_scan ()); \n     } \n     return   0 ;  }      Increase, decrease and cycle.  \nstate_color is the state indicating whether to increase the pulse cycle or decrease, with an view to simulating the sin-wave-like phase wave.      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 void   cycle_mode ( int   delay_time ){ \n     PWM_channel_init (); \n     if   ( state_R ){ \n         if   ( duty_cycle_R   >   SECOND_SLICE ){ \n             state_R   =   0 ; \n         }   else   { \n             duty_cycle_R   +=   20 ; \n         } \n     }   else   { \n         if   ( duty_cycle_R   <   20 ){ \n             state_R   =   1 ; \n         }   else   { \n             duty_cycle_R   -=   20 ; \n         } \n     } \n\n     if   ( state_G ){ \n         if   ( duty_cycle_G   >   SECOND_SLICE ){ \n             state_G   =   0 ; \n     }   else   { \n         duty_cycle_G   +=   40 ; \n         } \n     }   else   { \n         if   ( duty_cycle_G   <   40 ){ \n             state_G   =   1 ; \n         }   else   { \n             duty_cycle_G   -=   40 ; \n         } \n     } \n\n     if   ( state_B ){ \n         if   ( duty_cycle_B   >   SECOND_SLICE ){ \n             state_B   =   0 ; \n         }   else   { \n             duty_cycle_B   +=   50 ; \n         } \n     }   else   { \n         if   ( duty_cycle_B   <   50 ){ \n             state_B   =   1 ; \n         }   else   { \n             duty_cycle_B   -=   50 ; \n         } \n     } \n     set_timer (); \n     start_timer (); \n     delay_ms ( delay_time );  }     Customizable mode  \nIf it is in the customize mode, we are able to increase the proportion of color, to achieve that, just increase/decrease the duty cycle of that color. DELTA_VALUE is used to adjust the amount of duty cycle applied in PWM mode.   1\n2\n3\n4\n5\n6\n7\n8 case   4 :  { \n     if ( duty_cycle_R   >   DELTA_VALUE ) \n         duty_cycle_R   -=   DELTA_VALUE ;   ( or   add   the   DELTA_VALUE ) \n     else \n         duty_cycle_R   =   0 ; \n     break ;  }",
            "title": "Part3. It's time to change the color."
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part4-more-idea-the-adc-of-light-sensitive-resistor",
            "text": "The Earth is now facing the serve global warming, it is vital for us to construct a power saving model, consequently Alice and I came out the idea of using the\nADC to detect the light intensity. \nConcept of ADC configuration credit to  my classmate's hackMD  (Add later)\nThe stronger the intensity, the dimmer the light to be to saving the energy since this module is aimed for atmosphere night light.   ADC Code is here   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 case   11 :  { \n     // light ADC mode for keypad key11 \n     cur_state   =   LIGHT_MODE ; \n     break ;  }  if ( cur_state   ==   LIGHT_MODE )  { \n     get_light_resistor (); \n     light   =   255 - (( resistor_value - REF_LIGHT ) / 10 ); \n     duty_cycle_R   =   light ; \n     duty_cycle_G   =   light ; \n     duty_cycle_B   =   light ; \n     set_timer (); \n     start_timer ();  }",
            "title": "Part4. More idea: the ADC of light-sensitive resistor"
        },
        {
            "location": "/univ_notes/mpslab/mpslab/#part5-done-all",
            "text": "Really thanks to my teammate  chialice123  who helps me alot during the semester and in the final project making the project score over 90 and overall semester score to be 95 (93 original and +2 adjust), and  vava24680  for teaching me some concepts of ADC configuration.  Project demo video",
            "title": "Part5. Done all."
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/",
            "text": "UAV Drone autopilot, computer vision and image processing.\n\n\nSpring 2018\n\nLecturer: \nK.W. Chen\n in CS@NCTU \n\nTime: 4IJK @EC330_NCTU\n\n\nLab1. Introduction to Open CV and installation Mar 01, 2018\n\n\nLab1 pdf\n\n\nInstall Open CV\n\n\n\n\nIn the Ubuntu 16.04 64bit\nRequired dependencies are the followings \n\n1.Git \n\n2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) \n\n3.CMake 2.6 or higher \n\n4.GCC 4.4.x or later \n\n\n\n\n1\nsudo apt-get install libopencv-dev python-opencv\n\n\n\n\nOnce installed\n\n1\npkg-config --modversion opencv\n\n\n\n\nIf the version is shown, then we're good to rock with opencv. \n\n\n\n\nBuild your opencv_file.cpp with CMake or g++ standards\n\n\n\n\n1.With CMake (Don't forget to add CMakeLists.txt)\n\n\n1\n2\n3\n4\n5\ncmake_minimum_required(VERSION\n \n2.8)\n\n\nproject(\n \n<project_name>\n \n)\n\n\nfind_package(\n \nOpenCV\n \nREQUIRED\n \n)\n\n\nadd_executable(\n \n<project_name>\n \n<project_name>.cpp\n \n)\n\n\ntarget_link_libraries(\n \n<project_name>\n \n${OpenCV_LIBS}\n \n)\n\n\n\n\n\n\n\n2.With g++ and flags for opencv libraries\n\n1\ng++ lab1-2.cpp `pkg-config --cflags --libs opencv`\n\n\n\n\n\nToday's course contents\n\n\nBasic understanding of image processing and image data format.\n\nCourse week1 pdf\n\n\nBilinear Interpolation\n\nBasically ,this is an algorithm aimed for image transformation in this lab. \n\nThe interpolated value of a point is a reversely-weighted average of the neighboring points, \n\nsuch method is quite useful in the image transformation.\n\n\nLab2. Image processing in spacial domain, linear and non-linear transformation Mar 08, 2018\n\n\n\n\nSpacial-domain image processing.\n\n\nHistogram equalization and mask processing    \n\n\nEdge detection algorithm: Sobel filter, Laplician smoothing (W.J.Tsai OS Fall2017 HW3) ,sharpening and dege detection.\n\n\nComputer vision \n\n1.Low level measurement such as brightness,Enhancements,Region segments,Features\n\n\n\n\nToday's course contents\n\n\nCourse pdf\n\n\nToday's lab, Spacial Domain histogram equalization.\n\n\n\n\nProblem1 Histogram equalization\n1.We may use the vector to implement the map for statistical data.\n\n2.Accumulate using another vector \n\n3.Count and mapping to the relative proportion * max_value, then that's all \n\n\n\n\nNOTE!!!! THE DEFAULT IMG MAT IS 3-CHANNEL TYPE, NOT ONE CHANNEL GREY-SCALE, SO IF WE DONT DO THE GREY SCALE CONVERSION, ONLY \u2153 OF THE IMAGE WILL BE PROCESSED, THUS THE FOLLOWING CODE IS NEEDED\n\n1\n2\n3\n4\n5\nMat\n \ninput_img\n \n=\n \nimread\n(\nargv\n[\n1\n]);\n\n\n//since the bgr channel is used for default action, then the BGR 3 channel image must be converted to GREY channel\n\n\ncvtColor\n(\ninput_img\n,\n \ninput_img\n,\n \nCV_BGR2GRAY\n);\n\n\nMat\n \noutput_img\n \n=\n \ninput_img\n.\nclone\n();\n\n\nhistogram_equal\n(\ninput_img\n,\n \noutput_img\n);\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nvoid\n \nhistogram_equal\n(\nMat\n&\n \ninput\n,\n \nMat\n&\n \noutput\n)\n\n\n{\n\n    \nvector\n<\nint\n>\n \nhash_distribution\n;\n\n    \nvector\n<\ndouble\n>\n \nintensity_cdf\n;\n\n    \nhash_distribution\n.\nresize\n(\n256\n);\n\n    \nintensity_cdf\n.\nresize\n(\n256\n);\n\n    \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\ninput\n.\nrows\n;\ni\n++\n)\n\n    \n{\n\n        \nfor\n(\nint\n \nj\n=\n0\n;\nj\n<\ninput\n.\ncols\n;\nj\n++\n)\n\n        \n{\n\n            \nhash_distribution\n[(\nint\n)\n \ninput\n.\nat\n<\nuchar\n>\n(\ni\n,\nj\n)]\n++\n;\n\n        \n}\n\n    \n}\n\n\n    \n//search the maxium value\n\n    \nint\n \nmax_value\n \n=\n \n0\n,\n \ncnt\n=\n0\n;\n\n    \ndouble\n \ncumulative_cnt\n \n=\n \n0.0f\n;\n\n    \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\nhash_distribution\n.\nsize\n();\ni\n++\n)\n\n    \n{\n\n        \nif\n(\nhash_distribution\n[\ni\n]\n!=\n0\n)\n\n        \n{\n\n            \nmax_value\n \n=\n \nmax\n(\nmax_value\n,\n \ni\n);\n\n            \ncumulative_cnt\n \n+=\n \n(\ndouble\n)\n \nhash_distribution\n[\ni\n]\n \n/\n \n(\ndouble\n)(\ninput\n.\nrows\n \n*\n \ninput\n.\ncols\n);\n\n            \ncnt\n \n+=\n \nhash_distribution\n[\ni\n];\n\n            \nintensity_cdf\n[\ni\n]\n \n=\n \ncumulative_cnt\n;\n\n            \ncout\n<<\n\"cnt \"\n<<\ncnt\n<<\n\" at \"\n<<\n \ni\n<<\n\" Cumulate to \"\n<<\ncumulative_cnt\n<<\n\" where intensity is now \"\n<<\nintensity_cdf\n[\ni\n]\n<<\nendl\n;\n\n        \n}\n\n    \n}\n\n    \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\ninput\n.\nrows\n;\ni\n++\n)\n\n    \n{\n\n        \nfor\n(\nint\n \nj\n=\n0\n;\nj\n<\ninput\n.\ncols\n;\nj\n++\n)\n\n        \n{\n\n            \noutput\n.\nat\n<\nuchar\n>\n(\ni\n,\nj\n)\n \n=\n \n(\nintensity_cdf\n[\ninput\n.\nat\n<\nuchar\n>\n(\ni\n,\nj\n)]\n \n*\n \nmax_value\n \n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nLab3. Brief introduction to Computer Vision  Mar 15, 2018\n\n\nBinary Machine Vision\n\n\nToday's lab, connected component labeling\n\n\nCheck here\n\n\nLab4. Camera Calibration Mar 29, 2018\n\n\nCourse pdf\n\n\nCamera Calibration\n\n\n\n\n(From official openCV document)Basically, you need to take snapshots of these patterns with your camera and let OpenCV find them. Each found pattern results in a new equation. To solve the equation you need at least a predetermined number of pattern snapshots to form a well-posed equation system. This number is higher for the chessboard pattern and less for the circle ones. For example, in theory the chessboard pattern requires at least two snapshots. However, in practice we have a good amount of noise present in our input images, so for good results you will probably need at least 10 good snapshots of the input pattern in different positions.\n\n\nFirst, download \n, measure the size of those square\n\n\nTake many photos (approx 50 images ) of this grid and save it as jpg file\n\n\nIterate all the point on the\n\n\n\n\nToday's lab, camera calibration and wraping\n\n\nLab4.pdf",
            "title": "Junior 2nd sem. UAV Autopilot and Image Processing"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#uav-drone-autopilot-computer-vision-and-image-processing",
            "text": "Spring 2018 \nLecturer:  K.W. Chen  in CS@NCTU  \nTime: 4IJK @EC330_NCTU",
            "title": "UAV Drone autopilot, computer vision and image processing."
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab1-introduction-to-open-cv-and-installation-mar-01-2018",
            "text": "Lab1 pdf",
            "title": "Lab1. Introduction to Open CV and installation Mar 01, 2018"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#install-open-cv",
            "text": "In the Ubuntu 16.04 64bit\nRequired dependencies are the followings  \n1.Git  \n2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy)  \n3.CMake 2.6 or higher  \n4.GCC 4.4.x or later    1 sudo apt-get install libopencv-dev python-opencv  \nOnce installed 1 pkg-config --modversion opencv  \nIf the version is shown, then we're good to rock with opencv.    Build your opencv_file.cpp with CMake or g++ standards   1.With CMake (Don't forget to add CMakeLists.txt)  1\n2\n3\n4\n5 cmake_minimum_required(VERSION   2.8)  project(   <project_name>   )  find_package(   OpenCV   REQUIRED   )  add_executable(   <project_name>   <project_name>.cpp   )  target_link_libraries(   <project_name>   ${OpenCV_LIBS}   )    2.With g++ and flags for opencv libraries 1 g++ lab1-2.cpp `pkg-config --cflags --libs opencv`",
            "title": "Install Open CV"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-course-contents",
            "text": "Basic understanding of image processing and image data format. Course week1 pdf  Bilinear Interpolation \nBasically ,this is an algorithm aimed for image transformation in this lab.  \nThe interpolated value of a point is a reversely-weighted average of the neighboring points,  \nsuch method is quite useful in the image transformation.",
            "title": "Today's course contents"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab2-image-processing-in-spacial-domain-linear-and-non-linear-transformation-mar-08-2018",
            "text": "Spacial-domain image processing.  Histogram equalization and mask processing      Edge detection algorithm: Sobel filter, Laplician smoothing (W.J.Tsai OS Fall2017 HW3) ,sharpening and dege detection.  Computer vision  \n1.Low level measurement such as brightness,Enhancements,Region segments,Features",
            "title": "Lab2. Image processing in spacial domain, linear and non-linear transformation Mar 08, 2018"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-course-contents_1",
            "text": "Course pdf",
            "title": "Today's course contents"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-lab-spacial-domain-histogram-equalization",
            "text": "Problem1 Histogram equalization\n1.We may use the vector to implement the map for statistical data. \n2.Accumulate using another vector  \n3.Count and mapping to the relative proportion * max_value, then that's all    NOTE!!!! THE DEFAULT IMG MAT IS 3-CHANNEL TYPE, NOT ONE CHANNEL GREY-SCALE, SO IF WE DONT DO THE GREY SCALE CONVERSION, ONLY \u2153 OF THE IMAGE WILL BE PROCESSED, THUS THE FOLLOWING CODE IS NEEDED 1\n2\n3\n4\n5 Mat   input_img   =   imread ( argv [ 1 ]);  //since the bgr channel is used for default action, then the BGR 3 channel image must be converted to GREY channel  cvtColor ( input_img ,   input_img ,   CV_BGR2GRAY );  Mat   output_img   =   input_img . clone ();  histogram_equal ( input_img ,   output_img );     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 void   histogram_equal ( Mat &   input ,   Mat &   output )  { \n     vector < int >   hash_distribution ; \n     vector < double >   intensity_cdf ; \n     hash_distribution . resize ( 256 ); \n     intensity_cdf . resize ( 256 ); \n     for ( int   i = 0 ; i < input . rows ; i ++ ) \n     { \n         for ( int   j = 0 ; j < input . cols ; j ++ ) \n         { \n             hash_distribution [( int )   input . at < uchar > ( i , j )] ++ ; \n         } \n     } \n\n     //search the maxium value \n     int   max_value   =   0 ,   cnt = 0 ; \n     double   cumulative_cnt   =   0.0f ; \n     for ( int   i = 0 ; i < hash_distribution . size (); i ++ ) \n     { \n         if ( hash_distribution [ i ] != 0 ) \n         { \n             max_value   =   max ( max_value ,   i ); \n             cumulative_cnt   +=   ( double )   hash_distribution [ i ]   /   ( double )( input . rows   *   input . cols ); \n             cnt   +=   hash_distribution [ i ]; \n             intensity_cdf [ i ]   =   cumulative_cnt ; \n             cout << \"cnt \" << cnt << \" at \" <<   i << \" Cumulate to \" << cumulative_cnt << \" where intensity is now \" << intensity_cdf [ i ] << endl ; \n         } \n     } \n     for ( int   i = 0 ; i < input . rows ; i ++ ) \n     { \n         for ( int   j = 0 ; j < input . cols ; j ++ ) \n         { \n             output . at < uchar > ( i , j )   =   ( intensity_cdf [ input . at < uchar > ( i , j )]   *   max_value   ); \n         } \n     }  }",
            "title": "Today's lab, Spacial Domain histogram equalization."
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab3-brief-introduction-to-computer-vision-mar-15-2018",
            "text": "",
            "title": "Lab3. Brief introduction to Computer Vision  Mar 15, 2018"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#binary-machine-vision",
            "text": "",
            "title": "Binary Machine Vision"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-lab-connected-component-labeling",
            "text": "Check here",
            "title": "Today's lab, connected component labeling"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#lab4-camera-calibration-mar-29-2018",
            "text": "Course pdf",
            "title": "Lab4. Camera Calibration Mar 29, 2018"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#camera-calibration",
            "text": "(From official openCV document)Basically, you need to take snapshots of these patterns with your camera and let OpenCV find them. Each found pattern results in a new equation. To solve the equation you need at least a predetermined number of pattern snapshots to form a well-posed equation system. This number is higher for the chessboard pattern and less for the circle ones. For example, in theory the chessboard pattern requires at least two snapshots. However, in practice we have a good amount of noise present in our input images, so for good results you will probably need at least 10 good snapshots of the input pattern in different positions.  First, download  , measure the size of those square  Take many photos (approx 50 images ) of this grid and save it as jpg file  Iterate all the point on the",
            "title": "Camera Calibration"
        },
        {
            "location": "/univ_notes/uav_autopilot/uav_autopilot/#todays-lab-camera-calibration-and-wraping",
            "text": "Lab4.pdf",
            "title": "Today's lab, camera calibration and wraping"
        },
        {
            "location": "/univ_notes/network_security/network_security/",
            "text": "Network Security\n\n\nSpring 2018 \n\nLecturer: Shiuhpyng Shieh \n\n\nCh2. Symmetric Encryption and Message Confidentiality\n\n\nRSA Encryption standard\n\n\n\n\nAsymmetric encryption standard.\nThis encryption standard mainly focus on prime factorisation\n\u66f4\u591a\u8cc7\u8a0a\u53ef\u4ee5\u53c3\u8003\n\u5916\u661f\u4eba\u7684\u7b46\u8a18\n\n\n\n\nCourse project1. Chosen cipher attack\n\n\n\n\nWill post report after the session of this homework ends.\n\n\n\n\nDES Encryption standard\n\n\n\n\nAn encryption algorithm use round, permutation shift and XOR operation to generate the ciphertext.\n\n\nDivide the plaintext into 64-bit-long in size for each if the block, and use the same length key for encryption(actually the key is not in the same length since there are 8 bits used for the parity-checking during the encryption)\n\n\n\nImage src\n\n\nDES Briefly introduction\n\n\nProne to brute force attack since the key space is too small to guarantee the safe area, so the safer 3-DES algorithm is used nowadays.\n\n\n16rounds are needed for the encryption process\n\n\nThe encryption and decryption are run under the same algorithm but they are in the reverse order with each other\n\n\nThis is a model based on the \nFiestel model\n, namely for the encryption and decryption they use the same function but in the reversed order.\n\n\n\n\nFrom DES to 3DES\n\n\n\n\nDES is not so secure since the key is 56bits long, which is quite prone to BF cryptanalysis\n\n\n3DES lengthens the key of DES (56 * 3 = 168), doing DES 3 times to make the encryption safer.\n\n\n\n\n \n\n* Please feel free to refer to my classmate's \nnote\n for more information\n\n\nAES Encryption standard\n\n\n\n\nMake a better encryption of 3DES, namely evolve from 3DES for a stronger and faster encryption algorithm.\n\n\nAES is still the same as the DES in the category of block cipher encryption, but the block size of AES is 128 bits, doubled of the DES encryption.\n\n\n10 Rounds of encryption again and again is needed.\n\n  \n Image source from textbook\nOne grey-coloured box is the one \"round\" of the encryption in AES\n\nEach of the round we take the preceding round's output as the input of this round and do the encryption again, with the following 4 tasks to be done\n\n1.The \nSubstitution Bytes\n is to use the non-linear transform to let the input transformed with a \"Affine transformation\", making the encryption robust and hard to be cracked\n\n2.The \nShift Rows(Bit transposition)\n is shifting the data, to rearrange the text, for row i we shift i-1 times to the left.\n\n\n\n\n Image source from wikipedia \n\n3.The \nMix Columns\n is a linear transform under the mod multiplication \n\n4.The \nAdd Round Key\n is let the input XOR with the Key in the current state. (Rijndael key generator solution,which is a subkey in each round, which we can be seen from the image provided above that Key(16 bytes and expand to match for each round, divided into 10 subkeys for 10 operations in AES encryption))\n\n5.After the aforementioned four steps are done, go to the next encryption box. The operation is bytewise\n\n\n\n\nThe truly random number and pseudo random number\n\n\n\n\n\n\nApplications of the random number\n1.RSA pub-key generation and other pub-key algorithms.\n\n2.Session key for encryption in system such as Wi-Fi, e-mail\n\n\n\n\n Image source from wikipedia \n\n\n\n\n\n\nThe following 2 criteria are used to validate a sequence is random. \n\n1.Uniform distribution: The each element in the seed of random number must take the same proportion of being taken out.\n\n2.Independence: A sequence cannot be inferred from the other sequence, strictly and absolutely.\n\n\n\n\n\n\nBlock cipher vs Stream cipher\n\n\nStream cipher\n\n\n\n\nChange the encryption key from time to time, and each time the two part(sender-receiver) can generate the same random key s.t. they can encrypt and decrypt the same message.\nThe key of such encryption algorithm should have a extremely large period and as random as possible, o.w. it is crack-prone.\n\nIn order to guard the BF attack, the longer key is preferred (However there is a trade-off b/w speed and security.)\n\n\nAs we can see the sender and receiver generate the same key for encryption and decryption.\nImage source from textbook \n\n\nRC4 Algorithm\n1.An algorithm with changeable key length encryption. \n\n2.SSL TLS WEP WPA use this encryption algorithm\n\n3.Easy to implement in both HW ans SW, but terminated in 2015 due to attack\n\n\n\n\nRC4 Encryption procedure \n\n1.Shuffle the key, make it randomised.\n\n1\n2\n3\n4\n5\n6\n7\n8\nfor\n \ni\n \nfrom\n \n0\n \nto\n \n255\n\n     \nS\n[\ni\n]\n \n:=\n \ni\n\n \nendfor\n\n \nj\n \n:\n=\n \n0\n\n \nfor\n(\n \ni\n=\n0\n \n;\n \ni\n<\n256\n \n;\n \ni\n++\n)\n\n     \nj\n \n:\n=\n \n(\nj\n \n+\n \nS\n[\ni\n]\n \n+\n \nkey\n[\ni\n \nmod\n \nkeylength\n])\n \n%\n \n256\n \n//randomly take the new j and swap, make a permutation\n\n     \nswap\n \nvalues\n \nof\n \nS\n[\ni\n]\n \nand\n \nS\n[\nj\n]\n\n \nendfor\n\n\n\n\n\n2.Get even more shuffle data, each time for a input byte, locate the i and j value by take the value in the key, XOR the inputByte with the key (since the reverse of XOR operation is itself, once we insert the ciphertext we'll get plaintext, and converse is true as well.)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ni\n \n:\n=\n \n0\n\n\nj\n \n:\n=\n \n0\n\n\nwhile\n \nGeneratingOutput\n:\n\n    \ni\n \n:\n=\n \n(\ni\n \n+\n \n1\n)\n \nmod\n \n256\n   \n//a\n\n    \nj\n \n:\n=\n \n(\nj\n \n+\n \nS\n[\ni\n])\n \nmod\n \n256\n \n//b\n\n    \nswap\n \nvalues\n \nof\n \nS\n[\ni\n]\n \nand\n \nS\n[\nj\n]\n  \n//c\n\n    \nk\n \n:\n=\n \ninputByte\n \n^\n \nS\n[(\nS\n[\ni\n]\n \n+\n \nS\n[\nj\n])\n \n%\n \n256\n]\n \n//XOR operation suit for this case. Reverse operation also works\n\n    \noutput\n \nK\n\n\nendwhile\n\n\n\n\n\n\nBlock cipher\n\n\n\n\n\n\nUse the same key for the text, and divide the text into blocks, processing ONE BLOCK for each time. Processing procedure including shift position, substitute text to let the plaintext look similar, however, generating the\ntotally different ciphertext for cryptographically secure. \n\n\n\n\n\n\nThe AES(128 bits per block), DES(64 bits per block), 3DES(64 bits per block) are lie in this category.\n\n\n\n\n\n\n5 Block modes for the block cipher, defined by NIST USA. Intended to use for the symmetric cipher.  .\n\n\n\n\n\n\n1.Electronic Code Book where Encryption:  ciphertext[i] = code_book[plaintext[i]] just. Need a decryptor to do reversed tasks.\n\n2.Cipher Block Chaining, take the step i's ciphertext XOR with next step's plaintext and encrypt again. \nIf there is a bit error in the ciphertext, it will cause the decryption of plaintext i and plaintext i+1 error since they are chained together from step to step.\n\n\n \n\n3.Cipher FeedBack , only the encryptor is needed, 2 times of encryption is equivalent to decryption.\n\n\n \n\n4.CounTeR , use the counter directly for the key of encryption. Can be processed parallelly since each block can be processed with its counter and independent with other blocks, random access is suitable as well. And use the same key for decryption due to the properties of XOR operation, once the ciphertext XOR key ---> plaintext is decrypted.\n\nThe CTR mode is both HW and SW efficiency (parallelism are able to implemented in both CPU and compiler, OS ...etc). \n\nWhat's more, the preprocessing can be done as well, even without the presence of the plaintext, we can still generate the required key and the next task is just let plaintext XOR key ---> ciphertext.\n\n\n5.Output FeedBack similar too Cipher FeedBack, take the ciphertext from previous round and encrypt again\n\n\nUseful reference site ,MUST READ!!!\n\n\nCh3. Message Authencation and Public Key Cryptography\n\n\nMessage Authencation Code (MAC)\n\n\n\n\nUsing some hash value of the data and encrypt that value at the end of data for validation (see the image below)\n\n\nClarify!!: MAC cannot perform the data encryption, it can only be used for data authentication and validation. \n\n\nSuch as parity checking is also a kind of message authentication. \n\n\n \n\n\n Image source from wikipedia \n\n\n\n\nSecure Hash Functions\n\n\n \n\n1.Collision and preimage-found resistant, making it unable to do the reverse of hash to forge the data. \n\n\nSHA Encryption standard\n\n\n\n\n\n\nTerm explanation (waiting for the answer from OAlienO) \n\n1.Message Digest Size: Message digest, MD(same as MD of MD5), of how much data amount we output, such as in the following SHA1 algorithm, we produce 160bits output (hex * 40 = 160). \n\n\n\n2.Message Size: Message amount that we can process in one time(Maxium input).\n\n3.Block Size: In block cipher, cut all the message into several blocks, in the block is how much message in a block to be processed\n\n4.Word Size: A size of a given state.\n\n\n\n\n\n\nThe following are the Message digest from the SHA512.\n\n\n\n\n\n\n\nHashing, Why and How?\n\n\nhash youtube\n \n\n\n\n\nHash aims for reduce the huge amount of data to the small amount.\n\n\nCan be used for verify and prevent the errors in the communication.\n\n\nEvan a small change in the original plaintext (such as only a bit), it will cause the totally different hash value, this\nresult is called Avalanche Effect. It ensures the security of hash algorithm.\n\n\nHash has to be one-way and pre image, collision-resistant, otherwise , data will be forged.\n\nHash is doomed to be broken or cracked, what matters is that we have to try out best to lengthen the time before being cracked\n\n\n\n\n\n\nHash-based message authentication code (HMAC)\n\n\nWatch out the color correspondence for better understanding the procedure\n\n\n\n\n\n\nMessage encryption vs Message digestion(hashing), what is the difference?\n\n\nso encryption-vs-digest\n \n\n\nso how-is-an-md5-or-sha-x-hash-different-from-an-encryption\n \n\n\nhash ,encryption and more\n \n\n\nso why-should-i-use-authenticated-encryption-instead-of-just-encryption\n \n\n\n\n\nEncryption: Really make the message secret, hard to be cracked and aims for security.\n\nkey difference between encryption and hashing is that encrypted strings can be reversed back into their original decrypted form if you have the right key\n ex. RSA AES DES ...\n\n\nDigestion (hashing): Digest the whole data, may be used for message authentication, producing an ID or FINGERPRINT of the input data.\n\nHashing is great for usage in any instance where you want to \ncompare a value with a stored value, but can't store its plain representation for security reasons\n. Other use cases could be checking the last few digits of a credit card match up with user input or comparing the hash of a file you have with the hash of it stored in a database to make sure that they're both the same. ex. MD5 SHA ...\n\n\nFurthermore, if the digested data is encrypted, than it can be used for DIGITAL SIGNATURE.\n1.For example in SHA family \n\u80fd\u8a08\u7b97\u51fa\u4e00\u500b\u6578\u4f4d\u8a0a\u606f\u6240\u5c0d\u61c9\u5230\u7684\uff0c\u9577\u5ea6\u56fa\u5b9a\u7684\u5b57\u4e32\uff08\u53c8\u7a31\u8a0a\u606f\u6458\u8981\uff09\u7684\u6f14\u7b97\u6cd5\u3002\u4e14\u82e5\u8f38\u5165\u7684\u8a0a\u606f\u4e0d\u540c\uff0c\u5b83\u5011\u5c0d\u61c9\u5230\u4e0d\u540c\u5b57\u4e32\u7684\u6a5f\u7387\u5f88\u9ad8\u3002\n\n\nOAlienO : SHA \u4e0d\u662f\u52a0\u5bc6\u56e0\u70ba\u4ed6\u6c92\u8fa6\u6cd5\u89e3\u56de\u539f\u672c\u7684 input\n\n\n\n\nAuthenticated encryption\n\n\n\n\nA term used to describe encryption systems that simultaneously protect confidentiality and authenticity of communications.\n\n\nCompared with traditional encryption, the authenticated encryption  additionally provides authenticity, while plain encryption provides only confidentiality.\n\n\nUsually more complicated than confidentiality-only or authenticity-only schemes.\n\n\n\n\n\nPublic key cryptography\n\n\n\n\nEncrypt with public key: Want to send someone a message that only they(certain of groups,...etc) will be able to read, encrypt it with that person's public key.\n\n\nEncrypt with private key: Want to publish some information and guarantee that you're the author \n(Reason is that the only person who encrypt with HIS PRIVATE KEY CAN ONLY BE THE ORGINAL AUTHOR, and everyone can use the public related to that private key to decrypt it)\n, and that it hasn't been tampered with, then you encrypt it with your private key.(We can as well use the authenticated encryption to ensure the authenticity. Just like the aforementioned \nDigital signature\n)\n\n\n\nso What is we encrypt with private key??\n\n\n\n\nPrivate key vs Secret key, what is the difference?\n\n\n\n\nPrivate key: Use in asymmetric encryption.\n\n\nSecret key: Use in symmetric encryption, but it is quite hard for us (or say unsafe) to exchange secret key, so the Diffie Hellman key exchange algorithm is invented.\n\n\n\n\nDiffie Hellman key exchange\n\n\n\n\nA way to exchange the secret key via an unsafe path\n\n\n\nMath theory behind this algorithm\n\n\n\n\nSSL, TLS, SFTP use it. Like the AES implemetation AES is symmetric encryption and a shared-secret-key exchange is needed for end-to-end data encryption.\n\n\nBoth of end to end does not need to know each other (or cant break) his / her provate key but share a same secret key to do secret data exchange.\n\n\nIn this algorithm, we should choose a very big a, b and p s.t. Bob is unable so solve 'a' of Alice's secret and neither is Alice. o.w. Eve will hack into it and solve the shared secret key.\n\n\nAside from the RSA, why use Diffie Hellman key exchange? \n\nSince the process of RSA is quite burdensome (numbers in it are extremely huge) so if we can back to the traditional symmetric encryption such as AES (just now we need a \"secure pipe\" under the \"insecure pipe\") to perform key exchange.\nThan the end-to-end encryption can be achieved, what's more, this method is faster in which stream cipher are performed\n\n\n\n\nMan in the middle attack (MITM)\n\n\n\n\nThe MITM forges the key of both side and deceives them, act as both fake Alice and Bob.\n\n\nAnd the wikipedia analogy ,note: sequence different from the image\n\n\n\nThe core idea about this is still the mathematical expression, for example for the secret key K1, since Darth intercepts the message, then he can forge the key with his secret key XD2 ,due to the following mathematical theory about modulo exponential.\n\n\n \n\nSo Alice is able to acquire the secret key via her own private key XA due to the upper math theory. \nBUT SHE DOES NOT KNOW THAT YD2 ACTUALLY COMES FROM DARTH and DARTH now share the same key with Alice, so Alice thinks that Darth is Bob!! and the same is true for Bob!!\n \n\nOriginally the shared secret key should be lie on the mathematical expression like this\n\n\n \n\nRather than this \n\n\n \n\n\n\n\nCh.4 Key Distribution and User Authentication\n\n\nKey distribution\n\n\n\n\nUsed in the symmetric key crypto system to exchange keys from one end point to another.\n\n\n\n\nKerberos and its components\n\n\n\n\nCentralised key distribution and authentication service b/w user and server(3\nrd\n party) that relies on symmetric encryption (No public key in it)\n\n\nGenerates a symmetric secret key b/w two end points.\n\n\nDistributed system makes computing power better.\n\n\nDuring the key's lifetime (embedded in the message), the key can be used again and again.\n\n\nCentral idea relies on the trustworthy 3RD PARTY SERVER\n\n\n\n\nAuthencation server (AS)\n\n\n\n\nAuthenticate the user\n\n\n\n\nTicket granting server (TGS)\n\n\n\n\nGrant authenticated user permissions to act with the real server (SS, Service Server)\n\nwikipedia for detailed procedure\n \n\n\nDetailed explanation video\n \n\n\n\n\nTimestamp portocal vs Challenge-Response Portocal\n\n\nTimestamp portocal\n\n\n\n\nRecord the timestamp of each data transaction.\n\n\nProne to replay attack(a kind of MITM attack) if the clocks b/w the client and server is not synchronised\nBut how come will this happen?? \n\nIf the system time is not synchronised, then suppose the end point EA is slower, then the MITM can intercept the message b/w two endpoint and resend the password again to hack and pretend to be the genuine user. What's more, since the time is slower in EA, then as the MITM intercepts data and resend, it does need some time to \"RETRANSMIT\" , but it is the slower time that allows the delay of retransmit time not be discovered if the time difference |T_received - T_send| < epsilon is not so strict.\n\n\n\n\nChallenge-Response Portocal\n\n\n\n\nReference this video first!\n\n\nThe server and the receiver share a certain kind of \"shared secret\" that might be generated as the user registered in the system.\n\n\nEnsures the \"Mutual Authentication\"\n\n\nThe procedure as follows:\nServer sends a unique challenge value sc to the client\n\nClient sends a unique challenge value cc to the server\n\nServer computes sr = hash(cc + secret) and sends to the client\n\nClient computes cr = hash(sc + secret) and sends to the server\n\nServer calculates the expected value of cr and ensures the client responded correctly\n\nClient calculates the expected value of sr and ensures the server responded correctly\nwhere\n\nsc is the server generated challenge\n\ncc is the client generated challenge\n\ncr is the client response\n\nsr is the server response\n\n\nSince the secret is shared b/w the server and client, then is is able to verify the genuine of both server and client  \n\n\nA good challenge/response system will generate a new challenge for every transaction or session (and make sure that previous challenges are not reused!), so that session transcripts cannot be spliced together to create new fraudulent systems. (Maybe the challenge will be encrypted in both parties)\n\n\n\n\nComparison b/w Kerberos v4 and Kerberos v5\n\n\nReference here\n\n\n\n\nv4 is prone to MITM attack and v5 is not.\n\n\nBoth of them provides mutual authentication\n\n\n\n\nWhat is mutual authentication and why we need it??\n\n\n\n\n\n\n\u7591\u554f\uff1aMutual authentication \u76f8\u8f03\u65bc one way \u4ed6\u7684\u597d\u8655\u662f \u53ef\u4ee5\u540c\u6642\u9a57\u8b49 \u4f3a\u670d\u5668\u65b9\u548c\u4f7f\u7528\u8005\u65b9\u561b\uff1f\uff1f\n\u5c31\u662f\u4f3a\u670d\u5668\u80fd\u78ba\u8a8d\u9019\u500buser \u800c\u4e14\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u78ba\u8a8d\u9019\u500bserver\n\u4f46\u662f\u539f\u672c\u53ea\u6709usr\u4f86\u78ba\u8a8dserver\n\u591a\u51fa\u9019\u500bserver\u4f86\u78ba\u8a8dusr \u6703\u6709\u4ec0\u9ebc\u512a\u9ede\u5462\uff1f\n\u89e3\u7b54\uff1a\u56e0\u70bauser\u548cserver\u90fd\u6709\u53ef\u80fd\u88ab\u4eff\u5192\uff0c\u56e0\u6b64\u9700\u8981\u96d9\u91cd\u8a8d\u8b49\u96d9\u65b9\u3002\n\n\n\n\n\n\nBoth the server and client may be inpersonated, so we need to verify their real identification.\n\n\n\n\n\n\nKey distribution with asymmetric encryption (Public key certificate)\n\n\n\n\nThe well known SSL use this method ,and the X.509 standard is used.\n\n\nAimed to solve the problem that we want to verify the authentication of some authorities by the trusted certificated authority (CA)\n\n\nStep as follows\n\n\n\nVerify the signature that generated by CA to ensure the reality.\n\n\n\n\nWhat is the difference b/w the digital signature and public key authentication.\n\n\n\n\nFrom stackoverflow:\nA digital signature is used to verify a message. It is basically an encrypted hash (encrypted by the private key of the sender) of the message. The recipient can check if the message was tampered with by hashing the received message and comparing this value with the decrypted signature (decrypted the signature with the public key from the sender).\n\n\n\n\nTo decrypt the signature, the corresponding public key is required. \nA digital certificate is used to bind public keys to persons or other entities. If there were no certificates, the signature could be easily be forged, as the recipient could not check if the public key belongs to the sender.\n\n\nOriginal discussion thread \n \n\n\nSimilar reference\n \n\n\n\n\nThe \"Chain of Trust\" SSL certificate, root certificate are all related to this topic \nActually the public key certification (certification distribution of authorize a genuine key) is the core concept of SSL/TLS portocal\n\n\nChain of Trust YouTube video\n\n\nPrivate key of root CA should be absolutely inaccessible.\n\n\nOnce the \"Chain of Trust\" is successfully formed, an secure communication path can be formed (TLS using SSL certificate to do such things)\n\n\n\n\nSo a question comes to my mind, \nWhat is the differenct b/w HTTPS,TLS and SSL?\n\n\n\n\nAnswer as follows:\n1.TLS is just the new name (or say acronym) of SSL Namely, SSL protocol got to version 3.0; TLS 1.0 is \"SSL 3.1\". TLS versions currently defined include TLS 1.1 and 1.2. Each new version adds a few features and modifies some internal details. We sometimes say \"SSL/TLS\".\n\n\n\n\n2.HTTPS is the HTTP under the secured transmission protocol, i.e. HTTPS is HTTP-within-SSL/TLS. SSL (TLS) establishes a secured, bidirectional tunnel for arbitrary binary data between two hosts.\n\n\nWhy chain of trust??\n\n\n\n\nEven though the asymmetric (Public-key cryptography RSA) can ensure the secret communication, digital signature can ensure the correctness of content\n, however, we are still not sure about whether the issuer of the digital certificate is the real \"good guy\" or the \"forged guy.\"\n\nwikipedia ref\n\n\n\n\nPKI, CA, Key...etc great explanation video\n\n\nHere\n\n\n\n\nA public key infrastructure (PKI) is a set of roles, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption.\n\n\n\n\nWhen to revoke a user's certification??\n\n\n\n\nThe user\u2019s private key is assumed to be compromised(\u5047\u5b9a\u88ab\u6d29\u6f0f\u51fa\u53bb\u4e86)\n\n\nThe user is no longer certified by this CA; reasons for this\ninclude subject\u2019s name has changed, the certificate is\nsuperseded, or the certificate was not issued in conformance\nwith the CA\u2019s policies\n\n\nThe CA\u2019s certificate is assumed to be compromised\n\n\n\n\nThe PKI architecture\n\n\n\n\nPKI YouTube video\n\n* PKI is a framework that some vendor and use...etc should follow, and PKI associates a public key with a verified person/system.\n\n\n\nAll the pics , images credits to the original author, I only use it for the education purpose, please DO NOT distribute",
            "title": "Junior 2nd sem. Network Security"
        },
        {
            "location": "/univ_notes/network_security/network_security/#network-security",
            "text": "Spring 2018  \nLecturer: Shiuhpyng Shieh",
            "title": "Network Security"
        },
        {
            "location": "/univ_notes/network_security/network_security/#ch2-symmetric-encryption-and-message-confidentiality",
            "text": "",
            "title": "Ch2. Symmetric Encryption and Message Confidentiality"
        },
        {
            "location": "/univ_notes/network_security/network_security/#rsa-encryption-standard",
            "text": "Asymmetric encryption standard.\nThis encryption standard mainly focus on prime factorisation\n\u66f4\u591a\u8cc7\u8a0a\u53ef\u4ee5\u53c3\u8003 \u5916\u661f\u4eba\u7684\u7b46\u8a18",
            "title": "RSA Encryption standard"
        },
        {
            "location": "/univ_notes/network_security/network_security/#course-project1-chosen-cipher-attack",
            "text": "Will post report after the session of this homework ends.",
            "title": "Course project1. Chosen cipher attack"
        },
        {
            "location": "/univ_notes/network_security/network_security/#des-encryption-standard",
            "text": "An encryption algorithm use round, permutation shift and XOR operation to generate the ciphertext.  Divide the plaintext into 64-bit-long in size for each if the block, and use the same length key for encryption(actually the key is not in the same length since there are 8 bits used for the parity-checking during the encryption)  Image src  DES Briefly introduction  Prone to brute force attack since the key space is too small to guarantee the safe area, so the safer 3-DES algorithm is used nowadays.  16rounds are needed for the encryption process  The encryption and decryption are run under the same algorithm but they are in the reverse order with each other  This is a model based on the  Fiestel model , namely for the encryption and decryption they use the same function but in the reversed order.",
            "title": "DES Encryption standard"
        },
        {
            "location": "/univ_notes/network_security/network_security/#from-des-to-3des",
            "text": "DES is not so secure since the key is 56bits long, which is quite prone to BF cryptanalysis  3DES lengthens the key of DES (56 * 3 = 168), doing DES 3 times to make the encryption safer.     \n* Please feel free to refer to my classmate's  note  for more information",
            "title": "From DES to 3DES"
        },
        {
            "location": "/univ_notes/network_security/network_security/#aes-encryption-standard",
            "text": "Make a better encryption of 3DES, namely evolve from 3DES for a stronger and faster encryption algorithm.  AES is still the same as the DES in the category of block cipher encryption, but the block size of AES is 128 bits, doubled of the DES encryption.  10 Rounds of encryption again and again is needed.     Image source from textbook\nOne grey-coloured box is the one \"round\" of the encryption in AES \nEach of the round we take the preceding round's output as the input of this round and do the encryption again, with the following 4 tasks to be done \n1.The  Substitution Bytes  is to use the non-linear transform to let the input transformed with a \"Affine transformation\", making the encryption robust and hard to be cracked \n2.The  Shift Rows(Bit transposition)  is shifting the data, to rearrange the text, for row i we shift i-1 times to the left.    Image source from wikipedia  \n3.The  Mix Columns  is a linear transform under the mod multiplication  \n4.The  Add Round Key  is let the input XOR with the Key in the current state. (Rijndael key generator solution,which is a subkey in each round, which we can be seen from the image provided above that Key(16 bytes and expand to match for each round, divided into 10 subkeys for 10 operations in AES encryption)) \n5.After the aforementioned four steps are done, go to the next encryption box. The operation is bytewise",
            "title": "AES Encryption standard"
        },
        {
            "location": "/univ_notes/network_security/network_security/#the-truly-random-number-and-pseudo-random-number",
            "text": "Applications of the random number\n1.RSA pub-key generation and other pub-key algorithms. \n2.Session key for encryption in system such as Wi-Fi, e-mail    Image source from wikipedia     The following 2 criteria are used to validate a sequence is random.  \n1.Uniform distribution: The each element in the seed of random number must take the same proportion of being taken out. \n2.Independence: A sequence cannot be inferred from the other sequence, strictly and absolutely.",
            "title": "The truly random number and pseudo random number"
        },
        {
            "location": "/univ_notes/network_security/network_security/#block-cipher-vs-stream-cipher",
            "text": "",
            "title": "Block cipher vs Stream cipher"
        },
        {
            "location": "/univ_notes/network_security/network_security/#stream-cipher",
            "text": "Change the encryption key from time to time, and each time the two part(sender-receiver) can generate the same random key s.t. they can encrypt and decrypt the same message.\nThe key of such encryption algorithm should have a extremely large period and as random as possible, o.w. it is crack-prone. \nIn order to guard the BF attack, the longer key is preferred (However there is a trade-off b/w speed and security.) \nAs we can see the sender and receiver generate the same key for encryption and decryption.\nImage source from textbook   RC4 Algorithm\n1.An algorithm with changeable key length encryption.  \n2.SSL TLS WEP WPA use this encryption algorithm \n3.Easy to implement in both HW ans SW, but terminated in 2015 due to attack   RC4 Encryption procedure  \n1.Shuffle the key, make it randomised. 1\n2\n3\n4\n5\n6\n7\n8 for   i   from   0   to   255 \n      S [ i ]   :=   i \n  endfor \n  j   : =   0 \n  for (   i = 0   ;   i < 256   ;   i ++ ) \n      j   : =   ( j   +   S [ i ]   +   key [ i   mod   keylength ])   %   256   //randomly take the new j and swap, make a permutation \n      swap   values   of   S [ i ]   and   S [ j ] \n  endfor   \n2.Get even more shuffle data, each time for a input byte, locate the i and j value by take the value in the key, XOR the inputByte with the key (since the reverse of XOR operation is itself, once we insert the ciphertext we'll get plaintext, and converse is true as well.) 1\n2\n3\n4\n5\n6\n7\n8\n9 i   : =   0  j   : =   0  while   GeneratingOutput : \n     i   : =   ( i   +   1 )   mod   256     //a \n     j   : =   ( j   +   S [ i ])   mod   256   //b \n     swap   values   of   S [ i ]   and   S [ j ]    //c \n     k   : =   inputByte   ^   S [( S [ i ]   +   S [ j ])   %   256 ]   //XOR operation suit for this case. Reverse operation also works \n     output   K  endwhile",
            "title": "Stream cipher"
        },
        {
            "location": "/univ_notes/network_security/network_security/#block-cipher",
            "text": "Use the same key for the text, and divide the text into blocks, processing ONE BLOCK for each time. Processing procedure including shift position, substitute text to let the plaintext look similar, however, generating the\ntotally different ciphertext for cryptographically secure.     The AES(128 bits per block), DES(64 bits per block), 3DES(64 bits per block) are lie in this category.    5 Block modes for the block cipher, defined by NIST USA. Intended to use for the symmetric cipher.  .    1.Electronic Code Book where Encryption:  ciphertext[i] = code_book[plaintext[i]] just. Need a decryptor to do reversed tasks. \n2.Cipher Block Chaining, take the step i's ciphertext XOR with next step's plaintext and encrypt again.  If there is a bit error in the ciphertext, it will cause the decryption of plaintext i and plaintext i+1 error since they are chained together from step to step.    \n3.Cipher FeedBack , only the encryptor is needed, 2 times of encryption is equivalent to decryption.    \n4.CounTeR , use the counter directly for the key of encryption. Can be processed parallelly since each block can be processed with its counter and independent with other blocks, random access is suitable as well. And use the same key for decryption due to the properties of XOR operation, once the ciphertext XOR key ---> plaintext is decrypted. \nThe CTR mode is both HW and SW efficiency (parallelism are able to implemented in both CPU and compiler, OS ...etc).  \nWhat's more, the preprocessing can be done as well, even without the presence of the plaintext, we can still generate the required key and the next task is just let plaintext XOR key ---> ciphertext.  5.Output FeedBack similar too Cipher FeedBack, take the ciphertext from previous round and encrypt again  Useful reference site ,MUST READ!!!",
            "title": "Block cipher"
        },
        {
            "location": "/univ_notes/network_security/network_security/#ch3-message-authencation-and-public-key-cryptography",
            "text": "",
            "title": "Ch3. Message Authencation and Public Key Cryptography"
        },
        {
            "location": "/univ_notes/network_security/network_security/#message-authencation-code-mac",
            "text": "Using some hash value of the data and encrypt that value at the end of data for validation (see the image below)  Clarify!!: MAC cannot perform the data encryption, it can only be used for data authentication and validation.   Such as parity checking is also a kind of message authentication.       Image source from wikipedia",
            "title": "Message Authencation Code (MAC)"
        },
        {
            "location": "/univ_notes/network_security/network_security/#secure-hash-functions",
            "text": "1.Collision and preimage-found resistant, making it unable to do the reverse of hash to forge the data.",
            "title": "Secure Hash Functions"
        },
        {
            "location": "/univ_notes/network_security/network_security/#sha-encryption-standard",
            "text": "Term explanation (waiting for the answer from OAlienO)  \n1.Message Digest Size: Message digest, MD(same as MD of MD5), of how much data amount we output, such as in the following SHA1 algorithm, we produce 160bits output (hex * 40 = 160).   \n2.Message Size: Message amount that we can process in one time(Maxium input). \n3.Block Size: In block cipher, cut all the message into several blocks, in the block is how much message in a block to be processed \n4.Word Size: A size of a given state.    The following are the Message digest from the SHA512.",
            "title": "SHA Encryption standard"
        },
        {
            "location": "/univ_notes/network_security/network_security/#hashing-why-and-how",
            "text": "hash youtube     Hash aims for reduce the huge amount of data to the small amount.  Can be used for verify and prevent the errors in the communication.  Evan a small change in the original plaintext (such as only a bit), it will cause the totally different hash value, this\nresult is called Avalanche Effect. It ensures the security of hash algorithm.  Hash has to be one-way and pre image, collision-resistant, otherwise , data will be forged. Hash is doomed to be broken or cracked, what matters is that we have to try out best to lengthen the time before being cracked",
            "title": "Hashing, Why and How?"
        },
        {
            "location": "/univ_notes/network_security/network_security/#hash-based-message-authentication-code-hmac",
            "text": "Watch out the color correspondence for better understanding the procedure",
            "title": "Hash-based message authentication code (HMAC)"
        },
        {
            "location": "/univ_notes/network_security/network_security/#message-encryption-vs-message-digestionhashing-what-is-the-difference",
            "text": "so encryption-vs-digest    so how-is-an-md5-or-sha-x-hash-different-from-an-encryption    hash ,encryption and more    so why-should-i-use-authenticated-encryption-instead-of-just-encryption     Encryption: Really make the message secret, hard to be cracked and aims for security. key difference between encryption and hashing is that encrypted strings can be reversed back into their original decrypted form if you have the right key  ex. RSA AES DES ...  Digestion (hashing): Digest the whole data, may be used for message authentication, producing an ID or FINGERPRINT of the input data. \nHashing is great for usage in any instance where you want to  compare a value with a stored value, but can't store its plain representation for security reasons . Other use cases could be checking the last few digits of a credit card match up with user input or comparing the hash of a file you have with the hash of it stored in a database to make sure that they're both the same. ex. MD5 SHA ...  Furthermore, if the digested data is encrypted, than it can be used for DIGITAL SIGNATURE.\n1.For example in SHA family  \u80fd\u8a08\u7b97\u51fa\u4e00\u500b\u6578\u4f4d\u8a0a\u606f\u6240\u5c0d\u61c9\u5230\u7684\uff0c\u9577\u5ea6\u56fa\u5b9a\u7684\u5b57\u4e32\uff08\u53c8\u7a31\u8a0a\u606f\u6458\u8981\uff09\u7684\u6f14\u7b97\u6cd5\u3002\u4e14\u82e5\u8f38\u5165\u7684\u8a0a\u606f\u4e0d\u540c\uff0c\u5b83\u5011\u5c0d\u61c9\u5230\u4e0d\u540c\u5b57\u4e32\u7684\u6a5f\u7387\u5f88\u9ad8\u3002  OAlienO : SHA \u4e0d\u662f\u52a0\u5bc6\u56e0\u70ba\u4ed6\u6c92\u8fa6\u6cd5\u89e3\u56de\u539f\u672c\u7684 input",
            "title": "Message encryption vs Message digestion(hashing), what is the difference?"
        },
        {
            "location": "/univ_notes/network_security/network_security/#authenticated-encryption",
            "text": "A term used to describe encryption systems that simultaneously protect confidentiality and authenticity of communications.  Compared with traditional encryption, the authenticated encryption  additionally provides authenticity, while plain encryption provides only confidentiality.  Usually more complicated than confidentiality-only or authenticity-only schemes.",
            "title": "Authenticated encryption"
        },
        {
            "location": "/univ_notes/network_security/network_security/#public-key-cryptography",
            "text": "Encrypt with public key: Want to send someone a message that only they(certain of groups,...etc) will be able to read, encrypt it with that person's public key.  Encrypt with private key: Want to publish some information and guarantee that you're the author  (Reason is that the only person who encrypt with HIS PRIVATE KEY CAN ONLY BE THE ORGINAL AUTHOR, and everyone can use the public related to that private key to decrypt it) , and that it hasn't been tampered with, then you encrypt it with your private key.(We can as well use the authenticated encryption to ensure the authenticity. Just like the aforementioned  Digital signature )  so What is we encrypt with private key??",
            "title": "Public key cryptography"
        },
        {
            "location": "/univ_notes/network_security/network_security/#private-key-vs-secret-key-what-is-the-difference",
            "text": "Private key: Use in asymmetric encryption.  Secret key: Use in symmetric encryption, but it is quite hard for us (or say unsafe) to exchange secret key, so the Diffie Hellman key exchange algorithm is invented.",
            "title": "Private key vs Secret key, what is the difference?"
        },
        {
            "location": "/univ_notes/network_security/network_security/#diffie-hellman-key-exchange",
            "text": "A way to exchange the secret key via an unsafe path  Math theory behind this algorithm   SSL, TLS, SFTP use it. Like the AES implemetation AES is symmetric encryption and a shared-secret-key exchange is needed for end-to-end data encryption.  Both of end to end does not need to know each other (or cant break) his / her provate key but share a same secret key to do secret data exchange.  In this algorithm, we should choose a very big a, b and p s.t. Bob is unable so solve 'a' of Alice's secret and neither is Alice. o.w. Eve will hack into it and solve the shared secret key.  Aside from the RSA, why use Diffie Hellman key exchange?  \nSince the process of RSA is quite burdensome (numbers in it are extremely huge) so if we can back to the traditional symmetric encryption such as AES (just now we need a \"secure pipe\" under the \"insecure pipe\") to perform key exchange.\nThan the end-to-end encryption can be achieved, what's more, this method is faster in which stream cipher are performed",
            "title": "Diffie Hellman key exchange"
        },
        {
            "location": "/univ_notes/network_security/network_security/#man-in-the-middle-attack-mitm",
            "text": "The MITM forges the key of both side and deceives them, act as both fake Alice and Bob. \nAnd the wikipedia analogy ,note: sequence different from the image  \nThe core idea about this is still the mathematical expression, for example for the secret key K1, since Darth intercepts the message, then he can forge the key with his secret key XD2 ,due to the following mathematical theory about modulo exponential.    \nSo Alice is able to acquire the secret key via her own private key XA due to the upper math theory.  BUT SHE DOES NOT KNOW THAT YD2 ACTUALLY COMES FROM DARTH and DARTH now share the same key with Alice, so Alice thinks that Darth is Bob!! and the same is true for Bob!!   \nOriginally the shared secret key should be lie on the mathematical expression like this    \nRather than this",
            "title": "Man in the middle attack (MITM)"
        },
        {
            "location": "/univ_notes/network_security/network_security/#ch4-key-distribution-and-user-authentication",
            "text": "",
            "title": "Ch.4 Key Distribution and User Authentication"
        },
        {
            "location": "/univ_notes/network_security/network_security/#key-distribution",
            "text": "Used in the symmetric key crypto system to exchange keys from one end point to another.",
            "title": "Key distribution"
        },
        {
            "location": "/univ_notes/network_security/network_security/#kerberos-and-its-components",
            "text": "Centralised key distribution and authentication service b/w user and server(3 rd  party) that relies on symmetric encryption (No public key in it)  Generates a symmetric secret key b/w two end points.  Distributed system makes computing power better.  During the key's lifetime (embedded in the message), the key can be used again and again.  Central idea relies on the trustworthy 3RD PARTY SERVER",
            "title": "Kerberos and its components"
        },
        {
            "location": "/univ_notes/network_security/network_security/#authencation-server-as",
            "text": "Authenticate the user",
            "title": "Authencation server (AS)"
        },
        {
            "location": "/univ_notes/network_security/network_security/#ticket-granting-server-tgs",
            "text": "Grant authenticated user permissions to act with the real server (SS, Service Server) wikipedia for detailed procedure    Detailed explanation video",
            "title": "Ticket granting server (TGS)"
        },
        {
            "location": "/univ_notes/network_security/network_security/#timestamp-portocal-vs-challenge-response-portocal",
            "text": "",
            "title": "Timestamp portocal vs Challenge-Response Portocal"
        },
        {
            "location": "/univ_notes/network_security/network_security/#timestamp-portocal",
            "text": "Record the timestamp of each data transaction.  Prone to replay attack(a kind of MITM attack) if the clocks b/w the client and server is not synchronised\nBut how come will this happen??  \nIf the system time is not synchronised, then suppose the end point EA is slower, then the MITM can intercept the message b/w two endpoint and resend the password again to hack and pretend to be the genuine user. What's more, since the time is slower in EA, then as the MITM intercepts data and resend, it does need some time to \"RETRANSMIT\" , but it is the slower time that allows the delay of retransmit time not be discovered if the time difference |T_received - T_send| < epsilon is not so strict.",
            "title": "Timestamp portocal"
        },
        {
            "location": "/univ_notes/network_security/network_security/#challenge-response-portocal",
            "text": "Reference this video first!  The server and the receiver share a certain kind of \"shared secret\" that might be generated as the user registered in the system.  Ensures the \"Mutual Authentication\"  The procedure as follows:\nServer sends a unique challenge value sc to the client \nClient sends a unique challenge value cc to the server \nServer computes sr = hash(cc + secret) and sends to the client \nClient computes cr = hash(sc + secret) and sends to the server \nServer calculates the expected value of cr and ensures the client responded correctly \nClient calculates the expected value of sr and ensures the server responded correctly\nwhere \nsc is the server generated challenge \ncc is the client generated challenge \ncr is the client response \nsr is the server response  Since the secret is shared b/w the server and client, then is is able to verify the genuine of both server and client    A good challenge/response system will generate a new challenge for every transaction or session (and make sure that previous challenges are not reused!), so that session transcripts cannot be spliced together to create new fraudulent systems. (Maybe the challenge will be encrypted in both parties)",
            "title": "Challenge-Response Portocal"
        },
        {
            "location": "/univ_notes/network_security/network_security/#comparison-bw-kerberos-v4-and-kerberos-v5",
            "text": "Reference here   v4 is prone to MITM attack and v5 is not.  Both of them provides mutual authentication",
            "title": "Comparison b/w Kerberos v4 and Kerberos v5"
        },
        {
            "location": "/univ_notes/network_security/network_security/#what-is-mutual-authentication-and-why-we-need-it",
            "text": "\u7591\u554f\uff1aMutual authentication \u76f8\u8f03\u65bc one way \u4ed6\u7684\u597d\u8655\u662f \u53ef\u4ee5\u540c\u6642\u9a57\u8b49 \u4f3a\u670d\u5668\u65b9\u548c\u4f7f\u7528\u8005\u65b9\u561b\uff1f\uff1f\n\u5c31\u662f\u4f3a\u670d\u5668\u80fd\u78ba\u8a8d\u9019\u500buser \u800c\u4e14\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u78ba\u8a8d\u9019\u500bserver\n\u4f46\u662f\u539f\u672c\u53ea\u6709usr\u4f86\u78ba\u8a8dserver\n\u591a\u51fa\u9019\u500bserver\u4f86\u78ba\u8a8dusr \u6703\u6709\u4ec0\u9ebc\u512a\u9ede\u5462\uff1f\n\u89e3\u7b54\uff1a\u56e0\u70bauser\u548cserver\u90fd\u6709\u53ef\u80fd\u88ab\u4eff\u5192\uff0c\u56e0\u6b64\u9700\u8981\u96d9\u91cd\u8a8d\u8b49\u96d9\u65b9\u3002    Both the server and client may be inpersonated, so we need to verify their real identification.",
            "title": "What is mutual authentication and why we need it??"
        },
        {
            "location": "/univ_notes/network_security/network_security/#key-distribution-with-asymmetric-encryption-public-key-certificate",
            "text": "The well known SSL use this method ,and the X.509 standard is used.  Aimed to solve the problem that we want to verify the authentication of some authorities by the trusted certificated authority (CA)  Step as follows  Verify the signature that generated by CA to ensure the reality.",
            "title": "Key distribution with asymmetric encryption (Public key certificate)"
        },
        {
            "location": "/univ_notes/network_security/network_security/#what-is-the-difference-bw-the-digital-signature-and-public-key-authentication",
            "text": "From stackoverflow:\nA digital signature is used to verify a message. It is basically an encrypted hash (encrypted by the private key of the sender) of the message. The recipient can check if the message was tampered with by hashing the received message and comparing this value with the decrypted signature (decrypted the signature with the public key from the sender).   To decrypt the signature, the corresponding public key is required.  A digital certificate is used to bind public keys to persons or other entities. If there were no certificates, the signature could be easily be forged, as the recipient could not check if the public key belongs to the sender.  Original discussion thread     Similar reference     The \"Chain of Trust\" SSL certificate, root certificate are all related to this topic  Actually the public key certification (certification distribution of authorize a genuine key) is the core concept of SSL/TLS portocal  Chain of Trust YouTube video  Private key of root CA should be absolutely inaccessible.  Once the \"Chain of Trust\" is successfully formed, an secure communication path can be formed (TLS using SSL certificate to do such things)",
            "title": "What is the difference b/w the digital signature and public key authentication."
        },
        {
            "location": "/univ_notes/network_security/network_security/#so-a-question-comes-to-my-mind-what-is-the-differenct-bw-httpstls-and-ssl",
            "text": "Answer as follows:\n1.TLS is just the new name (or say acronym) of SSL Namely, SSL protocol got to version 3.0; TLS 1.0 is \"SSL 3.1\". TLS versions currently defined include TLS 1.1 and 1.2. Each new version adds a few features and modifies some internal details. We sometimes say \"SSL/TLS\".   2.HTTPS is the HTTP under the secured transmission protocol, i.e. HTTPS is HTTP-within-SSL/TLS. SSL (TLS) establishes a secured, bidirectional tunnel for arbitrary binary data between two hosts.",
            "title": "So a question comes to my mind, What is the differenct b/w HTTPS,TLS and SSL?"
        },
        {
            "location": "/univ_notes/network_security/network_security/#why-chain-of-trust",
            "text": "Even though the asymmetric (Public-key cryptography RSA) can ensure the secret communication, digital signature can ensure the correctness of content\n, however, we are still not sure about whether the issuer of the digital certificate is the real \"good guy\" or the \"forged guy.\" wikipedia ref",
            "title": "Why chain of trust??"
        },
        {
            "location": "/univ_notes/network_security/network_security/#pki-ca-keyetc-great-explanation-video",
            "text": "Here   A public key infrastructure (PKI) is a set of roles, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption.",
            "title": "PKI, CA, Key...etc great explanation video"
        },
        {
            "location": "/univ_notes/network_security/network_security/#when-to-revoke-a-users-certification",
            "text": "The user\u2019s private key is assumed to be compromised(\u5047\u5b9a\u88ab\u6d29\u6f0f\u51fa\u53bb\u4e86)  The user is no longer certified by this CA; reasons for this\ninclude subject\u2019s name has changed, the certificate is\nsuperseded, or the certificate was not issued in conformance\nwith the CA\u2019s policies  The CA\u2019s certificate is assumed to be compromised",
            "title": "When to revoke a user's certification??"
        },
        {
            "location": "/univ_notes/network_security/network_security/#the-pki-architecture",
            "text": "PKI YouTube video \n* PKI is a framework that some vendor and use...etc should follow, and PKI associates a public key with a verified person/system.  All the pics , images credits to the original author, I only use it for the education purpose, please DO NOT distribute",
            "title": "The PKI architecture"
        },
        {
            "location": "/univ_notes/statistics/stat/",
            "text": "Statistics\n\n\nSpring 2018 \n\nLecturer: Chih Rung Chen \n\n\nCh3. Random variables and Probability Distributions\n\n\nRandom variables\n\n\n\n\nDefinition: A r.v. \nX\nX\n is called random if it outcome follows the rule of random.",
            "title": "Junior 2nd sem. Statistics"
        },
        {
            "location": "/univ_notes/statistics/stat/#statistics",
            "text": "Spring 2018  \nLecturer: Chih Rung Chen",
            "title": "Statistics"
        },
        {
            "location": "/univ_notes/statistics/stat/#ch3-random-variables-and-probability-distributions",
            "text": "",
            "title": "Ch3. Random variables and Probability Distributions"
        },
        {
            "location": "/univ_notes/statistics/stat/#random-variables",
            "text": "Definition: A r.v.  X X  is called random if it outcome follows the rule of random.",
            "title": "Random variables"
        },
        {
            "location": "/univ_notes/general/social_psy/",
            "text": "\u793e\u6703\u5fc3\u7406\u5b78\u8ab2\u5802\u7b46\u8a18\n\n\n\n\nFundamental attribution error (FAE) \u57fa\u672c\u6b78\u56e0\u8aa4\u5dee\uff1a\u4eba\u5bb9\u6613\u5728\u5224\u65b7\u884c\u70ba\u7684\u6642\u5019\u7528\u4eba\u683c\u7279\u8cea\u4f86\u5224\u65b7\uff08\u8f03\u70ba\u4e3b\u89c0\uff09\n\u4f4e\u4f30\u4e86\u60c5\u5883\u7684\u5224\u65b7\n\n\n\n\nLec1. Mar 5, 2018\n\n\n\n\n\n\n\u7528\u4eba\u683c\u7279\u8cea\u4f86\u5c0d\u4eba\u7684\u884c\u52d5\u505a\u89e3\u8b80\uff1a\u512a\u52e2\u4f55\u5728\n\n\n\n\n\n\nGestalt Psychology \u5b8c\u5f62\u5fc3\u7406\u5b78\uff1a\u8457\u91cd\u5728\u884c\u70ba\u4e3b\u7fa9\u7684\u539f\u5247\n\n\n\n\n\n\n\u4eba\u985e\u884c\u70ba\u7684\u89e3\u8b80\u53ef\u4ee5\u4e3b\u8981\u4ee5\u4e0b\u5169\u8005\u5c0e\u5411\u89e3\u91cb\n\n1.Self esteem \u81ea\u5c0a\u53d6\u5411\n\n2.Social cognition \u793e\u6703\u8a8d\u77e5\u53d6\u5411\n\n\n\n\n\n\n\u4f8b\u5982\uff1a\u53f2\u8afe\u767b\u662f\u597d\u662f\u58de\uff1f\n\n\n\n\nSuffering and self-justification \u53d7\u82e6\u8207\u81ea\u6211\u5408\u7406\u5316\n \n\n1.\u56e0\u70ba\u81ea\u5c0a\u9700\u6c42\uff0c\u800c\u81ea\u6211\u5408\u7406\u5316\u81ea\u5df1\u7684\u884c\u70ba\n\n2.\u56e0\u70ba\u793e\u6703\u65c1\u4eba\u7684\u89c0\u9ede\u3001\u8a8d\u540c\uff0c\u58d3\u529b\u9a45\u4f7f\uff0c\u800c\u81ea\u6211\u5408\u7406\u5316\u81ea\u5df1\u7684\u884c\u70ba\n\n\n\n\n\u4f8b\u5982\uff1a\u5165\u6703\u5100\u5f0f\u6b3a\u8ca0\u65b0\u624b\uff0c\u65b0\u624b\u7559\u4e0b\u5f8c\u80fd\u8ddf\u9577\u8005\u8f03\u597d\n\n\u90a3\u6211\u5011\u61c9\u8a72\u5982\u4f55\u5224\u65b7\u5462\uff1f\uff1f \u662f\u5426\u8981\u505a\u90a3\u4ef6\u4e8b\u60c5\uff08\u5100\u5f0f\u4e4b\u985e\u7684\uff09\n\n\nLec3. Mar 19, 2018\n\n\n\n\n\n\n\u53ef\u4ee5\u7528\u96a8\u6a5f\u5206\u7d44\u7684\u65b9\u5f0f\u4f86\u964d\u4f4e\u793e\u6703\u5fc3\u7406\u7d71\u8a08\u7684\u8aa4\u5dee\n\n\n\n\n\n\n\u8de8\u6587\u5316\u7814\u7a76\uff1a\u770b\u4e0d\u540c\u6587\u5316\u7684\u884c\u70ba\n\n\n\n\n\n\n\u6f14\u5316\u89c0\u9ede\u8457\u624b\uff1a\u8a8d\u70ba\u4eba\u7684\u8868\u73fe\u6709\u6f14\u5316\u4e0a\u7684\u610f\u7fa9\uff0c\u4f8b\u5982\u8b93\u7269\u7a2e\u5ef6\u7e8c\n\n\n\n\n\n\nDeception \u6b3a\u9a19\uff1a\u8aa4\u5c0e\u53c3\u9810\u8005\u4f7f\u4ed6\u4fe1\u670d\uff0c\u6216\u5229\u65bc\u5be6\u9a57\u7684\u9032\u884c\n\n\n\n\n\n\nDebriefing \u91cb\u7591\u9762\u8ac7\uff1a\u5c0d\u65bc\u53c3\u9810\u8005\u525b\u525b\u767c\u751f\u7684\u5be6\u9a57\u4e4b\u89e3\u91cb\n\n\n\n\n\n\nLec4. Mar 26, 2018\n\n\n\n\n\u81ea\u52d5\u5316\u601d\u8003\uff1a\u77ac\u9593\u53cd\u61c9\n\n\n\u8cbb\u529b\u601d\u8003\uff1a\u53cd\u8986\u601d\u7d22\u5f8c\u53cd\u61c9",
            "title": "Junior 2nd sem. Social Psychology"
        },
        {
            "location": "/univ_notes/general/social_psy/#_1",
            "text": "Fundamental attribution error (FAE) \u57fa\u672c\u6b78\u56e0\u8aa4\u5dee\uff1a\u4eba\u5bb9\u6613\u5728\u5224\u65b7\u884c\u70ba\u7684\u6642\u5019\u7528\u4eba\u683c\u7279\u8cea\u4f86\u5224\u65b7\uff08\u8f03\u70ba\u4e3b\u89c0\uff09\n\u4f4e\u4f30\u4e86\u60c5\u5883\u7684\u5224\u65b7",
            "title": "\u793e\u6703\u5fc3\u7406\u5b78\u8ab2\u5802\u7b46\u8a18"
        },
        {
            "location": "/univ_notes/general/social_psy/#lec1-mar-5-2018",
            "text": "\u7528\u4eba\u683c\u7279\u8cea\u4f86\u5c0d\u4eba\u7684\u884c\u52d5\u505a\u89e3\u8b80\uff1a\u512a\u52e2\u4f55\u5728    Gestalt Psychology \u5b8c\u5f62\u5fc3\u7406\u5b78\uff1a\u8457\u91cd\u5728\u884c\u70ba\u4e3b\u7fa9\u7684\u539f\u5247    \u4eba\u985e\u884c\u70ba\u7684\u89e3\u8b80\u53ef\u4ee5\u4e3b\u8981\u4ee5\u4e0b\u5169\u8005\u5c0e\u5411\u89e3\u91cb \n1.Self esteem \u81ea\u5c0a\u53d6\u5411 \n2.Social cognition \u793e\u6703\u8a8d\u77e5\u53d6\u5411    \u4f8b\u5982\uff1a\u53f2\u8afe\u767b\u662f\u597d\u662f\u58de\uff1f   Suffering and self-justification \u53d7\u82e6\u8207\u81ea\u6211\u5408\u7406\u5316   \n1.\u56e0\u70ba\u81ea\u5c0a\u9700\u6c42\uff0c\u800c\u81ea\u6211\u5408\u7406\u5316\u81ea\u5df1\u7684\u884c\u70ba \n2.\u56e0\u70ba\u793e\u6703\u65c1\u4eba\u7684\u89c0\u9ede\u3001\u8a8d\u540c\uff0c\u58d3\u529b\u9a45\u4f7f\uff0c\u800c\u81ea\u6211\u5408\u7406\u5316\u81ea\u5df1\u7684\u884c\u70ba   \u4f8b\u5982\uff1a\u5165\u6703\u5100\u5f0f\u6b3a\u8ca0\u65b0\u624b\uff0c\u65b0\u624b\u7559\u4e0b\u5f8c\u80fd\u8ddf\u9577\u8005\u8f03\u597d \n\u90a3\u6211\u5011\u61c9\u8a72\u5982\u4f55\u5224\u65b7\u5462\uff1f\uff1f \u662f\u5426\u8981\u505a\u90a3\u4ef6\u4e8b\u60c5\uff08\u5100\u5f0f\u4e4b\u985e\u7684\uff09",
            "title": "Lec1. Mar 5, 2018"
        },
        {
            "location": "/univ_notes/general/social_psy/#lec3-mar-19-2018",
            "text": "\u53ef\u4ee5\u7528\u96a8\u6a5f\u5206\u7d44\u7684\u65b9\u5f0f\u4f86\u964d\u4f4e\u793e\u6703\u5fc3\u7406\u7d71\u8a08\u7684\u8aa4\u5dee    \u8de8\u6587\u5316\u7814\u7a76\uff1a\u770b\u4e0d\u540c\u6587\u5316\u7684\u884c\u70ba    \u6f14\u5316\u89c0\u9ede\u8457\u624b\uff1a\u8a8d\u70ba\u4eba\u7684\u8868\u73fe\u6709\u6f14\u5316\u4e0a\u7684\u610f\u7fa9\uff0c\u4f8b\u5982\u8b93\u7269\u7a2e\u5ef6\u7e8c    Deception \u6b3a\u9a19\uff1a\u8aa4\u5c0e\u53c3\u9810\u8005\u4f7f\u4ed6\u4fe1\u670d\uff0c\u6216\u5229\u65bc\u5be6\u9a57\u7684\u9032\u884c    Debriefing \u91cb\u7591\u9762\u8ac7\uff1a\u5c0d\u65bc\u53c3\u9810\u8005\u525b\u525b\u767c\u751f\u7684\u5be6\u9a57\u4e4b\u89e3\u91cb",
            "title": "Lec3. Mar 19, 2018"
        },
        {
            "location": "/univ_notes/general/social_psy/#lec4-mar-26-2018",
            "text": "\u81ea\u52d5\u5316\u601d\u8003\uff1a\u77ac\u9593\u53cd\u61c9  \u8cbb\u529b\u601d\u8003\uff1a\u53cd\u8986\u601d\u7d22\u5f8c\u53cd\u61c9",
            "title": "Lec4. Mar 26, 2018"
        },
        {
            "location": "/univ_notes/general/jp_cul/",
            "text": "\u65e5\u672c\u6587\u5316\u8ad6\u8ab2\u5802\u7b46\u8a18\n\n\nLec1. Mar 7, 2018\n\n\n\n\n\n\n\u7167\u8449\u6a39\u6728\u6797\u6587\u5316:\u7167\u8449\u6a39\u6797\u6587\u5316\uff0c\u662f1970\u5e74\u4ee3\u4ee5\u4f86\u65e5\u672c\u4eba\u985e\u5b78\u5bb6\u63d0\u51fa\u65e5\u672c\u6587\u5316\u6e90\u982d\u7406\u8ad6\u3002\u63d0\u51fa\u559c\u746a\u62c9\u96c5\u5c71\u4ee5\u5357\u81f3\u65e5\u672c\u95dc\u897f\u6709\u4e00\u5e38\u7da0\u95ca\u8449\u6a39\u6797\uff0c\u5176\u4e2d\u4ee5\u96f2\u5357\u70ba\u4e2d\u5fc3\uff0c\u65e5\u672c\u7684\u6c34\u7a3b\u7a2e\u690d\u8207\u6b64\u6587\u5316\u6709\u95dc\u3002\n\nWikipedia\n \n\n1.\u7167\u4e0b\u53bb\u6a39\u8449\u6703\u9583\u9583\u767c\u5149\n\n\n\n\n\n\n\u65e5\u672c\u7a3b\u7c73\u4e3b\u8981\u662f\u4e2d\u570b\u9577\u6c5f\u6d41\u904e\u53bb\u7684\u8aaa\u6cd5\u6700\u70ba\u666e\u904d\uff0c\u4f46\u662f\u73fe\u5728\u7684\u58fd\u53f8\u7c73\u548c\u5927\u9678\u7684\u4e0d\u592a\u4e00\u6a23\uff0c\u5927\u9678\u7684\u4ee5\u84ec\u840a\u7c73\u70ba\u4e3b\u800c\u65e5\u672c\u662f\u504f\u58fd\u53f8\u7c73\u7684\u9ecf\u7a20\n\n\n\n\n\u6709\u975e\u5e38\u5927\u7684\u53e4\u58b3\n\n\n\u65e5\u8a9e\u7684\u6587\u5b57\u6587\u6cd5\u8fd1\u4f3c\u65bc\u6771\u570b\u5317\u65b9\u6c11\u65cf\n\n\n\u7167\u8449\u6a39\u6728\u6587\u5316\u53e4\u4ee3\u6709\u54ea\u4e9b\u4e8b\u60c5\u5462\n\n1.\u5973\u6027\u6587\u5316\u70ba\u4e2d\u5fc3\uff0c\u7537\u5973\u60c5\u610f\u76f8\u6295\u5f26\u6b4c\u5c0d\u5531\n\n\n\n\nLec3. Mar 21 2018\n\n\n\n\n\u7e2e\u5c0f\u6587\u5316\u662f\u65e5\u672c\u5927\u5b78\u6559\u6388\u63d0\u51fa\u7684\n\n\n\u9b4f\u5fd7\u7aa9\u4eba\u50b3\uff0c\u4e2d\u570b\u4eba\u8a18\u8f09\u4e86\u6700\u65e9\u7684\u65e5\u672c\u4eba\u6d3b\u52d5\u60c5\u5f62\uff0c\u984c\u5230\u4e86\u4e5d\u5dde\u7684 \n\u90aa\u99ac\u53f0\u570b\n\n\n\u53e4\u58b3\uff1a\u6574\u5ea7\u5c71\u90fd\u662f\u76f4\u7a74\u5f0f\n\n\n\u65e5\u672c\u4eba\u6700\u65e9\u53ef\u4ee5\u662f\uff1a\u7e69\u6587\u4eba\uff08\u6bd4\u5f4c\u751f\u4eba\u77ee\uff09\n\n\n\u4e2d\u570b\u5ead\u5712\u7684\u7279\u8272\u5728\u65bc\u5efa\u7bc9\u7269\u5c6c\u65bc\u98a8\u666f\u7684\u4e00\u90e8\u5206,\u800c\u4e14\u5176\u6a13\u3001\u4ead\u3001\u53f0\u3001\u69ad\u4e0a\u9762\u90fd\u61f8\u639b\u6abb\u806f,\u9019\u662f\u65e5\u672c\u5ead\u5712\u898b\u4e0d\u5230\u7684\u666f\u8c61\uff0c\u800c\u65e5\u672c\u9664\u4e86\u4e3b\u5efa\u7bc9\u4ee5\u5916\uff0c\u4e43\u662f\u770b\u4e0d\u5230\u4eba\u5de5\u5efa\u7bc9\u7684\uff0c\u6b64\u5916\u9084\u6703\u6709\u92ea\u4e0a\u767d\u6c99\u7684\u67af\u5c71\u6c34\u5ead\u5712\u4ee5\u53ca\u6eff\u4f48\u9752\u82d4\u7684\u5ead\u5712\uff0c\u524d\u8005\u8c61\u5fb5\u4e00\u6bba\u770b\u898b\u4e00\u500b\u5b87\u5b99\uff0c\u5f8c\u8005\u5247\u662f\u5728\u65e5\u672c\u6eab\u6696\u662f\u6f64\u4e2d\u57f9\u80b2\u51fa\u4f86\u9591\u975c\u6c23\u6c1b\u7684\u5ead\u5712\u3002\n\n\n\u65e5\u672c\u7684\u4e2d\u570b\u7f8e\u8853\u5c08\u5bb6\u6236\u7530\u798e\u4f51\u6559\u6388\u6307\u51fa,\u65e5\u672c\u7e6a\u756b\u4e2d\u51fa\u73fe\u7684\u706b\u7130\u3001\u96f2\u5f69\u3001\u6c34(\u6d6a\u82b1)\u3001\u5149\u7b49\u4e0d\u5b9a\u578b\u7269,\u5728\u73fe\u5b58\u7684\u4e2d\u570b\u7e6a\u756b\u4e2d\u898b\u4e0d\u5230\u3002\n\n\n\u4ff3\u53e5\u53ef\u4ee5\u4e0d\u7528\u62bc\u97fb \u4f46\u4e00\u5b9a\u89815+7+5 \u4e26\u4e14\u6709\u5b63\u8a9e\uff08\u65e5\u672c\u4eba\u6c11\u5c0d\u65bc\u5e7c\u5c0f\u6642\u4ee3\u6216\u6545\u9109\u4e00\u7a2e\u61f7\u5ff5\u7737\u6200\u4e4b\u60c5\uff09\n\n\n\u7ef3\u6587\u201d\u4e00\u8bcd\u6765\u6e90\u4e8e\u7f8e\u56fd\u52a8\u7269\u5b66\u5bb6\u6469\u65af\u5173\u4e8e\u5927\u68ee\u8d1d\u51a2\u9676\u5668\u53d1\u6398\u7684\u62a5\u544a\u3002\uff08\u53d6\u81ea\u767e\u5ea6\uff09\n\n\n\u5f4c\u751f\u6642\u4ee3\u662f\u5317\u6d77\u9053\u4e0e\u7409\u7403\u4ee5\u5916\u7684\u5168\u65e5\u672c\u5217\u5cf6\u7684\u4e00\u500b\u6642\u4ee3\u5283\u5206\uff0c\u8655\u65bc\u897f\u5143\u524d10\u4e16\u7d00\u5230\u897f\u51433\u4e16\u7d00\u4e2d\u671f\u3002 \u5f4c\u751f\u6642\u4ee3\u662f\u5728\u7d93\u6b77\u4e86\u4ee5\u63a1\u96c6\u70ba\u7d93\u6fdf\u4e3b\u9ad4\u7684\u7e69\u6587\u6642\u4ee3\u4e4b\u5f8c\uff0c\u4e00\u500b\u4e3b\u8981\u4f9d\u8cf4\u6c34\u7a3b\u7a2e\u690d\u7684\u751f\u7522\u7d93\u6fdf\u6642\u4ee3\u3002 \uff08\u53d6\u81ea\u7dad\u57fa\u767e\u79d1\uff09\n\n\n\u65e5\u672c\u795e\u8a71\u4e3b\u8981\u8a18\u8f09\u5728 \u53e4\u4e8b\u8a18\uff0c\u800c\u4e0d\u662f\u592a\u53e4\u8a18\n\n\n\u65e5\u672c\u7684\u53e4\u58b3\u7684\u5167\u90e8\u69cb\u9020\uff0c\u8d77\u5148\u90fd\u662f\u8c4e\u7a74\u5f0f\u77f3\u5ba4\uff0c\u4e00\u76f4\u5230\u4e94\u4e16\u7d00\u4e2d\u8449\u624d\u51fa\u73fe\u6a6b\u7a74\u5f0f\u77f3\u5ba4\u3002\u800c\u5230\u4e86\u53e4\u58b3\u6642\u4ee3\u7684\u5f8c\u671f\uff0c\u4e5f\u5c31\u662f\u897f\u5143\u516d\u4e03\u4e16\u7d00\u7684\u6642\u5019\uff0c\u6a6b\u7a74\u77f3\u5ba4\u5df2\u7d93\u666e\u53ca\u65bc\u65e5\u672c\u5168\u570b\u3002\n\n\n\n\nLec4. Mar 28 2018\n\n\n\n\n\u63a8\u8c37\u5929\u7687\u662f\u7b2c\u4e00\u4efb\u5973\u5929\u7687\n\n\n\u4e2d\u592e\u96c6\u6b0a\uff0c\u5728\u8056\u5fb7\u592a\u5b50\u7684\u6642\u4ee3\uff0c\u9694\u5e74\u9084\u9812\u4f48\u4e86\u5341\u4e03\u689d\u61b2\u6cd5\uff0c\u5728\u516c\u5143604\u5e74\n1.\u4ee5\u548c\u70ba\u8cb4\n\n2.\u7be4\u4fe1\u4e09\u5bf6:\u5ba3\u63da\u4f5b\u6559\u70ba\u570b\u6559\n\n\n\u98db\u9ce5\u6642\u4ee3:\u540c\u6642\u4e2d\u570b\u7684\u968b\u671d\u6642\u671f\uff0c\u6709\u8da3\u968b\u671d\u671d\u8ca2\uff0c\u5728\u5948\u826f\u9644\u8fd1\uff0c\u6b66\u529b\u9817\u70ba\u5f37\u5927\n\u5728\u6b64\u6642\u968b\u671d\u60f3\u8981\u9060\u4ea4\u8fd1\u653b\uff0c\u56e0\u70ba\u4ed6\u8981\u6253\u671d\u9bae\u534a\u5cf6\uff0c\u6240\u4ee5\u5148\u6d3e\u96a8\u99db\u5230\u65e5\u672c\uff0c\u5e0c\u671b\u65e5\u672c\u4e0d\u8981\u4f86\u5e72\u6d89\u3002\n\n\n\u65e5\u672c\u4ee5\u53d7\u6212\u6700\u53e4\u8001\u7684\u6728\u9020\u5efa\u7bc9:\u65e5\u672c\u5948\u826f\u6cd5\u9686\u5bfa\n\n\n\u5927\u5316(\u5e74\u865f\uff0c\u5927\u5316\u4e8c\u5e74\uff0c\u570b\u5bb6\u7684\u6539\u9020\u8a08\u756b)\u9769\u65b0:\u662f\u897f\u5143645\u5e74\u6642\u65e5\u672c\u7684\u4e00\u9023\u4e32\u793e\u6703\u653f\u6cbb\u6539\u9769\u3002 \u5176\u4e3b\u8981\u5167\u5bb9\u662f\u5ee2\u9664\u7576\u6642\u8c6a\u65cf\u5c08\u653f\u7684\u5236\u5ea6\uff0c\u4e26\u6548\u6cd5\u4e2d\u539f\u5510\u671d\u7687\u5e1d\u9ad4\u5236\u6210\u7acb\u4e2d\u592e\u96c6\u6b0a\u570b\u5bb6\uff0c\u5c0d\u65e5\u5f8c\u65e5\u672c\u6b77\u53f2\u767c\u5c55\u5f71\u97ff\u6df1\u9060\u3002\n1.\u4e2d\u592e\u96c6\u6b0a\uff0c\u985e\u4f3c\u4e2d\u570b\uff0c\u540c\u6642\u5b78\u7fd2\u4e2d\u570b\u7684\u6587\u5316\n\n2.\u7a05\u5236\u6539\u9769\n\n\n\u65e5\u672c\u6700\u65e9\u7684\u60c5\u6b4c\u5c0d\u5531: \u4f0a\u5354\u90a3\u5176VS\u4f0a\u5354\u90a3\u7f8e\n\n\n\u5929\u5ca9\u6236\u795e\u8a71\n1.\u9285\u93e1\n\n2.\u516b\u6b67\u5927\u86c7OROCUI \n\n3.\u5341\u5168\u528d \u662f\u4e00\u7a2e\u7d50\u69cb\u4e3b\u7fa9 \n\n4.\u8001\u592b\u5a66\u5973\u5152\u8b8a\u6210\u4e00\u96bb\u68b3\u5b50 \n\n\n\u5be9\u5224\n1.\u770b\u8ab0\u6c59\u7a62\uff0c\u5c31\u662f\u6709\u7f6a \u7528\u7953\u89e3\u9664\u5384\u904b\n\n2.\u5929\u6d25\u7f6a \u7834\u8fb2\u8015\u796d\u7940 \n\n3.\u570b\u6d25\u7f6a \u88ab\u96f7\u6253\u5230 \u8fb2\u4f5c\u7269\u88ab\u5403 \u59e6\u6deb\u602a\u76dc",
            "title": "Junior 2nd sem. Japanese Culture"
        },
        {
            "location": "/univ_notes/general/jp_cul/#_1",
            "text": "",
            "title": "\u65e5\u672c\u6587\u5316\u8ad6\u8ab2\u5802\u7b46\u8a18"
        },
        {
            "location": "/univ_notes/general/jp_cul/#lec1-mar-7-2018",
            "text": "\u7167\u8449\u6a39\u6728\u6797\u6587\u5316:\u7167\u8449\u6a39\u6797\u6587\u5316\uff0c\u662f1970\u5e74\u4ee3\u4ee5\u4f86\u65e5\u672c\u4eba\u985e\u5b78\u5bb6\u63d0\u51fa\u65e5\u672c\u6587\u5316\u6e90\u982d\u7406\u8ad6\u3002\u63d0\u51fa\u559c\u746a\u62c9\u96c5\u5c71\u4ee5\u5357\u81f3\u65e5\u672c\u95dc\u897f\u6709\u4e00\u5e38\u7da0\u95ca\u8449\u6a39\u6797\uff0c\u5176\u4e2d\u4ee5\u96f2\u5357\u70ba\u4e2d\u5fc3\uff0c\u65e5\u672c\u7684\u6c34\u7a3b\u7a2e\u690d\u8207\u6b64\u6587\u5316\u6709\u95dc\u3002 Wikipedia   \n1.\u7167\u4e0b\u53bb\u6a39\u8449\u6703\u9583\u9583\u767c\u5149    \u65e5\u672c\u7a3b\u7c73\u4e3b\u8981\u662f\u4e2d\u570b\u9577\u6c5f\u6d41\u904e\u53bb\u7684\u8aaa\u6cd5\u6700\u70ba\u666e\u904d\uff0c\u4f46\u662f\u73fe\u5728\u7684\u58fd\u53f8\u7c73\u548c\u5927\u9678\u7684\u4e0d\u592a\u4e00\u6a23\uff0c\u5927\u9678\u7684\u4ee5\u84ec\u840a\u7c73\u70ba\u4e3b\u800c\u65e5\u672c\u662f\u504f\u58fd\u53f8\u7c73\u7684\u9ecf\u7a20   \u6709\u975e\u5e38\u5927\u7684\u53e4\u58b3  \u65e5\u8a9e\u7684\u6587\u5b57\u6587\u6cd5\u8fd1\u4f3c\u65bc\u6771\u570b\u5317\u65b9\u6c11\u65cf  \u7167\u8449\u6a39\u6728\u6587\u5316\u53e4\u4ee3\u6709\u54ea\u4e9b\u4e8b\u60c5\u5462 \n1.\u5973\u6027\u6587\u5316\u70ba\u4e2d\u5fc3\uff0c\u7537\u5973\u60c5\u610f\u76f8\u6295\u5f26\u6b4c\u5c0d\u5531",
            "title": "Lec1. Mar 7, 2018"
        },
        {
            "location": "/univ_notes/general/jp_cul/#lec3-mar-21-2018",
            "text": "\u7e2e\u5c0f\u6587\u5316\u662f\u65e5\u672c\u5927\u5b78\u6559\u6388\u63d0\u51fa\u7684  \u9b4f\u5fd7\u7aa9\u4eba\u50b3\uff0c\u4e2d\u570b\u4eba\u8a18\u8f09\u4e86\u6700\u65e9\u7684\u65e5\u672c\u4eba\u6d3b\u52d5\u60c5\u5f62\uff0c\u984c\u5230\u4e86\u4e5d\u5dde\u7684  \u90aa\u99ac\u53f0\u570b  \u53e4\u58b3\uff1a\u6574\u5ea7\u5c71\u90fd\u662f\u76f4\u7a74\u5f0f  \u65e5\u672c\u4eba\u6700\u65e9\u53ef\u4ee5\u662f\uff1a\u7e69\u6587\u4eba\uff08\u6bd4\u5f4c\u751f\u4eba\u77ee\uff09  \u4e2d\u570b\u5ead\u5712\u7684\u7279\u8272\u5728\u65bc\u5efa\u7bc9\u7269\u5c6c\u65bc\u98a8\u666f\u7684\u4e00\u90e8\u5206,\u800c\u4e14\u5176\u6a13\u3001\u4ead\u3001\u53f0\u3001\u69ad\u4e0a\u9762\u90fd\u61f8\u639b\u6abb\u806f,\u9019\u662f\u65e5\u672c\u5ead\u5712\u898b\u4e0d\u5230\u7684\u666f\u8c61\uff0c\u800c\u65e5\u672c\u9664\u4e86\u4e3b\u5efa\u7bc9\u4ee5\u5916\uff0c\u4e43\u662f\u770b\u4e0d\u5230\u4eba\u5de5\u5efa\u7bc9\u7684\uff0c\u6b64\u5916\u9084\u6703\u6709\u92ea\u4e0a\u767d\u6c99\u7684\u67af\u5c71\u6c34\u5ead\u5712\u4ee5\u53ca\u6eff\u4f48\u9752\u82d4\u7684\u5ead\u5712\uff0c\u524d\u8005\u8c61\u5fb5\u4e00\u6bba\u770b\u898b\u4e00\u500b\u5b87\u5b99\uff0c\u5f8c\u8005\u5247\u662f\u5728\u65e5\u672c\u6eab\u6696\u662f\u6f64\u4e2d\u57f9\u80b2\u51fa\u4f86\u9591\u975c\u6c23\u6c1b\u7684\u5ead\u5712\u3002  \u65e5\u672c\u7684\u4e2d\u570b\u7f8e\u8853\u5c08\u5bb6\u6236\u7530\u798e\u4f51\u6559\u6388\u6307\u51fa,\u65e5\u672c\u7e6a\u756b\u4e2d\u51fa\u73fe\u7684\u706b\u7130\u3001\u96f2\u5f69\u3001\u6c34(\u6d6a\u82b1)\u3001\u5149\u7b49\u4e0d\u5b9a\u578b\u7269,\u5728\u73fe\u5b58\u7684\u4e2d\u570b\u7e6a\u756b\u4e2d\u898b\u4e0d\u5230\u3002  \u4ff3\u53e5\u53ef\u4ee5\u4e0d\u7528\u62bc\u97fb \u4f46\u4e00\u5b9a\u89815+7+5 \u4e26\u4e14\u6709\u5b63\u8a9e\uff08\u65e5\u672c\u4eba\u6c11\u5c0d\u65bc\u5e7c\u5c0f\u6642\u4ee3\u6216\u6545\u9109\u4e00\u7a2e\u61f7\u5ff5\u7737\u6200\u4e4b\u60c5\uff09  \u7ef3\u6587\u201d\u4e00\u8bcd\u6765\u6e90\u4e8e\u7f8e\u56fd\u52a8\u7269\u5b66\u5bb6\u6469\u65af\u5173\u4e8e\u5927\u68ee\u8d1d\u51a2\u9676\u5668\u53d1\u6398\u7684\u62a5\u544a\u3002\uff08\u53d6\u81ea\u767e\u5ea6\uff09  \u5f4c\u751f\u6642\u4ee3\u662f\u5317\u6d77\u9053\u4e0e\u7409\u7403\u4ee5\u5916\u7684\u5168\u65e5\u672c\u5217\u5cf6\u7684\u4e00\u500b\u6642\u4ee3\u5283\u5206\uff0c\u8655\u65bc\u897f\u5143\u524d10\u4e16\u7d00\u5230\u897f\u51433\u4e16\u7d00\u4e2d\u671f\u3002 \u5f4c\u751f\u6642\u4ee3\u662f\u5728\u7d93\u6b77\u4e86\u4ee5\u63a1\u96c6\u70ba\u7d93\u6fdf\u4e3b\u9ad4\u7684\u7e69\u6587\u6642\u4ee3\u4e4b\u5f8c\uff0c\u4e00\u500b\u4e3b\u8981\u4f9d\u8cf4\u6c34\u7a3b\u7a2e\u690d\u7684\u751f\u7522\u7d93\u6fdf\u6642\u4ee3\u3002 \uff08\u53d6\u81ea\u7dad\u57fa\u767e\u79d1\uff09  \u65e5\u672c\u795e\u8a71\u4e3b\u8981\u8a18\u8f09\u5728 \u53e4\u4e8b\u8a18\uff0c\u800c\u4e0d\u662f\u592a\u53e4\u8a18  \u65e5\u672c\u7684\u53e4\u58b3\u7684\u5167\u90e8\u69cb\u9020\uff0c\u8d77\u5148\u90fd\u662f\u8c4e\u7a74\u5f0f\u77f3\u5ba4\uff0c\u4e00\u76f4\u5230\u4e94\u4e16\u7d00\u4e2d\u8449\u624d\u51fa\u73fe\u6a6b\u7a74\u5f0f\u77f3\u5ba4\u3002\u800c\u5230\u4e86\u53e4\u58b3\u6642\u4ee3\u7684\u5f8c\u671f\uff0c\u4e5f\u5c31\u662f\u897f\u5143\u516d\u4e03\u4e16\u7d00\u7684\u6642\u5019\uff0c\u6a6b\u7a74\u77f3\u5ba4\u5df2\u7d93\u666e\u53ca\u65bc\u65e5\u672c\u5168\u570b\u3002",
            "title": "Lec3. Mar 21 2018"
        },
        {
            "location": "/univ_notes/general/jp_cul/#lec4-mar-28-2018",
            "text": "\u63a8\u8c37\u5929\u7687\u662f\u7b2c\u4e00\u4efb\u5973\u5929\u7687  \u4e2d\u592e\u96c6\u6b0a\uff0c\u5728\u8056\u5fb7\u592a\u5b50\u7684\u6642\u4ee3\uff0c\u9694\u5e74\u9084\u9812\u4f48\u4e86\u5341\u4e03\u689d\u61b2\u6cd5\uff0c\u5728\u516c\u5143604\u5e74\n1.\u4ee5\u548c\u70ba\u8cb4 \n2.\u7be4\u4fe1\u4e09\u5bf6:\u5ba3\u63da\u4f5b\u6559\u70ba\u570b\u6559  \u98db\u9ce5\u6642\u4ee3:\u540c\u6642\u4e2d\u570b\u7684\u968b\u671d\u6642\u671f\uff0c\u6709\u8da3\u968b\u671d\u671d\u8ca2\uff0c\u5728\u5948\u826f\u9644\u8fd1\uff0c\u6b66\u529b\u9817\u70ba\u5f37\u5927\n\u5728\u6b64\u6642\u968b\u671d\u60f3\u8981\u9060\u4ea4\u8fd1\u653b\uff0c\u56e0\u70ba\u4ed6\u8981\u6253\u671d\u9bae\u534a\u5cf6\uff0c\u6240\u4ee5\u5148\u6d3e\u96a8\u99db\u5230\u65e5\u672c\uff0c\u5e0c\u671b\u65e5\u672c\u4e0d\u8981\u4f86\u5e72\u6d89\u3002  \u65e5\u672c\u4ee5\u53d7\u6212\u6700\u53e4\u8001\u7684\u6728\u9020\u5efa\u7bc9:\u65e5\u672c\u5948\u826f\u6cd5\u9686\u5bfa  \u5927\u5316(\u5e74\u865f\uff0c\u5927\u5316\u4e8c\u5e74\uff0c\u570b\u5bb6\u7684\u6539\u9020\u8a08\u756b)\u9769\u65b0:\u662f\u897f\u5143645\u5e74\u6642\u65e5\u672c\u7684\u4e00\u9023\u4e32\u793e\u6703\u653f\u6cbb\u6539\u9769\u3002 \u5176\u4e3b\u8981\u5167\u5bb9\u662f\u5ee2\u9664\u7576\u6642\u8c6a\u65cf\u5c08\u653f\u7684\u5236\u5ea6\uff0c\u4e26\u6548\u6cd5\u4e2d\u539f\u5510\u671d\u7687\u5e1d\u9ad4\u5236\u6210\u7acb\u4e2d\u592e\u96c6\u6b0a\u570b\u5bb6\uff0c\u5c0d\u65e5\u5f8c\u65e5\u672c\u6b77\u53f2\u767c\u5c55\u5f71\u97ff\u6df1\u9060\u3002\n1.\u4e2d\u592e\u96c6\u6b0a\uff0c\u985e\u4f3c\u4e2d\u570b\uff0c\u540c\u6642\u5b78\u7fd2\u4e2d\u570b\u7684\u6587\u5316 \n2.\u7a05\u5236\u6539\u9769  \u65e5\u672c\u6700\u65e9\u7684\u60c5\u6b4c\u5c0d\u5531: \u4f0a\u5354\u90a3\u5176VS\u4f0a\u5354\u90a3\u7f8e  \u5929\u5ca9\u6236\u795e\u8a71\n1.\u9285\u93e1 \n2.\u516b\u6b67\u5927\u86c7OROCUI  \n3.\u5341\u5168\u528d \u662f\u4e00\u7a2e\u7d50\u69cb\u4e3b\u7fa9  \n4.\u8001\u592b\u5a66\u5973\u5152\u8b8a\u6210\u4e00\u96bb\u68b3\u5b50   \u5be9\u5224\n1.\u770b\u8ab0\u6c59\u7a62\uff0c\u5c31\u662f\u6709\u7f6a \u7528\u7953\u89e3\u9664\u5384\u904b \n2.\u5929\u6d25\u7f6a \u7834\u8fb2\u8015\u796d\u7940  \n3.\u570b\u6d25\u7f6a \u88ab\u96f7\u6253\u5230 \u8fb2\u4f5c\u7269\u88ab\u5403 \u59e6\u6deb\u602a\u76dc",
            "title": "Lec4. Mar 28 2018"
        },
        {
            "location": "/programming_practice/leetcode_OJ/lcojindex/",
            "text": "Index of leetcode_OJ\n\n\nleetcode_OJ(Old blog, from google blogger)\n \n\n\nWC76\n \n\n\nWC70\n \n\n\nWC74\n \n\n\nWC75\n \n\n\nWC76\n \n\n\nWC78",
            "title": "Index"
        },
        {
            "location": "/programming_practice/leetcode_OJ/lcojindex/#index-of-leetcode_oj",
            "text": "leetcode_OJ(Old blog, from google blogger)    WC76    WC70    WC74    WC75    WC76    WC78",
            "title": "Index of leetcode_OJ"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC67/",
            "text": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Jan 14, 2018\n\n\nVirtual Contest time: Mar 24, 2018\n\n\n\n\nPA. \n762. Prime Number of Set Bits in Binary Representation\n \u4f4d\u5143\u64cd\u4f5c\u6c34\u984c\n\n\n\n\n\u601d\u8def\uff1a\u4f4d\u5143\u904b\u7b97\u6293\u4e00\uff0c\u770b\u770b\u4e00\u7684\u500b\u6578\u662f\u5426\u70ba\u8cea\u6578\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nbitcnt\n(\nint\n \nnum\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n;\n\n        \nwhile\n(\nnum\n \n>\n \n0\n)\n\n        \n{\n\n            \nif\n(\nnum\n \n&\n \n0x1\n)\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n            \nnum\n>>=\n1\n;\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n    \nbool\n \nis_prime\n(\nint\n \nnum\n)\n\n    \n{\n\n        \nif\n(\nnum\n \n==\n \n1\n)\n\n            \nreturn\n \nfalse\n;\n\n\n        \nfor\n(\nint\n \ni\n=\n2\n;\ni\n<=\n(\nint\n)\nsqrt\n(\nnum\n);\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nnum\n \n%\n \ni\n \n==\n \n0\n)\n\n            \n{\n\n                \nreturn\n \nfalse\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ntrue\n;\n\n    \n}\n\n    \nint\n \ncountPrimeSetBits\n(\nint\n \nleft\n,\n \nint\n \nright\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n,\n \nbit\n \n=\n \n0\n;\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \nleft\n;\n \ni\n \n<=\n \nright\n;\n \ni\n++\n)\n\n        \n{\n\n            \nbit\n \n=\n \nbitcnt\n(\ni\n);\n\n            \nif\n(\nis_prime\n(\nbit\n))\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPB. \n763. Partition Labels\n \u8caa\u5fc3\u6f14\u7b97\u6cd5\u63a8\u7406\u984c\n\n\n\n\n\u601d\u8def\uff1a\u5fc5\u9808\u8b93\u6240\u6709char\u958b\u59cb\u7d50\u675f\u5747\u5c6c\u65bc\u540c\u4e00\u500b\u5340\u584a\uff0c\u6545\u5229\u7528struct\u7d00\u9304\u6bcf\u4e00\u500bchar\u7684\u6700\u65e9\u958b\u59cb\u4f4d\u7f6e\uff0c\u8207\u6700\u665a\u7d50\u675f\u4f4d\u7f6e\u3002\u82e5\u5b57\u5143x\u7684\u958b\u59cb\u4f4d\u7f6ex_start\u4ecb\u65bc\u7576\u524d\u6700\u5c0f\u958b\u59cb(min_start)\u8207\u7d50\u675f(max_end)\u4e4b\u9593\uff0c\u4e26\u4e14\u5b57\u5143x\u7684\u7d50\u675f\u4f4d\u7f6e\u5927\u65bc\u7576\u524d\u7684max_end \u5247\u5fc5\u9808\u518d\u5c07max_end\u5ef6\u4f38\uff0c\u5426\u5247\u7121\u6cd5\u7b26\u5408\u984c\u76ee\u9700\u6c42\u8b93char\u6700\u5c0f\u958b\u59cb\u8207\u6700\u5927\u7d50\u675f\u8857\u4f4d\u5728\u540c\u4e00\u500b\u5340\u584a\u3002 \u6bcf\u6b21\u90fd\u627e\u7576\u524d\u6700\u9060\u7684\u4e26\u6aa2\u67e5\u662f\u5426\u66f4\u65b0\uff08\u5340\u57df\u6700\u512a\u89e3\uff09\uff0c\u662f\u5c6c\u65bc\u8caa\u5fc3\u7b97\u6cd5\u7684\u4e00\u7a2e\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nstruct\n \nstend\n\n    \n{\n\n        \nchar\n \nalpha\n;\n\n        \nint\n \nstart\n,\n \nend\n;\n\n    \n};\n\n    \nbool\n \nmycompare\n(\nstend\n \ns1\n,\n \nstend\n \ns2\n)\n\n    \n{\n\n        \nreturn\n \ns1\n.\nstart\n \n<\n \ns2\n.\nstart\n;\n\n    \n}\n\n\n    \nvector\n<\nint\n>\n \npartitionLabels\n(\nstring\n \nstr\n)\n\n    \n{\n\n        \nint\n \ncount\n \n=\n \nstr\n.\nsize\n();\n\n        \nvector\n<\nstend\n>\n \nvec\n;\n\n        \nvec\n.\nresize\n(\n26\n);\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \n26\n;\n \ni\n++\n)\n\n        \n{\n\n            \nvec\n[\ni\n].\nstart\n \n=\n \n-\n1\n;\n\n            \nvec\n[\ni\n].\nend\n \n=\n \n0\n;\n\n            \nvec\n[\ni\n].\nalpha\n \n=\n \n0\n;\n\n        \n}\n\n        \nvec\n[\nstr\n[\n0\n]\n-\n'a'\n].\nstart\n \n=\n \n0\n;\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \ncount\n;\n \ni\n++\n)\n\n        \n{\n\n            \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nalpha\n \n=\n \nstr\n[\ni\n];\n\n            \nif\n(\nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nstart\n \n==\n \n-\n1\n)\n\n            \n{\n\n                \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nstart\n \n=\n \ni\n;\n\n            \n}\n\n            \nif\n(\ni\n \n>\n \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nend\n)\n\n            \n{\n\n                 \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nend\n \n=\n \ni\n;\n\n            \n}\n\n        \n}\n\n\n        \nint\n \nmin_start\n \n=\n \nvec\n[\nstr\n[\n0\n]\n-\n'a'\n].\nstart\n;\n\n        \nint\n \nmax_end\n \n=\n \nvec\n[\nstr\n[\n0\n]\n-\n'a'\n].\nend\n;\n\n        \n//greedy approach\n\n        \nint\n \npartition\n \n=\n \n0\n;\n\n        \nvector\n<\nint\n>\nres\n;\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \ncount\n;\n \ni\n++\n)\n\n        \n{\n\n            \nif\n(\n \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nstart\n \n>\n \nmin_start\n\n            \n&&\n \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nstart\n \n<\n \nmax_end\n\n            \n&&\n \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nend\n \n>\n \nmax_end\n \n)\n\n            \n{\n\n                \nmax_end\n \n=\n \nvec\n[\nstr\n[\ni\n]\n-\n'a'\n].\nend\n;\n\n            \n}\n\n\n            \nif\n(\ni\n \n==\n \nmax_end\n \n||\n \ni\n \n==\n \ncount\n \n-\n \n1\n)\n//last will definitely cut over to match. just in case\n\n            \n{\n\n                \nif\n(\ni\n \n!=\n \ncount\n \n-\n \n1\n)\n\n                \n{\n\n                    \nres\n.\npush_back\n(\nmax_end\n \n-\n \nmin_start\n \n+\n \n1\n);\n\n                    \nmin_start\n \n=\n \nvec\n[\nstr\n[\ni\n \n+\n \n1\n]\n-\n'a'\n].\nstart\n;\n\n                    \nmax_end\n \n=\n \nvec\n[\nstr\n[\ni\n \n+\n \n1\n]\n-\n'a'\n].\nend\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nres\n.\npush_back\n(\nmax_end\n \n-\n \nmin_start\n \n+\n \n1\n);\n \n// a special case\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPC. \n764. Largest Plus Sign\n \u52d5\u614b\u898f\u5283\n\n\n\n\n\u7531\u65bc\u6bcf\u4e00\u9ede\u7684+\u865f\u4e2d\u5fc3\uff0c\u5468\u570d\u7684\u56db\u89d2\u90fd\u5fc5\u9808\u7b49\u9577\u70ba\u9023\u7e8c\u76841(\u91cd\u758a\u5b50\u554f\u984c)\uff0c\u82e5\u4e0d\u7b49\u9577\u5247\u53ea\u80fd\u76e1\u91cf\u5ef6\u4f38\u81f3\u300e\u56db\u89d2\u6700\u77ed\u7684\u89d2\u300f\u4f5c\u70ba\u672c\u6b21\u7684order(\u6700\u512a\u5b50\u7d50\u69cb)\uff0c\u56e0\u6b64\u63a1\u7528\u52d5\u614b\u898f\u5283\n\u9996\u5148\u628a\u56db\u500b\u65b9\u5411\uff08\u671d\u4e0a \u671d\u4e0b \u671d\u5de6 \u671d\u53f3 \u9023\u7e8c\u76841\u7d66\u8a18\u8f09 \u4f8b\u5982\u671d\u53f3\u884c\u9032 0110111 \u2192 0120123\n\u671d\u5de6\u884c\u9032\u2192 0210321 \u7684\u5beb\u6cd5\uff09\uff0c\u6700\u5f8c\u5168\u90e8\u8d70\u8a2a\u904e\u4e00\u904d\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u4e00\u9ede\u53d6min(u,d,l,r)\u9023\u7e8c\u4e00\u7684\u500b\u6578\u5c31\u662f\u7576\u524d\u80fd\u7d44\u6210\uff0b\u865f\u7684order\uff08\u5ea6\u6578\uff09\n\u6700\u5f8c\u91cd\u65b0\u8d70\u8a2a\u4e00\u904d\u627e\u51fa\u5c0d\u65bc\u6bcf\u4e00\u9ede\u6700\u5927\u7684order\u3002\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \norderOfLargestPlusSign\n(\nint\n \nMAXN\n,\n \nvector\n<\nvector\n<\nint\n>>&\n \nmines\n)\n\n    \n{\n\n        \nint\n \norder\n \n=\n \n0\n,\n \ncount\n \n=\n \nmines\n.\nsize\n();\n\n        \nvector\n<\nvector\n<\nint\n>>\ndp_up\n(\nMAXN\n,\n \nvector\n<\nint\n>\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_down\n(\nMAXN\n,\n \nvector\n<\nint\n>\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_left\n(\nMAXN\n,\n \nvector\n<\nint\n>\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_right\n(\nMAXN\n,\n \nvector\n<\nint\n>\n(\nMAXN\n,\n \n1\n)),\n\n        \ndp_ans\n(\nMAXN\n,\n \nvector\n<\nint\n>\n(\nMAXN\n,\n \n0\n));\n\n        \nfor\n \n(\nsize_t\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \ncount\n;\n \ni\n++\n)\n\n        \n{\n\n            \ndp_up\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n            \ndp_down\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n            \ndp_left\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n            \ndp_right\n[\nmines\n[\ni\n][\n0\n]][\nmines\n[\ni\n][\n1\n]]\n \n=\n \n0\n;\n\n        \n}\n\n\n        \n//main dynamic programming\n\n        \n//up continuous (bottom up)\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \nMAXN\n \n-\n \n2\n;\nj\n \n>=\n \n0\n;\n \nj\n--\n)\n\n            \n{\n\n                \nif\n(\ndp_up\n[\nj\n][\ni\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_up\n[\nj\n][\ni\n]\n \n=\n \ndp_up\n[\nj\n \n+\n \n1\n][\ni\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//down continuous (top down)\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n1\n;\nj\n \n<\n \nMAXN\n;\n \nj\n++\n)\n\n            \n{\n\n                \nif\n(\ndp_down\n[\nj\n][\ni\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_down\n[\nj\n][\ni\n]\n \n=\n \ndp_down\n[\nj\n \n-\n \n1\n][\ni\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//left continuous\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \nMAXN\n \n-\n \n2\n;\nj\n \n>=\n0\n \n;\nj\n--\n)\n\n            \n{\n\n                \nif\n(\ndp_left\n[\ni\n][\nj\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_left\n[\ni\n][\nj\n]\n \n=\n \ndp_left\n[\ni\n][\nj\n \n+\n \n1\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//right continuous\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n1\n;\nj\n \n<\n \nMAXN\n;\n \nj\n++\n)\n\n            \n{\n\n                \nif\n(\ndp_right\n[\ni\n][\nj\n]\n \n==\n \n1\n)\n\n                \n{\n\n                    \ndp_right\n[\ni\n][\nj\n]\n \n=\n \ndp_right\n[\ni\n][\nj\n \n-\n \n1\n]\n \n+\n \n1\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n\n        \n//check for direction since the plus sign has to satisfiy all the four direction, if one of the direction fails. it has to decrease to that direction\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \nMAXN\n;\n \ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n<\n \nMAXN\n;\n \nj\n++\n)\n\n            \n{\n\n                \ndp_ans\n[\ni\n][\nj\n]\n \n=\n \nmin\n(\nmin\n(\ndp_up\n[\ni\n][\nj\n],\n \ndp_down\n[\ni\n][\nj\n]),\n \nmin\n(\ndp_left\n[\ni\n][\nj\n],\n \ndp_right\n[\ni\n][\nj\n]));\n\n                \nif\n(\ndp_ans\n[\ni\n][\nj\n]\n \n>\n \norder\n)\n\n                \n{\n\n                    \norder\n \n=\n \ndp_ans\n[\ni\n][\nj\n];\n\n                \n}\n\n            \n}\n\n        \n}\n\n\n        \nreturn\n \norder\n;\n\n    \n}\n\n\n\n};",
            "title": "WC67"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#leetcode_oj-wc75",
            "text": "Contest time: Jan 14, 2018  Virtual Contest time: Mar 24, 2018",
            "title": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#pa-762-prime-number-of-set-bits-in-binary-representation",
            "text": "\u601d\u8def\uff1a\u4f4d\u5143\u904b\u7b97\u6293\u4e00\uff0c\u770b\u770b\u4e00\u7684\u500b\u6578\u662f\u5426\u70ba\u8cea\u6578  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44 class   Solution  {  public : \n     int   bitcnt ( int   num ) \n     { \n         int   cnt   =   0 ; \n         while ( num   >   0 ) \n         { \n             if ( num   &   0x1 ) \n             { \n                 cnt ++ ; \n             } \n             num >>= 1 ; \n         } \n         return   cnt ; \n     } \n     bool   is_prime ( int   num ) \n     { \n         if ( num   ==   1 ) \n             return   false ; \n\n         for ( int   i = 2 ; i <= ( int ) sqrt ( num ); i ++ ) \n         { \n             if ( num   %   i   ==   0 ) \n             { \n                 return   false ; \n             } \n         } \n         return   true ; \n     } \n     int   countPrimeSetBits ( int   left ,   int   right ) \n     { \n         int   cnt   =   0 ,   bit   =   0 ; \n         for   ( size_t   i   =   left ;   i   <=   right ;   i ++ ) \n         { \n             bit   =   bitcnt ( i ); \n             if ( is_prime ( bit )) \n             { \n                 cnt ++ ; \n             } \n         } \n         return   cnt ; \n     }  };",
            "title": "PA. 762. Prime Number of Set Bits in Binary Representation \u4f4d\u5143\u64cd\u4f5c\u6c34\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#pb-763-partition-labels",
            "text": "\u601d\u8def\uff1a\u5fc5\u9808\u8b93\u6240\u6709char\u958b\u59cb\u7d50\u675f\u5747\u5c6c\u65bc\u540c\u4e00\u500b\u5340\u584a\uff0c\u6545\u5229\u7528struct\u7d00\u9304\u6bcf\u4e00\u500bchar\u7684\u6700\u65e9\u958b\u59cb\u4f4d\u7f6e\uff0c\u8207\u6700\u665a\u7d50\u675f\u4f4d\u7f6e\u3002\u82e5\u5b57\u5143x\u7684\u958b\u59cb\u4f4d\u7f6ex_start\u4ecb\u65bc\u7576\u524d\u6700\u5c0f\u958b\u59cb(min_start)\u8207\u7d50\u675f(max_end)\u4e4b\u9593\uff0c\u4e26\u4e14\u5b57\u5143x\u7684\u7d50\u675f\u4f4d\u7f6e\u5927\u65bc\u7576\u524d\u7684max_end \u5247\u5fc5\u9808\u518d\u5c07max_end\u5ef6\u4f38\uff0c\u5426\u5247\u7121\u6cd5\u7b26\u5408\u984c\u76ee\u9700\u6c42\u8b93char\u6700\u5c0f\u958b\u59cb\u8207\u6700\u5927\u7d50\u675f\u8857\u4f4d\u5728\u540c\u4e00\u500b\u5340\u584a\u3002 \u6bcf\u6b21\u90fd\u627e\u7576\u524d\u6700\u9060\u7684\u4e26\u6aa2\u67e5\u662f\u5426\u66f4\u65b0\uff08\u5340\u57df\u6700\u512a\u89e3\uff09\uff0c\u662f\u5c6c\u65bc\u8caa\u5fc3\u7b97\u6cd5\u7684\u4e00\u7a2e  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69 class   Solution  {  public : \n     struct   stend \n     { \n         char   alpha ; \n         int   start ,   end ; \n     }; \n     bool   mycompare ( stend   s1 ,   stend   s2 ) \n     { \n         return   s1 . start   <   s2 . start ; \n     } \n\n     vector < int >   partitionLabels ( string   str ) \n     { \n         int   count   =   str . size (); \n         vector < stend >   vec ; \n         vec . resize ( 26 ); \n         for ( int   i   =   0 ;   i   <   26 ;   i ++ ) \n         { \n             vec [ i ]. start   =   - 1 ; \n             vec [ i ]. end   =   0 ; \n             vec [ i ]. alpha   =   0 ; \n         } \n         vec [ str [ 0 ] - 'a' ]. start   =   0 ; \n         for   ( size_t   i   =   1 ;   i   <   count ;   i ++ ) \n         { \n             vec [ str [ i ] - 'a' ]. alpha   =   str [ i ]; \n             if ( vec [ str [ i ] - 'a' ]. start   ==   - 1 ) \n             { \n                 vec [ str [ i ] - 'a' ]. start   =   i ; \n             } \n             if ( i   >   vec [ str [ i ] - 'a' ]. end ) \n             { \n                  vec [ str [ i ] - 'a' ]. end   =   i ; \n             } \n         } \n\n         int   min_start   =   vec [ str [ 0 ] - 'a' ]. start ; \n         int   max_end   =   vec [ str [ 0 ] - 'a' ]. end ; \n         //greedy approach \n         int   partition   =   0 ; \n         vector < int > res ; \n         for   ( size_t   i   =   0 ;   i   <   count ;   i ++ ) \n         { \n             if (   vec [ str [ i ] - 'a' ]. start   >   min_start \n             &&   vec [ str [ i ] - 'a' ]. start   <   max_end \n             &&   vec [ str [ i ] - 'a' ]. end   >   max_end   ) \n             { \n                 max_end   =   vec [ str [ i ] - 'a' ]. end ; \n             } \n\n             if ( i   ==   max_end   ||   i   ==   count   -   1 ) //last will definitely cut over to match. just in case \n             { \n                 if ( i   !=   count   -   1 ) \n                 { \n                     res . push_back ( max_end   -   min_start   +   1 ); \n                     min_start   =   vec [ str [ i   +   1 ] - 'a' ]. start ; \n                     max_end   =   vec [ str [ i   +   1 ] - 'a' ]. end ; \n                 } \n                 else \n                 { \n                     res . push_back ( max_end   -   min_start   +   1 );   // a special case \n                 } \n             } \n         } \n         return   res ; \n     }  };",
            "title": "PB. 763. Partition Labels \u8caa\u5fc3\u6f14\u7b97\u6cd5\u63a8\u7406\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC67/#pc-764-largest-plus-sign",
            "text": "\u7531\u65bc\u6bcf\u4e00\u9ede\u7684+\u865f\u4e2d\u5fc3\uff0c\u5468\u570d\u7684\u56db\u89d2\u90fd\u5fc5\u9808\u7b49\u9577\u70ba\u9023\u7e8c\u76841(\u91cd\u758a\u5b50\u554f\u984c)\uff0c\u82e5\u4e0d\u7b49\u9577\u5247\u53ea\u80fd\u76e1\u91cf\u5ef6\u4f38\u81f3\u300e\u56db\u89d2\u6700\u77ed\u7684\u89d2\u300f\u4f5c\u70ba\u672c\u6b21\u7684order(\u6700\u512a\u5b50\u7d50\u69cb)\uff0c\u56e0\u6b64\u63a1\u7528\u52d5\u614b\u898f\u5283\n\u9996\u5148\u628a\u56db\u500b\u65b9\u5411\uff08\u671d\u4e0a \u671d\u4e0b \u671d\u5de6 \u671d\u53f3 \u9023\u7e8c\u76841\u7d66\u8a18\u8f09 \u4f8b\u5982\u671d\u53f3\u884c\u9032 0110111 \u2192 0120123\n\u671d\u5de6\u884c\u9032\u2192 0210321 \u7684\u5beb\u6cd5\uff09\uff0c\u6700\u5f8c\u5168\u90e8\u8d70\u8a2a\u904e\u4e00\u904d\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u4e00\u9ede\u53d6min(u,d,l,r)\u9023\u7e8c\u4e00\u7684\u500b\u6578\u5c31\u662f\u7576\u524d\u80fd\u7d44\u6210\uff0b\u865f\u7684order\uff08\u5ea6\u6578\uff09\n\u6700\u5f8c\u91cd\u65b0\u8d70\u8a2a\u4e00\u904d\u627e\u51fa\u5c0d\u65bc\u6bcf\u4e00\u9ede\u6700\u5927\u7684order\u3002  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82 class   Solution  {  public : \n     int   orderOfLargestPlusSign ( int   MAXN ,   vector < vector < int >>&   mines ) \n     { \n         int   order   =   0 ,   count   =   mines . size (); \n         vector < vector < int >> dp_up ( MAXN ,   vector < int > ( MAXN ,   1 )), \n         dp_down ( MAXN ,   vector < int > ( MAXN ,   1 )), \n         dp_left ( MAXN ,   vector < int > ( MAXN ,   1 )), \n         dp_right ( MAXN ,   vector < int > ( MAXN ,   1 )), \n         dp_ans ( MAXN ,   vector < int > ( MAXN ,   0 )); \n         for   ( size_t   i   =   0 ;   i   <   count ;   i ++ ) \n         { \n             dp_up [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n             dp_down [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n             dp_left [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n             dp_right [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]]   =   0 ; \n         } \n\n         //main dynamic programming \n         //up continuous (bottom up) \n         for ( int   i   =   0 ; i   <   MAXN ;   i ++ ) \n         { \n             for ( int   j   =   MAXN   -   2 ; j   >=   0 ;   j -- ) \n             { \n                 if ( dp_up [ j ][ i ]   ==   1 ) \n                 { \n                     dp_up [ j ][ i ]   =   dp_up [ j   +   1 ][ i ]   +   1 ; \n                 } \n             } \n         } \n         //down continuous (top down) \n         for ( int   i   =   0 ; i   <   MAXN ;   i ++ ) \n         { \n             for ( int   j   =   1 ; j   <   MAXN ;   j ++ ) \n             { \n                 if ( dp_down [ j ][ i ]   ==   1 ) \n                 { \n                     dp_down [ j ][ i ]   =   dp_down [ j   -   1 ][ i ]   +   1 ; \n                 } \n             } \n         } \n         //left continuous \n         for ( int   i   =   0 ; i   <   MAXN ;   i ++ ) \n         { \n             for ( int   j   =   MAXN   -   2 ; j   >= 0   ; j -- ) \n             { \n                 if ( dp_left [ i ][ j ]   ==   1 ) \n                 { \n                     dp_left [ i ][ j ]   =   dp_left [ i ][ j   +   1 ]   +   1 ; \n                 } \n             } \n         } \n         //right continuous \n         for ( int   i   =   0 ; i   <   MAXN ;   i ++ ) \n         { \n             for ( int   j   =   1 ; j   <   MAXN ;   j ++ ) \n             { \n                 if ( dp_right [ i ][ j ]   ==   1 ) \n                 { \n                     dp_right [ i ][ j ]   =   dp_right [ i ][ j   -   1 ]   +   1 ; \n                 } \n             } \n         } \n\n         //check for direction since the plus sign has to satisfiy all the four direction, if one of the direction fails. it has to decrease to that direction \n         for ( int   i   =   0 ;   i   <   MAXN ;   i ++ ) \n         { \n             for ( int   j   =   0 ;   j   <   MAXN ;   j ++ ) \n             { \n                 dp_ans [ i ][ j ]   =   min ( min ( dp_up [ i ][ j ],   dp_down [ i ][ j ]),   min ( dp_left [ i ][ j ],   dp_right [ i ][ j ])); \n                 if ( dp_ans [ i ][ j ]   >   order ) \n                 { \n                     order   =   dp_ans [ i ][ j ]; \n                 } \n             } \n         } \n\n         return   order ; \n     }  };",
            "title": "PC. 764. Largest Plus Sign \u52d5\u614b\u898f\u5283"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC70/",
            "text": "leetcode_OJ WC70 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Feb 4, 2018\n\n\nVirtual contest by myself: Mar 4, 2018\n\n\n\n\nPA. \n779. K-th Symbol in Grammar\n \u627e\u898f\u5f8b\u984c\n\n\n\n\n\u601d\u8def\uff1a\u627e\u898f\u5f8b\uff0c\u524d\u9762\u7684N\uff0c\u5be6\u969b\u4e0a\u662f\u969c\u773c\u6cd5\u3002\n\u4ee5\u4e0b\u7684N\u662f\u4e00(1-based)\n2 3 5 8 9 12 14 15\n\u5176-1\u5f8c\u4e8c\u9032\u4f4d\u8868\u793a\u6cd5\u70ba\uff1a\n0001\n0010\n0100\n0111\n1000\n1011\n1101\n1110\n\u6e1b\u4e00\u5f8c\u6709\u5947\u6578\u500b\u4e00\u5247\u70ba1 \u5426\u5247\u70ba0\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nkthGrammar\n(\nint\n \nnin\n,\n \nint\n \nkin\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n;\n\n        \nkin\n--\n;\n\n        \nwhile\n(\nkin\n)\n\n        \n{\n\n            \nif\n(\nkin\n&\n1\n)\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n            \nkin\n>>=\n1\n;\n\n        \n}\n\n        \nreturn\n \ncnt\n&\n1\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPB.\n\n\n\u88ab\u9396\u4f4f\u770b\u4e0d\u5230\uff20\uff20\uff0c\u4e8b\u5f8c\u8cfd\uff0c\u9700\u8981\u5347\u7d1a\u6210\u9ad8\u7d1a\u6703\u54e1\u624d\u6709\uff0c\u770b\u984c\u76ee\u662f\u5207\u5272\u4e8c\u5143\u6a39\n\n\nPC. \n777. Swap Adjacent in LR String\n \u5b57\u4e32\u5167\u90e8dfs\n\n\n\n\n\u932f\u8aa4\u601d\u8def \uff1a\u60f3\u8aaa\u7528\u64f4\u6563\u89e3\u6cd5\uff0cdfs\u4e0b\u53bb\u8996\u60c5\u6cc1\u4ea4\u63db\uff0c\u7136\u5403\u4e86\u4e00\u500b\u5927RE(stack overflow)\n\u5f8c\u4f86\u767c\u73fe\u662f\u5fd8\u4e86\u5bebvisited\uff1d \uff1d\uff0c\u6839\u672c\u8822\uff0c\u770b\u4f86\u9019\u65b9\u9762\u9084\u5f97\u591a\u591a\u78e8\u7df4\u9020\u5316\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n//Runtime Error (stack overflow)\n\n\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nbool\n \ncan\n \n=\n \nfalse\n;\n\n    \nbool\n \ncanTransform\n(\nstring\n \nstart\n,\n \nstring\n \nend\n)\n\n    \n{\n\n        \nif\n(\nstart\n \n==\n \nend\n)\n\n            \nreturn\n \n1\n;\n\n        \nelse\n\n        \n{\n\n            \ndfs\n(\nstart\n,\n \nend\n,\n \n0\n,\n \nstart\n.\nsize\n()\n-\n1\n);\n\n        \n}\n\n        \nreturn\n \ncan\n;\n\n    \n}\n\n    \nvoid\n \ndfs\n(\nstring\n \nstart\n,\n \nstring\n \nend\n,\n \nint\n \nlptr\n,\n \nint\n \nrptr\n)\n \n//quick sort-like recusrion\n\n    \n{\n\n        \nif\n(\nlptr\n \n>=\n \nrptr\n)\n \n//length end\n\n        \n{\n\n            \nreturn\n \n;\n\n        \n}\n\n        \nif\n(\nstart\n \n==\n  \nend\n)\n\n        \n{\n\n            \ncan\n \n=\n \ntrue\n;\n\n            \nreturn\n \n;\n\n        \n}\n\n        \nint\n \nlen\n \n=\n \nstart\n.\nsize\n()\n \n>>\n \n1\n;\n\n        \nint\n \nlptr1\n \n=\n \nlptr\n,\n \nrptr1\n \n=\n \nlen\n;\n\n        \nint\n \nlptr2\n \n=\n \nlen\n \n+\n \n1\n,\n \nrptr2\n \n=\n \nrptr\n;\n\n        \nfor\n(\nint\n \npos\n \n=\n \nlptr\n;\npos\n \n<=\n \nrptr\n;\npos\n++\n)\n\n        \n{\n\n            \nif\n(\nstart\n[\npos\n]\n==\n'X'\n \n&&\n \nstart\n[\npos\n+\n1\n]\n==\n'L'\n)\n\n            \n{\n\n                \nswap\n(\nstart\n[\npos\n],\nstart\n[\npos\n+\n1\n]);\n\n            \n}\n\n            \nelse\n \nif\n(\nstart\n[\npos\n]\n==\n'R'\n \n&&\n \nstart\n[\npos\n+\n1\n]\n==\n'X'\n)\n\n            \n{\n\n                \nswap\n(\nstart\n[\npos\n],\nstart\n[\npos\n+\n1\n]);\n\n            \n}\n\n        \n}\n\n        \ndfs\n(\nstart\n,\n \nend\n,\n \nlptr1\n,\n \nrptr1\n);\n\n        \ndfs\n(\nstart\n,\n \nend\n,\n \nlptr2\n,\n \nrptr2\n);\n\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\u6b63\u78ba\u601d\u8def\uff0c\u53c3\u8003\u4e86\u8a0e\u8ad6\u5340\u63d0\u793a\uff1a\u7531\u65bcR\u53ea\u80fd\u5411\u53f3\uff0c\u800cL\u53ea\u80fd\u5411\u5de6\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u900f\u904e\u5169\u500b\u6307\u6a19\u5728\u5169\u5b57\u4e32\u4e2d\u8dd1\uff0c\u627e\u5230\u7b2c\u4e00\u500b\u975eX\u7684\u5b57\u5143\uff0c\u82e5\u4e0d\u4e00\u6a23\u5247\u5fc5\u7136\u7121\u6cd5\u66ff\u63db\uff0c\u800c\u8981\u4f7f\u5f97R\u80fd\u5920\u66ff\u63db\u6210\u7d50\u679c\n\u552f\u6709start \u7684 R \u8f03 end \u7684 R \u5de6\u5074\uff0c\u624d\u6709\u6a5f\u6703\u5411\u53f3\uff0c\u82e5R\u5df2\u7d93\u592a\u53f3\u908a\u4e86\uff08\u4ea6\u5373\u8d85\u51faend\u7684R \uff09 \u4fbf\u662f\u63db\u4e0d\u904e\u53bb\u4e86\uff0c\u540c\u7406\u53ef\u5f97L\u7684\u6982\u5ff5\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nbool\n \ncan\n \n=\n \nfalse\n;\n\n    \nbool\n \ncanTransform\n(\nstring\n \nstart\n,\n \nstring\n \nend\n)\n\n    \n{\n\n        \nif\n(\nstart\n \n==\n \nend\n)\n\n            \nreturn\n \n1\n;\n\n        \nelse\n \nif\n(\nstart\n.\nsize\n()\n \n!=\n \nend\n.\nsize\n())\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n\n        \nint\n \nlen\n \n=\n \nstart\n.\nsize\n();\n\n        \nint\n \nptr1\n \n=\n \n0\n,\n \nptr2\n \n=\n \n0\n;\n\n        \nwhile\n(\nptr1\n \n<\n \nlen\n \n&&\n \nptr2\n \n<\n \nlen\n)\n \n//both in the boundary\n\n        \n{\n\n            \nwhile\n(\nptr1\n \n<\n \nlen\n \n&&\n \nstart\n[\nptr1\n]\n \n==\n \n'X'\n)\n \n//iterate till not X in start\n\n                \nptr1\n++\n;\n\n\n            \nwhile\n(\nptr2\n \n<\n \nlen\n \n&&\n \nend\n[\nptr2\n]\n \n==\n \n'X'\n)\n \n//iterate till not X in end\n\n                \nptr2\n++\n;\n\n\n            \nif\n(\nstart\n[\nptr1\n]\n \n!=\n \nend\n[\nptr2\n])\n \n//example  XL RX they are different, unable to swap\n\n                \nreturn\n \n0\n;\n\n\n            \n//iterate till next non X, both increment\n\n\n            \nif\n(\nstart\n[\nptr1\n]\n \n==\n \n'R'\n \n&&\n \nptr1\n \n>\n \nptr2\n)\n \n//R of start is right to the R of end,\n\n            \n//R can only move right but this situation needs R to move left, which is a contradiction\n\n            \n//\u6ce8\u610f\u4e0d\u80fd\u5bebptr1 >= ptr2 \u56e0\u70ba XRXL XRLX   XR\u90e8\u4efd\u5df2\u7d93\u6eff\u8db3\uff0c\u662f XR RX\u624d\u4e0d\u884c\uff01\uff01\n\n            \n{\n\n                \nreturn\n \n0\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nstart\n[\nptr1\n]\n \n==\n \n'L'\n \n&&\n \nptr2\n \n>\n \nptr1\n)\n\n            \n//L of start is left to the L of end,\n\n            \n//L can only move left but this situation needs L to move right, which is a contradiction\n\n            \n{\n\n                \nreturn\n \n0\n;\n\n            \n}\n\n            \nptr1\n++\n;\n\n            \nptr2\n++\n;\n\n\n        \n}\n\n        \nreturn\n \n1\n;\n\n    \n}\n\n\n\n};",
            "title": "WC70"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#leetcode_oj-wc70",
            "text": "Contest time: Feb 4, 2018  Virtual contest by myself: Mar 4, 2018",
            "title": "leetcode_OJ WC70 \u89e3\u984c\u5fc3\u5f97"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#pa-779-k-th-symbol-in-grammar",
            "text": "\u601d\u8def\uff1a\u627e\u898f\u5f8b\uff0c\u524d\u9762\u7684N\uff0c\u5be6\u969b\u4e0a\u662f\u969c\u773c\u6cd5\u3002\n\u4ee5\u4e0b\u7684N\u662f\u4e00(1-based)\n2 3 5 8 9 12 14 15\n\u5176-1\u5f8c\u4e8c\u9032\u4f4d\u8868\u793a\u6cd5\u70ba\uff1a\n0001\n0010\n0100\n0111\n1000\n1011\n1101\n1110\n\u6e1b\u4e00\u5f8c\u6709\u5947\u6578\u500b\u4e00\u5247\u70ba1 \u5426\u5247\u70ba0    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   Solution  {  public : \n     int   kthGrammar ( int   nin ,   int   kin ) \n     { \n         int   cnt   =   0 ; \n         kin -- ; \n         while ( kin ) \n         { \n             if ( kin & 1 ) \n             { \n                 cnt ++ ; \n             } \n             kin >>= 1 ; \n         } \n         return   cnt & 1 ; \n     }  };",
            "title": "PA. 779. K-th Symbol in Grammar \u627e\u898f\u5f8b\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#pb",
            "text": "\u88ab\u9396\u4f4f\u770b\u4e0d\u5230\uff20\uff20\uff0c\u4e8b\u5f8c\u8cfd\uff0c\u9700\u8981\u5347\u7d1a\u6210\u9ad8\u7d1a\u6703\u54e1\u624d\u6709\uff0c\u770b\u984c\u76ee\u662f\u5207\u5272\u4e8c\u5143\u6a39",
            "title": "PB."
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC70/#pc-777-swap-adjacent-in-lr-string-dfs",
            "text": "\u932f\u8aa4\u601d\u8def \uff1a\u60f3\u8aaa\u7528\u64f4\u6563\u89e3\u6cd5\uff0cdfs\u4e0b\u53bb\u8996\u60c5\u6cc1\u4ea4\u63db\uff0c\u7136\u5403\u4e86\u4e00\u500b\u5927RE(stack overflow)\n\u5f8c\u4f86\u767c\u73fe\u662f\u5fd8\u4e86\u5bebvisited\uff1d \uff1d\uff0c\u6839\u672c\u8822\uff0c\u770b\u4f86\u9019\u65b9\u9762\u9084\u5f97\u591a\u591a\u78e8\u7df4\u9020\u5316  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44 //Runtime Error (stack overflow)  class   Solution   {  public : \n     bool   can   =   false ; \n     bool   canTransform ( string   start ,   string   end ) \n     { \n         if ( start   ==   end ) \n             return   1 ; \n         else \n         { \n             dfs ( start ,   end ,   0 ,   start . size () - 1 ); \n         } \n         return   can ; \n     } \n     void   dfs ( string   start ,   string   end ,   int   lptr ,   int   rptr )   //quick sort-like recusrion \n     { \n         if ( lptr   >=   rptr )   //length end \n         { \n             return   ; \n         } \n         if ( start   ==    end ) \n         { \n             can   =   true ; \n             return   ; \n         } \n         int   len   =   start . size ()   >>   1 ; \n         int   lptr1   =   lptr ,   rptr1   =   len ; \n         int   lptr2   =   len   +   1 ,   rptr2   =   rptr ; \n         for ( int   pos   =   lptr ; pos   <=   rptr ; pos ++ ) \n         { \n             if ( start [ pos ] == 'X'   &&   start [ pos + 1 ] == 'L' ) \n             { \n                 swap ( start [ pos ], start [ pos + 1 ]); \n             } \n             else   if ( start [ pos ] == 'R'   &&   start [ pos + 1 ] == 'X' ) \n             { \n                 swap ( start [ pos ], start [ pos + 1 ]); \n             } \n         } \n         dfs ( start ,   end ,   lptr1 ,   rptr1 ); \n         dfs ( start ,   end ,   lptr2 ,   rptr2 ); \n\n     }  };    \u6b63\u78ba\u601d\u8def\uff0c\u53c3\u8003\u4e86\u8a0e\u8ad6\u5340\u63d0\u793a\uff1a\u7531\u65bcR\u53ea\u80fd\u5411\u53f3\uff0c\u800cL\u53ea\u80fd\u5411\u5de6\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u900f\u904e\u5169\u500b\u6307\u6a19\u5728\u5169\u5b57\u4e32\u4e2d\u8dd1\uff0c\u627e\u5230\u7b2c\u4e00\u500b\u975eX\u7684\u5b57\u5143\uff0c\u82e5\u4e0d\u4e00\u6a23\u5247\u5fc5\u7136\u7121\u6cd5\u66ff\u63db\uff0c\u800c\u8981\u4f7f\u5f97R\u80fd\u5920\u66ff\u63db\u6210\u7d50\u679c\n\u552f\u6709start \u7684 R \u8f03 end \u7684 R \u5de6\u5074\uff0c\u624d\u6709\u6a5f\u6703\u5411\u53f3\uff0c\u82e5R\u5df2\u7d93\u592a\u53f3\u908a\u4e86\uff08\u4ea6\u5373\u8d85\u51faend\u7684R \uff09 \u4fbf\u662f\u63db\u4e0d\u904e\u53bb\u4e86\uff0c\u540c\u7406\u53ef\u5f97L\u7684\u6982\u5ff5    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 class   Solution   {  public : \n     bool   can   =   false ; \n     bool   canTransform ( string   start ,   string   end ) \n     { \n         if ( start   ==   end ) \n             return   1 ; \n         else   if ( start . size ()   !=   end . size ()) \n         { \n             return   0 ; \n         } \n\n         int   len   =   start . size (); \n         int   ptr1   =   0 ,   ptr2   =   0 ; \n         while ( ptr1   <   len   &&   ptr2   <   len )   //both in the boundary \n         { \n             while ( ptr1   <   len   &&   start [ ptr1 ]   ==   'X' )   //iterate till not X in start \n                 ptr1 ++ ; \n\n             while ( ptr2   <   len   &&   end [ ptr2 ]   ==   'X' )   //iterate till not X in end \n                 ptr2 ++ ; \n\n             if ( start [ ptr1 ]   !=   end [ ptr2 ])   //example  XL RX they are different, unable to swap \n                 return   0 ; \n\n             //iterate till next non X, both increment \n\n             if ( start [ ptr1 ]   ==   'R'   &&   ptr1   >   ptr2 )   //R of start is right to the R of end, \n             //R can only move right but this situation needs R to move left, which is a contradiction \n             //\u6ce8\u610f\u4e0d\u80fd\u5bebptr1 >= ptr2 \u56e0\u70ba XRXL XRLX   XR\u90e8\u4efd\u5df2\u7d93\u6eff\u8db3\uff0c\u662f XR RX\u624d\u4e0d\u884c\uff01\uff01 \n             { \n                 return   0 ; \n             } \n             else   if ( start [ ptr1 ]   ==   'L'   &&   ptr2   >   ptr1 ) \n             //L of start is left to the L of end, \n             //L can only move left but this situation needs L to move right, which is a contradiction \n             { \n                 return   0 ; \n             } \n             ptr1 ++ ; \n             ptr2 ++ ; \n\n         } \n         return   1 ; \n     }  };",
            "title": "PC. 777. Swap Adjacent in LR String \u5b57\u4e32\u5167\u90e8dfs"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC74/",
            "text": "leetcode_OJ WC74 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Mar 4, 2018\n\n\n\n\n\n\u4eca\u5929\u4e0a\u5348\u6253\uff0c\u5bb6\u88e1\u7684\u7db2\u8def\u901f\u5ea6\u53ea\u6709\u5b78\u6821\u7684\u767e\u5206\u4e4b\u4e00\u4e0d\u5230R\uff08\u4e0b\u8f09 10 \u4e0a\u50b34\uff09\uff0c\u52a0\u4e0aLeetCode\u7684server\u4e00\u76f4timeout\uff0c\u7528debug\u6a21\u5f0f\u4e00\u76f4\u7c97\u4e0d\u4e43\uff0c\u7279\u5224\u548c\u512a\u5316\u82b1\u4e86\u597d\u591a\u6642\u9593\u624d\u627e\u5230w\n\u4e0d\u904emap\u9084\u771f\u7684\u662f\u597d\u7528\uff0c\u800c\u4e14\u89c0\u6469\u4e86\u4e00\u4e0buwi\u548cdreamoon\u7684\u89e3\u6cd5\uff0c\u4e0d\u6127\u662f\u5967\u8cfd\u5927\u795eR\n\n\nPA. \n794. Valid Tic-Tac-Toe State\n \u89c0\u5bdf\u66b4\u529b\u984c\n\n\n\n\n\u601d\u8def\uff1a\u66b4\u529b\uff0b\u60c5\u6cc1\u908f\u8f2f\u7279\u5224\u3002\n\u984c\u76ee\u898f\u5247\u6240\u8ff0\u70ba\uff1a\n\n1\n2\n3\n4\n5\n6\nPlayers take turns placing characters into empty squares (\" \").\nThe first player always places \"X\" characters, while the second player always places \"O\" characters.\n\"X\" and \"O\" characters are always placed into empty squares, never filled ones.\nThe game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.\n\n\n\n\n\u4e00\u5b9a\u8981\u662fx\u5148\u653b\uff0c\u4e26\u4e14\u6709\u4efb\u4e00\u65b9\u7372\u52dd\u5f8c\u5247\u4e0d\u53ef\u4ee5\u518d\u4e0b\u6a19\u8a18\uff0c\u7372\u52dd\u7684\u65b9\u6cd5\u540c\u50b3\u7d71\u4e95\u5b57\u904a\u6232\u3002\n\u5f9e\u908f\u8f2f\u4f86\u770b\uff0c\u9996\u5148\u6211\u5011\u7d71\u8a08o\u7684\u500b\u6578\u4ee5\u53cax\u7684\u500b\u6578\n\n\n\n\n\u7531\u65bc\u662f\u8f2a\u6d41\u9032\u884c \uff0c\u4e14\u5148x\u5f8co\uff0c\u56e0\u6b64x\u81f3\u591a\u6bd4o\u591a\u51fa1\uff0c\u800c\u4e14o\u4e0d\u53ef\u80fd\u5927\u65bcx\uff0c\u9019\u4e9b\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u5f62\uff0c\u53ef\u4ee5\u5148\u522a\u9664\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nif\n(\nxcnt\n==\n0\n \n&&\n \nocnt\n==\n1\n)\n\n\n{\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\nelse\n \nif\n(\nxcnt\n>\nocnt\n+\n1\n \n||\n \nocnt\n>\nxcnt\n+\n1\n)\n\n\n{\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\nelse\n \nif\n(\nocnt\n \n>\n \nxcnt\n)\n\n\n{\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u63a5\u4e0b\u4f86\u6aa2\u67e5\u7372\u52dd\u7684\u60c5\u5f62\uff0c\u7576\u7372\u52dd\u6642\uff0c\u53ea\u80fd\u6709\u4e00\u6b21\u7684\u7372\u52dd\uff0c\u4ea6\u5373\u4e0d\u80fd\u6709ooo xxx\u540c\u6642\u51fa\u73fe\u7684\u60c5\u6cc1\n\u56e0\u6b64\u6211\u5011\u7528 win_cnt\u4f86\u7d71\u8a08\u7372\u52dd\u7684\u6b21\u6578\uff0c\u53ea\u8981 win_cnt>1\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u7d50\u69cb\u3002\n\u800c\u5728\u7372\u52dd\u5f8c\uff0c\u53ef\u4ee5\u5224\u65b7\u662fx\u7372\u52dd\u6216\u662fo\u7372\u52dd\n\n\n\u82e5\u662fx\u7372\u52dd\uff0c\u5247o\u4e00\u5b9a\u4e0d\u53ef\u80fd>=x \uff0c\u539f\u56e0\u4e43\u662fx\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u7d50\u675f\uff0c\u56e0\u6b64\u6b64\u6642\u7684x\u82e5\u662f\u6bd4o\u591a\u4e00\u5247\u6b63\u597d\u7b26\u5408\u898f\u5247\n\n\n\u800c\u82e5\u662fo\u7372\u52dd\uff0c\u5247o\u300e\u53ea\u80fd\u300f\u548cx\u4e00\u6a23\u591a\uff0c\u4e00\u6a23\u7684\u9053\u7406\uff0c\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u6703\u7d50\u675f\uff0c\u56e0\u6b64\u5c0d\u65bc\nxcnt\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u6cc1\n\n\n\u5b8c\u6574AC\u4ee3\u78bc\u5982\u4e0b\uff08\u7db2\u8def\u8d85\u5361\u9813\u7121\u6cd5\u4f7f\u7528debug\u6a21\u5f0f\uff0c\u53ea\u597d\u6012\u7528submit solution\u4f86\u9a57\u8b49\u6b63\u78ba\uff0c\u4e0d\u77e5\u4e0d\u89ba\u5403\u4e868\u500b\u7f70\u5206\u554a\u6b98\u5ff5...)\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n//[\"XOX\",\"O O\",\"XOX\"]\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nxcnt\n,\nocnt\n;\n\n    \nbool\n \nvalidTicTacToe\n(\nvector\n<\nstring\n>&\n \nboard\n)\n\n    \n{\n\n        \nxcnt\n=\n0\n;\n\n        \nocnt\n=\n0\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\nboard\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n=\n0\n;\nj\n<\nboard\n[\ni\n].\nsize\n();\nj\n++\n)\n\n            \n{\n\n                \nif\n(\nboard\n[\ni\n][\nj\n]\n==\n'O'\n)\n\n                \n{\n\n                    \nocnt\n++\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nboard\n[\ni\n][\nj\n]\n==\n'X'\n)\n\n                \n{\n\n                    \nxcnt\n++\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nif\n(\nxcnt\n==\n0\n \n&&\n \nocnt\n==\n1\n)\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n        \nelse\n \nif\n(\nxcnt\n>\nocnt\n+\n1\n \n||\n \nocnt\n>\nxcnt\n+\n1\n)\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n        \nelse\n \nif\n(\nocnt\n \n>\n \nxcnt\n)\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n        \nelse\n \nif\n(\n!\ncheckwin\n(\nboard\n))\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n\n        \nreturn\n \n1\n;\n\n    \n}\n\n    \nbool\n \ncheckwin\n(\nvector\n<\nstring\n>&\n \nboard\n)\n\n    \n{\n\n        \nint\n \nwin_cnt\n=\n0\n;\n\n        \nint\n \nxwin\n=\n0\n,\nowin\n=\n0\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\nboard\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nboard\n[\ni\n][\n0\n]\n==\nboard\n[\ni\n][\n1\n]\n \n&&\n \nboard\n[\ni\n][\n0\n]\n==\nboard\n[\ni\n][\n2\n]\n \n&&\n \nboard\n[\ni\n][\n0\n]\n!=\n' '\n)\n\n            \n{\n\n                \nif\n(\nboard\n[\ni\n][\n0\n]\n==\n'X'\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \n}\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\n3\n;\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nboard\n[\n0\n][\ni\n]\n==\nboard\n[\n1\n][\ni\n]\n \n&&\n \nboard\n[\n0\n][\ni\n]\n==\nboard\n[\n2\n][\ni\n]\n \n&&\n \nboard\n[\n0\n][\ni\n]\n!=\n' '\n)\n\n            \n{\n\n                \nif\n(\nboard\n[\n0\n][\ni\n]\n==\n'X'\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \n}\n\n        \nif\n(\nboard\n[\n0\n][\n0\n]\n==\nboard\n[\n1\n][\n1\n]\n\n            \n&&\n \nboard\n[\n0\n][\n0\n]\n==\nboard\n[\n2\n][\n2\n]\n \n&&\n \nboard\n[\n0\n][\n0\n]\n!=\n' '\n)\n\n            \n{\n\n                \nif\n(\nboard\n[\n0\n][\n0\n]\n==\n'X'\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \nif\n(\nboard\n[\n0\n][\n2\n]\n==\nboard\n[\n1\n][\n1\n]\n\n            \n&&\n \nboard\n[\n0\n][\n2\n]\n==\nboard\n[\n2\n][\n0\n]\n \n&&\n \nboard\n[\n0\n][\n2\n]\n!=\n' '\n)\n\n            \n{\n\n                \nif\n(\nboard\n[\n0\n][\n2\n]\n==\n'X'\n)\n\n                \n{\n\n                    \nxwin\n=\n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nowin\n=\n1\n;\n\n                \n}\n\n                \nwin_cnt\n++\n;\n\n            \n}\n\n        \nif\n(\nwin_cnt\n==\n0\n)\n\n                \nreturn\n \n1\n;\n\n        \nelse\n \nif\n(\nwin_cnt\n==\n1\n)\n\n        \n{\n\n            \nif\n(\nxwin\n)\n\n            \n{\n\n                \nif\n(\nocnt\n>=\nxcnt\n)\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nxcnt\n==\nocnt\n+\n1\n)\n\n                \n{\n\n                    \nreturn\n \n1\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n            \n}\n\n            \nelse\n \nif\n(\nowin\n)\n\n            \n{\n\n                \nif\n(\nocnt\n<\nxcnt\n)\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nxcnt\n==\nocnt\n)\n\n                \n{\n\n                    \nreturn\n \n1\n;\n\n                \n}\n\n                \nelse\n \nif\n(\nocnt\n>\nxcnt\n)\n\n                \n{\n\n                    \nreturn\n \n0\n;\n\n                \n}\n\n            \n}\n\n\n        \n}\n\n        \nelse\n\n        \n{\n\n            \nreturn\n \n0\n;\n\n        \n}\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPB. \n792. Number of Matching Subsequences\n a \u662f\u5426\u70ba b\u7684\u5b50\u5e8f\u5217\uff0c\u7d93\u5178\u5b57\u4e32\u554f\u984c\n\n\n\u7d93\u5178\u984c\u76ee\uff0c\u770b\u770bword[i]\u662f\u5426\u70bastr\u7684subsequence\n* \u601d\u8def\uff1a\u5169\u500b\u6307\u6a19\u5206\u5225\u8fed\u4ee3str\u548cword[i]\uff0c\u770b\u5230\u4e00\u6a23\u7684\u4fbf\u5c07word\u7684\u6307\u91dd\u5411\u524d\uff0c\u5982\u679c\u6307\u91dd\u6700\u5f8c\uff1d\uff1d\u9577\u5ea6\u5247\u5b58\u5728\uff0c\u5426\u5247\u5373\u7121\n\n\n\u7c21\u55ae\u7684\u60f3\u6cd5\u537bTLE\u4e86\uff0c\u56e0\u70ba\u6709\u5927\u91cf\u91cd\u8907\u7684word[i]\u9700\u8981\u88ab\u91cd\u8907\u64cd\u4f5c\uff0c\u56e0\u6b64\u6539\u7528map\u512a\u5316\u7d71\u8a08\u5404\u7a2eword\u7684\u51fa\u73fe\u6b21\u6578\uff0c\u518d\u5c07subseq\u7b26\u5408\u7684\u72c0\u6cc1\u52a0\u4e0amap->second\u8a08\u6578\u5668\u5373\u53ef\n\n\nmap\u512a\u5316\u904e\u5f8cAC\u5982\u4e0b\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nnumMatchingSubseq\n(\nstring\n \nstr\n,\n \nvector\n<\nstring\n>&\n \nwords\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n;\n\n        \nmap\n<\nstring\n,\nint\n>\n \nmymap\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n \n;\ni\n<\nwords\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \nmymap\n[\nwords\n[\ni\n]]\n++\n;\n\n        \n}\n\n        \nfor\n(\nstd\n::\nmap\n<\nstring\n,\nint\n>::\niterator\n \nit\n=\nmymap\n.\nbegin\n()\n \n;\nit\n!=\nmymap\n.\nend\n();\nit\n++\n)\n\n        \n{\n\n            \nstd\n::\nsize_t\n \nfd\n \n=\n \nstr\n.\nfind\n(\nit\n->\nfirst\n);\n\n            \ncout\n<<\nit\n->\nfirst\n<<\n\" , \"\n<<\nit\n->\nsecond\n<<\nendl\n;\n\n            \nif\n(\nit\n->\nfirst\n.\nsize\n()\n>\nstr\n.\nsize\n())\n\n            \n{\n\n                \ncontinue\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nfd\n \n!=\n \nstd\n::\nstring\n::\nnpos\n)\n\n            \n{\n\n                \ncnt\n+=\nit\n->\nsecond\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nissubseq\n(\nit\n->\nfirst\n,\n \nstr\n,\n \nit\n->\nfirst\n.\nsize\n(),\n \nstr\n.\nsize\n()))\n\n            \n{\n\n                \ncnt\n+=\nit\n->\nsecond\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n    \nbool\n \nissubseq\n(\nstring\n \nstr1\n,\n \nstring\n \nstr2\n,\n \nint\n \nlen1\n,\n \nint\n \nlen2\n)\n\n    \n{\n\n        \nint\n \nsame_idx\n \n=\n \n0\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\nlen2\n \n&&\n \nsame_idx\n<\nlen1\n;\ni\n++\n)\n\n        \n{\n\n            \nif\n(\nstr1\n[\nsame_idx\n]\n \n==\n \nstr2\n[\ni\n])\n\n                \nsame_idx\n++\n;\n\n        \n}\n\n        \nreturn\n \n(\nsame_idx\n==\nlen1\n);\n\n    \n}\n\n\n};\n\n\n\n\n\n\nPC. \n792. Number of Matching Subsequences\n \u627e\u898f\u5f8b\u63a8\u7406\u984c\n\n\n\n\u6709\u9ede\u5fae\u5999\u7684\u4e00\u984c\uff0c\u770b\u4f3c\u7c21\u55ae\u5be6\u969b\u4e0a\u4e0d\u597d\u62ff\u5206\n\u672c\u4f86\u7684\u7b97\u6cd5\u5982\u4e0b\uff0c\u7e3d\u662f\u591a\u4e00\u500b\u6216\u5c11\u4e00\u500b\uff0c\u56e0\u70ba\u5728\u9032\u5165\u7684\u908a\u754c\u554f\u984c\u6c92\u6709\u62ff\u634f\u597d\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nnumSubarrayBoundedMax\n(\nvector\n<\nint\n>&\n \narr\n,\n \nint\n \nlow\n,\n \nint\n \nup\n)\n\n    \n{\n\n        \nint\n \nmax_val\n \n=\n \n0\n,\n \ncan\n \n=\n \n0\n,\n \ncnt\n \n=\n \n0\n;\n\n        \nint\n \npre_max_val\n \n=\n \n0\n,\n \ndist\n \n=\n \n0\n;\n\n        \nFORI\n(\narr\n.\nsize\n())\n\n        \n{\n\n            \npre_max_val\n \n=\n \narr\n[\ni\n];\n\n            \nmax_val\n \n=\n \narr\n[\ni\n];\n\n            \ndist\n \n=\n \n0\n;\n\n            \nfor\n(\nint\n \nj\n=\ni\n+\n1\n;\nj\n<\narr\n.\nsize\n();\nj\n++\n)\n\n            \n{\n\n                \npre_max_val\n \n=\n \nmax_val\n;\n\n                \nmax_val\n \n=\n \nmax\n(\nmax_val\n,\n \narr\n[\nj\n]);\n\n                \nif\n(\nmax_val\n \n<\n \nlow\n \n||\n \nmax_val\n \n>\n \nup\n)\n\n                \n{\n\n                    \nbreak\n;\n\n                \n}\n\n                \ndist\n \n=\n \nj\n \n-\n \ni\n;\n\n            \n}\n\n            \nif\n(\n \npre_max_val\n \n>=\nlow\n \n&&\n \npre_max_val\n \n<=\n \nup\n)\n\n            \n{\n\n                \ncnt\n \n+=\n \n(\ndist\n \n==\n \n0\n \n)\n \n?\n \n1\n \n:\n \ndist\n \n+\n \n1\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\u5f8c\u4f86\u53c3\u8003\u4e86\n\u5927\u795e\u7684\u89e3\u6cd5\n\uff0c\u7406\u89e3\u5f8c\u5982\u4e0b \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n//algorithm and source credit to : https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/discuss/117612/C++-O(n)-solution-with-explanations\n\n\n\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nint\n \nnumSubarrayBoundedMax\n(\nvector\n<\nint\n>&\n \nA\n,\n \nint\n \nL\n,\n \nint\n \nR\n)\n\n    \n{\n\n        \nint\n \nres\n \n=\n \n0\n,\n \nheads\n \n=\n \n0\n,\n \ntails\n \n=\n \n0\n;\n\n        \nfor\n \n(\nint\n \nval\n \n:\n \nA\n)\n\n        \n{\n\n            \nif\n \n(\nL\n \n<=\n \nval\n \n&&\n \nval\n \n<=\n \nR\n)\n\n            \n{\n\n                \n//\u5982\u679c\u627e\u5230\u4e00\u500b\u7b26\u5408\u5340\u9593\u7684\u6578\u503c\uff0c\u5247\u4e4b\u524d\u8eab\u70batail\u7684\uff0c\u5168\u90e8\u53ef\u4ee5\u88ab\u63d0\u62d4\u70bahead\uff0c\u5728\u52a0\u4e0a\u81ea\u5df1\u672c\u8eab\u65b0\u627e\u5230\u7684\u6578\u5b57\uff0c\u56e0\u6b64head += tails + 1\n\n                \n//\u800cres\u8b8a\u53ef\u4ee5\u65b0\u589e\u90a3\u500b\u9577\u5ea6\n\n                \nheads\n+=\n \ntails\n \n+\n \n1\n;\n\n                \ntails\n \n=\n \n0\n;\n\n                \nres\n \n+=\n \nheads\n;\n\n            \n}\n\n            \nelse\n \nif\n \n(\nval\n \n<\n \nL\n)\n\n            \n{\n\n                \n//\u5c0f\u65bcL\u7684\u6578\u5b57\u53ef\u4ee5\u4f5c\u70ba\u5340\u9593\u6578\u5217\u5ef6\u4f38\u7684\u5c3e\u90e8\uff0c \u56e0\u6b64\u9663\u5217\u53c8\u5728\u5ef6\u9577\u65b9\u624d\u7684head\u6578\u76ee\n\n                \n//\u8209\u4f8b\uff1aL=32 R=69 \u4eca\u5df2\u7d93iterate\uff0c[55 36] \u5df2\u7d93\u6709\u4e09\u500b\u4e86 \u5728\u591a\u4e00\u500b5\u5f8c\uff0c\u4fbf\u53ef\u6709[55] [36] [55,36] [55 36 55] [36 55]\n\n                \n//\u56e0\u70ba\u81ea\u5df1\u4e0d\u7b97\u5728LR\u5340\u9593 \u56e0\u6b64\u53ea\u80fd\u3000+= heads \u800c\u4e0d\u9700\u8981\u518d\u52a0\u4e00\n\n                \ntails\n++\n;\n\n                \nres\n \n+=\n \nheads\n;\n\n            \n}\n\n            \nelse\n\n            \n{\n\n                \nheads\n \n=\n \n0\n;\n\n                \ntails\n \n=\n \n0\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\u4ee5[73,55,36,5,55,14,9,7,72,52]\n\n32 \n\n69 \n\n\u4f86\u770b\uff0c\u6f14\u7b97\u6cd5\u8dd1\u51fa\u5f8c\u4e09\u8b8a\u6578\u7684\u7d50\u679c\u5982\u4e0b\n\n\n\nPD. \n793. Preimage Size of Factorial Zeroes Function\n \u9ad8\u96e3\u5ea6\u627emod\u898f\u5f8b\u6578\u5b78\u984c\n\n\n\u89e3\u4e0d\u7c97\u4e43\uff0c\u5148\u653e\u7f6e\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nint\n \npreimageSizeFZF\n(\nint\n \nkin\n)\n\n    \n{\n\n        \nint\n \ncnt\n \n=\n \n0\n,\n \nfactorial\n \n=\n \n0\n,\n \nzeros\n \n=\n \n0\n,\n \ncurrent_pow\n \n=\n \n25\n;\n\n        \nwhile\n(\n1\n)\n\n        \n{\n\n            \nif\n(\nfactorial\n \n==\n  \ncurrent_pow\n \n*\n \n5\n)\n\n            \n{\n\n                \ncout\n<<\n\" factorial is now \"\n<<\nfactorial\n<<\n\" current_pow is now \"\n<<\ncurrent_pow\n<<\nendl\n;\n\n                \ncurrent_pow\n*=\n5\n;\n\n            \n}\n\n            \nif\n(\nfactorial\n \n%\n \ncurrent_pow\n \n==\n \n0\n \n&&\n \nfactorial\n)\n\n            \n{\n\n                \nzeros\n \n+=\n \n((\nint\n)(\nlog\n(\nfactorial\n)\n \n/\n \nlog\n(\n5\n)));\n\n                \ncout\n<<\n\" factorial is of 25 multiple \"\n<<\nfactorial\n<<\n\" zeros \"\n<<\nzeros\n \n<<\n\" add \"\n<<\n((\nint\n)(\nlog\n(\nfactorial\n)\n \n/\n \nlog\n(\n5\n)))\n<<\nendl\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nfactorial\n \n%\n \n5\n \n==\n0\n \n&&\n \nfactorial\n)\n\n            \n{\n\n                \ncout\n<<\n\" factorial not 25 \"\n<<\nfactorial\n<<\nendl\n;\n\n                \nzeros\n++\n;\n\n            \n}\n\n\n            \nif\n(\nzeros\n \n==\n \nkin\n)\n\n            \n{\n\n                \ncnt\n++\n;\n\n            \n}\n\n            \nelse\n \nif\n(\nzeros\n \n>\n \nkin\n)\n\n            \n{\n\n                \nbreak\n;\n\n            \n}\n\n            \ncout\n<<\n\" factorial \"\n<<\nfactorial\n<<\n\" zeros \"\n<<\nzeros\n<<\nendl\n;\n\n            \nfactorial\n++\n;\n\n        \n}\n\n        \nreturn\n \ncnt\n;\n\n    \n}\n\n    \n//compare 2 casting, one is the original integer value of log and the other is the double type log, if they are equal of each other\n\n    \n//in double precision\n\n    \n//then this is correct one\n\n    \nbool\n \nis_powoffive\n(\nint\n \nreal\n,\n \nint\n \nbase\n)\n\n    \n{\n\n        \nint\n \ninteger\n \n=\n \n(\nint\n)(\nlog\n(\nreal\n)\n/\nlog\n(\nbase\n));\n\n        \ndouble\n \nprecised\n \n=\n \n(\nlog\n(\nreal\n)\n/\nlog\n(\nbase\n));\n\n        \nreturn\n \ninteger\n \n==\n \nprecised\n;\n\n    \n}\n\n\n};",
            "title": "WC74"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#leetcode_oj-wc74",
            "text": "Contest time: Mar 4, 2018   \n\u4eca\u5929\u4e0a\u5348\u6253\uff0c\u5bb6\u88e1\u7684\u7db2\u8def\u901f\u5ea6\u53ea\u6709\u5b78\u6821\u7684\u767e\u5206\u4e4b\u4e00\u4e0d\u5230R\uff08\u4e0b\u8f09 10 \u4e0a\u50b34\uff09\uff0c\u52a0\u4e0aLeetCode\u7684server\u4e00\u76f4timeout\uff0c\u7528debug\u6a21\u5f0f\u4e00\u76f4\u7c97\u4e0d\u4e43\uff0c\u7279\u5224\u548c\u512a\u5316\u82b1\u4e86\u597d\u591a\u6642\u9593\u624d\u627e\u5230w\n\u4e0d\u904emap\u9084\u771f\u7684\u662f\u597d\u7528\uff0c\u800c\u4e14\u89c0\u6469\u4e86\u4e00\u4e0buwi\u548cdreamoon\u7684\u89e3\u6cd5\uff0c\u4e0d\u6127\u662f\u5967\u8cfd\u5927\u795eR",
            "title": "leetcode_OJ WC74 \u89e3\u984c\u5fc3\u5f97"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pa-794-valid-tic-tac-toe-state",
            "text": "\u601d\u8def\uff1a\u66b4\u529b\uff0b\u60c5\u6cc1\u908f\u8f2f\u7279\u5224\u3002\n\u984c\u76ee\u898f\u5247\u6240\u8ff0\u70ba\uff1a 1\n2\n3\n4\n5\n6 Players take turns placing characters into empty squares (\" \").\nThe first player always places \"X\" characters, while the second player always places \"O\" characters.\n\"X\" and \"O\" characters are always placed into empty squares, never filled ones.\nThe game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.  \n\u4e00\u5b9a\u8981\u662fx\u5148\u653b\uff0c\u4e26\u4e14\u6709\u4efb\u4e00\u65b9\u7372\u52dd\u5f8c\u5247\u4e0d\u53ef\u4ee5\u518d\u4e0b\u6a19\u8a18\uff0c\u7372\u52dd\u7684\u65b9\u6cd5\u540c\u50b3\u7d71\u4e95\u5b57\u904a\u6232\u3002\n\u5f9e\u908f\u8f2f\u4f86\u770b\uff0c\u9996\u5148\u6211\u5011\u7d71\u8a08o\u7684\u500b\u6578\u4ee5\u53cax\u7684\u500b\u6578   \u7531\u65bc\u662f\u8f2a\u6d41\u9032\u884c \uff0c\u4e14\u5148x\u5f8co\uff0c\u56e0\u6b64x\u81f3\u591a\u6bd4o\u591a\u51fa1\uff0c\u800c\u4e14o\u4e0d\u53ef\u80fd\u5927\u65bcx\uff0c\u9019\u4e9b\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u5f62\uff0c\u53ef\u4ee5\u5148\u522a\u9664  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 if ( xcnt == 0   &&   ocnt == 1 )  { \n     return   0 ;  }  else   if ( xcnt > ocnt + 1   ||   ocnt > xcnt + 1 )  { \n     return   0 ;  }  else   if ( ocnt   >   xcnt )  { \n     return   0 ;  }    \u63a5\u4e0b\u4f86\u6aa2\u67e5\u7372\u52dd\u7684\u60c5\u5f62\uff0c\u7576\u7372\u52dd\u6642\uff0c\u53ea\u80fd\u6709\u4e00\u6b21\u7684\u7372\u52dd\uff0c\u4ea6\u5373\u4e0d\u80fd\u6709ooo xxx\u540c\u6642\u51fa\u73fe\u7684\u60c5\u6cc1\n\u56e0\u6b64\u6211\u5011\u7528 win_cnt\u4f86\u7d71\u8a08\u7372\u52dd\u7684\u6b21\u6578\uff0c\u53ea\u8981 win_cnt>1\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u7d50\u69cb\u3002\n\u800c\u5728\u7372\u52dd\u5f8c\uff0c\u53ef\u4ee5\u5224\u65b7\u662fx\u7372\u52dd\u6216\u662fo\u7372\u52dd  \u82e5\u662fx\u7372\u52dd\uff0c\u5247o\u4e00\u5b9a\u4e0d\u53ef\u80fd>=x \uff0c\u539f\u56e0\u4e43\u662fx\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u7d50\u675f\uff0c\u56e0\u6b64\u6b64\u6642\u7684x\u82e5\u662f\u6bd4o\u591a\u4e00\u5247\u6b63\u597d\u7b26\u5408\u898f\u5247  \u800c\u82e5\u662fo\u7372\u52dd\uff0c\u5247o\u300e\u53ea\u80fd\u300f\u548cx\u4e00\u6a23\u591a\uff0c\u4e00\u6a23\u7684\u9053\u7406\uff0c\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u6703\u7d50\u675f\uff0c\u56e0\u6b64\u5c0d\u65bc xcnt\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u6cc1  \u5b8c\u6574AC\u4ee3\u78bc\u5982\u4e0b\uff08\u7db2\u8def\u8d85\u5361\u9813\u7121\u6cd5\u4f7f\u7528debug\u6a21\u5f0f\uff0c\u53ea\u597d\u6012\u7528submit solution\u4f86\u9a57\u8b49\u6b63\u78ba\uff0c\u4e0d\u77e5\u4e0d\u89ba\u5403\u4e868\u500b\u7f70\u5206\u554a\u6b98\u5ff5...)    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144 //[\"XOX\",\"O O\",\"XOX\"]  class   Solution  {  public : \n     int   xcnt , ocnt ; \n     bool   validTicTacToe ( vector < string >&   board ) \n     { \n         xcnt = 0 ; \n         ocnt = 0 ; \n         for ( int   i = 0 ; i < board . size (); i ++ ) \n         { \n             for ( int   j = 0 ; j < board [ i ]. size (); j ++ ) \n             { \n                 if ( board [ i ][ j ] == 'O' ) \n                 { \n                     ocnt ++ ; \n                 } \n                 else   if ( board [ i ][ j ] == 'X' ) \n                 { \n                     xcnt ++ ; \n                 } \n             } \n         } \n         if ( xcnt == 0   &&   ocnt == 1 ) \n         { \n             return   0 ; \n         } \n         else   if ( xcnt > ocnt + 1   ||   ocnt > xcnt + 1 ) \n         { \n             return   0 ; \n         } \n         else   if ( ocnt   >   xcnt ) \n         { \n             return   0 ; \n         } \n         else   if ( ! checkwin ( board )) \n         { \n             return   0 ; \n         } \n\n         return   1 ; \n     } \n     bool   checkwin ( vector < string >&   board ) \n     { \n         int   win_cnt = 0 ; \n         int   xwin = 0 , owin = 0 ; \n         for ( int   i = 0 ; i < board . size (); i ++ ) \n         { \n             if ( board [ i ][ 0 ] == board [ i ][ 1 ]   &&   board [ i ][ 0 ] == board [ i ][ 2 ]   &&   board [ i ][ 0 ] != ' ' ) \n             { \n                 if ( board [ i ][ 0 ] == 'X' ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         } \n         for ( int   i = 0 ; i < 3 ; i ++ ) \n         { \n             if ( board [ 0 ][ i ] == board [ 1 ][ i ]   &&   board [ 0 ][ i ] == board [ 2 ][ i ]   &&   board [ 0 ][ i ] != ' ' ) \n             { \n                 if ( board [ 0 ][ i ] == 'X' ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         } \n         if ( board [ 0 ][ 0 ] == board [ 1 ][ 1 ] \n             &&   board [ 0 ][ 0 ] == board [ 2 ][ 2 ]   &&   board [ 0 ][ 0 ] != ' ' ) \n             { \n                 if ( board [ 0 ][ 0 ] == 'X' ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         if ( board [ 0 ][ 2 ] == board [ 1 ][ 1 ] \n             &&   board [ 0 ][ 2 ] == board [ 2 ][ 0 ]   &&   board [ 0 ][ 2 ] != ' ' ) \n             { \n                 if ( board [ 0 ][ 2 ] == 'X' ) \n                 { \n                     xwin = 1 ; \n                 } \n                 else \n                 { \n                     owin = 1 ; \n                 } \n                 win_cnt ++ ; \n             } \n         if ( win_cnt == 0 ) \n                 return   1 ; \n         else   if ( win_cnt == 1 ) \n         { \n             if ( xwin ) \n             { \n                 if ( ocnt >= xcnt ) \n                 { \n                     return   0 ; \n                 } \n                 else   if ( xcnt == ocnt + 1 ) \n                 { \n                     return   1 ; \n                 } \n                 else \n                 { \n                     return   0 ; \n                 } \n             } \n             else   if ( owin ) \n             { \n                 if ( ocnt < xcnt ) \n                 { \n                     return   0 ; \n                 } \n                 else   if ( xcnt == ocnt ) \n                 { \n                     return   1 ; \n                 } \n                 else   if ( ocnt > xcnt ) \n                 { \n                     return   0 ; \n                 } \n             } \n\n         } \n         else \n         { \n             return   0 ; \n         } \n     }  };",
            "title": "PA. 794. Valid Tic-Tac-Toe State \u89c0\u5bdf\u66b4\u529b\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pb-792-number-of-matching-subsequences-a-b",
            "text": "\u7d93\u5178\u984c\u76ee\uff0c\u770b\u770bword[i]\u662f\u5426\u70bastr\u7684subsequence\n* \u601d\u8def\uff1a\u5169\u500b\u6307\u6a19\u5206\u5225\u8fed\u4ee3str\u548cword[i]\uff0c\u770b\u5230\u4e00\u6a23\u7684\u4fbf\u5c07word\u7684\u6307\u91dd\u5411\u524d\uff0c\u5982\u679c\u6307\u91dd\u6700\u5f8c\uff1d\uff1d\u9577\u5ea6\u5247\u5b58\u5728\uff0c\u5426\u5247\u5373\u7121  \u7c21\u55ae\u7684\u60f3\u6cd5\u537bTLE\u4e86\uff0c\u56e0\u70ba\u6709\u5927\u91cf\u91cd\u8907\u7684word[i]\u9700\u8981\u88ab\u91cd\u8907\u64cd\u4f5c\uff0c\u56e0\u6b64\u6539\u7528map\u512a\u5316\u7d71\u8a08\u5404\u7a2eword\u7684\u51fa\u73fe\u6b21\u6578\uff0c\u518d\u5c07subseq\u7b26\u5408\u7684\u72c0\u6cc1\u52a0\u4e0amap->second\u8a08\u6578\u5668\u5373\u53ef  map\u512a\u5316\u904e\u5f8cAC\u5982\u4e0b  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41 class   Solution  {  public : \n     int   numMatchingSubseq ( string   str ,   vector < string >&   words ) \n     { \n         int   cnt   =   0 ; \n         map < string , int >   mymap ; \n         for ( int   i = 0   ; i < words . size (); i ++ ) \n         { \n             mymap [ words [ i ]] ++ ; \n         } \n         for ( std :: map < string , int >:: iterator   it = mymap . begin ()   ; it != mymap . end (); it ++ ) \n         { \n             std :: size_t   fd   =   str . find ( it -> first ); \n             cout << it -> first << \" , \" << it -> second << endl ; \n             if ( it -> first . size () > str . size ()) \n             { \n                 continue ; \n             } \n             else   if ( fd   !=   std :: string :: npos ) \n             { \n                 cnt += it -> second ; \n             } \n             else   if ( issubseq ( it -> first ,   str ,   it -> first . size (),   str . size ())) \n             { \n                 cnt += it -> second ; \n             } \n         } \n         return   cnt ; \n     } \n     bool   issubseq ( string   str1 ,   string   str2 ,   int   len1 ,   int   len2 ) \n     { \n         int   same_idx   =   0 ; \n         for ( int   i = 0 ; i < len2   &&   same_idx < len1 ; i ++ ) \n         { \n             if ( str1 [ same_idx ]   ==   str2 [ i ]) \n                 same_idx ++ ; \n         } \n         return   ( same_idx == len1 ); \n     }  };",
            "title": "PB. 792. Number of Matching Subsequences a \u662f\u5426\u70ba b\u7684\u5b50\u5e8f\u5217\uff0c\u7d93\u5178\u5b57\u4e32\u554f\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pc-792-number-of-matching-subsequences",
            "text": "\u6709\u9ede\u5fae\u5999\u7684\u4e00\u984c\uff0c\u770b\u4f3c\u7c21\u55ae\u5be6\u969b\u4e0a\u4e0d\u597d\u62ff\u5206\n\u672c\u4f86\u7684\u7b97\u6cd5\u5982\u4e0b\uff0c\u7e3d\u662f\u591a\u4e00\u500b\u6216\u5c11\u4e00\u500b\uff0c\u56e0\u70ba\u5728\u9032\u5165\u7684\u908a\u754c\u554f\u984c\u6c92\u6709\u62ff\u634f\u597d  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 #define FORI(n) for(int i = 0; i < n; ++ i)  class   Solution  {  public : \n     int   numSubarrayBoundedMax ( vector < int >&   arr ,   int   low ,   int   up ) \n     { \n         int   max_val   =   0 ,   can   =   0 ,   cnt   =   0 ; \n         int   pre_max_val   =   0 ,   dist   =   0 ; \n         FORI ( arr . size ()) \n         { \n             pre_max_val   =   arr [ i ]; \n             max_val   =   arr [ i ]; \n             dist   =   0 ; \n             for ( int   j = i + 1 ; j < arr . size (); j ++ ) \n             { \n                 pre_max_val   =   max_val ; \n                 max_val   =   max ( max_val ,   arr [ j ]); \n                 if ( max_val   <   low   ||   max_val   >   up ) \n                 { \n                     break ; \n                 } \n                 dist   =   j   -   i ; \n             } \n             if (   pre_max_val   >= low   &&   pre_max_val   <=   up ) \n             { \n                 cnt   +=   ( dist   ==   0   )   ?   1   :   dist   +   1 ; \n             } \n         } \n         return   cnt ; \n     }  };    \u5f8c\u4f86\u53c3\u8003\u4e86 \u5927\u795e\u7684\u89e3\u6cd5 \uff0c\u7406\u89e3\u5f8c\u5982\u4e0b    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34 //algorithm and source credit to : https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/discuss/117612/C++-O(n)-solution-with-explanations  class   Solution   {  public : \n     int   numSubarrayBoundedMax ( vector < int >&   A ,   int   L ,   int   R ) \n     { \n         int   res   =   0 ,   heads   =   0 ,   tails   =   0 ; \n         for   ( int   val   :   A ) \n         { \n             if   ( L   <=   val   &&   val   <=   R ) \n             { \n                 //\u5982\u679c\u627e\u5230\u4e00\u500b\u7b26\u5408\u5340\u9593\u7684\u6578\u503c\uff0c\u5247\u4e4b\u524d\u8eab\u70batail\u7684\uff0c\u5168\u90e8\u53ef\u4ee5\u88ab\u63d0\u62d4\u70bahead\uff0c\u5728\u52a0\u4e0a\u81ea\u5df1\u672c\u8eab\u65b0\u627e\u5230\u7684\u6578\u5b57\uff0c\u56e0\u6b64head += tails + 1 \n                 //\u800cres\u8b8a\u53ef\u4ee5\u65b0\u589e\u90a3\u500b\u9577\u5ea6 \n                 heads +=   tails   +   1 ; \n                 tails   =   0 ; \n                 res   +=   heads ; \n             } \n             else   if   ( val   <   L ) \n             { \n                 //\u5c0f\u65bcL\u7684\u6578\u5b57\u53ef\u4ee5\u4f5c\u70ba\u5340\u9593\u6578\u5217\u5ef6\u4f38\u7684\u5c3e\u90e8\uff0c \u56e0\u6b64\u9663\u5217\u53c8\u5728\u5ef6\u9577\u65b9\u624d\u7684head\u6578\u76ee \n                 //\u8209\u4f8b\uff1aL=32 R=69 \u4eca\u5df2\u7d93iterate\uff0c[55 36] \u5df2\u7d93\u6709\u4e09\u500b\u4e86 \u5728\u591a\u4e00\u500b5\u5f8c\uff0c\u4fbf\u53ef\u6709[55] [36] [55,36] [55 36 55] [36 55] \n                 //\u56e0\u70ba\u81ea\u5df1\u4e0d\u7b97\u5728LR\u5340\u9593 \u56e0\u6b64\u53ea\u80fd\u3000+= heads \u800c\u4e0d\u9700\u8981\u518d\u52a0\u4e00 \n                 tails ++ ; \n                 res   +=   heads ; \n             } \n             else \n             { \n                 heads   =   0 ; \n                 tails   =   0 ; \n             } \n         } \n         return   res ; \n     }  };   \n\u4ee5[73,55,36,5,55,14,9,7,72,52] \n32  \n69  \n\u4f86\u770b\uff0c\u6f14\u7b97\u6cd5\u8dd1\u51fa\u5f8c\u4e09\u8b8a\u6578\u7684\u7d50\u679c\u5982\u4e0b",
            "title": "PC. 792. Number of Matching Subsequences \u627e\u898f\u5f8b\u63a8\u7406\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC74/#pd-793-preimage-size-of-factorial-zeroes-function-mod",
            "text": "\u89e3\u4e0d\u7c97\u4e43\uff0c\u5148\u653e\u7f6e  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 class   Solution   {  public : \n     int   preimageSizeFZF ( int   kin ) \n     { \n         int   cnt   =   0 ,   factorial   =   0 ,   zeros   =   0 ,   current_pow   =   25 ; \n         while ( 1 ) \n         { \n             if ( factorial   ==    current_pow   *   5 ) \n             { \n                 cout << \" factorial is now \" << factorial << \" current_pow is now \" << current_pow << endl ; \n                 current_pow *= 5 ; \n             } \n             if ( factorial   %   current_pow   ==   0   &&   factorial ) \n             { \n                 zeros   +=   (( int )( log ( factorial )   /   log ( 5 ))); \n                 cout << \" factorial is of 25 multiple \" << factorial << \" zeros \" << zeros   << \" add \" << (( int )( log ( factorial )   /   log ( 5 ))) << endl ; \n             } \n             else   if ( factorial   %   5   == 0   &&   factorial ) \n             { \n                 cout << \" factorial not 25 \" << factorial << endl ; \n                 zeros ++ ; \n             } \n\n             if ( zeros   ==   kin ) \n             { \n                 cnt ++ ; \n             } \n             else   if ( zeros   >   kin ) \n             { \n                 break ; \n             } \n             cout << \" factorial \" << factorial << \" zeros \" << zeros << endl ; \n             factorial ++ ; \n         } \n         return   cnt ; \n     } \n     //compare 2 casting, one is the original integer value of log and the other is the double type log, if they are equal of each other \n     //in double precision \n     //then this is correct one \n     bool   is_powoffive ( int   real ,   int   base ) \n     { \n         int   integer   =   ( int )( log ( real ) / log ( base )); \n         double   precised   =   ( log ( real ) / log ( base )); \n         return   integer   ==   precised ; \n     }  };",
            "title": "PD. 793. Preimage Size of Factorial Zeroes Function \u9ad8\u96e3\u5ea6\u627emod\u898f\u5f8b\u6578\u5b78\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC75/",
            "text": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Mar 11, 2018\n\n\n\n\n\u773c\u775b\u767c\u708e\uff0c\u6253\u6263\u9014\u4e2d\u9817\u4e0d\u8212\u670d\uff0c\u53ea\u6709\u5feb\u901f\u89e3\u51faPA\u5f8c\uff0cPB DFS\u6c92\u5beb\u597d\u4e0d\u65b7WA\uff0cPD\u7528\u66b4\u529b\u89e3\u7136\u4e26\u5375TLE\uff0c\u5c31\uff0c\u5beb\u500b\u7db2\u8a8c\u4f86\u6aa2\u8a0e\u5427 \n\n\nPA. \n796. Rotate String\n \u7c21\u55ae\u5b57\u4e32\u984c\n\n\n\n\n\u601d\u8def\uff1a\u6c34\u984c\u4e0d\u89e3\u91cb\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nbool\n \nrotateString\n(\nstring\n \naa\n,\n \nstring\n \nbb\n)\n\n    \n{\n\n        \nstring\n \ntmp\n=\naa\n;\n\n        \nstring\n \ntmp2\n;\n\n        \nFORI\n(\naa\n.\nsize\n())\n\n        \n{\n\n            \ntmp2\n=\ntmp\n[\n0\n];\n\n            \ntmp\n \n=\n \ntmp\n.\nsubstr\n(\n1\n,\naa\n.\nsize\n()\n-\n1\n);\n\n            \ntmp\n+=\ntmp2\n;\n\n            \nif\n(\ntmp\n \n==\n \nbb\n)\n\n                \nreturn\n \n1\n;\n\n        \n}\n\n        \nreturn\n \n0\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPB. \n797. ALl path from src to dst\n \u5716\u8ad6\u984c\uff0c\u8d77\u7d42\u9ede\u6240\u6709\u53ef\u80fd\u8def\u5f91 \n\n\n\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91\uff0c\u5716\u8ad6\u6f14\u7b97\u6cd5\u7d93\u5178\u984c\u76ee!!!!!!!!!!!!!!!!!!!!!\n \n\n\n\n\n\u601d\u8def\uff1adfs\u6df1\u5ea6\u512a\u5148\u641c\u7d22 \n\n\n\n\n\u9019\u500b\u662fWA\u7684\u4ee3\u78bc\uff0c\u7e3d\u6703\u6709\u4e9bcase\u6c92\u6709\u627e\u5230\uff0c\u56e0\u70ba\u5728output deg\u90a3\u88e1\u7684\u908f\u8f2f\u4e9b\u8a31\u932f\u8aa4 \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\n<\nvector\n<\nint\n>>\n \nallPathsSourceTarget\n(\nvector\n<\nvector\n<\nint\n>>&\n \ngraph\n)\n\n    \n{\n\n\n        \nint\n \ntarget\n \n=\n \n0\n;\n\n        \nint\n \npos\n \n=\n \n0\n,\n \ntotal_size\n \n=\n \n0\n;\n\n        \nvector\n<\nint\n>\n \nres_part\n,\n \noutput_deg\n;\n\n        \noutput_deg\n.\nresize\n(\ngraph\n.\nsize\n());\n\n        \nvector\n<\nvector\n<\nint\n>>\n \nfinal_res\n;\n\n        \nFORI\n(\ngraph\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\ngraph\n[\ni\n].\nsize\n()\n==\n0\n)\n\n            \n{\n\n                \ntarget\n \n=\n \ni\n;\n\n            \n}\n\n            \nelse\n\n            \n{\n\n                \ntotal_size\n+=\ngraph\n[\ni\n].\nsize\n();\n\n                \noutput_deg\n[\ni\n]\n \n=\n \ngraph\n[\ni\n].\nsize\n();\n\n            \n}\n\n        \n}\n\n        \nint\n \nvisited\n \n=\n \n0\n,\n \ni\n=\n0\n,\n \ntmp\n,\n \nundone\n \n=\n \n1\n;\n\n        \nwhile\n(\nvisited\n \n!=\n \ntotal_size\n)\n\n        \n{\n\n            \nres_part\n.\npush_back\n(\npos\n);\n\n            \nif\n(\noutput_deg\n[\npos\n])\n\n            \n{\n\n                \ntmp\n \n=\n \npos\n;\n\n                \npos\n \n=\n \ngraph\n[\npos\n][\noutput_deg\n[\npos\n]\n-\n1\n];\n\n                \noutput_deg\n[\ntmp\n]\n--\n;\n\n                \nvisited\n++\n;\n\n            \n}\n\n            \nelse\n\n            \n{\n\n                \nFORI\n(\noutput_deg\n.\nsize\n())\n\n                \n{\n\n                    \nif\n(\noutput_deg\n[\ni\n])\n\n                        \npos\n \n=\n \noutput_deg\n[\ni\n];\n\n                \n}\n\n            \n}\n\n            \nif\n(\ngraph\n[\npos\n].\nsize\n()\n==\n0\n)\n\n            \n{\n\n                \npos\n \n=\n \n0\n;\n\n                \nres_part\n.\npush_back\n(\ntarget\n);\n\n                \nfinal_res\n.\npush_back\n(\nres_part\n);\n\n                \nres_part\n.\nclear\n();\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nfinal_res\n;\n\n    \n}\n\n\n\n};\n\n\n\n\n\n\n\u9019\u500b\u662f\u6b63\u78ba\u89e3\u6cd5\u7684\u4ee3\u78bc\uff0c\u4f7f\u7528\u7684\u6f14\u7b97\u6cd5\u4fbf\u662f\uff1aDFS\u6df1\u5ea6\u512a\u5148\u641c\u7d22\uff0c\u4ee5\u627e\u51fa\u8d77\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91 \n\n\nGeekforgeeks reference\n\n\nweibo\n\nweibo\u7684\u4f5c\u6cd5\u63a1\u7528\u975e\u905e\u8ff4\u505a\u6cd5 \n\n1.\u9078\u53d6\u8d77\u9ede\n\n2.\u79fb\u52d5\uff0c\u79fb\u5230\u7684\u9ede\u628a\u5b83\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u82e5\u8a72\u9ede\u4e0d\u662f\u7d42\u9ede\uff0c\u5247\u64f4\u6563\u67e5\u627e\u5468\u570d\u300e\u9084\u6c92\u6709\u8d70\u904e\u7684\u9ede\u300f\n\n3.\u8d70\u5230\u4e86\u7d42\u9ede\u4e4b\u5f8c\uff0c\u300e\u9000\u56de\u4e0a\u4e00\u6b65\u300f\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u500b\u6b65\u9a5f\uff0c\u56e0\u70ba\u9084\u6709\u53ef\u80fd\u6709\u5176\u4ed6\u8def\u5f91\uff0c\u6545\u5f9e\u7d42\u9ede\u7684\u4e0a\u4e00\u500b\u6b65\u9a5f\n\n4.\u4e0b\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c\u539f\u672c44\u884c\u7684return\u5beb\u4e0a\u5f8c\u6703\u9020\u6210\u7b54\u6848\u6e1b\u5c11\uff0c\u539f\u56e0\u5728\u65bc\u505abacktrace\u7684\u6642\u5019\uff0c\u9000\u56de\u5305\u522e\u7d42\u9ede\u4e5f\u8981\u6a19\u8a18\u70ba\u6c92\u6709\u8d70\u8a2a\u904e\uff0c\n\u5982\u679c\u7d42\u9ede\u4ecd\u7136\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u90a3\u9ebc\u4e4b\u5f8c\u7b2c\u4e8c\u689d\u8def\u5f91\u8981\u8d70\u5230\u7d42\u9ede\u7684\u6642\u5019\u4fbf\u6703\u770b\u5230\u7d42\u9ede\u5df2\u7d93\u8d70\u8a2a\u904e\uff0c\u4fbf\u4e0d\u518d\u5411\u524d\u8d70\u53bb\u7d42\u9ede\uff0c\u800c\u5c0e\u81f4\u7d50\u679c\u4e0d\u9f4a\u5168\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\n<\nvector\n \n<\nint\n>>\nfinal_res\n;\n\n    \nvector\n<\nint\n>\nres\n,\n \nvisited\n;\n\n    \nstack\n<\nint\n>\n \ntraversed_path\n;\n\n    \nvector\n<\nvector\n<\nint\n>>\n \nallPathsSourceTarget\n(\nvector\n<\nvector\n<\nint\n>>&\n \ngraph\n)\n \n//graph in adjacency list\n\n    \n{\n\n        \nint\n \ndst\n;\n\n        \nFORI\n(\ngraph\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\ngraph\n[\ni\n].\nsize\n()\n==\n0\n)\n\n            \n{\n\n                \ndst\n \n=\n \ni\n;\n\n            \n}\n\n            \nvisited\n.\npush_back\n(\nfalse\n);\n\n        \n}\n\n        \ndfs\n(\n0\n,\ndst\n,\nres\n,\ngraph\n);\n\n        \nreturn\n \nfinal_res\n;\n\n    \n}\n\n    \nvoid\n \ndfs\n(\nint\n \ncur_node\n,\n \nint\n \ndst\n,\n \nvector\n<\nint\n>\n \nres\n,\n \nvector\n<\nvector\n<\nint\n>>\n \ngraph\n)\n\n    \n{\n\n\n        \ntraversed_path\n.\npush\n(\ncur_node\n);\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \ntrue\n;\n\n        \nif\n(\ncur_node\n \n==\n \ndst\n)\n\n        \n{\n\n\n            \nstack\n<\nint\n>\n \ncopied_stk\n \n=\n \ntraversed_path\n;\n\n            \nwhile\n(\ncopied_stk\n.\nsize\n())\n\n            \n{\n\n                \nres\n.\npush_back\n(\ncopied_stk\n.\ntop\n());\n\n                \ncopied_stk\n.\npop\n();\n\n            \n}\n\n            \nreverse\n(\nres\n.\nbegin\n(),\n \nres\n.\nend\n());\n\n\n            \nfinal_res\n.\npush_back\n(\nres\n);\n\n            \nres\n.\nclear\n();\n\n            \n//return ;\n\n        \n}\n\n        \nelse\n\n        \n{\n\n\n            \nFORI\n(\ngraph\n[\ncur_node\n].\nsize\n())\n\n            \n{\n\n                \nif\n(\n!\nvisited\n[\ngraph\n[\ncur_node\n][\ni\n]])\n\n                \n{\n\n                    \ndfs\n(\ngraph\n[\ncur_node\n][\ni\n],\n \ndst\n,\n \nres\n,\n \ngraph\n);\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n//back trace if there will be still some nodes have to be visited but now path are blocked since adj nodes are marked visited\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \nfalse\n;\n\n        \ncur_node\n \n=\n \ntraversed_path\n.\ntop\n();\n\n        \ntraversed_path\n.\npop\n();\n\n    \n}\n\n\n\n};\n\n\n\n\n\n\nPC. \n799. Champagne Tower\n \u6578\u5b78\u898f\u5283\u8207\u89c0\u5bdf\u984c\n\n\n\n\n\u601d\u8def\uff1a\u96d6\u7136\u984c\u76ee\u6709\u9ede\u5687\u4eba\uff0c\u4f46\u53ea\u662f\u500b\u969c\u773c\u6cd5\uff0c\u525b\u958b\u59cb\u60f3\u8aaa\u4e00\u6b21\u5728\u7b2c\u4e00\u76c3\u6dfb\u52a0\u4e00\u6b21\uff0c\u518d\u8b93\u6bcf\u4e00\u6b21\u7684\u6d41\u6c34\u4f9d\u5e8f\u5f80\u4e0b\u6d41\u7ac4\uff0c\u5982\u679c\u6709\u676f\u5b50\u5df2\u7d93\u6eff\u6c34\u4f4d\uff0c\u5c31\u5c07row++\n\u518d\u5ea6\u5f80\u4e0b\u6d41\u7ac4\uff0c\u76f4\u5230\u5e95\uff0c\u7136\u4e0d\u50c5\u6642\u9593\u8907\u96dc\u5ea6\u592a\u9ad8\u4e5f\u5728\u7b2c260\u500b\u6e2c\u8cc7WA\u4e86 \n\n\n\n\n\u4e8b\u5be6\u4e0a\uff0c\u53ea\u8981\u5148\u5c07\u6700\u9ad8\u7684\u90a3\u4e00\u676f\u6c34\uff0c\u4efb\u610f\u88dd\u6eff\u4ed6\u7684pour\u91cf\uff0c\u5148\u4e0d\u7528\u5728\u4e4e\u662f\u5426\u5df2\u7d93\u8d85\u51fa\u6eff\u6c34\u4f4d\uff0c\u53ea\u8981\u5148\u628a\u591a\u51fa\u7684\u6c34\u4f9d\u5e8f\u6d41\u7ac4\uff0c\u4e26\u4e14\u5de6\u53f3\u5747\u5206\u5373\u53ef\uff0c\u800c\u6703\u591a\u51fa\u7684\u6c34\u4f4d\u5c31\u662f\n\u7576\u524d\u6c34\u4f4d - \u4e00\u676f\u6c34 \u4e4b\u5f8c\u518d\u5c07\u9019\u500b\u5806\u51fa\u7684\u6c34\u4f4d\u8a55\u5206\u7d66\u6a13\u4e0b\u5169\u676f\u5373\u53ef\u3002\n\n\u5f88\u667a\u969c\u7684\u662f \u4ee5\u70ba\u6a13\u4e0b\u5169\u676f\u662f row+1 col-1 and row+1 col+1\n \u5229\u99ac\u62ff\u4e86\u4e00\u500bRE\uff0c\u5be6\u969b\u4e0a\u61c9\u8a72\u662fcol col+1\u5566w\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \ndouble\n \nchampagneTower\n(\nint\n \npoured\n,\n \nint\n \nquery_row\n,\n \nint\n \nquery_glass\n)\n\n    \n{\n\n        \nvector\n<\nvector\n \n<\ndouble\n \n>\n \n>\n \ncups\n;\n\n        \ncups\n.\nresize\n(\n101\n);\n \n//padding\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\n101\n;\ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n=\n0\n;\nj\n<=\ni\n;\nj\n++\n)\n\n            \n{\n\n                \ncups\n[\ni\n].\npush_back\n(\n0.0\n);\n\n            \n}\n\n        \n}\n\n        \ncups\n[\n0\n][\n0\n]\n \n=\n \npoured\n;\n\n        \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\n100\n;\ni\n++\n)\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n=\n0\n;\nj\n<=\ni\n;\nj\n++\n)\n\n            \n{\n\n                \nif\n(\ncups\n[\ni\n][\nj\n]\n \n>=\n \n1.0\n)\n\n                \n{\n\n                    \ncups\n[\ni\n+\n1\n][\nj\n]\n \n+=\n \n(\ncups\n[\ni\n][\nj\n]\n \n-\n \n1.0\n)\n \n/\n \n2.0\n \n;\n\n                    \ncups\n[\ni\n+\n1\n][\nj\n+\n1\n]\n \n+=\n \n(\ncups\n[\ni\n][\nj\n]\n \n-\n \n1.0\n)\n \n/\n \n2.0\n \n;\n\n                    \ncups\n[\ni\n][\nj\n]\n \n=\n \n1.0\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nreturn\n \ncups\n[\nquery_row\n][\nquery_glass\n];\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPD. \n800. Smallest rotation with highest score\n \u6578\u5b78\u63a8\u7406+\u5340\u9593\u67e5\u8a62\u7dda\u6027\u512a\u5316O(N)\n\n\n\u6b64\u984c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u4e00\u5b9a\u8981\u5728O(N)\uff0c\u5fc5\u9808\u4f7f\u7528\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\uff0c\u5927\u795e\u5ba4\u53cb\u99ac\u4e0a\u60f3\u5230\u7dda\u6bb5\u6a39segment tree\u67e5\u627e\n\n\n\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\u6982\u5ff5\uff0c\u5f9e\u66b4\u529b\u5230NlogN \u5230N\n \n\n* \u601d\u8def\uff0c\u53ef\u4ee5\u770b\u51fa\u6709\u5169\u7a2e\u60c5\u5f62\uff0c\u4e00\u7a2e\u662f\u672c\u4f86\u5c31\u6703\u5f97\u5206\u7684(value <= index)\uff0c\u4e00\u7a2e\u662f\u9084\u6c92\u6709\u5f97\u5206\u7684 else\n\n\u7b2c\u4e00\u985e\u578b\n\n\u9996\u5148\u7b2c\u4e00\u7a2e\u672c\u4f86\u5c31\u53ef\u4ee5\u5f97\u5206\uff0c\u4f8b\u5982[2,3,1,4,0]\u4e2d\u76841 , 0\uff0c\u5411\u53f3\u79fb\u52d5\u81ea\u7136\u53ef\u4ee5\u5f97\u5206\uff0c\u6240\u4ee5\u4ed6\u7684\u53f3\u908a\u53ef\u4ee5\u7684\u6b65\u6578\u4fbf\u662f[index+1(\u76f4\u63a5\u5411\u5de6\u79fb\u52d5\u5230\u6700\u53f3\u5074\uff08\u8d85\u904e\u5f8c\u91cd\u65b0\u5f9e\u7d50\u5c3e\u56de\u4f86\uff09\uff0c\u5fc5\u7136\u7b26\u5408\u7684\u958b\u5916\u639b\u6a21\u5f0f),len-1\uff08\u79fb\u52d5\u5230\u4ed6\u4e0b\u4e00\u500b\uff09]\n\u4ee5\u53ca[0(\u4e0d\u52d5)\uff0cindex - value\uff08\u4f8b\u5982\u4e0a\u9762\u76841\u57282 \u81f3\u591a\u79fb\u52d5\u52301\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 2 - 1 \u4e00\u6b65\uff09] \n\n\u7b2c\u4e8c\u985e\u578b\n\n\u800c\u53e6\u5916\u4e00\u7a2e\u7576\u524d\u7121\u6cd5\u5f97\u5206\u7684\uff0c\u4fbf\u8981[index+1 (\u958b\u5916\u639b\u79fb\u5230\u6700\u53f3\u908a), total_len - (value - index)(\u7e7c\u7e8c\u79fb\u52d5\uff0cvalue - index \u4ee3\u8868\u8207\u6700\u5927\u79fb\u52d5\u6b21\u6578\u7684\u76f8\u5dee\uff0c\u4e5f\u5c31\u662f\u5b83\u5fc5\u9808\u5411\u53f3\u79fb\u52d5val - index\u9019\u500b\u5dee\u503c\u624d\u6709\u5206\uff0c\u5411\u53f3\u79fb\u52d5\u7684\u81f3\u5c11\u6b21\u6578\uff0c\u63db\u904e\u4f86\u8b1b\u7528 len \u4f86\u6263\u9664\u5c31\u662f\u5411\u5de6\u79fb\u52d5\u7684\u6700\u5927\u6b21\u6578)]\n\n\n\n\u6c42\u51fa\u6bcf\u4e00\u500b\u6578\u5b57\u61c9\u8a72\u6709\u7684\u5340\u9593\uff0c\u628a\u4ed6\u5011\u6620\u5c04\u5230\u5340\u9593\u67e5\u8a62\u6bb5\uff0c\u4f7f\u7528python\u7684pair\u8868\u793a\u958b\u59cb\u548c\u7d50\u675f \n\n\n1\n2\n3\n4\n5\n6\nfor\n \nindex\n,\n \nvalue\n \nin\n \nenumerate\n(\narr\n):\n\n    \nif\n \nindex\n \n<\n \nvalue\n:\n \n#one segment for this ones\n\n        \npair\n.\nappend\n([\nindex\n \n+\n \n1\n \n,\ntotal_len\n \n-\n \n(\nvalue\n \n-\n \nindex\n)])\n \n#segment start and end\n\n    \nelse\n:\n \n#two segments for this one\n\n        \npair\n.\nappend\n([\nindex\n \n+\n \n1\n,\n \ntotal_len\n \n-\n \n1\n])\n\n        \npair\n.\nappend\n([\n0\n,\n \nindex\n \n-\n \nvalue\n])\n\n\n\n\n\n\n\u6700\u5f8c\u627e\u5230prefix sum (\u52a0\u7e3d\u5230\u6b64\u6642\u7684\u7e3d\u548c)\uff0c\u601d\u7dd2\u898b\u8a3b\u89e3 \n\n\n1\n2\n3\n4\nsegment_query\n \n=\n \n[\n0\n]\n \n*\n \n(\ntotal_len\n \n+\n \n1\n)\n  \n#aux arrat for the prefix sum, segment query\n\n\nfor\n \ni\n \nin\n \nrange\n \n(\nlen\n(\npair\n)):\n \n#+1 padding\n\n    \nsegment_query\n[\npair\n[\ni\n][\n0\n]]\n \n+=\n \n1\n \n#go in the interval, overlapping with all the other segment\n\n    \nsegment_query\n[\npair\n[\ni\n][\n1\n]\n \n+\n \n1\n]\n \n-=\n \n1\n \n#leave the interval, cancelling the infulence of segment overlapping\n\n\n\n\n\n\n\u6574\u9ad4AC\u4ee3\u78bc\u5982\u4e0b \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nclass\n \nSolution\n:\n\n    \ndef\n \nbestRotation\n(\nself\n,\n \narr\n):\n\n        \nbest\n \n=\n \n0\n\n        \nshift\n \n=\n \n0\n\n        \ntotal_len\n \n=\n \nlen\n(\narr\n)\n\n        \n#start_pos_arr = []\n\n        \npair\n \n=\n \n[]\n\n        \n#initial the start_pos_arr to record the starting position of the given array\n\n        \n#initial score\n\n        \nfor\n \nindex\n,\n \nvalue\n \nin\n \nenumerate\n(\narr\n):\n\n            \nif\n \nindex\n \n<\n \nvalue\n:\n \n#one segment for this ones\n\n                \npair\n.\nappend\n([\nindex\n \n+\n \n1\n \n,\ntotal_len\n \n-\n \n(\nvalue\n \n-\n \nindex\n)])\n \n#segment start and end\n\n            \nelse\n:\n \n#two segments for this one\n\n                \npair\n.\nappend\n([\nindex\n \n+\n \n1\n,\n \ntotal_len\n \n-\n \n1\n])\n\n                \npair\n.\nappend\n([\n0\n,\n \nindex\n \n-\n \nvalue\n])\n\n\n\n        \nsegment_query\n \n=\n \n[\n0\n]\n \n*\n \n(\ntotal_len\n \n+\n \n1\n)\n  \n#aux arrat for the prefix sum, segment query\n\n        \nfor\n \ni\n \nin\n \nrange\n \n(\nlen\n(\npair\n)):\n \n#+1 padding\n\n            \nsegment_query\n[\npair\n[\ni\n][\n0\n]]\n \n+=\n \n1\n \n#go in the interval, overlapping with all the other segment\n\n            \nsegment_query\n[\npair\n[\ni\n][\n1\n]\n \n+\n \n1\n]\n \n-=\n \n1\n \n#leave the interval, cancelling the infulence of segment overlapping\n\n\n        \ncur_pts\n \n=\n \n0\n\n        \nfor\n \ni\n \nin\n \nrange\n \n(\nlen\n(\nsegment_query\n)):\n\n             \ncur_pts\n \n+=\n \nsegment_query\n[\ni\n]\n\n             \nif\n(\n \ncur_pts\n \n>\n \nbest\n):\n\n                 \nbest\n \n=\n \ncur_pts\n\n                 \nshift\n \n=\n \ni\n\n\n        \nreturn\n \nshift",
            "title": "WC75"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#leetcode_oj-wc75",
            "text": "Contest time: Mar 11, 2018   \u773c\u775b\u767c\u708e\uff0c\u6253\u6263\u9014\u4e2d\u9817\u4e0d\u8212\u670d\uff0c\u53ea\u6709\u5feb\u901f\u89e3\u51faPA\u5f8c\uff0cPB DFS\u6c92\u5beb\u597d\u4e0d\u65b7WA\uff0cPD\u7528\u66b4\u529b\u89e3\u7136\u4e26\u5375TLE\uff0c\u5c31\uff0c\u5beb\u500b\u7db2\u8a8c\u4f86\u6aa2\u8a0e\u5427",
            "title": "leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pa-796-rotate-string",
            "text": "\u601d\u8def\uff1a\u6c34\u984c\u4e0d\u89e3\u91cb  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 #define FORI(n) for(int i = 0; i < n; ++ i)  class   Solution  {  public : \n     bool   rotateString ( string   aa ,   string   bb ) \n     { \n         string   tmp = aa ; \n         string   tmp2 ; \n         FORI ( aa . size ()) \n         { \n             tmp2 = tmp [ 0 ]; \n             tmp   =   tmp . substr ( 1 , aa . size () - 1 ); \n             tmp += tmp2 ; \n             if ( tmp   ==   bb ) \n                 return   1 ; \n         } \n         return   0 ; \n     }  };",
            "title": "PA. 796. Rotate String \u7c21\u55ae\u5b57\u4e32\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pb-797-all-path-from-src-to-dst",
            "text": "\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91\uff0c\u5716\u8ad6\u6f14\u7b97\u6cd5\u7d93\u5178\u984c\u76ee!!!!!!!!!!!!!!!!!!!!!     \u601d\u8def\uff1adfs\u6df1\u5ea6\u512a\u5148\u641c\u7d22    \u9019\u500b\u662fWA\u7684\u4ee3\u78bc\uff0c\u7e3d\u6703\u6709\u4e9bcase\u6c92\u6709\u627e\u5230\uff0c\u56e0\u70ba\u5728output deg\u90a3\u88e1\u7684\u908f\u8f2f\u4e9b\u8a31\u932f\u8aa4    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55 #define FORI(n) for(int i = 0; i < n; ++ i)  class   Solution  {  public : \n     vector < vector < int >>   allPathsSourceTarget ( vector < vector < int >>&   graph ) \n     { \n\n         int   target   =   0 ; \n         int   pos   =   0 ,   total_size   =   0 ; \n         vector < int >   res_part ,   output_deg ; \n         output_deg . resize ( graph . size ()); \n         vector < vector < int >>   final_res ; \n         FORI ( graph . size ()) \n         { \n             if ( graph [ i ]. size () == 0 ) \n             { \n                 target   =   i ; \n             } \n             else \n             { \n                 total_size += graph [ i ]. size (); \n                 output_deg [ i ]   =   graph [ i ]. size (); \n             } \n         } \n         int   visited   =   0 ,   i = 0 ,   tmp ,   undone   =   1 ; \n         while ( visited   !=   total_size ) \n         { \n             res_part . push_back ( pos ); \n             if ( output_deg [ pos ]) \n             { \n                 tmp   =   pos ; \n                 pos   =   graph [ pos ][ output_deg [ pos ] - 1 ]; \n                 output_deg [ tmp ] -- ; \n                 visited ++ ; \n             } \n             else \n             { \n                 FORI ( output_deg . size ()) \n                 { \n                     if ( output_deg [ i ]) \n                         pos   =   output_deg [ i ]; \n                 } \n             } \n             if ( graph [ pos ]. size () == 0 ) \n             { \n                 pos   =   0 ; \n                 res_part . push_back ( target ); \n                 final_res . push_back ( res_part ); \n                 res_part . clear (); \n             } \n         } \n         return   final_res ; \n     }  };    \u9019\u500b\u662f\u6b63\u78ba\u89e3\u6cd5\u7684\u4ee3\u78bc\uff0c\u4f7f\u7528\u7684\u6f14\u7b97\u6cd5\u4fbf\u662f\uff1aDFS\u6df1\u5ea6\u512a\u5148\u641c\u7d22\uff0c\u4ee5\u627e\u51fa\u8d77\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91   Geekforgeeks reference  weibo \nweibo\u7684\u4f5c\u6cd5\u63a1\u7528\u975e\u905e\u8ff4\u505a\u6cd5  \n1.\u9078\u53d6\u8d77\u9ede \n2.\u79fb\u52d5\uff0c\u79fb\u5230\u7684\u9ede\u628a\u5b83\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u82e5\u8a72\u9ede\u4e0d\u662f\u7d42\u9ede\uff0c\u5247\u64f4\u6563\u67e5\u627e\u5468\u570d\u300e\u9084\u6c92\u6709\u8d70\u904e\u7684\u9ede\u300f \n3.\u8d70\u5230\u4e86\u7d42\u9ede\u4e4b\u5f8c\uff0c\u300e\u9000\u56de\u4e0a\u4e00\u6b65\u300f\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u500b\u6b65\u9a5f\uff0c\u56e0\u70ba\u9084\u6709\u53ef\u80fd\u6709\u5176\u4ed6\u8def\u5f91\uff0c\u6545\u5f9e\u7d42\u9ede\u7684\u4e0a\u4e00\u500b\u6b65\u9a5f \n4.\u4e0b\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c\u539f\u672c44\u884c\u7684return\u5beb\u4e0a\u5f8c\u6703\u9020\u6210\u7b54\u6848\u6e1b\u5c11\uff0c\u539f\u56e0\u5728\u65bc\u505abacktrace\u7684\u6642\u5019\uff0c\u9000\u56de\u5305\u522e\u7d42\u9ede\u4e5f\u8981\u6a19\u8a18\u70ba\u6c92\u6709\u8d70\u8a2a\u904e\uff0c\n\u5982\u679c\u7d42\u9ede\u4ecd\u7136\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u90a3\u9ebc\u4e4b\u5f8c\u7b2c\u4e8c\u689d\u8def\u5f91\u8981\u8d70\u5230\u7d42\u9ede\u7684\u6642\u5019\u4fbf\u6703\u770b\u5230\u7d42\u9ede\u5df2\u7d93\u8d70\u8a2a\u904e\uff0c\u4fbf\u4e0d\u518d\u5411\u524d\u8d70\u53bb\u7d42\u9ede\uff0c\u800c\u5c0e\u81f4\u7d50\u679c\u4e0d\u9f4a\u5168   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59 #define FORI(n) for(int i = 0; i < n; ++ i)  class   Solution  {  public : \n     vector < vector   < int >> final_res ; \n     vector < int > res ,   visited ; \n     stack < int >   traversed_path ; \n     vector < vector < int >>   allPathsSourceTarget ( vector < vector < int >>&   graph )   //graph in adjacency list \n     { \n         int   dst ; \n         FORI ( graph . size ()) \n         { \n             if ( graph [ i ]. size () == 0 ) \n             { \n                 dst   =   i ; \n             } \n             visited . push_back ( false ); \n         } \n         dfs ( 0 , dst , res , graph ); \n         return   final_res ; \n     } \n     void   dfs ( int   cur_node ,   int   dst ,   vector < int >   res ,   vector < vector < int >>   graph ) \n     { \n\n         traversed_path . push ( cur_node ); \n         visited [ cur_node ]   =   true ; \n         if ( cur_node   ==   dst ) \n         { \n\n             stack < int >   copied_stk   =   traversed_path ; \n             while ( copied_stk . size ()) \n             { \n                 res . push_back ( copied_stk . top ()); \n                 copied_stk . pop (); \n             } \n             reverse ( res . begin (),   res . end ()); \n\n             final_res . push_back ( res ); \n             res . clear (); \n             //return ; \n         } \n         else \n         { \n\n             FORI ( graph [ cur_node ]. size ()) \n             { \n                 if ( ! visited [ graph [ cur_node ][ i ]]) \n                 { \n                     dfs ( graph [ cur_node ][ i ],   dst ,   res ,   graph ); \n                 } \n             } \n         } \n         //back trace if there will be still some nodes have to be visited but now path are blocked since adj nodes are marked visited \n         visited [ cur_node ]   =   false ; \n         cur_node   =   traversed_path . top (); \n         traversed_path . pop (); \n     }  };",
            "title": "PB. 797. ALl path from src to dst \u5716\u8ad6\u984c\uff0c\u8d77\u7d42\u9ede\u6240\u6709\u53ef\u80fd\u8def\u5f91 "
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pc-799-champagne-tower",
            "text": "\u601d\u8def\uff1a\u96d6\u7136\u984c\u76ee\u6709\u9ede\u5687\u4eba\uff0c\u4f46\u53ea\u662f\u500b\u969c\u773c\u6cd5\uff0c\u525b\u958b\u59cb\u60f3\u8aaa\u4e00\u6b21\u5728\u7b2c\u4e00\u76c3\u6dfb\u52a0\u4e00\u6b21\uff0c\u518d\u8b93\u6bcf\u4e00\u6b21\u7684\u6d41\u6c34\u4f9d\u5e8f\u5f80\u4e0b\u6d41\u7ac4\uff0c\u5982\u679c\u6709\u676f\u5b50\u5df2\u7d93\u6eff\u6c34\u4f4d\uff0c\u5c31\u5c07row++\n\u518d\u5ea6\u5f80\u4e0b\u6d41\u7ac4\uff0c\u76f4\u5230\u5e95\uff0c\u7136\u4e0d\u50c5\u6642\u9593\u8907\u96dc\u5ea6\u592a\u9ad8\u4e5f\u5728\u7b2c260\u500b\u6e2c\u8cc7WA\u4e86    \u4e8b\u5be6\u4e0a\uff0c\u53ea\u8981\u5148\u5c07\u6700\u9ad8\u7684\u90a3\u4e00\u676f\u6c34\uff0c\u4efb\u610f\u88dd\u6eff\u4ed6\u7684pour\u91cf\uff0c\u5148\u4e0d\u7528\u5728\u4e4e\u662f\u5426\u5df2\u7d93\u8d85\u51fa\u6eff\u6c34\u4f4d\uff0c\u53ea\u8981\u5148\u628a\u591a\u51fa\u7684\u6c34\u4f9d\u5e8f\u6d41\u7ac4\uff0c\u4e26\u4e14\u5de6\u53f3\u5747\u5206\u5373\u53ef\uff0c\u800c\u6703\u591a\u51fa\u7684\u6c34\u4f4d\u5c31\u662f\n\u7576\u524d\u6c34\u4f4d - \u4e00\u676f\u6c34 \u4e4b\u5f8c\u518d\u5c07\u9019\u500b\u5806\u51fa\u7684\u6c34\u4f4d\u8a55\u5206\u7d66\u6a13\u4e0b\u5169\u676f\u5373\u53ef\u3002 \u5f88\u667a\u969c\u7684\u662f \u4ee5\u70ba\u6a13\u4e0b\u5169\u676f\u662f row+1 col-1 and row+1 col+1  \u5229\u99ac\u62ff\u4e86\u4e00\u500bRE\uff0c\u5be6\u969b\u4e0a\u61c9\u8a72\u662fcol col+1\u5566w   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 class   Solution  {  public : \n     double   champagneTower ( int   poured ,   int   query_row ,   int   query_glass ) \n     { \n         vector < vector   < double   >   >   cups ; \n         cups . resize ( 101 );   //padding \n         for ( int   i = 0 ; i < 101 ; i ++ ) \n         { \n             for ( int   j = 0 ; j <= i ; j ++ ) \n             { \n                 cups [ i ]. push_back ( 0.0 ); \n             } \n         } \n         cups [ 0 ][ 0 ]   =   poured ; \n         for ( int   i = 0 ; i < 100 ; i ++ ) \n         { \n             for ( int   j = 0 ; j <= i ; j ++ ) \n             { \n                 if ( cups [ i ][ j ]   >=   1.0 ) \n                 { \n                     cups [ i + 1 ][ j ]   +=   ( cups [ i ][ j ]   -   1.0 )   /   2.0   ; \n                     cups [ i + 1 ][ j + 1 ]   +=   ( cups [ i ][ j ]   -   1.0 )   /   2.0   ; \n                     cups [ i ][ j ]   =   1.0 ; \n                 } \n             } \n         } \n         return   cups [ query_row ][ query_glass ]; \n     }  };",
            "title": "PC. 799. Champagne Tower \u6578\u5b78\u898f\u5283\u8207\u89c0\u5bdf\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC75/#pd-800-smallest-rotation-with-highest-score-on",
            "text": "\u6b64\u984c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u4e00\u5b9a\u8981\u5728O(N)\uff0c\u5fc5\u9808\u4f7f\u7528\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\uff0c\u5927\u795e\u5ba4\u53cb\u99ac\u4e0a\u60f3\u5230\u7dda\u6bb5\u6a39segment tree\u67e5\u627e  \u5340\u9593\u67e5\u8a62\u7b97\u6cd5\u6982\u5ff5\uff0c\u5f9e\u66b4\u529b\u5230NlogN \u5230N   \n* \u601d\u8def\uff0c\u53ef\u4ee5\u770b\u51fa\u6709\u5169\u7a2e\u60c5\u5f62\uff0c\u4e00\u7a2e\u662f\u672c\u4f86\u5c31\u6703\u5f97\u5206\u7684(value <= index)\uff0c\u4e00\u7a2e\u662f\u9084\u6c92\u6709\u5f97\u5206\u7684 else \n\u7b2c\u4e00\u985e\u578b \n\u9996\u5148\u7b2c\u4e00\u7a2e\u672c\u4f86\u5c31\u53ef\u4ee5\u5f97\u5206\uff0c\u4f8b\u5982[2,3,1,4,0]\u4e2d\u76841 , 0\uff0c\u5411\u53f3\u79fb\u52d5\u81ea\u7136\u53ef\u4ee5\u5f97\u5206\uff0c\u6240\u4ee5\u4ed6\u7684\u53f3\u908a\u53ef\u4ee5\u7684\u6b65\u6578\u4fbf\u662f[index+1(\u76f4\u63a5\u5411\u5de6\u79fb\u52d5\u5230\u6700\u53f3\u5074\uff08\u8d85\u904e\u5f8c\u91cd\u65b0\u5f9e\u7d50\u5c3e\u56de\u4f86\uff09\uff0c\u5fc5\u7136\u7b26\u5408\u7684\u958b\u5916\u639b\u6a21\u5f0f),len-1\uff08\u79fb\u52d5\u5230\u4ed6\u4e0b\u4e00\u500b\uff09]\n\u4ee5\u53ca[0(\u4e0d\u52d5)\uff0cindex - value\uff08\u4f8b\u5982\u4e0a\u9762\u76841\u57282 \u81f3\u591a\u79fb\u52d5\u52301\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 2 - 1 \u4e00\u6b65\uff09]  \n\u7b2c\u4e8c\u985e\u578b \n\u800c\u53e6\u5916\u4e00\u7a2e\u7576\u524d\u7121\u6cd5\u5f97\u5206\u7684\uff0c\u4fbf\u8981[index+1 (\u958b\u5916\u639b\u79fb\u5230\u6700\u53f3\u908a), total_len - (value - index)(\u7e7c\u7e8c\u79fb\u52d5\uff0cvalue - index \u4ee3\u8868\u8207\u6700\u5927\u79fb\u52d5\u6b21\u6578\u7684\u76f8\u5dee\uff0c\u4e5f\u5c31\u662f\u5b83\u5fc5\u9808\u5411\u53f3\u79fb\u52d5val - index\u9019\u500b\u5dee\u503c\u624d\u6709\u5206\uff0c\u5411\u53f3\u79fb\u52d5\u7684\u81f3\u5c11\u6b21\u6578\uff0c\u63db\u904e\u4f86\u8b1b\u7528 len \u4f86\u6263\u9664\u5c31\u662f\u5411\u5de6\u79fb\u52d5\u7684\u6700\u5927\u6b21\u6578)]  \u6c42\u51fa\u6bcf\u4e00\u500b\u6578\u5b57\u61c9\u8a72\u6709\u7684\u5340\u9593\uff0c\u628a\u4ed6\u5011\u6620\u5c04\u5230\u5340\u9593\u67e5\u8a62\u6bb5\uff0c\u4f7f\u7528python\u7684pair\u8868\u793a\u958b\u59cb\u548c\u7d50\u675f   1\n2\n3\n4\n5\n6 for   index ,   value   in   enumerate ( arr ): \n     if   index   <   value :   #one segment for this ones \n         pair . append ([ index   +   1   , total_len   -   ( value   -   index )])   #segment start and end \n     else :   #two segments for this one \n         pair . append ([ index   +   1 ,   total_len   -   1 ]) \n         pair . append ([ 0 ,   index   -   value ])    \u6700\u5f8c\u627e\u5230prefix sum (\u52a0\u7e3d\u5230\u6b64\u6642\u7684\u7e3d\u548c)\uff0c\u601d\u7dd2\u898b\u8a3b\u89e3   1\n2\n3\n4 segment_query   =   [ 0 ]   *   ( total_len   +   1 )    #aux arrat for the prefix sum, segment query  for   i   in   range   ( len ( pair )):   #+1 padding \n     segment_query [ pair [ i ][ 0 ]]   +=   1   #go in the interval, overlapping with all the other segment \n     segment_query [ pair [ i ][ 1 ]   +   1 ]   -=   1   #leave the interval, cancelling the infulence of segment overlapping    \u6574\u9ad4AC\u4ee3\u78bc\u5982\u4e0b    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 class   Solution : \n     def   bestRotation ( self ,   arr ): \n         best   =   0 \n         shift   =   0 \n         total_len   =   len ( arr ) \n         #start_pos_arr = [] \n         pair   =   [] \n         #initial the start_pos_arr to record the starting position of the given array \n         #initial score \n         for   index ,   value   in   enumerate ( arr ): \n             if   index   <   value :   #one segment for this ones \n                 pair . append ([ index   +   1   , total_len   -   ( value   -   index )])   #segment start and end \n             else :   #two segments for this one \n                 pair . append ([ index   +   1 ,   total_len   -   1 ]) \n                 pair . append ([ 0 ,   index   -   value ]) \n\n\n         segment_query   =   [ 0 ]   *   ( total_len   +   1 )    #aux arrat for the prefix sum, segment query \n         for   i   in   range   ( len ( pair )):   #+1 padding \n             segment_query [ pair [ i ][ 0 ]]   +=   1   #go in the interval, overlapping with all the other segment \n             segment_query [ pair [ i ][ 1 ]   +   1 ]   -=   1   #leave the interval, cancelling the infulence of segment overlapping \n\n         cur_pts   =   0 \n         for   i   in   range   ( len ( segment_query )): \n              cur_pts   +=   segment_query [ i ] \n              if (   cur_pts   >   best ): \n                  best   =   cur_pts \n                  shift   =   i \n\n         return   shift",
            "title": "PD. 800. Smallest rotation with highest score \u6578\u5b78\u63a8\u7406+\u5340\u9593\u67e5\u8a62\u7dda\u6027\u512a\u5316O(N)"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC76/",
            "text": "leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Mar 18, 2018\n\n\n\n\nPA. \n800. Similar RGB Color\n \u9ebb\u7169\u7684\u6c34\u984c\n\n\n\u5982\u984c\u76ee\u6240\u8ff0\uff0c\u6703\u9700\u8981\u7528\u5230\u4e00\u4e9b\u4f4d\u5143\u904b\u7b97\uff0c\u56e0\u6b64\u7a0d\u5acc\u9ebb\u7169\uff0c\u5c45\u7136\u5beb\u4e86\u4e00\u500b\u591a\u5c0f\u6642\u624d\u5beb\u51fa\u4f86\u3002\n\u4e2d\u9014\u9084\u88ab\u8b8a\u66f4\u7684\u984c\u8aaa\u660e\u800d\u4e86\u4e00\u9053\uff0c\u800c\u4e14\u984c\u76ee\u8aaa\u660e\u6839\u672c\u8aaa\u932f\u4e86gg\u3002\n\n\ncti itc \u53ef\u4ee5\u5728\u5341\u516d\u9032\u4f4d\u548cchar\u4e92\u76f8\u8f49\u63db\uff0c\u9817\u70ba\u65b9\u4fbf\u3002\u800cstringstream\u53ef\u4ee5\u628a\u5b57\u4e32\u5728\u8996\u70ba\u8f38\u5165\u8655\u7406\u4e00\u6b21\u8f49\u6210\u5341\u516d\u76e1\u4f4d\u5728\u8f38\u5165\u7d66\u6574\u6578\u3002\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\n#include\n \n<cstdlib>\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \ncti\n(\nchar\n \nc\n)\n\n    \n{\n\n        \nif\n \n(\n \n'0'\n<=\nc\n \n&&\n \nc\n<=\n'9'\n \n)\n \nreturn\n \nc\n-\n'0'\n;\n\n        \nelse\n \nreturn\n \n10\n+\nc\n-\n'a'\n;\n\n    \n}\n\n    \nchar\n \nitc\n(\nint\n \ni\n)\n\n    \n{\n\n        \nif\n \n(\n0\n<=\ni\n \n&&\n \ni\n<=\n9\n)\n \nreturn\n \n'0'\n+\ni\n;\n\n        \nelse\n \nreturn\n \n'a'\n+\ni\n-\n10\n;\n\n    \n}\n\n    \nstring\n \nsimilarRGB\n(\nstring\n \ncolor\n)\n\n    \n{\n\n        \nint\n \ndist\n \n=\n \n0\n,\n \nbest\n \n=\n \n99999999\n;\n\n        \nint\n \noriginal\n \n=\n \n0\n;\n\n        \ncolor\n \n=\n \ncolor\n.\nsubstr\n(\n1\n,\n6\n);\n\n        \nstringstream\n \nss\n;\n\n        \nss\n<<\nhex\n<<\ncolor\n;\n\n        \nss\n>>\noriginal\n;\n\n\n        \nint\n \nR\n,\nG\n,\nB\n,\nnr\n,\nng\n,\nnb\n,\nnr1\n,\nng1\n,\nnb1\n;\n\n        \nstring\n \nsr\n,\nsg\n,\nsb\n;\n\n\n        \nR\n=\noriginal\n \n&\n \n0xff0000\n;\n\n        \nG\n=\noriginal\n \n&\n \n0xff00\n;\n\n        \nB\n=\noriginal\n \n&\n \n0xff\n;\n\n        \nR\n>>=\n16\n;\n\n        \nG\n>>=\n8\n;\n\n\n        \n//find smallest R\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \n16\n;\ni\n++\n)\n\n        \n{\n\n            \nnr\n \n=\n \ni\n<<\n4\n \n|\n \ni\n;\n\n            \nif\n(\nabs\n(\nnr\n-\nR\n)\n<\nbest\n)\n\n            \n{\n\n                \nsr\n=\n\"\"\n;\n\n                \nbest\n \n=\n \nabs\n(\nnr\n-\nR\n);\n\n                \nnr\n \n=\n \ni\n;\n\n                \nsr\n \n+=\n \nitc\n(\ni\n);\n\n            \n}\n\n        \n}\n\n        \n//fins smallest G\n\n        \nbest\n \n=\n \n99999999\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \n16\n;\ni\n++\n)\n\n        \n{\n\n            \nng\n \n=\n \ni\n<<\n4\n \n|\n \ni\n;\n\n            \nif\n(\nabs\n(\nng\n-\nG\n)\n<\nbest\n)\n\n            \n{\n\n                \nsg\n=\n\"\"\n;\n\n                \nbest\n \n=\n \nabs\n(\nng\n-\nG\n);\n\n                \nng\n \n=\n \ni\n;\n\n                \nsg\n \n+=\n \nitc\n(\ni\n);\n\n            \n}\n\n        \n}\n\n        \n//find smallest B\n\n        \nbest\n \n=\n \n99999999\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \n16\n;\ni\n++\n)\n\n        \n{\n\n            \nnb\n \n=\n \ni\n<<\n4\n \n|\n \ni\n;\n\n            \nif\n(\nabs\n(\nnb\n-\nB\n)\n<\nbest\n)\n\n            \n{\n\n                \nsb\n=\n\"\"\n;\n\n                \nbest\n \n=\n \nabs\n(\nnb\n-\nB\n);\n\n                \nnb\n \n=\n \ni\n;\n\n                \nsb\n \n+=\n \nitc\n(\ni\n);\n\n            \n}\n\n        \n}\n\n\n        \nreturn\n \n\"#\"\n+\nsr\n+\nsr\n+\nsg\n+\nsg\n+\nsb\n+\nsb\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\nPB.\n801. Minimum Swaps To Make Sequences Increasing\n \u52d5\u614b\u898f\u5283\n\n\n\u5f9e\u984c\u76ee\u7684\u6027\u8cea\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u500b\u968e\u6bb5\u5747\u8981\u4e0d\u65b7\u6c42\u89e3\u9019\u500b\u968e\u6bb5\u662f\u5426\u8981\u4ea4\u63db\uff08\u91cd\u758a\u5b50\u554f\u984c\uff09\uff0c\u4ee5\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5e8f\u5217\u3002\n\u4f46\u662f\u5728\u6bcf\u4e00\u500b\u905e\u589e\u4e2d\uff0c\u5982\u679c\u6bcf\u4e00\u500b\u5143\u7d20\u548c\u5b83\u524d\u4e00\u500b\u5143\u7d20\u90fd\u7b26\u5408\u56b4\u683c\u589e\uff08\u6700\u512a\u5b50\u7d50\u69cb\uff09\uff0c\u90a3\u9ebc\u6574\u500b\u6578\u5217\u4e5f\u6703\u662f\u4e00\u500b\u56b4\u683c\u589e\u3002\n\u6b64\u5916\uff0c\u5982\u679c\u672c\u4f86\u5c31\u7b26\u5408\u56b4\u683c\u589e\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\uff0c\u6216\u662f\u56e0\u70ba\u4e4b\u524d\u7684\u4ea4\u63db(\u81f3i-1)\u800c\u5c0e\u81f4\u7b2ci\u500b\u9700\u8981\u66ff\u63db\uff0c\u4fbf\u9700\u8981\u6aa2\u67e5\u6b64\u6b21\u662f\u5426\u8981\u63db\uff0c\u4e5f\u5c31\u662f\u5411\u524d\u6aa2\u67e5\u5230\u524d\u4e00\u500b\u3002\n\u56e0\u6b64\u65e2\u6709\u7b26\u5408\u91cd\u758a\u5b50\u554f\u984c\uff0c\u53c8\u6709\u6700\u512a\u5b50\u7d50\u69cb\uff0c\u90a3\u5c31\u662f\u52d5\u614b\u898f\u5283\u8a66\u7528\u7684\u7bc4\u570d\u56c9\n\n\u53c3\u8003\u9023\u7d50:\u4ec0\u9ebc\u6642\u5019\u7528\u52d5\u614b\u898f\u5283\u6f14\u7b97\u6cd5\n \n\n\n\u51fa\u984c\u8005\u89e3\u6790\n\n\n\u89e3\u6790\u7684\u7ffb\u8b6f\u7fd4\u898b\u7a0b\u5f0f\u78bc\u4e2d\u7684\u8a3b\u89e3\n \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\nclass\n \nSolution\n \n{\n\n\npublic\n:\n\n    \nint\n \nminSwap\n(\nvector\n<\nint\n>&\n \nA\n,\n \nvector\n<\nint\n>&\n \nB\n)\n\n    \n{\n\n        \nint\n \nsz\n \n=\n \nA\n.\nsize\n();\n\n        \nvector\n<\nint\n>\n \nswap\n(\nsz\n,\n \nINT_MAX\n),\nunswap\n(\nsz\n,\n \nINT_MAX\n);\n\n        \n//calculating the step of swapped or not till this place.\n\n        \nunswap\n[\n0\n]\n \n=\n \n0\n;\n\n        \nswap\n[\n0\n]\n \n=\n \n1\n;\n\n\n        \nfor\n(\nint\n \ni\n \n=\n \n1\n;\ni\n \n<\n \nsz\n;\ni\n++\n)\n\n        \n{\n\n            \n//\u5982\u679c\u5169\u65b9\u90fd\u4f9d\u7136\u7b26\u5408\u905e\u589e\uff0c\u5247\u53ef\u4ee5\u4e00\u6b21\u63db\u5169\u500bcolumn\u6216\u662f\u90fd\u4e0d\u8981\u63db\uff0c\u56e0\u70ba\u4e4b\u524d\u7684\u5df2\u7d93\u7b26\u5408\u56b4\u683c\u905e\u589e\n\n            \nif\n(\nA\n[\ni\n \n-\n \n1\n]\n \n<\n \nA\n[\ni\n]\n \n&&\n \nB\n[\ni\n \n-\n \n1\n]\n \n<\n \nB\n[\ni\n])\n\n            \n//\u63a8\u7406\u904e\u4f86\u5fc5\u5b9a\u4e5f\u6703\u7e7c\u7e8c\u56b4\u683c\u905e\u589e\uff0c\u5426\u5247\u5c31\u6703\u88ab\u66ff\u63db\u4e86\n\n            \n{\n\n                \nunswap\n[\ni\n]\n \n=\n \nmin\n(\nunswap\n[\ni\n \n-\n \n1\n],\n \nunswap\n[\ni\n]);\n\n                \n//\u5982\u679c\u4e0d\u8981\u66ff\u63db\uff0c\u5c31\u662f\u4f9d\u7136\u7dad\u6301\u8ddf\u4e0a\u4e00\u6b21\u4e00\u6a23\u7684\u672a\u66ff\u63db\u6578\u5b57\uff08\u9019\u4e00\u6b21\u662fintmax \u6240\u4ee5\u4e00\u5b9a\u6703\u53d6\u5230\u8f03\u5c0f\u7684\uff09\n\n\n\n                \nswap\n[\ni\n]\n \n=\n \nmin\n(\nswap\n[\ni\n \n-\n \n1\n]\n \n+\n \n1\n,\n \nswap\n[\ni\n]);\n\n                \n//\u5982\u679c\u8981\u66ff\u63db\uff0c\u90a3\u9ebc\u5148\u524d\u7d2f\u7a4d\u7684\u66ff\u63db\u6b21\u6578\u5230\u9019\u88e1\u5c31\u6703\u518d\u591a\u4e00\u6b21\uff0c\u56e0\u70ba\u73fe\u5728\u591a\u7684i\u53c8\u8981\u518d\u63db\u4e00\u6b21\u4e86\u3002\n\n            \n}\n\n\n            \n//\u82e5\u662f\u9019\u7a2e\u4ea4\u53c9\u7b26\u5408\u5f62\uff0c\u5247i\u6216\u662fi-1\u4f4d\u7f6e\u53ef\u4ee5\u6709\u4e00\u500b\u5fc5\u8981\u88ab\u66ff\u63db\uff0c\u4e5f\u5c31\u662fi, i-1\u6703\u6709\u905e\u589e\u5f62\u6210\u3002\uff08\u9019\u7a2e\u610f\u601d\u5c31\u662f\u8aaa\uff0c\u56e0\u70baA B\u7684\u300e\u96d9\u91cd\u7b26\u5408\u300f\u905e\u589e\u5728\u6b64\u88ab\u6253\u65b7\u4e86\u300f\n\n            \n//\u56e0\u70ba\u88ab\u6253\u65b7\uff0c\u52e2\u5fc5\u5f97\u5229\u7528\u4ea4\u63db\u5176\u4e2d\u4e00\u500b\uff0c\u4f8b\u5982\u5c07i or i-1 \u5176\u4e2d\u4e4b\u4e00\u5404\u81ea\u66ff\u63db\u5373\u53ef\u3002\n\n            \nif\n(\nA\n[\ni\n \n-\n \n1\n]\n \n<\n \nB\n[\ni\n]\n \n&&\n \nB\n[\ni\n \n-\n \n1\n]\n \n<\n \nA\n[\ni\n])\n\n            \n{\n\n                \nunswap\n[\ni\n]\n \n=\n \nmin\n(\nunswap\n[\ni\n],\n \nswap\n[\ni\n \n-\n \n1\n]);\n\n                \n//\u5982\u679c\u4e0d\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u4f9d\u7136\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u9ebc\u5148\u524d\u7684\u52e2\u5fc5\u90fd\u8981\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5f97\u66ff\u63db\u4e0a\u4e00\u500b\n\n                \n//\u4e5f\u5c31\u662f\u8a0e\u8ad6\u4e32\u88e1\u9762\u6240\u8aaa\u7684\uff1athe cost n2 of having a legal sequence up to column i that ends with column i not flipped, is going //to be the cost s1 of having a legal sequence up to column i-1 that ends in column i-1 flipped\n\n\n                \nswap\n[\ni\n]\n \n=\n \nmin\n(\nunswap\n[\ni\n \n-\n \n1\n]\n \n+\n \n1\n,\n \nswap\n[\ni\n]);\n\n                \n//\u5982\u679c\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u624d\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u5c31\u4ee3\u8868\u5148\u524d\u5230i-1\u90fd\u8981\u662f\u6301\u7e8c\u56b4\u683c\u589e\uff0c\u56e0\u6b64\u5f9e\u9019\u88e1\u958b\u59cb\u66ff\u63db\u5c31\u662f\u7b97\u5148\u524d\u6c92\u66ff\u63db\u4f46\u9019\u500b\u6709\u66ff\u63db\uff0c\u6240\u4ee5\u662f\u5f9eunswap + 1\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nmin\n(\nswap\n[\nsz\n \n-\n \n1\n],\n \nunswap\n[\nsz\n \n-\n \n1\n]);\n\n\n    \n}\n\n\n};\n\n\n\n\n\n\nPC. \n802. Find Eventual Safe States\n \u5716\u8ad6\u7d93\u5178\u984c\uff0c\u67e5\u627e\u74b0\u4ee5\u53ca\u53ef\u80fd\u89f8\u53ca\u74b0\u4e4b\u6240\u6709\u9ede\n\n\n\u5229\u7528\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4f86\u5132\u5b58\u6240\u6709\u9ede\u7684\u985e\u578b -1\u4ee3\u8868\u5c1a\u672a\u8655\u7406 0\u4ee3\u8868\u4e0d\u5728\u74b0\u4e0a\uff0c\u6216\u662f\u4e0d\u53ef\u80fd\u89f8\u53ca\u5230\u4ed6\u4eba\u7684\u74b0 1\u4ee3\u8868\u662f\u74b0\u7684\u4e00\u90e8\u5206\n\u512a\u5316\u53ea\u5c0b\u627e\u9084\u6c92\u8655\u7406\u904e\u5f97\u9ede\uff0c\u5176\u4ed6\u518d\u628a\u6a19\u8a18\u70ba0\u7684\u9ede\uff0c\u653e\u5230\u7d50\u679c\u88e1\u9762\u3002\n\n\u4f46\u4f9d\u7136\u512a\u5316\u4e0d\u5920TLE:( \u5148\u653e\u7f6e\u5427 \n\n\nWrong Answer 37/111 \u8907\u96dc\u7684\u66b4\u529b\u4f5c\u6cd5\uff0c\u9084\u6703\u932f\n \n\n\nTLE 81/111 \u63d0\u65e9\u8df3\u51fa\uff0c\u4f46\u4f9d\u7136TLE\n \n\n\u4ee5\u4e0b\u4ee3\u78bc\u512a\u5316\u5230 101/111 \u4f46\u4f9d\u7136TLE\u4e86 \u5148\u300e\u7cbe\u795e\u300fac\u4e00\u4e0b\u3002\n\u4ee3\u78bc\u908f\u8f2f\u898b\u8a3b\u89e3\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\n<\nint\n>\n \nres\n,\n \nvisited\n,\n \nin_cycle\n;\n\n    \nvector\n<\nint\n>\n \neventualSafeNodes\n(\nvector\n<\nvector\n<\nint\n>>&\n \ngraph\n)\n\n    \n{\n\n        \nin_cycle\n.\nresize\n(\ngraph\n.\nsize\n());\n\n        \nfill\n(\nin_cycle\n.\nbegin\n(),\n \nin_cycle\n.\nend\n(),\n \n-\n1\n);\n \n//-1 for unprocessed, 1 for in cycle and 0 for not in cycle\n\n        \nFORI\n(\ngraph\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\nin_cycle\n[\ni\n]\n \n==\n \n-\n1\n)\n \n//if this node is not the terminal node\n\n            \n{\n\n                \nif\n(\ngraph\n[\ni\n].\nsize\n())\n \n//the node which unsure in a node should be processed, otherwiswe, just dont do\n\n                \n{\n\n                    \nvisited\n.\nresize\n(\ngraph\n.\nsize\n());\n\n                    \nfill\n(\nvisited\n.\nbegin\n(),\n \nvisited\n.\nend\n(),\n \n0\n);\n\n                    \n// cout<<\"Start from \"<<i<<endl;\n\n                    \nif\n(\n!\ndfs\n(\ni\n,\n \ni\n,\n \ngraph\n,\n \n0\n))\n\n                    \n{\n\n                        \nin_cycle\n[\ni\n]\n \n=\n \n0\n;\n\n                    \n}\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nin_cycle\n[\ni\n]\n \n=\n \n0\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n// cout<<\" is in_cycle \";\n\n        \nFORI\n(\nin_cycle\n.\nsize\n())\n\n        \n{\n\n            \nif\n(\nin_cycle\n[\ni\n]\n \n==\n \n0\n)\n\n            \n{\n\n                \nres\n.\npush_back\n(\ni\n);\n\n            \n}\n\n            \n// cout<<in_cycle[i]<<\" \";\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n    \nbool\n \ndfs\n(\nint\n \ncur_node\n,\n \nint\n \nstart\n,\n \nvector\n<\nvector\n<\nint\n>>\n \ngraph\n,\nint\n \nstep\n)\n\n    \n{\n\n        \n// cout<<\" DFS to \"<<cur_node<<endl;\n\n        \n// cout<<\" is in_cycle \";\n\n        \nFORI\n(\nin_cycle\n.\nsize\n())\n\n        \n{\n\n            \ncout\n<<\nin_cycle\n[\ni\n]\n<<\n\" \"\n;\n\n        \n}\n\n        \n// cout<<endl;\n\n        \nif\n(\nin_cycle\n[\ncur_node\n]\n \n==\n \n1\n)\n\n        \n{\n\n            \n// cout<<\"Hit a node that causes cycle \"<<endl;\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n        \nelse\n \nif\n(\nin_cycle\n[\ncur_node\n]\n \n==\n \n0\n)\n  \n//reach the node that will not form a cycle, which is safe\n\n        \n{\n\n            \nreturn\n \nfalse\n;\n\n        \n}\n\n        \nif\n(\nvisited\n[\ncur_node\n]\n \n==\n \n1\n)\n \n//visit the visited node again, that is a cycle\n\n        \n{\n\n            \n// cout<<\"Hit a node that visited before, CYCLE CONFIRMED!! now cur_node is \"<<cur_node<<endl;\n\n            \nin_cycle\n[\ncur_node\n]\n \n=\n \n1\n;\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n\n        \n//traversed_path.push_back(cur_node);\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \n1\n;\n\n        \nFORI\n(\ngraph\n[\ncur_node\n].\nsize\n())\n \n//search the next node that can be traversed from the current node\n\n        \n{\n\n            \n//if this node will connect to its neighbor that forms a circle, than cur_node will be treated as circle-hazard as well\n\n            \n//cout<<i<<endl;\n\n            \nif\n(\ndfs\n(\ngraph\n[\ncur_node\n][\ni\n],\n \nstart\n,\n \ngraph\n,\n \nstep\n \n+\n \n1\n))\n\n            \n{\n\n                \nin_cycle\n[\ncur_node\n]\n \n=\n \n1\n;\n\n                \n// cout<<\"Node \"<<cur_node<<\" connect to \"<<i<<\" that forms a cycle \"<<endl;\n\n                \nreturn\n \ntrue\n;\n\n            \n}\n\n        \n}\n\n        \nvisited\n[\ncur_node\n]\n \n=\n \n0\n;\n \n//if next traverse meet the terminal, it does not count as meet before that form a cycle since terminal is OK to meet again\n\n        \nin_cycle\n[\ncur_node\n]\n \n=\n \n0\n;\n//this node is terminal since the aforementioned FORI wont get in, so this is the node with output degree zero\n\n        \nreturn\n \nfalse\n;\n\n    \n}\n\n\n};",
            "title": "WC76"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#leetcode_oj-wc76",
            "text": "Contest time: Mar 18, 2018",
            "title": "leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#pa-800-similar-rgb-color",
            "text": "\u5982\u984c\u76ee\u6240\u8ff0\uff0c\u6703\u9700\u8981\u7528\u5230\u4e00\u4e9b\u4f4d\u5143\u904b\u7b97\uff0c\u56e0\u6b64\u7a0d\u5acc\u9ebb\u7169\uff0c\u5c45\u7136\u5beb\u4e86\u4e00\u500b\u591a\u5c0f\u6642\u624d\u5beb\u51fa\u4f86\u3002\n\u4e2d\u9014\u9084\u88ab\u8b8a\u66f4\u7684\u984c\u8aaa\u660e\u800d\u4e86\u4e00\u9053\uff0c\u800c\u4e14\u984c\u76ee\u8aaa\u660e\u6839\u672c\u8aaa\u932f\u4e86gg\u3002  cti itc \u53ef\u4ee5\u5728\u5341\u516d\u9032\u4f4d\u548cchar\u4e92\u76f8\u8f49\u63db\uff0c\u9817\u70ba\u65b9\u4fbf\u3002\u800cstringstream\u53ef\u4ee5\u628a\u5b57\u4e32\u5728\u8996\u70ba\u8f38\u5165\u8655\u7406\u4e00\u6b21\u8f49\u6210\u5341\u516d\u76e1\u4f4d\u5728\u8f38\u5165\u7d66\u6574\u6578\u3002  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75 #define FORI(n) for(int i = 0; i < n; ++ i)  #include   <cstdlib>  class   Solution  {  public : \n     int   cti ( char   c ) \n     { \n         if   (   '0' <= c   &&   c <= '9'   )   return   c - '0' ; \n         else   return   10 + c - 'a' ; \n     } \n     char   itc ( int   i ) \n     { \n         if   ( 0 <= i   &&   i <= 9 )   return   '0' + i ; \n         else   return   'a' + i - 10 ; \n     } \n     string   similarRGB ( string   color ) \n     { \n         int   dist   =   0 ,   best   =   99999999 ; \n         int   original   =   0 ; \n         color   =   color . substr ( 1 , 6 ); \n         stringstream   ss ; \n         ss << hex << color ; \n         ss >> original ; \n\n         int   R , G , B , nr , ng , nb , nr1 , ng1 , nb1 ; \n         string   sr , sg , sb ; \n\n         R = original   &   0xff0000 ; \n         G = original   &   0xff00 ; \n         B = original   &   0xff ; \n         R >>= 16 ; \n         G >>= 8 ; \n\n         //find smallest R \n         for ( int   i   =   0 ; i   <   16 ; i ++ ) \n         { \n             nr   =   i << 4   |   i ; \n             if ( abs ( nr - R ) < best ) \n             { \n                 sr = \"\" ; \n                 best   =   abs ( nr - R ); \n                 nr   =   i ; \n                 sr   +=   itc ( i ); \n             } \n         } \n         //fins smallest G \n         best   =   99999999 ; \n         for ( int   i   =   0 ; i   <   16 ; i ++ ) \n         { \n             ng   =   i << 4   |   i ; \n             if ( abs ( ng - G ) < best ) \n             { \n                 sg = \"\" ; \n                 best   =   abs ( ng - G ); \n                 ng   =   i ; \n                 sg   +=   itc ( i ); \n             } \n         } \n         //find smallest B \n         best   =   99999999 ; \n         for ( int   i   =   0 ; i   <   16 ; i ++ ) \n         { \n             nb   =   i << 4   |   i ; \n             if ( abs ( nb - B ) < best ) \n             { \n                 sb = \"\" ; \n                 best   =   abs ( nb - B ); \n                 nb   =   i ; \n                 sb   +=   itc ( i ); \n             } \n         } \n\n         return   \"#\" + sr + sr + sg + sg + sb + sb ; \n     }  };",
            "title": "PA. 800. Similar RGB Color \u9ebb\u7169\u7684\u6c34\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#pb801-minimum-swaps-to-make-sequences-increasing",
            "text": "\u5f9e\u984c\u76ee\u7684\u6027\u8cea\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u500b\u968e\u6bb5\u5747\u8981\u4e0d\u65b7\u6c42\u89e3\u9019\u500b\u968e\u6bb5\u662f\u5426\u8981\u4ea4\u63db\uff08\u91cd\u758a\u5b50\u554f\u984c\uff09\uff0c\u4ee5\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5e8f\u5217\u3002\n\u4f46\u662f\u5728\u6bcf\u4e00\u500b\u905e\u589e\u4e2d\uff0c\u5982\u679c\u6bcf\u4e00\u500b\u5143\u7d20\u548c\u5b83\u524d\u4e00\u500b\u5143\u7d20\u90fd\u7b26\u5408\u56b4\u683c\u589e\uff08\u6700\u512a\u5b50\u7d50\u69cb\uff09\uff0c\u90a3\u9ebc\u6574\u500b\u6578\u5217\u4e5f\u6703\u662f\u4e00\u500b\u56b4\u683c\u589e\u3002\n\u6b64\u5916\uff0c\u5982\u679c\u672c\u4f86\u5c31\u7b26\u5408\u56b4\u683c\u589e\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\uff0c\u6216\u662f\u56e0\u70ba\u4e4b\u524d\u7684\u4ea4\u63db(\u81f3i-1)\u800c\u5c0e\u81f4\u7b2ci\u500b\u9700\u8981\u66ff\u63db\uff0c\u4fbf\u9700\u8981\u6aa2\u67e5\u6b64\u6b21\u662f\u5426\u8981\u63db\uff0c\u4e5f\u5c31\u662f\u5411\u524d\u6aa2\u67e5\u5230\u524d\u4e00\u500b\u3002\n\u56e0\u6b64\u65e2\u6709\u7b26\u5408\u91cd\u758a\u5b50\u554f\u984c\uff0c\u53c8\u6709\u6700\u512a\u5b50\u7d50\u69cb\uff0c\u90a3\u5c31\u662f\u52d5\u614b\u898f\u5283\u8a66\u7528\u7684\u7bc4\u570d\u56c9 \u53c3\u8003\u9023\u7d50:\u4ec0\u9ebc\u6642\u5019\u7528\u52d5\u614b\u898f\u5283\u6f14\u7b97\u6cd5    \u51fa\u984c\u8005\u89e3\u6790  \u89e3\u6790\u7684\u7ffb\u8b6f\u7fd4\u898b\u7a0b\u5f0f\u78bc\u4e2d\u7684\u8a3b\u89e3     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41 #define FORI(n) for(int i = 0; i < n; ++ i)  class   Solution   {  public : \n     int   minSwap ( vector < int >&   A ,   vector < int >&   B ) \n     { \n         int   sz   =   A . size (); \n         vector < int >   swap ( sz ,   INT_MAX ), unswap ( sz ,   INT_MAX ); \n         //calculating the step of swapped or not till this place. \n         unswap [ 0 ]   =   0 ; \n         swap [ 0 ]   =   1 ; \n\n         for ( int   i   =   1 ; i   <   sz ; i ++ ) \n         { \n             //\u5982\u679c\u5169\u65b9\u90fd\u4f9d\u7136\u7b26\u5408\u905e\u589e\uff0c\u5247\u53ef\u4ee5\u4e00\u6b21\u63db\u5169\u500bcolumn\u6216\u662f\u90fd\u4e0d\u8981\u63db\uff0c\u56e0\u70ba\u4e4b\u524d\u7684\u5df2\u7d93\u7b26\u5408\u56b4\u683c\u905e\u589e \n             if ( A [ i   -   1 ]   <   A [ i ]   &&   B [ i   -   1 ]   <   B [ i ]) \n             //\u63a8\u7406\u904e\u4f86\u5fc5\u5b9a\u4e5f\u6703\u7e7c\u7e8c\u56b4\u683c\u905e\u589e\uff0c\u5426\u5247\u5c31\u6703\u88ab\u66ff\u63db\u4e86 \n             { \n                 unswap [ i ]   =   min ( unswap [ i   -   1 ],   unswap [ i ]); \n                 //\u5982\u679c\u4e0d\u8981\u66ff\u63db\uff0c\u5c31\u662f\u4f9d\u7136\u7dad\u6301\u8ddf\u4e0a\u4e00\u6b21\u4e00\u6a23\u7684\u672a\u66ff\u63db\u6578\u5b57\uff08\u9019\u4e00\u6b21\u662fintmax \u6240\u4ee5\u4e00\u5b9a\u6703\u53d6\u5230\u8f03\u5c0f\u7684\uff09 \n\n\n                 swap [ i ]   =   min ( swap [ i   -   1 ]   +   1 ,   swap [ i ]); \n                 //\u5982\u679c\u8981\u66ff\u63db\uff0c\u90a3\u9ebc\u5148\u524d\u7d2f\u7a4d\u7684\u66ff\u63db\u6b21\u6578\u5230\u9019\u88e1\u5c31\u6703\u518d\u591a\u4e00\u6b21\uff0c\u56e0\u70ba\u73fe\u5728\u591a\u7684i\u53c8\u8981\u518d\u63db\u4e00\u6b21\u4e86\u3002 \n             } \n\n             //\u82e5\u662f\u9019\u7a2e\u4ea4\u53c9\u7b26\u5408\u5f62\uff0c\u5247i\u6216\u662fi-1\u4f4d\u7f6e\u53ef\u4ee5\u6709\u4e00\u500b\u5fc5\u8981\u88ab\u66ff\u63db\uff0c\u4e5f\u5c31\u662fi, i-1\u6703\u6709\u905e\u589e\u5f62\u6210\u3002\uff08\u9019\u7a2e\u610f\u601d\u5c31\u662f\u8aaa\uff0c\u56e0\u70baA B\u7684\u300e\u96d9\u91cd\u7b26\u5408\u300f\u905e\u589e\u5728\u6b64\u88ab\u6253\u65b7\u4e86\u300f \n             //\u56e0\u70ba\u88ab\u6253\u65b7\uff0c\u52e2\u5fc5\u5f97\u5229\u7528\u4ea4\u63db\u5176\u4e2d\u4e00\u500b\uff0c\u4f8b\u5982\u5c07i or i-1 \u5176\u4e2d\u4e4b\u4e00\u5404\u81ea\u66ff\u63db\u5373\u53ef\u3002 \n             if ( A [ i   -   1 ]   <   B [ i ]   &&   B [ i   -   1 ]   <   A [ i ]) \n             { \n                 unswap [ i ]   =   min ( unswap [ i ],   swap [ i   -   1 ]); \n                 //\u5982\u679c\u4e0d\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u4f9d\u7136\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u9ebc\u5148\u524d\u7684\u52e2\u5fc5\u90fd\u8981\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5f97\u66ff\u63db\u4e0a\u4e00\u500b \n                 //\u4e5f\u5c31\u662f\u8a0e\u8ad6\u4e32\u88e1\u9762\u6240\u8aaa\u7684\uff1athe cost n2 of having a legal sequence up to column i that ends with column i not flipped, is going //to be the cost s1 of having a legal sequence up to column i-1 that ends in column i-1 flipped \n\n                 swap [ i ]   =   min ( unswap [ i   -   1 ]   +   1 ,   swap [ i ]); \n                 //\u5982\u679c\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u624d\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u5c31\u4ee3\u8868\u5148\u524d\u5230i-1\u90fd\u8981\u662f\u6301\u7e8c\u56b4\u683c\u589e\uff0c\u56e0\u6b64\u5f9e\u9019\u88e1\u958b\u59cb\u66ff\u63db\u5c31\u662f\u7b97\u5148\u524d\u6c92\u66ff\u63db\u4f46\u9019\u500b\u6709\u66ff\u63db\uff0c\u6240\u4ee5\u662f\u5f9eunswap + 1 \n             } \n         } \n         return   min ( swap [ sz   -   1 ],   unswap [ sz   -   1 ]); \n\n     }  };",
            "title": "PB.801. Minimum Swaps To Make Sequences Increasing \u52d5\u614b\u898f\u5283"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC76/#pc-802-find-eventual-safe-states",
            "text": "\u5229\u7528\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4f86\u5132\u5b58\u6240\u6709\u9ede\u7684\u985e\u578b -1\u4ee3\u8868\u5c1a\u672a\u8655\u7406 0\u4ee3\u8868\u4e0d\u5728\u74b0\u4e0a\uff0c\u6216\u662f\u4e0d\u53ef\u80fd\u89f8\u53ca\u5230\u4ed6\u4eba\u7684\u74b0 1\u4ee3\u8868\u662f\u74b0\u7684\u4e00\u90e8\u5206\n\u512a\u5316\u53ea\u5c0b\u627e\u9084\u6c92\u8655\u7406\u904e\u5f97\u9ede\uff0c\u5176\u4ed6\u518d\u628a\u6a19\u8a18\u70ba0\u7684\u9ede\uff0c\u653e\u5230\u7d50\u679c\u88e1\u9762\u3002 \n\u4f46\u4f9d\u7136\u512a\u5316\u4e0d\u5920TLE:( \u5148\u653e\u7f6e\u5427   Wrong Answer 37/111 \u8907\u96dc\u7684\u66b4\u529b\u4f5c\u6cd5\uff0c\u9084\u6703\u932f    TLE 81/111 \u63d0\u65e9\u8df3\u51fa\uff0c\u4f46\u4f9d\u7136TLE   \n\u4ee5\u4e0b\u4ee3\u78bc\u512a\u5316\u5230 101/111 \u4f46\u4f9d\u7136TLE\u4e86 \u5148\u300e\u7cbe\u795e\u300fac\u4e00\u4e0b\u3002\n\u4ee3\u78bc\u908f\u8f2f\u898b\u8a3b\u89e3  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 #define FORI(n) for(int i = 0; i < n; ++ i)  class   Solution  {  public : \n     vector < int >   res ,   visited ,   in_cycle ; \n     vector < int >   eventualSafeNodes ( vector < vector < int >>&   graph ) \n     { \n         in_cycle . resize ( graph . size ()); \n         fill ( in_cycle . begin (),   in_cycle . end (),   - 1 );   //-1 for unprocessed, 1 for in cycle and 0 for not in cycle \n         FORI ( graph . size ()) \n         { \n             if ( in_cycle [ i ]   ==   - 1 )   //if this node is not the terminal node \n             { \n                 if ( graph [ i ]. size ())   //the node which unsure in a node should be processed, otherwiswe, just dont do \n                 { \n                     visited . resize ( graph . size ()); \n                     fill ( visited . begin (),   visited . end (),   0 ); \n                     // cout<<\"Start from \"<<i<<endl; \n                     if ( ! dfs ( i ,   i ,   graph ,   0 )) \n                     { \n                         in_cycle [ i ]   =   0 ; \n                     } \n                 } \n                 else \n                 { \n                     in_cycle [ i ]   =   0 ; \n                 } \n             } \n         } \n         // cout<<\" is in_cycle \"; \n         FORI ( in_cycle . size ()) \n         { \n             if ( in_cycle [ i ]   ==   0 ) \n             { \n                 res . push_back ( i ); \n             } \n             // cout<<in_cycle[i]<<\" \"; \n         } \n         return   res ; \n     } \n     bool   dfs ( int   cur_node ,   int   start ,   vector < vector < int >>   graph , int   step ) \n     { \n         // cout<<\" DFS to \"<<cur_node<<endl; \n         // cout<<\" is in_cycle \"; \n         FORI ( in_cycle . size ()) \n         { \n             cout << in_cycle [ i ] << \" \" ; \n         } \n         // cout<<endl; \n         if ( in_cycle [ cur_node ]   ==   1 ) \n         { \n             // cout<<\"Hit a node that causes cycle \"<<endl; \n             return   true ; \n         } \n         else   if ( in_cycle [ cur_node ]   ==   0 )    //reach the node that will not form a cycle, which is safe \n         { \n             return   false ; \n         } \n         if ( visited [ cur_node ]   ==   1 )   //visit the visited node again, that is a cycle \n         { \n             // cout<<\"Hit a node that visited before, CYCLE CONFIRMED!! now cur_node is \"<<cur_node<<endl; \n             in_cycle [ cur_node ]   =   1 ; \n             return   true ; \n         } \n\n         //traversed_path.push_back(cur_node); \n         visited [ cur_node ]   =   1 ; \n         FORI ( graph [ cur_node ]. size ())   //search the next node that can be traversed from the current node \n         { \n             //if this node will connect to its neighbor that forms a circle, than cur_node will be treated as circle-hazard as well \n             //cout<<i<<endl; \n             if ( dfs ( graph [ cur_node ][ i ],   start ,   graph ,   step   +   1 )) \n             { \n                 in_cycle [ cur_node ]   =   1 ; \n                 // cout<<\"Node \"<<cur_node<<\" connect to \"<<i<<\" that forms a cycle \"<<endl; \n                 return   true ; \n             } \n         } \n         visited [ cur_node ]   =   0 ;   //if next traverse meet the terminal, it does not count as meet before that form a cycle since terminal is OK to meet again \n         in_cycle [ cur_node ]   =   0 ; //this node is terminal since the aforementioned FORI wont get in, so this is the node with output degree zero \n         return   false ; \n     }  };",
            "title": "PC. 802. Find Eventual Safe States \u5716\u8ad6\u7d93\u5178\u984c\uff0c\u67e5\u627e\u74b0\u4ee5\u53ca\u53ef\u80fd\u89f8\u53ca\u74b0\u4e4b\u6240\u6709\u9ede"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC78/",
            "text": "leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97\n\n\n\n\nContest time: Apr 1, 2018\n\n\n\n\nPA. \n811. Subdomain Visit Count\n substr + map \u6d3b\u7528\u6c34\u984c\n\n\n\n\n\u601d\u8def\uff1a\u7c21\u55ae\u7684\u6c34\u984c\uff0c\u7528substr\u88c1\u5207\u7db2\u57df\u540d\u7a31\u5f8c\u518dhash\u5230\u7d71\u8a08\u6578\u5b57\uff0c\u4ee5stoi\u51fd\u6578\u4f86\u5c07string\u7684\u6578\u5b57\u8f49\u6210\u7d71\u8a08\u503c\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\n#define pb push_back\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nvector\n<\nstring\n>\n \nsubdomainVisits\n(\nvector\n<\nstring\n>&\n \ncpdomains\n)\n\n    \n{\n\n        \nmap\n<\nstring\n \n,\nint\n>\n \nmymap\n;\n\n        \nvector\n<\nvector\n \n<\nint\n>\n \n>\n \ndotpos\n;\n\n        \nvector\n<\nint\n>\n \nvisit\n;\n \n//each domain visit\n\n        \ndotpos\n.\nresize\n(\ncpdomains\n.\nsize\n());\n\n        \n//cpdomains[i].size() - 1\n\n        \nFORI\n(\ncpdomains\n.\nsize\n())\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \ncpdomains\n[\ni\n].\nsize\n()\n \n-\n \n1\n;\n \nj\n \n>=\n \n0\n;\n \nj\n--\n)\n\n            \n{\n\n                \nif\n(\ncpdomains\n[\ni\n][\nj\n]\n \n==\n \n'.'\n)\n\n                \n{\n\n                    \ndotpos\n[\ni\n].\npb\n(\nj\n);\n\n                \n}\n\n                \nelse\n \nif\n(\ncpdomains\n[\ni\n][\nj\n]\n \n==\n \n' '\n)\n\n                \n{\n\n                    \ndotpos\n[\ni\n].\npb\n(\nj\n);\n\n                    \nbreak\n;\n\n                \n}\n\n            \n}\n\n        \n}\n \n//subdomain pos\n\n        \nstring\n \ntmp\n;\n\n        \nFORI\n(\ncpdomains\n.\nsize\n())\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n<\n \ncpdomains\n[\ni\n].\nsize\n();\n \nj\n++\n)\n\n            \n{\n\n                \nif\n(\ncpdomains\n[\ni\n][\nj\n]\n \n==\n \n' '\n)\n\n                \n{\n\n                    \ntmp\n \n=\n \ncpdomains\n[\ni\n].\nsubstr\n(\n0\n,\nj\n \n+\n \n1\n);\n\n                    \nint\n \ntmp2\n \n=\n \nstoi\n(\ntmp\n);\n\n                    \nvisit\n.\npb\n(\ntmp2\n);\n\n                    \nbreak\n;\n\n                \n}\n\n            \n}\n\n        \n}\n \n//times\n\n        \nint\n \nposcnt\n \n=\n \n0\n;\n\n        \nFORI\n(\ncpdomains\n.\nsize\n())\n\n        \n{\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\n \nj\n \n<\n \ndotpos\n[\ni\n].\nsize\n();\n \nj\n++\n)\n\n            \n{\n\n                \ntmp\n \n=\n \ncpdomains\n[\ni\n].\nsubstr\n(\ndotpos\n[\ni\n][\nj\n]\n \n+\n \n1\n,\n \ncpdomains\n[\ni\n].\nsize\n()\n \n-\n \ndotpos\n[\ni\n][\nj\n]\n \n+\n \n1\n);\n\n                \nmymap\n[\ntmp\n]\n \n+=\n \nvisit\n[\ni\n];\n\n            \n}\n\n        \n}\n//accumulate\n\n\n        \nvector\n<\nstring\n>\n \nres\n;\n\n        \nstring\n \ntimestr\n;\n\n        \nfor\n(\nmap\n<\nstring\n,\n \nint\n>::\niterator\n \nit\n \n=\n \nmymap\n.\nbegin\n();\n \nit\n \n!=\n \nmymap\n.\nend\n();\n \n++\nit\n)\n\n        \n{\n\n            \ntimestr\n \n=\n \nto_string\n(\nit\n->\nsecond\n);\n\n            \nres\n.\npb\n(\ntimestr\n \n+\n \n\" \"\n \n+\n \nit\n->\nfirst\n);\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nPB.\n809. Expressive Words\n \u5b57\u4e32\u96d9\u6307\u6a19\u63a8\u7406\u89c0\u5bdf\u984c\n\n\n\n\n\u601d\u8def\uff1a\u4e0d\u7b97\u96e3\u7684\u984c\u76ee\uff0c\u53ea\u662f\u984c\u76ee\u6709\u9ede\u542b\u7cca\u4e0d\u597d\u61c2\uff0c\u5be6\u969b\u4e0a\u610f\u601d\u70ba \u82e5\u4ee5word\u7684char\u4f86\u5ef6\u4f38\u6210\u529f\uff08\u5ef6\u4f38\u6210\u529f\u7684\u5b9a\u7fa9\u70ba\uff1a\u4e26\u5217\u7684char\u9054\u5230\u4e09\u500b\u4ee5\u4e0a\uff09\"\u4e26\u4e14\" \u7d93\u7531\u6210\u529f\u5ef6\u4f38\u7684char\n\u6700\u5f8c\u80fd\u9054\u5230\u76ee\u6a19\u5b57\u4e32\uff0c\u4fbf\u662f\u4e00\u500bexpressive word\u8f49\u63db\n\u4f8b\u5982\uff1adddiiiinnssssssoooo \u82e5\u70ba\u76ee\u6a19\u5b57\u4e32\n\u5247 dinnsoo \u53ef\u4ee5 \u56e0\u70ba d+dd(\u5ef6\u4f38\u9054\u52303) i+iii(\u5ef6\u4f38\u9054\u52304) nn=nn s+sssss(\u5ef6\u4f38\u9054\u52306) o+ooo(\u5ef6\u4f38\u9054\u52304) \u6700\u5f8c\u80fd\u7d44\u6210\u76ee\u6a19\u5b57\u4e32\nddinnso\u4e5f\u53ef(\u7576\u521d\u4ee5\u70ba\u8981dd\u8996\u70ba\u4e00\u7d44\u4f86\u5ef6\u795e \uff0c\u800cddd / dd \u53ea\u67091.5\u500d\u4e0d\u884c\uff0c\u7136\u800c\u984c\u76ee\u53ea\u8981\u6c42\u5ef6\u4f38\uff0c\u56e0\u6b64\u4e5f\u80fd\u7528\u55ae\u4e00\u5b57\u5143\u6e4a\u6210\uff0c\u662f\u6545\u4ee5\u55ae\u4e00\u5b57\u5143\u5ef6\u4f38\u662f\u4e00\u7a2e\u4fdd\u96aa\u7684\u4f5c\u6cd5)\n\n\n\n\n\u53c8\u5982 ddinsoo\u4fbf\u4e0d\u884c\uff0c\u4e43\u662f\u65bc n+n\u53ea\u5ef6\u4f38\u4e86\u5169\u6b21\uff0c\u7121\u6cd5\u9054\u9663\uff0c\u56e0\u6b64\u52e2\u5fc5\u7121\u6cd5\u505a\u6210\u539f\u672c\u7684\u76ee\u6a19\u5b57\u4e32\u800c\u653e\u68c4\u3002\n\n\n\u7528\u4e0a\u8ff0\u7684\u60f3\u6cd5\u4fbf\u80fd\u5beb\u51fa\u4ee5\u4e0bac\u4ee3\u78bc\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n#define FORI(n) for(int i = 0; i < n; ++ i)\n\n\n#define pb push_back\n\n\nclass\n \nSolution\n\n\n{\n\n\npublic\n:\n\n    \nint\n \nexpressiveWords\n(\nstring\n \nstr\n,\n \nvector\n<\nstring\n>&\n \nwords\n)\n\n    \n{\n\n        \nint\n \nres\n \n=\n \n0\n,\n \ncan\n \n=\n \n0\n,\n \ncnt\n \n=\n \n0\n,\n \ntotal_len\n \n=\n \n0\n,\n \nextend_len\n \n=\n \n0\n,\n \ngroup_len\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n0\n;\ni\n \n<\n \nwords\n.\nsize\n();\ni\n++\n)\n\n        \n{\n\n            \ncan\n \n=\n \n1\n;\n \n//can --> \u53ef\u5ef6\u4f38\u6e4a\u51fa\u7d50\u679c\n\n            \nint\n \nk\n \n=\n \n0\n;\n\n            \ntotal_len\n \n=\n \nwords\n[\ni\n].\nsize\n();\n \n//\u7b2ci\u500b\u6aa2\u6e2cword\u7684\u9577\u5ea6\n\n            \nfor\n(\nint\n \nj\n \n=\n \n0\n;\nj\n \n<\n \nwords\n[\ni\n].\nsize\n();)\n\n            \n{\n\n                \nextend_len\n \n=\n \n0\n;\n\n                \ngroup_len\n \n=\n \n1\n;\n\n                \nif\n(\nwords\n[\ni\n][\nj\n]\n \n!=\n \nstr\n[\nk\n])\n\n                \n{\n\n                    \ncan\n \n=\n \n0\n;\n \n//\u82e5\u6709\u4e0d\u4e00\u6a23\u7684\uff0c\u52e2\u5fc5\u7121\u6cd5\u6e4a\u6210\uff0c\n\n                    \nbreak\n;\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \nwhile\n(\nj\n \n!=\n \nwords\n[\ni\n].\nsize\n()\n \n-\n \n1\n \n&&\n \nwords\n[\ni\n][\nj\n \n+\n \n1\n]\n \n==\n \nwords\n[\ni\n][\nj\n])\n \n//\u627e\u51fa\u5728word\u4e2d\uff0c\u76f8\u9023\u4e00\u6a23\u7684\u7d44\u6210\u4e00\u7fa4\u7684\u9577\u5ea6\n\n                    \n{\n\n                        \nj\n++\n;\n\n                        \ngroup_len\n++\n;\n\n                    \n}\n\n                    \nwhile\n(\n1\n)\n \n//able to extend\n\n                    \n{\n\n                        \nif\n(\nwords\n[\ni\n][\nj\n]\n \n==\n \nstr\n[\nk\n])\n//\u5ef6\u4f38\n\n                        \n{\n\n                            \nk\n++\n;\n\n                            \nextend_len\n++\n;\n\n                        \n}\n\n                        \nelse\n \n//\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa\n\n                        \n{\n\n                            \n// can = 0; \u9019\u500bcan = 0\u4e0d\u53ef\u4ee5\u52a0\uff0c\u56e0\u70ba\u9019\u662f\u518d\u5ef6\u6df1\u5f8c\u5224\u65b7\u8df3\u51fa\u7684\u689d\u4ef6\uff0c\u4e26\u4e0d\u662f\u767c\u73femismatch\n\n                            \nbreak\n;\n\n                        \n}\n\n                    \n}\n\n\n                    \n//last character extend\n\n                    \nwhile\n(\nk\n \n<\n \nstr\n.\nsize\n()\n \n&&\n \nj\n \n==\n \nwords\n[\ni\n].\nsize\n()\n-\n1\n)\n \n//\u7d50\u5c3e\u7279\u4f8b\uff0c\u7e7c\u7e8c\u5ef6\u4f38\n\n                    \n{\n\n                        \nif\n(\nwords\n[\ni\n][\nj\n]\n \n==\n \nstr\n[\nk\n])\n \n//\u5ef6\u4f38\n\n                        \n{\n\n                            \nk\n++\n;\n\n                            \nextend_len\n++\n;\n\n                        \n}\n\n                        \nelse\n \n//\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa\n\n                        \n{\n\n                            \ncan\n \n=\n \n0\n;\n \n//\u5728\u6b64\u7684can \u4fbf\u8981\u52a0\u5165 = 0 \u4f8b\u5982 target = abcd \u4f46\u662f word = abc \u800c \u6b64\u6642j\u6703\u5361\u5728size - 1 \u4e4b\u5f8ck\u7e7c\u7e8c\u8d70\u5230d\u767c\u73fe\u4e0d\u4e00\u6a23\u4fbf\u662f\u7121\u6cd5\u7d44\u6210\n\n                            \nbreak\n;\n\n                        \n}\n\n                    \n}\n\n\n                    \nif\n(\nextend_len\n \n<\n \ngroup_len\n)\n \n//\u82e5\u5ef6\u4f38\u7684\u9577\u5ea6\u5c0f\u65bc\u539f\u672c\u9577\u5ea6\u4e5f\u4e0d\u884c\n\n                    \n{\n\n                        \ncan\n \n=\n \n0\n;\n\n                        \nbreak\n;\n\n                    \n}\n\n\n                    \nif\n(\nextend_len\n \n>=\n \n3\n)\n \n//if extend, should >=3 (as a group per unit)\n\n                    \n{\n\n                        \ntotal_len\n \n+=\n \nextend_len\n \n-\n \ngroup_len\n \n;\n \n// aa\u5ef6\u4f38\u6210 aaaa \u5ef6\u4f38\u7684\u9577\u5ea6\u70ba 2 \u800c\u975e 4 \u6545\u8981\u6263\u9664\u672c\u8eab\u7fa4\u7d44\u9577\u5ea6\n\n                    \n}\n\n                    \nj\n++\n;\n\n                \n}\n\n            \n}\n\n            \nif\n(\ntotal_len\n \n!=\n \nstr\n.\nsize\n())\n \n//\u82e5\u6700\u5f8c\u4f9d\u7136\u9577\u5ea6\u9644\u7b49\uff0c\u4e5f\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6545can=0\n\n            \n{\n\n                \ncan\n \n=\n \n0\n;\n\n            \n}\n\n            \nif\n(\ncan\n)\n\n            \n{\n\n                \nres\n++\n;\n\n            \n}\n\n        \n}\n\n        \nreturn\n \nres\n;\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\nPC. \n808. Soup Servings\n \u6709\u9ede\u96e3\u89c0\u5bdf\u51fa\u898f\u5f8b\u7684\u52d5\u614b\u898f\u5283\u984c",
            "title": "WC78"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#leetcode_oj-wc76",
            "text": "Contest time: Apr 1, 2018",
            "title": "leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#pa-811-subdomain-visit-count-substr-map",
            "text": "\u601d\u8def\uff1a\u7c21\u55ae\u7684\u6c34\u984c\uff0c\u7528substr\u88c1\u5207\u7db2\u57df\u540d\u7a31\u5f8c\u518dhash\u5230\u7d71\u8a08\u6578\u5b57\uff0c\u4ee5stoi\u51fd\u6578\u4f86\u5c07string\u7684\u6578\u5b57\u8f49\u6210\u7d71\u8a08\u503c  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 #define FORI(n) for(int i = 0; i < n; ++ i)  #define pb push_back  class   Solution  {  public : \n     vector < string >   subdomainVisits ( vector < string >&   cpdomains ) \n     { \n         map < string   , int >   mymap ; \n         vector < vector   < int >   >   dotpos ; \n         vector < int >   visit ;   //each domain visit \n         dotpos . resize ( cpdomains . size ()); \n         //cpdomains[i].size() - 1 \n         FORI ( cpdomains . size ()) \n         { \n             for ( int   j   =   cpdomains [ i ]. size ()   -   1 ;   j   >=   0 ;   j -- ) \n             { \n                 if ( cpdomains [ i ][ j ]   ==   '.' ) \n                 { \n                     dotpos [ i ]. pb ( j ); \n                 } \n                 else   if ( cpdomains [ i ][ j ]   ==   ' ' ) \n                 { \n                     dotpos [ i ]. pb ( j ); \n                     break ; \n                 } \n             } \n         }   //subdomain pos \n         string   tmp ; \n         FORI ( cpdomains . size ()) \n         { \n             for ( int   j   =   0 ;   j   <   cpdomains [ i ]. size ();   j ++ ) \n             { \n                 if ( cpdomains [ i ][ j ]   ==   ' ' ) \n                 { \n                     tmp   =   cpdomains [ i ]. substr ( 0 , j   +   1 ); \n                     int   tmp2   =   stoi ( tmp ); \n                     visit . pb ( tmp2 ); \n                     break ; \n                 } \n             } \n         }   //times \n         int   poscnt   =   0 ; \n         FORI ( cpdomains . size ()) \n         { \n             for ( int   j   =   0 ;   j   <   dotpos [ i ]. size ();   j ++ ) \n             { \n                 tmp   =   cpdomains [ i ]. substr ( dotpos [ i ][ j ]   +   1 ,   cpdomains [ i ]. size ()   -   dotpos [ i ][ j ]   +   1 ); \n                 mymap [ tmp ]   +=   visit [ i ]; \n             } \n         } //accumulate \n\n         vector < string >   res ; \n         string   timestr ; \n         for ( map < string ,   int >:: iterator   it   =   mymap . begin ();   it   !=   mymap . end ();   ++ it ) \n         { \n             timestr   =   to_string ( it -> second ); \n             res . pb ( timestr   +   \" \"   +   it -> first ); \n         } \n         return   res ; \n     }  };",
            "title": "PA. 811. Subdomain Visit Count substr + map \u6d3b\u7528\u6c34\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#pb809-expressive-words",
            "text": "\u601d\u8def\uff1a\u4e0d\u7b97\u96e3\u7684\u984c\u76ee\uff0c\u53ea\u662f\u984c\u76ee\u6709\u9ede\u542b\u7cca\u4e0d\u597d\u61c2\uff0c\u5be6\u969b\u4e0a\u610f\u601d\u70ba \u82e5\u4ee5word\u7684char\u4f86\u5ef6\u4f38\u6210\u529f\uff08\u5ef6\u4f38\u6210\u529f\u7684\u5b9a\u7fa9\u70ba\uff1a\u4e26\u5217\u7684char\u9054\u5230\u4e09\u500b\u4ee5\u4e0a\uff09\"\u4e26\u4e14\" \u7d93\u7531\u6210\u529f\u5ef6\u4f38\u7684char\n\u6700\u5f8c\u80fd\u9054\u5230\u76ee\u6a19\u5b57\u4e32\uff0c\u4fbf\u662f\u4e00\u500bexpressive word\u8f49\u63db\n\u4f8b\u5982\uff1adddiiiinnssssssoooo \u82e5\u70ba\u76ee\u6a19\u5b57\u4e32\n\u5247 dinnsoo \u53ef\u4ee5 \u56e0\u70ba d+dd(\u5ef6\u4f38\u9054\u52303) i+iii(\u5ef6\u4f38\u9054\u52304) nn=nn s+sssss(\u5ef6\u4f38\u9054\u52306) o+ooo(\u5ef6\u4f38\u9054\u52304) \u6700\u5f8c\u80fd\u7d44\u6210\u76ee\u6a19\u5b57\u4e32\nddinnso\u4e5f\u53ef(\u7576\u521d\u4ee5\u70ba\u8981dd\u8996\u70ba\u4e00\u7d44\u4f86\u5ef6\u795e \uff0c\u800cddd / dd \u53ea\u67091.5\u500d\u4e0d\u884c\uff0c\u7136\u800c\u984c\u76ee\u53ea\u8981\u6c42\u5ef6\u4f38\uff0c\u56e0\u6b64\u4e5f\u80fd\u7528\u55ae\u4e00\u5b57\u5143\u6e4a\u6210\uff0c\u662f\u6545\u4ee5\u55ae\u4e00\u5b57\u5143\u5ef6\u4f38\u662f\u4e00\u7a2e\u4fdd\u96aa\u7684\u4f5c\u6cd5)   \u53c8\u5982 ddinsoo\u4fbf\u4e0d\u884c\uff0c\u4e43\u662f\u65bc n+n\u53ea\u5ef6\u4f38\u4e86\u5169\u6b21\uff0c\u7121\u6cd5\u9054\u9663\uff0c\u56e0\u6b64\u52e2\u5fc5\u7121\u6cd5\u505a\u6210\u539f\u672c\u7684\u76ee\u6a19\u5b57\u4e32\u800c\u653e\u68c4\u3002  \u7528\u4e0a\u8ff0\u7684\u60f3\u6cd5\u4fbf\u80fd\u5beb\u51fa\u4ee5\u4e0bac\u4ee3\u78bc   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 #define FORI(n) for(int i = 0; i < n; ++ i)  #define pb push_back  class   Solution  {  public : \n     int   expressiveWords ( string   str ,   vector < string >&   words ) \n     { \n         int   res   =   0 ,   can   =   0 ,   cnt   =   0 ,   total_len   =   0 ,   extend_len   =   0 ,   group_len ; \n         for ( int   i   =   0 ; i   <   words . size (); i ++ ) \n         { \n             can   =   1 ;   //can --> \u53ef\u5ef6\u4f38\u6e4a\u51fa\u7d50\u679c \n             int   k   =   0 ; \n             total_len   =   words [ i ]. size ();   //\u7b2ci\u500b\u6aa2\u6e2cword\u7684\u9577\u5ea6 \n             for ( int   j   =   0 ; j   <   words [ i ]. size ();) \n             { \n                 extend_len   =   0 ; \n                 group_len   =   1 ; \n                 if ( words [ i ][ j ]   !=   str [ k ]) \n                 { \n                     can   =   0 ;   //\u82e5\u6709\u4e0d\u4e00\u6a23\u7684\uff0c\u52e2\u5fc5\u7121\u6cd5\u6e4a\u6210\uff0c \n                     break ; \n                 } \n                 else \n                 { \n                     while ( j   !=   words [ i ]. size ()   -   1   &&   words [ i ][ j   +   1 ]   ==   words [ i ][ j ])   //\u627e\u51fa\u5728word\u4e2d\uff0c\u76f8\u9023\u4e00\u6a23\u7684\u7d44\u6210\u4e00\u7fa4\u7684\u9577\u5ea6 \n                     { \n                         j ++ ; \n                         group_len ++ ; \n                     } \n                     while ( 1 )   //able to extend \n                     { \n                         if ( words [ i ][ j ]   ==   str [ k ]) //\u5ef6\u4f38 \n                         { \n                             k ++ ; \n                             extend_len ++ ; \n                         } \n                         else   //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa \n                         { \n                             // can = 0; \u9019\u500bcan = 0\u4e0d\u53ef\u4ee5\u52a0\uff0c\u56e0\u70ba\u9019\u662f\u518d\u5ef6\u6df1\u5f8c\u5224\u65b7\u8df3\u51fa\u7684\u689d\u4ef6\uff0c\u4e26\u4e0d\u662f\u767c\u73femismatch \n                             break ; \n                         } \n                     } \n\n                     //last character extend \n                     while ( k   <   str . size ()   &&   j   ==   words [ i ]. size () - 1 )   //\u7d50\u5c3e\u7279\u4f8b\uff0c\u7e7c\u7e8c\u5ef6\u4f38 \n                     { \n                         if ( words [ i ][ j ]   ==   str [ k ])   //\u5ef6\u4f38 \n                         { \n                             k ++ ; \n                             extend_len ++ ; \n                         } \n                         else   //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa \n                         { \n                             can   =   0 ;   //\u5728\u6b64\u7684can \u4fbf\u8981\u52a0\u5165 = 0 \u4f8b\u5982 target = abcd \u4f46\u662f word = abc \u800c \u6b64\u6642j\u6703\u5361\u5728size - 1 \u4e4b\u5f8ck\u7e7c\u7e8c\u8d70\u5230d\u767c\u73fe\u4e0d\u4e00\u6a23\u4fbf\u662f\u7121\u6cd5\u7d44\u6210 \n                             break ; \n                         } \n                     } \n\n                     if ( extend_len   <   group_len )   //\u82e5\u5ef6\u4f38\u7684\u9577\u5ea6\u5c0f\u65bc\u539f\u672c\u9577\u5ea6\u4e5f\u4e0d\u884c \n                     { \n                         can   =   0 ; \n                         break ; \n                     } \n\n                     if ( extend_len   >=   3 )   //if extend, should >=3 (as a group per unit) \n                     { \n                         total_len   +=   extend_len   -   group_len   ;   // aa\u5ef6\u4f38\u6210 aaaa \u5ef6\u4f38\u7684\u9577\u5ea6\u70ba 2 \u800c\u975e 4 \u6545\u8981\u6263\u9664\u672c\u8eab\u7fa4\u7d44\u9577\u5ea6 \n                     } \n                     j ++ ; \n                 } \n             } \n             if ( total_len   !=   str . size ())   //\u82e5\u6700\u5f8c\u4f9d\u7136\u9577\u5ea6\u9644\u7b49\uff0c\u4e5f\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6545can=0 \n             { \n                 can   =   0 ; \n             } \n             if ( can ) \n             { \n                 res ++ ; \n             } \n         } \n         return   res ; \n     }  };",
            "title": "PB.809. Expressive Words \u5b57\u4e32\u96d9\u6307\u6a19\u63a8\u7406\u89c0\u5bdf\u984c"
        },
        {
            "location": "/programming_practice/leetcode_OJ/WC78/#pc-808-soup-servings",
            "text": "",
            "title": "PC. 808. Soup Servings \u6709\u9ede\u96e3\u89c0\u5bdf\u51fa\u898f\u5f8b\u7684\u52d5\u614b\u898f\u5283\u984c"
        },
        {
            "location": "/univ_notes/cs_project/cs_proj/",
            "text": "CS Graduation Project Meeting\n\n\nMar 7, 2018 bootcamp\n\n\nWelcome to coVis lab\n\n\u76f8\u6a5f\u53c3\u6578\uff0c\u5167\u5916\u90e8\u53c3\u6578\uff0c\u5f71\u50cf\u8207\u76f8\u6a5f\u6821\u6b63\uff0c\u5728\u7121\u4eba\u6a5f\u5132\u5b58\u4e09\u570d\u7a7a\u9593\u5f71\u50cf\u6703\u7528\u5230 \n\n\nMar 14, 2018 bootcamp",
            "title": "CS Graduation Project"
        },
        {
            "location": "/univ_notes/cs_project/cs_proj/#cs-graduation-project-meeting",
            "text": "",
            "title": "CS Graduation Project Meeting"
        },
        {
            "location": "/univ_notes/cs_project/cs_proj/#mar-7-2018-bootcamp",
            "text": "Welcome to coVis lab \n\u76f8\u6a5f\u53c3\u6578\uff0c\u5167\u5916\u90e8\u53c3\u6578\uff0c\u5f71\u50cf\u8207\u76f8\u6a5f\u6821\u6b63\uff0c\u5728\u7121\u4eba\u6a5f\u5132\u5b58\u4e09\u570d\u7a7a\u9593\u5f71\u50cf\u6703\u7528\u5230",
            "title": "Mar 7, 2018 bootcamp"
        },
        {
            "location": "/univ_notes/cs_project/cs_proj/#mar-14-2018-bootcamp",
            "text": "",
            "title": "Mar 14, 2018 bootcamp"
        }
    ]
}
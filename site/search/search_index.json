{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to alfons0329's Blog About Me Education BS in Dept. of Computer Science at National Chaio Tung University Taiwan (Sep 2015 - Jun 2019) --- Qualified for Exchange Student in School of Computer Science, Carnegie Mellon University MS in Graduate Institute of Computer Science at National Taiwan University (Expected Sep 2019 - Jun 2021) Interested in AI, Machine Learning, Computer Security, Parallel Programming,and System-Related Topics. Started to learn programming in Oct. 2015 from no background knowledge. Related link [ Curriculum Vitae | Resume | GitHub page | LinkedIn page | Mail me ] Language abilities TOEIC 925(L480 R445) and TOEFL iBT102(26/28/23/25) both on first attempt. Japanese JLPT N3(Intermediate level) on Dec. 2018, scored 116/180 with only 5 days of preparation in first attempt. Leisure activities Photography, with Fujifilm X-T20, XF1855 and XC50230 OIS II Swimming, jogging, weight lifting, and cycling Gaming Music game: jubeat, REFLEC BEAT, Taiko no Tatsujin, osu(Catch the Beat Rank 3 rd in Taiwan and 49 in world in 2010) Racing game: kartrider Playing piano","title":"Home"},{"location":"#welcome-to-alfons0329s-blog","text":"","title":"Welcome to alfons0329's Blog"},{"location":"#about-me","text":"","title":"About Me"},{"location":"#education","text":"BS in Dept. of Computer Science at National Chaio Tung University Taiwan (Sep 2015 - Jun 2019) --- Qualified for Exchange Student in School of Computer Science, Carnegie Mellon University MS in Graduate Institute of Computer Science at National Taiwan University (Expected Sep 2019 - Jun 2021) Interested in AI, Machine Learning, Computer Security, Parallel Programming,and System-Related Topics. Started to learn programming in Oct. 2015 from no background knowledge.","title":"Education"},{"location":"#related-link","text":"[ Curriculum Vitae | Resume | GitHub page | LinkedIn page | Mail me ]","title":"Related link"},{"location":"#language-abilities","text":"TOEIC 925(L480 R445) and TOEFL iBT102(26/28/23/25) both on first attempt. Japanese JLPT N3(Intermediate level) on Dec. 2018, scored 116/180 with only 5 days of preparation in first attempt.","title":"Language abilities"},{"location":"#leisure-activities","text":"Photography, with Fujifilm X-T20, XF1855 and XC50230 OIS II Swimming, jogging, weight lifting, and cycling Gaming Music game: jubeat, REFLEC BEAT, Taiko no Tatsujin, osu(Catch the Beat Rank 3 rd in Taiwan and 49 in world in 2010) Racing game: kartrider Playing piano","title":"Leisure activities"},{"location":"move_domain/mv/","text":"\u7528Cloudflare DNS\u670d\u52d9\u5c07Custom domain \u7528\u5728\u81ea\u5df1GitHub\u90e8\u843d\u683c\uff0c\u4e26\u52a0\u4e0aHTTPS \u5148\u5099 GitHub account \u5df2\u7d93\u8cb7\u597d\u7684Domain name\uff08\u5728\u6b64\u4ee5 Gandi\u7db2\u57df\u670d\u52d9\u70ba\u4f8b\uff09 Cloudflare account Github \u8a2d\u5b9a CNAME(\u8981\u5148\u8fa6\u597dgithub page\uff0c\u4e0d\u77e5\u9053\u5982\u4f55\u8a2d\u5b9a\u7684\u53ef\u4ee5\u81ea\u884cGoogle\u4e00\u4e0b) \u9ede Settings Custom domain \u53ef\u4ee5\u5728\u88e1\u9762\u6253\u4e0a\u81ea\u5df1\u559c\u6b61\u7684 domain name \u800c\u7576\u700f\u89bdgithub page \u5c31\u6703\u63db\u9023\u5230\u81ea\u5df1\u81ea\u8a02\u7684\u7db2\u5740\u800c\u975egithub page \u6253\u5165\u81ea\u5df1\u7684\u7db2\u57df \u9023\u5230 Cloudflare \u5275\u5e33\u865f\uff08\u5f88\u7c21\u55ae\uff0c\u53ea\u8981\u5e33\u865f\u5bc6\u78bc\u4e0d\u7528\u592a\u591a\u96dc\u9805\u8cc7\u6599\uff09\u5f8c\uff0c\u9ede + Add site Add your site \u5373\u53ef\u6253\u5165\u4f60\u60f3\u8981\u7684\u7db2\u57df\u56c9","title":"\u7528Cloudflare DNS\u670d\u52d9\u5c07Custom domain \u7528\u5728\u81ea\u5df1GitHub\u90e8\u843d\u683c\uff0c\u4e26\u52a0\u4e0aHTTPS"},{"location":"move_domain/mv/#cloudflare-dnscustom-domain-githubhttps","text":"","title":"\u7528Cloudflare DNS\u670d\u52d9\u5c07Custom domain \u7528\u5728\u81ea\u5df1GitHub\u90e8\u843d\u683c\uff0c\u4e26\u52a0\u4e0aHTTPS"},{"location":"move_domain/mv/#_1","text":"GitHub account \u5df2\u7d93\u8cb7\u597d\u7684Domain name\uff08\u5728\u6b64\u4ee5 Gandi\u7db2\u57df\u670d\u52d9\u70ba\u4f8b\uff09 Cloudflare account","title":"\u5148\u5099"},{"location":"move_domain/mv/#github-cnamegithub-pagegoogle","text":"\u9ede Settings Custom domain \u53ef\u4ee5\u5728\u88e1\u9762\u6253\u4e0a\u81ea\u5df1\u559c\u6b61\u7684 domain name \u800c\u7576\u700f\u89bdgithub page \u5c31\u6703\u63db\u9023\u5230\u81ea\u5df1\u81ea\u8a02\u7684\u7db2\u5740\u800c\u975egithub page","title":"Github \u8a2d\u5b9a CNAME(\u8981\u5148\u8fa6\u597dgithub page\uff0c\u4e0d\u77e5\u9053\u5982\u4f55\u8a2d\u5b9a\u7684\u53ef\u4ee5\u81ea\u884cGoogle\u4e00\u4e0b)"},{"location":"move_domain/mv/#_2","text":"\u9023\u5230 Cloudflare \u5275\u5e33\u865f\uff08\u5f88\u7c21\u55ae\uff0c\u53ea\u8981\u5e33\u865f\u5bc6\u78bc\u4e0d\u7528\u592a\u591a\u96dc\u9805\u8cc7\u6599\uff09\u5f8c\uff0c\u9ede + Add site Add your site \u5373\u53ef\u6253\u5165\u4f60\u60f3\u8981\u7684\u7db2\u57df\u56c9","title":"\u6253\u5165\u81ea\u5df1\u7684\u7db2\u57df"},{"location":"programming_practice/Hackerrank/ipk_arr/","text":"Interview Preparation Kit, Array Left rotation Thought: Rotate as intuition, but note that if index - rot_cnt (which is d) then the position should be size - (rot_cnt - index) Analysis: Time complexityL O(N) Space complexity: O(N) // Complete the rotLeft function below. vector int rotLeft ( vector int a , int d ) { int n = a . size (); vector int res ( n , 0 ); for ( int i = 0 ; i n ; i ++ ) { if ( i - d 0 ) { res [ n + ( i - d )] = a [ i ]; } else { res [( i - d ) % n ] = a [ i ]; } } return res ; } Subset I Thought: There are up to 2^N possibilities, brute force will definitely failed. Since it counts up to 2^N Analysis: Time complexity O(N * 2 ^ N), where N is the cardinality of set, we check all 2 ^ N possibles and use bit manipulation (right shift up to length N in binary represenation). Space complexity: O(2 ^ N), store all the possible subsets. class Solution { public : vector vector int subsets ( vector int nums ) { int n = nums . size (); int m = 1 n , cnt = 0 , i = 0 ; vector vector int res ( 0 , vector int ()); vector int tmp ; while ( -- m ) { cnt = 0 ; i = m ; while ( i 0 ) { if ( i 1 ) { tmp . push_back ( nums [ nums . size () - cnt - 1 ]); } cnt ++ ; i = 1 ; //shift right to check the next occurance } res . push_back ( tmp ); tmp . clear (); } tmp . clear (); res . push_back ( tmp ); //including the empty one return res ; } };","title":"Array"},{"location":"programming_practice/Hackerrank/ipk_arr/#interview-preparation-kit-array","text":"","title":"Interview Preparation Kit, Array"},{"location":"programming_practice/Hackerrank/ipk_arr/#left-rotation","text":"Thought: Rotate as intuition, but note that if index - rot_cnt (which is d) then the position should be size - (rot_cnt - index) Analysis: Time complexityL O(N) Space complexity: O(N) // Complete the rotLeft function below. vector int rotLeft ( vector int a , int d ) { int n = a . size (); vector int res ( n , 0 ); for ( int i = 0 ; i n ; i ++ ) { if ( i - d 0 ) { res [ n + ( i - d )] = a [ i ]; } else { res [( i - d ) % n ] = a [ i ]; } } return res ; }","title":"Left rotation"},{"location":"programming_practice/Hackerrank/ipk_arr/#subset-i","text":"Thought: There are up to 2^N possibilities, brute force will definitely failed. Since it counts up to 2^N Analysis: Time complexity O(N * 2 ^ N), where N is the cardinality of set, we check all 2 ^ N possibles and use bit manipulation (right shift up to length N in binary represenation). Space complexity: O(2 ^ N), store all the possible subsets. class Solution { public : vector vector int subsets ( vector int nums ) { int n = nums . size (); int m = 1 n , cnt = 0 , i = 0 ; vector vector int res ( 0 , vector int ()); vector int tmp ; while ( -- m ) { cnt = 0 ; i = m ; while ( i 0 ) { if ( i 1 ) { tmp . push_back ( nums [ nums . size () - cnt - 1 ]); } cnt ++ ; i = 1 ; //shift right to check the next occurance } res . push_back ( tmp ); tmp . clear (); } tmp . clear (); res . push_back ( tmp ); //including the empty one return res ; } };","title":"Subset I"},{"location":"programming_practice/Hackerrank/ipk_dic_hash/","text":"Interview preparation kit, Dictionaries and Hashmaps Sherlok and Anagrams Thought 1(TLE): Brute force to find all the possible substring pair of length from 1 to n where n is the given string length. Analysis: Time complexity: O(N^4) Space complexity: O(N), although it seems to be a nested loop and calls the function check_anagram n times, the time complexity is actually N. Since in function call the memory will be allocated in stack, after the call ends, it will be released (may think of recursion stack overflow to understand this), each allocate in stack is up to length N of the string, and being released later, thus won't grow up to N^2 // Complete the sherlockAndAnagrams function below. ie how many pairs of substring anagrams?? bool check_anagram ( string s1 , string s2 ) { unordered_map char , int mp1 ; int n = s1 . size (); for ( int i = 0 ; i n ; i ++ ) // stat data for string 1 { mp1 [ s1 [ i ]] ++ ; } for ( int i = 0 ; i n ; i ++ ) // use data from string 2 to decrease the frequency of characters, if all are zero, then anagrams are matched. { mp1 [ s2 [ i ]] -- ; } for ( unordered_map char , int :: iterator it = mp1 . begin (); it != mp1 . end (); it ++ ) { if ( it - second 0 ) { return false ; } } return true ; } int sherlockAndAnagrams ( string s ) { int n = s . size (), res = 0 ; string s1 , s2 ; unordered_map char , int fmap ; for ( int i = 0 ; i n ; i ++ ) // calculate len = 1 first and use n * (n - 1) / 2 to save time { fmap [ s [ i ]] ++ ; } for ( unordered_map char , int :: iterator it = fmap . begin (); it != fmap . end (); it ++ ) { res += it - second * ( it - second - 1 ) / 2 ; } for ( int i = 2 ; i = n ; i ++ ) // brute force finding the substring pairds starting from len 1 to len size - 1 { for ( int j = 0 ; j n ; j ++ ) { if ( j + i - 1 = n ) { break ; } else { s1 = s . substr ( j , i ); // master string for ( int k = j + 1 ; k + i - 1 n ; k ++ ) { s2 = s . substr ( k , i ); if ( check ( s1 , s2 )) { res ++ ; } } } } } printf ( res %d \\n , res ); return res ; } Fault: The idea is too brute force, N^4 does take lots of time. Thought 2(AC, optimized from thought 1): When we got some substrings that forms a group for anagram, such as [abc, cba, bac]. We don't actually need to select each by each to count the occurances. Due to the same group of anagram, 2 of them makes a pair, by using the combinatoric method , such that C(num_of_elements, 2) is the answer. More detailed explanations are written in the comment section of the following code. Analysis: Time complexity: O(N^3 log N) Space complexity: O(N^2) due to storing the combinations of substrings in one main string. int sherlockAndAnagrams ( string s ) { int sz = s . size (), res = 0 ; string s1 ; unordered_map char , int map_1 ; unordered_map string , int map_2 ; for ( int i = 0 ; i sz ; i ++ ) // calculate len = 1 first and use n * (n - 1) / 2 to save time { map_1 [ s [ i ]] ++ ; } for ( unordered_map char , int :: iterator it = map_1 . begin (); it != map_1 . end (); it ++ ) { res += it - second * ( it - second - 1 ) / 2 ; } for ( int i = 2 ; i = sz ; i ++ ) { for ( int j = 0 ; j sz ; j ++ ) { if ( j + i - 1 = sz ) { break ; } else { s1 = s . substr ( j , i ); // master string sort ( s1 . begin (), s1 . end ()); map_2 [ s1 ] ++ ; } } } for ( unordered_map string , int :: iterator it = map_2 . begin (); it != map_2 . end (); it ++ ) { res += it - second * ( it - second - 1 ) / 2 ; } printf ( res %d \\n , res ); return res ; }","title":"Dictionaries and Hashmaps"},{"location":"programming_practice/Hackerrank/ipk_dic_hash/#interview-preparation-kit-dictionaries-and-hashmaps","text":"","title":"Interview preparation kit, Dictionaries and Hashmaps"},{"location":"programming_practice/Hackerrank/ipk_dic_hash/#sherlok-and-anagrams","text":"Thought 1(TLE): Brute force to find all the possible substring pair of length from 1 to n where n is the given string length. Analysis: Time complexity: O(N^4) Space complexity: O(N), although it seems to be a nested loop and calls the function check_anagram n times, the time complexity is actually N. Since in function call the memory will be allocated in stack, after the call ends, it will be released (may think of recursion stack overflow to understand this), each allocate in stack is up to length N of the string, and being released later, thus won't grow up to N^2 // Complete the sherlockAndAnagrams function below. ie how many pairs of substring anagrams?? bool check_anagram ( string s1 , string s2 ) { unordered_map char , int mp1 ; int n = s1 . size (); for ( int i = 0 ; i n ; i ++ ) // stat data for string 1 { mp1 [ s1 [ i ]] ++ ; } for ( int i = 0 ; i n ; i ++ ) // use data from string 2 to decrease the frequency of characters, if all are zero, then anagrams are matched. { mp1 [ s2 [ i ]] -- ; } for ( unordered_map char , int :: iterator it = mp1 . begin (); it != mp1 . end (); it ++ ) { if ( it - second 0 ) { return false ; } } return true ; } int sherlockAndAnagrams ( string s ) { int n = s . size (), res = 0 ; string s1 , s2 ; unordered_map char , int fmap ; for ( int i = 0 ; i n ; i ++ ) // calculate len = 1 first and use n * (n - 1) / 2 to save time { fmap [ s [ i ]] ++ ; } for ( unordered_map char , int :: iterator it = fmap . begin (); it != fmap . end (); it ++ ) { res += it - second * ( it - second - 1 ) / 2 ; } for ( int i = 2 ; i = n ; i ++ ) // brute force finding the substring pairds starting from len 1 to len size - 1 { for ( int j = 0 ; j n ; j ++ ) { if ( j + i - 1 = n ) { break ; } else { s1 = s . substr ( j , i ); // master string for ( int k = j + 1 ; k + i - 1 n ; k ++ ) { s2 = s . substr ( k , i ); if ( check ( s1 , s2 )) { res ++ ; } } } } } printf ( res %d \\n , res ); return res ; } Fault: The idea is too brute force, N^4 does take lots of time. Thought 2(AC, optimized from thought 1): When we got some substrings that forms a group for anagram, such as [abc, cba, bac]. We don't actually need to select each by each to count the occurances. Due to the same group of anagram, 2 of them makes a pair, by using the combinatoric method , such that C(num_of_elements, 2) is the answer. More detailed explanations are written in the comment section of the following code. Analysis: Time complexity: O(N^3 log N) Space complexity: O(N^2) due to storing the combinations of substrings in one main string. int sherlockAndAnagrams ( string s ) { int sz = s . size (), res = 0 ; string s1 ; unordered_map char , int map_1 ; unordered_map string , int map_2 ; for ( int i = 0 ; i sz ; i ++ ) // calculate len = 1 first and use n * (n - 1) / 2 to save time { map_1 [ s [ i ]] ++ ; } for ( unordered_map char , int :: iterator it = map_1 . begin (); it != map_1 . end (); it ++ ) { res += it - second * ( it - second - 1 ) / 2 ; } for ( int i = 2 ; i = sz ; i ++ ) { for ( int j = 0 ; j sz ; j ++ ) { if ( j + i - 1 = sz ) { break ; } else { s1 = s . substr ( j , i ); // master string sort ( s1 . begin (), s1 . end ()); map_2 [ s1 ] ++ ; } } } for ( unordered_map string , int :: iterator it = map_2 . begin (); it != map_2 . end (); it ++ ) { res += it - second * ( it - second - 1 ) / 2 ; } printf ( res %d \\n , res ); return res ; }","title":"Sherlok and Anagrams"},{"location":"programming_practice/Hackerrank/ipk_dp/","text":"Interview preparation kit, Dynamic Programming Max Array Sum Thought: Each of the dp[i] represent the maximum array sum in arr[0:1] (start side and end side are both included), consider each of the element in array, there will be 2 possibilities, hence the subproblem for DP (1) If we include this element, then the maximum subset [0:i] sum will be arr[i - 2] + arr[i] due to denial of adjacent numbers in subset. (2) If we do not want such element, then the maximum subset [0:i] sum will be arr[i - 1], i.e. querying the closest answer. Note: It is usually hard to directly come up with a DP transformation function, rather it will be easier to come up with a recursive / search solution first. Sometimes, padding is needed, do not forget! Analysis: Time complexity:O(N) Space complexity: O(N) for the DP array int maxSubsetSum ( vector int arr ) { int res , n = arr . size (); vector int dp ( n + 2 , 0 ); // for padding // starting from 0 for ( int i = 2 ; i n + 2 ; i ++ ) { dp [ i ] = max ( dp [ i - 2 ] + arr [ i - 2 /*shift padding*/ ], dp [ i - 1 ]); } return dp . back (); } Candies Thought: through the following steps (1) We can simply see that, the amount of candies each student receives depends on the amount of neighbor's candies, hence the subproblem for DP Collecting the statistical data of \"how many CONTINUOUS LOWER ELEMENT\" on either the left or right side? (2) Iterate the whole array, the minimum candies that this student requires is max(left_continuous_lower[i], right_continuous_lower[i]) + 1(at least one candy for each student) Think the mountain as an example: Score 1 2 3 4 3 2 1 Left cnt lower 0 1 2 3 0 0 0 Right cnt lower 0 0 0 3 2 1 0 Explanation: for student 3(0 base), he should get 3 (+ 1) cadies as minimum since there is 3 continuous less element on the left side and so is right, assigning 1 to the leftmost and rightmost element, we will get the optimum solution being: 1 2 3 4 3 2 1 Analysis: Time complexity: O(N) Space complexity: O(N) for the DP array long candies ( int n , vector int arr ) { int m = arr . size (); vector ull left_cont_less_cnt ( m , 0 ); vector ull right_cont_less_cnt ( m , 0 ); // init, step (1) for ( int i = 0 ; i m - 1 ; i ++ ) { if ( arr [ i ] arr [ i + 1 ]) { left_cont_less_cnt [ i + 1 ] = left_cont_less_cnt [ i ] + 1 ; } } for ( int i = m - 1 ; i = 1 ; i -- ) { if ( arr [ i - 1 ] arr [ i ]) { right_cont_less_cnt [ i - 1 ] = right_cont_less_cnt [ i ] + 1 ; } } // dp process, step (2) ull res = 0 ; for ( int i = 0 ; i m ; i ++ ) { res += max ( left_cont_less_cnt [ i ], right_cont_less_cnt [ i ]) + 1 ; } return res ; }","title":"Dynamic Programming"},{"location":"programming_practice/Hackerrank/ipk_dp/#interview-preparation-kit-dynamic-programming","text":"","title":"Interview preparation kit, Dynamic Programming"},{"location":"programming_practice/Hackerrank/ipk_dp/#max-array-sum","text":"Thought: Each of the dp[i] represent the maximum array sum in arr[0:1] (start side and end side are both included), consider each of the element in array, there will be 2 possibilities, hence the subproblem for DP (1) If we include this element, then the maximum subset [0:i] sum will be arr[i - 2] + arr[i] due to denial of adjacent numbers in subset. (2) If we do not want such element, then the maximum subset [0:i] sum will be arr[i - 1], i.e. querying the closest answer. Note: It is usually hard to directly come up with a DP transformation function, rather it will be easier to come up with a recursive / search solution first. Sometimes, padding is needed, do not forget! Analysis: Time complexity:O(N) Space complexity: O(N) for the DP array int maxSubsetSum ( vector int arr ) { int res , n = arr . size (); vector int dp ( n + 2 , 0 ); // for padding // starting from 0 for ( int i = 2 ; i n + 2 ; i ++ ) { dp [ i ] = max ( dp [ i - 2 ] + arr [ i - 2 /*shift padding*/ ], dp [ i - 1 ]); } return dp . back (); }","title":"Max Array Sum"},{"location":"programming_practice/Hackerrank/ipk_dp/#candies","text":"Thought: through the following steps (1) We can simply see that, the amount of candies each student receives depends on the amount of neighbor's candies, hence the subproblem for DP Collecting the statistical data of \"how many CONTINUOUS LOWER ELEMENT\" on either the left or right side? (2) Iterate the whole array, the minimum candies that this student requires is max(left_continuous_lower[i], right_continuous_lower[i]) + 1(at least one candy for each student) Think the mountain as an example: Score 1 2 3 4 3 2 1 Left cnt lower 0 1 2 3 0 0 0 Right cnt lower 0 0 0 3 2 1 0 Explanation: for student 3(0 base), he should get 3 (+ 1) cadies as minimum since there is 3 continuous less element on the left side and so is right, assigning 1 to the leftmost and rightmost element, we will get the optimum solution being: 1 2 3 4 3 2 1 Analysis: Time complexity: O(N) Space complexity: O(N) for the DP array long candies ( int n , vector int arr ) { int m = arr . size (); vector ull left_cont_less_cnt ( m , 0 ); vector ull right_cont_less_cnt ( m , 0 ); // init, step (1) for ( int i = 0 ; i m - 1 ; i ++ ) { if ( arr [ i ] arr [ i + 1 ]) { left_cont_less_cnt [ i + 1 ] = left_cont_less_cnt [ i ] + 1 ; } } for ( int i = m - 1 ; i = 1 ; i -- ) { if ( arr [ i - 1 ] arr [ i ]) { right_cont_less_cnt [ i - 1 ] = right_cont_less_cnt [ i ] + 1 ; } } // dp process, step (2) ull res = 0 ; for ( int i = 0 ; i m ; i ++ ) { res += max ( left_cont_less_cnt [ i ], right_cont_less_cnt [ i ]) + 1 ; } return res ; }","title":"Candies"},{"location":"programming_practice/Hackerrank/ipk_graph/","text":"Interview preparation kit, Graph Find the Nearest Clone Thought: Run through the following steps (1) Make adjacent list (2) Traverse nodes, mark the current nodes as traversed to prevent stack overflow, if encounter the node of the same color, update the result and set res = 0 for next searching (3) Keep DFS until all the node has been traversed and all the function has been returned Analysis: Time complexity: O(V + E), typical graph dfs traversal Space complexity: O(V + E), storing the edge and node data #include bits/stdc++.h using namespace std ; vector string split_string ( string ); // Complete the findShortest function below. /* * For the unweighted graph, name : * * 1. The number of nodes is name _nodes. * 2. The number of edges is name _edges. * 3. An edge exists between name _from[i] to name _to[i]. * */ void dfs ( vector vector int edges , vector bool visited , vector long ids , int cur_id , int res , int cur_len , int val ) { visited [ cur_id ] = true ; // mark current node as traversed // if the color of current node is what we want, update the result, but NO NEED TO RETURN // since there will be other path not visited, go to the other path will be suitable. int n = edges [ cur_id ]. size (); // how many mnodes are being connected by current node? if ( ids [ cur_id - 1 ] == val cur_len 0 ) { res = min ( res , cur_len ); cur_len = 0 ; // restart from current node for ( int i = 0 ; i n ; i ++ ) { if ( ! visited [ edges [ cur_id ][ i ]]) // if untraversed { dfs ( edges , visited , ids , edges [ cur_id ][ i ], res , cur_len + 1 , val ); } } } else { // keep searching for ( int i = 0 ; i n ; i ++ ) { if ( ! visited [ edges [ cur_id ][ i ]]) // if untraversed { dfs ( edges , visited , ids , edges [ cur_id ][ i ], res , cur_len + 1 , val ); } } } } int findShortest ( int graph_nodes , vector int graph_from , vector int graph_to , vector long ids , int val ) { // init int res = INT_MAX ; int m = graph_from . size (); // edge size int n = ids . size (); // node size vector vector int edges ( n + 1 , vector int ()); // edge relations of node_1 - node_2 - node_3, n + 1 for padding one base unordered_map int , int color_cnt ; vector bool visited ( n + 1 , false ); // make adjacent list for ( int i = 0 ; i m ; i ++ ) { edges [ graph_from [ i ]]. push_back ( graph_to [ i ]); // make the edge relations edges [ graph_to [ i ]]. push_back ( graph_from [ i ]); // make the edge relations } // find the starting node of that color int start_id = - 1 ; for ( int i = 0 ; i n ; i ++ ) { color_cnt [ ids [ i ]] ++ ; if ( ids [ i ] == val ) { start_id = i + 1 ; } } // starting dfs if ( color_cnt [ start_id ] == 1 || start_id == - 1 ) //only one for that color, return -1 directly or no such color { return - 1 ; } dfs ( edges , visited , ids , start_id , res , 0 , val ); printf ( res %d \\n , res == INT_MAX ? - 1 : res ); return res == INT_MAX ? - 1 : res ; }","title":"Graphs"},{"location":"programming_practice/Hackerrank/ipk_graph/#interview-preparation-kit-graph","text":"","title":"Interview preparation kit, Graph"},{"location":"programming_practice/Hackerrank/ipk_graph/#find-the-nearest-clone","text":"Thought: Run through the following steps (1) Make adjacent list (2) Traverse nodes, mark the current nodes as traversed to prevent stack overflow, if encounter the node of the same color, update the result and set res = 0 for next searching (3) Keep DFS until all the node has been traversed and all the function has been returned Analysis: Time complexity: O(V + E), typical graph dfs traversal Space complexity: O(V + E), storing the edge and node data #include bits/stdc++.h using namespace std ; vector string split_string ( string ); // Complete the findShortest function below. /* * For the unweighted graph, name : * * 1. The number of nodes is name _nodes. * 2. The number of edges is name _edges. * 3. An edge exists between name _from[i] to name _to[i]. * */ void dfs ( vector vector int edges , vector bool visited , vector long ids , int cur_id , int res , int cur_len , int val ) { visited [ cur_id ] = true ; // mark current node as traversed // if the color of current node is what we want, update the result, but NO NEED TO RETURN // since there will be other path not visited, go to the other path will be suitable. int n = edges [ cur_id ]. size (); // how many mnodes are being connected by current node? if ( ids [ cur_id - 1 ] == val cur_len 0 ) { res = min ( res , cur_len ); cur_len = 0 ; // restart from current node for ( int i = 0 ; i n ; i ++ ) { if ( ! visited [ edges [ cur_id ][ i ]]) // if untraversed { dfs ( edges , visited , ids , edges [ cur_id ][ i ], res , cur_len + 1 , val ); } } } else { // keep searching for ( int i = 0 ; i n ; i ++ ) { if ( ! visited [ edges [ cur_id ][ i ]]) // if untraversed { dfs ( edges , visited , ids , edges [ cur_id ][ i ], res , cur_len + 1 , val ); } } } } int findShortest ( int graph_nodes , vector int graph_from , vector int graph_to , vector long ids , int val ) { // init int res = INT_MAX ; int m = graph_from . size (); // edge size int n = ids . size (); // node size vector vector int edges ( n + 1 , vector int ()); // edge relations of node_1 - node_2 - node_3, n + 1 for padding one base unordered_map int , int color_cnt ; vector bool visited ( n + 1 , false ); // make adjacent list for ( int i = 0 ; i m ; i ++ ) { edges [ graph_from [ i ]]. push_back ( graph_to [ i ]); // make the edge relations edges [ graph_to [ i ]]. push_back ( graph_from [ i ]); // make the edge relations } // find the starting node of that color int start_id = - 1 ; for ( int i = 0 ; i n ; i ++ ) { color_cnt [ ids [ i ]] ++ ; if ( ids [ i ] == val ) { start_id = i + 1 ; } } // starting dfs if ( color_cnt [ start_id ] == 1 || start_id == - 1 ) //only one for that color, return -1 directly or no such color { return - 1 ; } dfs ( edges , visited , ids , start_id , res , 0 , val ); printf ( res %d \\n , res == INT_MAX ? - 1 : res ); return res == INT_MAX ? - 1 : res ; }","title":"Find the Nearest Clone"},{"location":"programming_practice/Hackerrank/ipk_greed/","text":"Interview preparation kit, Greedy Algorithm Minimum absolute difference in array Thought: No need to brute force , since it emphasizes on the abs diff b/w two numbers, then we can easily sort the whole array, and the diff b/w two consecutive elements will be the minimum. Thought: Time complexity: O(NlogN), due to quick sort (std::sort) Space complexity: O(N), due to quick sort (std::sort) int minimumAbsoluteDifference ( vector int arr ) { int res = INT_MAX , n = arr . size (); sort ( arr . begin (), arr . end ()); for ( int i = 0 ; i n - 1 ; i ++ ) { res = min ( res , ( arr [ i + 1 ] - arr [ i ])); if ( res == 0 ) // zero will be the smallest possible value, just return the answer immediately { return res ; } } return res ; }","title":"Greedy Algorithms"},{"location":"programming_practice/Hackerrank/ipk_greed/#interview-preparation-kit-greedy-algorithm","text":"","title":"Interview preparation kit, Greedy Algorithm"},{"location":"programming_practice/Hackerrank/ipk_greed/#minimum-absolute-difference-in-array","text":"Thought: No need to brute force , since it emphasizes on the abs diff b/w two numbers, then we can easily sort the whole array, and the diff b/w two consecutive elements will be the minimum. Thought: Time complexity: O(NlogN), due to quick sort (std::sort) Space complexity: O(N), due to quick sort (std::sort) int minimumAbsoluteDifference ( vector int arr ) { int res = INT_MAX , n = arr . size (); sort ( arr . begin (), arr . end ()); for ( int i = 0 ; i n - 1 ; i ++ ) { res = min ( res , ( arr [ i + 1 ] - arr [ i ])); if ( res == 0 ) // zero will be the smallest possible value, just return the answer immediately { return res ; } } return res ; }","title":"Minimum absolute difference in array"},{"location":"programming_practice/Hackerrank/ipk_recur/","text":"Interview preparation kit, Recursion and Backtracking","title":"Recursion and Backtracking"},{"location":"programming_practice/Hackerrank/ipk_recur/#interview-preparation-kit-recursion-and-backtracking","text":"","title":"Interview preparation kit, Recursion and Backtracking"},{"location":"programming_practice/Hackerrank/ipk_search/","text":"Interview preparation kit, Searching Ice Cream Parlor Thought: This problem is similar to this video , which serves as an example of google's interview. the only difference is we print the position of matched pairs, like pos_i and pos_j with criteria cost[pos_i] + cost[pos_j] equals to K There is no need for brute force in O(N^2), or binary search in O(NlogN), only need a map to store the occurances of each price. Analysis: Time complexity: O(N), iterating the whole string and implement the statistical data Space complexity: O(N), by using a map data to store the statistical data. void whatFlavors ( vector int cost , int money ) { // init unordered_map int , cost_data mymap ; // for statistical purpose of cost and its occurance int n = cost . size (); for ( int i = 0 ; i n ; i ++ ) { mymap [ cost [ i ]]. pos = i + 1 ; mymap [ cost [ i ]]. cnt ++ ; } // iterate map process int cost_1 = 0 , cost_2 = 0 ; for ( int i = 0 ; i n ; i ++ ) { cost_1 = cost [ i ]; cost_2 = money - cost_1 ; if ( cost_2 == cost_1 ) // should be exisiting exactly 2, ex : 2 + 2 = 4 for unique solution { if ( mymap [ cost_1 ]. cnt == 2 ) { printf ( %d %d \\n , i + 1 , mymap [ cost_1 ]. pos ); // 1-base return ; } } else { if ( mymap [ cost_2 ]. cnt == 1 ) //exists for the other cost { printf ( %d %d \\n , i + 1 , mymap [ cost_2 ]. pos ); // 1-base return ; } } } } Pairs Thought: Similar to the first problem in this page, use map to check the occurance will be fine, solve in linear time and there is no need for brute force solution Analysis: Time complexity: O(N), iterating the whole string and implement the statistical data Space complexity: O(N), by using a map data to store the statistical data. int pairs ( int k , vector int arr ) { int res = 0 , n = arr . size (); unordered_map int , int mymap ; for ( int i = 0 ; i n ; i ++ ) { mymap [ arr [ i ]] ++ ; } for ( int i = 0 ; i n ; i ++ ) { if ( mymap [ arr [ i ] - k ] == 1 ) // all the elements are unique, directly check if occurance exists 1 { res ++ ; } } return res ; }","title":"Search"},{"location":"programming_practice/Hackerrank/ipk_search/#interview-preparation-kit-searching","text":"","title":"Interview preparation kit, Searching"},{"location":"programming_practice/Hackerrank/ipk_search/#ice-cream-parlor","text":"Thought: This problem is similar to this video , which serves as an example of google's interview. the only difference is we print the position of matched pairs, like pos_i and pos_j with criteria cost[pos_i] + cost[pos_j] equals to K There is no need for brute force in O(N^2), or binary search in O(NlogN), only need a map to store the occurances of each price. Analysis: Time complexity: O(N), iterating the whole string and implement the statistical data Space complexity: O(N), by using a map data to store the statistical data. void whatFlavors ( vector int cost , int money ) { // init unordered_map int , cost_data mymap ; // for statistical purpose of cost and its occurance int n = cost . size (); for ( int i = 0 ; i n ; i ++ ) { mymap [ cost [ i ]]. pos = i + 1 ; mymap [ cost [ i ]]. cnt ++ ; } // iterate map process int cost_1 = 0 , cost_2 = 0 ; for ( int i = 0 ; i n ; i ++ ) { cost_1 = cost [ i ]; cost_2 = money - cost_1 ; if ( cost_2 == cost_1 ) // should be exisiting exactly 2, ex : 2 + 2 = 4 for unique solution { if ( mymap [ cost_1 ]. cnt == 2 ) { printf ( %d %d \\n , i + 1 , mymap [ cost_1 ]. pos ); // 1-base return ; } } else { if ( mymap [ cost_2 ]. cnt == 1 ) //exists for the other cost { printf ( %d %d \\n , i + 1 , mymap [ cost_2 ]. pos ); // 1-base return ; } } } }","title":"Ice Cream Parlor"},{"location":"programming_practice/Hackerrank/ipk_search/#pairs","text":"Thought: Similar to the first problem in this page, use map to check the occurance will be fine, solve in linear time and there is no need for brute force solution Analysis: Time complexity: O(N), iterating the whole string and implement the statistical data Space complexity: O(N), by using a map data to store the statistical data. int pairs ( int k , vector int arr ) { int res = 0 , n = arr . size (); unordered_map int , int mymap ; for ( int i = 0 ; i n ; i ++ ) { mymap [ arr [ i ]] ++ ; } for ( int i = 0 ; i n ; i ++ ) { if ( mymap [ arr [ i ] - k ] == 1 ) // all the elements are unique, directly check if occurance exists 1 { res ++ ; } } return res ; }","title":"Pairs"},{"location":"programming_practice/Hackerrank/ipk_stack_queue/","text":"Interview preparation kit, Stack and Queue Tale of Stacks Using stack to implement queue Thought: Push into the stack causing the first in the bottom, so pop-push again to the other stack solves the problem. Visualization below bottom - top bottom - top oper stk_new_ontop stk_output push 1 1 push 2 1 2 push 3 1 2 3 pop , rev need - 3 2 1 front 3 2 [ 1 ] pop 3 2 pop 3 pop push 4 4 push 5 4 5 push 6 4 5 6 front , rev need - 6 5 [ 4 ] Analysis: Time complexity: push O(1), pop O(N) worst, O(1) if output stack still exists, front same as pop Space complexity: O(N) the new aux - stack is needed. class MyQueue { public : stack int stack_newest_on_top , stack_output ; void push ( int x ) { stack_newest_on_top . push ( x ); } void pop () { reverse_clone_stack (); stack_output . pop (); } int front () { reverse_clone_stack (); return stack_output . top (); } void reverse_clone_stack () { if ( stack_newest_on_top . size () == 0 || stack_output . size () != 0 ) // no need to process newly pushed stack or the original one can stlil be used { return ; } // push element into output stack only if nothing from it can be output, process batch by batch while ( stack_newest_on_top . size () != 0 ) { stack_output . push ( stack_newest_on_top . top ()); stack_newest_on_top . pop (); } } }; Balanced Parenthesis Thought: Use stack to trace the balance property, if (, [, { is encountered, push, for right parenthesis, see the following situation If the stack is already empty, then unbalanced ex: (())) last ) will meet an empty stack If the stack top is not the paired set, ex: ()= with ], then unbalanced Otherwise keep iterating through the string After the string has been iterated, if the stack is NON-EMPTY, rethrn NO either such as (((), too many left parenthesis causing the stack still remains non-empty Analysis: Time complexity: O(N), simply iterate through the string. Space complexity: O(N) the helper stack is needed. string isBalanced ( string s ) { stack char stk ; int n = s . size (); for ( int i = 0 ; i n ; i ++ ) { if ( s [ i ] == ( || s [ i ] == { || s [ i ] == [ ) { stk . push ( s [ i ]); } else if ( s [ i ] == ) ) { if ( stk . empty ()) { return NO ; } if ( stk . top () == ( ) { stk . pop (); } else { return NO ; } } else if ( s [ i ] == } ) { if ( stk . empty ()) { return NO ; } if ( stk . top () == { ) { stk . pop (); } else { return NO ; } } else if ( s [ i ] == ] ) { if ( stk . empty ()) { return NO ; } if ( stk . top () == [ ) { stk . pop (); } else { return NO ; } } } if ( stk . empty () != true ) { return NO ; } return YES ; } Largest Rectangle Thought: Check the maximum width of each element, that is stretch as long as it can, once the lower building is encountered, break. Analysis: Time complexity: O(N^2) Space complexity: O(N) if count the given vector from problem in memory usage, O(1) if not, only some helper variables. long largestRectangle ( vector int h ) { long n = h . size (); long res = 0 ; for ( long i = 0 ; i n ; i ++ ) { long l_ptr = i - 1 , r_ptr = i + 1 ; long base = h [ i ]; while ( l_ptr = 0 ) { if ( h [ l_ptr ] base ) { break ; } l_ptr -- ; } while ( r_ptr n ) { if ( h [ r_ptr ] base ) { break ; } r_ptr ++ ; } res = max ( res , base * ( r_ptr - l_ptr - 1 )); } printf ( res %ld \\n , res ); return res ; }","title":"Stack and Queues"},{"location":"programming_practice/Hackerrank/ipk_stack_queue/#interview-preparation-kit-stack-and-queue","text":"","title":"Interview preparation kit, Stack and Queue"},{"location":"programming_practice/Hackerrank/ipk_stack_queue/#tale-of-stacks-using-stack-to-implement-queue","text":"Thought: Push into the stack causing the first in the bottom, so pop-push again to the other stack solves the problem. Visualization below bottom - top bottom - top oper stk_new_ontop stk_output push 1 1 push 2 1 2 push 3 1 2 3 pop , rev need - 3 2 1 front 3 2 [ 1 ] pop 3 2 pop 3 pop push 4 4 push 5 4 5 push 6 4 5 6 front , rev need - 6 5 [ 4 ] Analysis: Time complexity: push O(1), pop O(N) worst, O(1) if output stack still exists, front same as pop Space complexity: O(N) the new aux - stack is needed. class MyQueue { public : stack int stack_newest_on_top , stack_output ; void push ( int x ) { stack_newest_on_top . push ( x ); } void pop () { reverse_clone_stack (); stack_output . pop (); } int front () { reverse_clone_stack (); return stack_output . top (); } void reverse_clone_stack () { if ( stack_newest_on_top . size () == 0 || stack_output . size () != 0 ) // no need to process newly pushed stack or the original one can stlil be used { return ; } // push element into output stack only if nothing from it can be output, process batch by batch while ( stack_newest_on_top . size () != 0 ) { stack_output . push ( stack_newest_on_top . top ()); stack_newest_on_top . pop (); } } };","title":"Tale of Stacks Using stack to implement queue"},{"location":"programming_practice/Hackerrank/ipk_stack_queue/#balanced-parenthesis","text":"Thought: Use stack to trace the balance property, if (, [, { is encountered, push, for right parenthesis, see the following situation If the stack is already empty, then unbalanced ex: (())) last ) will meet an empty stack If the stack top is not the paired set, ex: ()= with ], then unbalanced Otherwise keep iterating through the string After the string has been iterated, if the stack is NON-EMPTY, rethrn NO either such as (((), too many left parenthesis causing the stack still remains non-empty Analysis: Time complexity: O(N), simply iterate through the string. Space complexity: O(N) the helper stack is needed. string isBalanced ( string s ) { stack char stk ; int n = s . size (); for ( int i = 0 ; i n ; i ++ ) { if ( s [ i ] == ( || s [ i ] == { || s [ i ] == [ ) { stk . push ( s [ i ]); } else if ( s [ i ] == ) ) { if ( stk . empty ()) { return NO ; } if ( stk . top () == ( ) { stk . pop (); } else { return NO ; } } else if ( s [ i ] == } ) { if ( stk . empty ()) { return NO ; } if ( stk . top () == { ) { stk . pop (); } else { return NO ; } } else if ( s [ i ] == ] ) { if ( stk . empty ()) { return NO ; } if ( stk . top () == [ ) { stk . pop (); } else { return NO ; } } } if ( stk . empty () != true ) { return NO ; } return YES ; }","title":"Balanced Parenthesis"},{"location":"programming_practice/Hackerrank/ipk_stack_queue/#largest-rectangle","text":"Thought: Check the maximum width of each element, that is stretch as long as it can, once the lower building is encountered, break. Analysis: Time complexity: O(N^2) Space complexity: O(N) if count the given vector from problem in memory usage, O(1) if not, only some helper variables. long largestRectangle ( vector int h ) { long n = h . size (); long res = 0 ; for ( long i = 0 ; i n ; i ++ ) { long l_ptr = i - 1 , r_ptr = i + 1 ; long base = h [ i ]; while ( l_ptr = 0 ) { if ( h [ l_ptr ] base ) { break ; } l_ptr -- ; } while ( r_ptr n ) { if ( h [ r_ptr ] base ) { break ; } r_ptr ++ ; } res = max ( res , base * ( r_ptr - l_ptr - 1 )); } printf ( res %ld \\n , res ); return res ; }","title":"Largest Rectangle"},{"location":"programming_practice/Hackerrank/ipk_str/","text":"Interview preparation kit, String Manipulation Sherlok and Valid Srings Thought: Run through the following steps (1) Collecting the statistic data of occurance of all the characters in the given string (2) Iterate through the map in (1), and count the occurance of occurance (3) In (1), (2) such as aaabbccc is a : 3, b : 2, c : 3, and the occurance of occurance is 3 : 2 and 2 : 1 (4) Considering the situations (4-1) If there are 2 kinds of occurances, such as aaabbccc, than we must at least 1 a and 1 c, which is not satisfiable (4-2) If only one kind of occurances, such as abcdefg, than already satisfiable The following has only 2 kinds of occurances. (4-3) If the occurance of lower frequency alphabet is only one, then we just easily remove that, such as aaab a^100b, removing one b satisfies the criterium. (4-4) If the higher frequency lower one is only 1 and that occurance of higher frequency is exactly 1, such as bbbcc, removing one b satisfies the criterium. But aaabbbcc is 3 : 2, 2 : 1, should at least remove one a and b, does not satisfies the criterium. (4-5) No matter the occurance of occurance, if higher frequency - lower frequency exceeds 1, then it fails, such as bbbbbbcc (bbbbbbc has been filtered in 4-3) (4-6) The rest failed Analysis: Time complexity: O(N), iterating the whole string and implement the statistical data Space complexity: O(N), by using a map data to store the statistical data. string isValid ( string s ) { // step (1) unordered_map char , int map_1 ; // stat data for character occurance string res ; int n = s . size (); for ( int i = 0 ; i n ; i ++ ) { map_1 [ s [ i ]] ++ ; } // step (2), (3) map int , int freq_cnt ; // order matters for ( unordered_map char , int :: iterator it = map_1 . begin () ; it != map_1 . end (); it ++ ) { freq_cnt [ it - second ] ++ ; } if ( freq_cnt . size () 2 ) // step 4-1 { return NO ; } else if ( freq_cnt . size () == 1 ) // all the same frequency, ex aabbccddee, we only have 2 : 5 // step 4-2 { return YES ; } map int , int :: iterator it = freq_cnt . begin (); int f1 = it - first ; int lower_freq_cnt = it - second ; map int , int :: iterator it2 = ++ it ; int f2 = it2 - first ; int higher_freq_cnt = it2 - second ; int lower_freq = min ( f1 , f2 ), higher_freq = max ( f1 , f2 ); if ( lower_freq == 1 lower_freq_cnt == 1 ) // step 4-3 { return YES ; } else if ( higher_freq - lower_freq == 1 higher_freq_cnt == 1 ) // step 4-4 { return YES ; } else if ( higher_freq - lower_freq 1 ) // step 4-5 { return NO ; } return NO ; // step 4-6 }","title":"String Manipulation"},{"location":"programming_practice/Hackerrank/ipk_str/#interview-preparation-kit-string-manipulation","text":"","title":"Interview preparation kit, String Manipulation"},{"location":"programming_practice/Hackerrank/ipk_str/#sherlok-and-valid-srings","text":"Thought: Run through the following steps (1) Collecting the statistic data of occurance of all the characters in the given string (2) Iterate through the map in (1), and count the occurance of occurance (3) In (1), (2) such as aaabbccc is a : 3, b : 2, c : 3, and the occurance of occurance is 3 : 2 and 2 : 1 (4) Considering the situations (4-1) If there are 2 kinds of occurances, such as aaabbccc, than we must at least 1 a and 1 c, which is not satisfiable (4-2) If only one kind of occurances, such as abcdefg, than already satisfiable The following has only 2 kinds of occurances. (4-3) If the occurance of lower frequency alphabet is only one, then we just easily remove that, such as aaab a^100b, removing one b satisfies the criterium. (4-4) If the higher frequency lower one is only 1 and that occurance of higher frequency is exactly 1, such as bbbcc, removing one b satisfies the criterium. But aaabbbcc is 3 : 2, 2 : 1, should at least remove one a and b, does not satisfies the criterium. (4-5) No matter the occurance of occurance, if higher frequency - lower frequency exceeds 1, then it fails, such as bbbbbbcc (bbbbbbc has been filtered in 4-3) (4-6) The rest failed Analysis: Time complexity: O(N), iterating the whole string and implement the statistical data Space complexity: O(N), by using a map data to store the statistical data. string isValid ( string s ) { // step (1) unordered_map char , int map_1 ; // stat data for character occurance string res ; int n = s . size (); for ( int i = 0 ; i n ; i ++ ) { map_1 [ s [ i ]] ++ ; } // step (2), (3) map int , int freq_cnt ; // order matters for ( unordered_map char , int :: iterator it = map_1 . begin () ; it != map_1 . end (); it ++ ) { freq_cnt [ it - second ] ++ ; } if ( freq_cnt . size () 2 ) // step 4-1 { return NO ; } else if ( freq_cnt . size () == 1 ) // all the same frequency, ex aabbccddee, we only have 2 : 5 // step 4-2 { return YES ; } map int , int :: iterator it = freq_cnt . begin (); int f1 = it - first ; int lower_freq_cnt = it - second ; map int , int :: iterator it2 = ++ it ; int f2 = it2 - first ; int higher_freq_cnt = it2 - second ; int lower_freq = min ( f1 , f2 ), higher_freq = max ( f1 , f2 ); if ( lower_freq == 1 lower_freq_cnt == 1 ) // step 4-3 { return YES ; } else if ( higher_freq - lower_freq == 1 higher_freq_cnt == 1 ) // step 4-4 { return YES ; } else if ( higher_freq - lower_freq 1 ) // step 4-5 { return NO ; } return NO ; // step 4-6 }","title":"Sherlok and Valid Srings"},{"location":"programming_practice/Hackerrank/ipk_tree/","text":"Interview preparation kit, Tree LCA Please refer here for LCA. Is this a BST? Thought: Given the property of BST, where root s value max of left subtree but min of right shubtree . So we descend down the whole tree and check the property recursively. For more information, please check the comment part of the code. Analysis: Time complexity: O(N), where N is the nodes of given tree. Spacee complexity: O(N), where N is the nodes of given tree. or O(1) if the tree itself does not taken into account. bool checkBST ( Node * root ) { if ( root == NULL ) { return true ; } int lsub_max = 0 , rsub_min = INT_MAX ; sub_treemax ( root - left , lsub_max ); sub_treemin ( root - right , rsub_min ); if ( root - data = lsub_max ) // violates the property { return false ; } if ( root - data = rsub_min ) // violates the property { return false ; } return checkBST ( root - left ) checkBST ( root - right ) ; // descend and recursively checking the whole tree } void sub_treemax ( Node * root , int sub_max ) { if ( root == NULL ) { return ; } sub_max = max ( root - data , sub_max ); sub_treemax ( root - left , sub_max ); sub_treemax ( root - right , sub_max ); } void sub_treemin ( Node * root , int sub_min ) { if ( root == NULL ) { return ; } sub_min = min ( root - data , sub_min ); // printf( data %d, submin update to %d\\n , root - data, sub_min); sub_treemin ( root - left , sub_min ); sub_treemin ( root - right , sub_min ); }","title":"Trees"},{"location":"programming_practice/Hackerrank/ipk_tree/#interview-preparation-kit-tree","text":"","title":"Interview preparation kit, Tree"},{"location":"programming_practice/Hackerrank/ipk_tree/#lca","text":"Please refer here for LCA.","title":"LCA"},{"location":"programming_practice/Hackerrank/ipk_tree/#is-this-a-bst","text":"Thought: Given the property of BST, where root s value max of left subtree but min of right shubtree . So we descend down the whole tree and check the property recursively. For more information, please check the comment part of the code. Analysis: Time complexity: O(N), where N is the nodes of given tree. Spacee complexity: O(N), where N is the nodes of given tree. or O(1) if the tree itself does not taken into account. bool checkBST ( Node * root ) { if ( root == NULL ) { return true ; } int lsub_max = 0 , rsub_min = INT_MAX ; sub_treemax ( root - left , lsub_max ); sub_treemin ( root - right , rsub_min ); if ( root - data = lsub_max ) // violates the property { return false ; } if ( root - data = rsub_min ) // violates the property { return false ; } return checkBST ( root - left ) checkBST ( root - right ) ; // descend and recursively checking the whole tree } void sub_treemax ( Node * root , int sub_max ) { if ( root == NULL ) { return ; } sub_max = max ( root - data , sub_max ); sub_treemax ( root - left , sub_max ); sub_treemax ( root - right , sub_max ); } void sub_treemin ( Node * root , int sub_min ) { if ( root == NULL ) { return ; } sub_min = min ( root - data , sub_min ); // printf( data %d, submin update to %d\\n , root - data, sub_min); sub_treemin ( root - left , sub_min ); sub_treemin ( root - right , sub_min ); }","title":"Is this a BST?"},{"location":"programming_practice/leetcode_OJ_Single/tree1/","text":"Tree problems part 1 94. Binary Tree Inorder Traversal Using Stack Thought: By using the non-trivial solution(non-recursive) , we may descend to the left subtree and collecting them, once we reach the null node(i.e. end of the tree, we break immediately(dont push)), pop out the node on the top of the stack and push the value to the result array, then go the the right subtree. (The rest of explanation will be in the comment part of code) Analysis: Time complexity O(N), Space complexity O(N) Graphical explanation: class Solution { public : vector int res ; vector int inorderTraversal ( TreeNode * root ) { stack TreeNode * stk ; if ( root ) { stk . push ( root ); TreeNode * cur = root ; while ( stk . size () || cur != NULL ) { //equivalent to inorder(cur- left); while ( cur != NULL ) { cur = cur - left ; if ( cur == NULL ) { break ; } stk . push ( cur ); } //equivalent to res.push_back(cur- val); cur = stk . top (); //reassign stk . pop (); res . push_back ( cur - val ); //equivalent to inorder(cur- right); cur = cur - right ; if ( cur != NULL ) { stk . push ( cur ); } } } return res ; } }; 104. Maximum Depth of Binary Tree Thought: Use DFS to descend down the left and right subtree respectively. Each descend(either left or right) increase the depth level by one. The result is very clear to understand since we may just collect the depth of left and right subtree and update int l_depth = dfs_depth ( root - left , cur_depth + 1 ); int r_depth = dfs_depth ( root - right , cur_depth + 1 ); , return the max depth of them. Later, recursive the structure again until the recursion calling stack has been done. Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : int max_depth = 0 ; int maxDepth ( TreeNode * root ) { return dfs_depth ( root , 0 ); } int dfs_depth ( TreeNode * root , int cur_depth ) { if ( root == NULL ) { return cur_depth ; } int l_depth = dfs_depth ( root - left , cur_depth + 1 ); int r_depth = dfs_depth ( root - right , cur_depth + 1 ); max_depth = max ( l_depth , r_depth ); return max_depth ; } }; 110. Balanced Binary Tree Thought: Descend down the tree, retrieve the depth of left and right subtree, if (1) Reach the null node, just return depth - 1 to represend the depth of its parent. (2) Normal, return after the l_depth and r_depth have been retrieved, return the max depth comparing l_depth and r_depth representing the depth of such subtree(root will retrieve the depth of left subtree and right subtree and return the max value b/w two.) Visualization of Calling Stack Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : bool is_bal ; bool isBalanced ( TreeNode * root ) { is_bal = 1 ; dfs_subtree ( root , 0 ); return is_bal ; } int dfs_subtree ( TreeNode * root , int depth ) { if ( root == NULL ) { return depth - 1 ; } int l_depth = dfs_subtree ( root - left , depth + 1 ); int r_depth = dfs_subtree ( root - right , depth + 1 ); if ( abs ( l_depth - r_depth ) 1 ) { is_bal = 0 ; } int max_depth = max ( left_depth , right_depth ); return max_depth ; //dont forget plus one for ascend one level to root } }; 112. Path Sum Thought(WA, in the comment part of code) class Solution { public : bool hasPathSum ( TreeNode * root , int sum ) { if ( root == NULL ) // if reaching the leaf and at the same time sum has been decreased to 0, answer is right. { return sum == 0 ; } return hasPathSum ( root - left , sum - root - val ) | hasPathSum ( root - right , sum - root - val ); // descend for the left subtree and right subtree } }; Fault: If the testcase is [1, 2] 1, then it will fail since the 1(root) - left_null, such incomplete path will return true due to the recursive call in hasPathSum(root - right, sum - root - val) and if(root == NULL) { return sum == 0; } owing to 1 - 1 == 0 and reach null Revision: STOP when traverse to leaf node rather than null node Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : bool hasPathSum ( TreeNode * root , int sum ) { if ( root == NULL ) //directly return false if it is an empty tree { return false ; } if ( root != NULL root - left == NULL root - right == NULL ) //stop at the leaf node to check if the residue of sum equals to the value of leaf node. { return root - val == sum ; } return hasPathSum ( root - left , sum - root - val ) || hasPathSum ( root - right , sum - root - val ); //descending to check if left or right path gives at least one path for the creterium. } }; 113. Path Sum II Thought: Similar to 112. Path Sum , but now add a vector to trace the path that has been traversed through. More detailed explanations are in the comment part of code Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : vector vector int res ; vector vector int pathSum ( TreeNode * root , int sum ) { vector int tmp ; dfs ( root , sum , tmp ); return res ; } void dfs ( TreeNode * root , int sum , vector int tmp ) { if ( root == NULL ) { return ; } tmp . push_back ( root - val ); // push the non leaf node into the stack(now with vector) if ( root != NULL root - left == NULL root - right == NULL ) //if it is leaf node { if ( root - val == sum ) // check if satisfies the criterium { res . push_back ( tmp ); } tmp . pop_back (); // pop the leaf node from the stack since such node is the end of one root-to-leaf path return ; } dfs ( root - left , sum - root - val , tmp ); //descend for the left subtree dfs ( root - right , sum - root - val , tmp ); // descend for the right subtree tmp . pop_back (); // pop the node out from stack if such node has been done(i.e. finished visiting left subtree and right subtree) } };","title":"Part 1(94, 104, 110, 112, 113)"},{"location":"programming_practice/leetcode_OJ_Single/tree1/#tree-problems-part-1","text":"","title":"Tree problems part 1"},{"location":"programming_practice/leetcode_OJ_Single/tree1/#94-binary-tree-inorder-traversal-using-stack","text":"Thought: By using the non-trivial solution(non-recursive) , we may descend to the left subtree and collecting them, once we reach the null node(i.e. end of the tree, we break immediately(dont push)), pop out the node on the top of the stack and push the value to the result array, then go the the right subtree. (The rest of explanation will be in the comment part of code) Analysis: Time complexity O(N), Space complexity O(N) Graphical explanation: class Solution { public : vector int res ; vector int inorderTraversal ( TreeNode * root ) { stack TreeNode * stk ; if ( root ) { stk . push ( root ); TreeNode * cur = root ; while ( stk . size () || cur != NULL ) { //equivalent to inorder(cur- left); while ( cur != NULL ) { cur = cur - left ; if ( cur == NULL ) { break ; } stk . push ( cur ); } //equivalent to res.push_back(cur- val); cur = stk . top (); //reassign stk . pop (); res . push_back ( cur - val ); //equivalent to inorder(cur- right); cur = cur - right ; if ( cur != NULL ) { stk . push ( cur ); } } } return res ; } };","title":"94. Binary Tree Inorder Traversal Using Stack"},{"location":"programming_practice/leetcode_OJ_Single/tree1/#104-maximum-depth-of-binary-tree","text":"Thought: Use DFS to descend down the left and right subtree respectively. Each descend(either left or right) increase the depth level by one. The result is very clear to understand since we may just collect the depth of left and right subtree and update int l_depth = dfs_depth ( root - left , cur_depth + 1 ); int r_depth = dfs_depth ( root - right , cur_depth + 1 ); , return the max depth of them. Later, recursive the structure again until the recursion calling stack has been done. Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : int max_depth = 0 ; int maxDepth ( TreeNode * root ) { return dfs_depth ( root , 0 ); } int dfs_depth ( TreeNode * root , int cur_depth ) { if ( root == NULL ) { return cur_depth ; } int l_depth = dfs_depth ( root - left , cur_depth + 1 ); int r_depth = dfs_depth ( root - right , cur_depth + 1 ); max_depth = max ( l_depth , r_depth ); return max_depth ; } };","title":"104. Maximum Depth of Binary Tree"},{"location":"programming_practice/leetcode_OJ_Single/tree1/#110-balanced-binary-tree","text":"Thought: Descend down the tree, retrieve the depth of left and right subtree, if (1) Reach the null node, just return depth - 1 to represend the depth of its parent. (2) Normal, return after the l_depth and r_depth have been retrieved, return the max depth comparing l_depth and r_depth representing the depth of such subtree(root will retrieve the depth of left subtree and right subtree and return the max value b/w two.) Visualization of Calling Stack Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : bool is_bal ; bool isBalanced ( TreeNode * root ) { is_bal = 1 ; dfs_subtree ( root , 0 ); return is_bal ; } int dfs_subtree ( TreeNode * root , int depth ) { if ( root == NULL ) { return depth - 1 ; } int l_depth = dfs_subtree ( root - left , depth + 1 ); int r_depth = dfs_subtree ( root - right , depth + 1 ); if ( abs ( l_depth - r_depth ) 1 ) { is_bal = 0 ; } int max_depth = max ( left_depth , right_depth ); return max_depth ; //dont forget plus one for ascend one level to root } };","title":"110. Balanced Binary Tree"},{"location":"programming_practice/leetcode_OJ_Single/tree1/#112-path-sum","text":"Thought(WA, in the comment part of code) class Solution { public : bool hasPathSum ( TreeNode * root , int sum ) { if ( root == NULL ) // if reaching the leaf and at the same time sum has been decreased to 0, answer is right. { return sum == 0 ; } return hasPathSum ( root - left , sum - root - val ) | hasPathSum ( root - right , sum - root - val ); // descend for the left subtree and right subtree } }; Fault: If the testcase is [1, 2] 1, then it will fail since the 1(root) - left_null, such incomplete path will return true due to the recursive call in hasPathSum(root - right, sum - root - val) and if(root == NULL) { return sum == 0; } owing to 1 - 1 == 0 and reach null Revision: STOP when traverse to leaf node rather than null node Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : bool hasPathSum ( TreeNode * root , int sum ) { if ( root == NULL ) //directly return false if it is an empty tree { return false ; } if ( root != NULL root - left == NULL root - right == NULL ) //stop at the leaf node to check if the residue of sum equals to the value of leaf node. { return root - val == sum ; } return hasPathSum ( root - left , sum - root - val ) || hasPathSum ( root - right , sum - root - val ); //descending to check if left or right path gives at least one path for the creterium. } };","title":"112. Path Sum"},{"location":"programming_practice/leetcode_OJ_Single/tree1/#113-path-sum-ii","text":"Thought: Similar to 112. Path Sum , but now add a vector to trace the path that has been traversed through. More detailed explanations are in the comment part of code Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : vector vector int res ; vector vector int pathSum ( TreeNode * root , int sum ) { vector int tmp ; dfs ( root , sum , tmp ); return res ; } void dfs ( TreeNode * root , int sum , vector int tmp ) { if ( root == NULL ) { return ; } tmp . push_back ( root - val ); // push the non leaf node into the stack(now with vector) if ( root != NULL root - left == NULL root - right == NULL ) //if it is leaf node { if ( root - val == sum ) // check if satisfies the criterium { res . push_back ( tmp ); } tmp . pop_back (); // pop the leaf node from the stack since such node is the end of one root-to-leaf path return ; } dfs ( root - left , sum - root - val , tmp ); //descend for the left subtree dfs ( root - right , sum - root - val , tmp ); // descend for the right subtree tmp . pop_back (); // pop the node out from stack if such node has been done(i.e. finished visiting left subtree and right subtree) } };","title":"113. Path Sum II"},{"location":"programming_practice/leetcode_OJ_Single/tree2/","text":"Tree problems part 2 236. LCA Thought: (1) Store the information of the parent node of each node. (2) Ascend the node if the node is deeper in order to get closer to the common parent, finally the lowest common ancestor will match . It is quite intuitive. You may imagine by drawing a picture. The rest of the explanations are written in the comment part of the code Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : struct node_info { TreeNode * parent ; int depth ; }; map TreeNode * , node_info node_info_map ; TreeNode * res ; TreeNode * lowestCommonAncestor ( TreeNode * root , TreeNode * node_p , TreeNode * node_q ) { dfs_information ( root , 0 ); node_info_map [ root ]. parent = root ; // for the root itself, preventing runtime error res = root ; // initialize climbup_LCA ( node_p , node_q ); // solve return res ; } // step1, traverse the tree first to find the child-parent pair void dfs_information ( TreeNode * root , int depth ) { if ( root == NULL ) { return ; } node_info_map [ root ]. depth = depth ; if ( root - left ) // Store the child-parent information for left child node if it is a non-null one { node_info_map [ root - left ]. parent = root ; dfs_information ( root - left , depth + 1 ); } if ( root - right ) // Store the child-parent information for right child node if it is a non-null one { node_info_map [ root - right ]. parent = root ; dfs_information ( root - right , depth + 1 ); } } // step2, climb up to find the LCA, using depth comparison algorithm void climbup_LCA ( TreeNode * node_p , TreeNode * node_q ) { if ( node_info_map [ node_p ]. parent == node_info_map [ node_q ]. parent ) { res = node_info_map [ node_p ]. parent ; return ; } else if ( node_info_map [ node_p ]. parent == node_q ) { res = node_q ; return ; } else if ( node_info_map [ node_q ]. parent == node_p ) { res = node_p ; return ; } // the deeper node has to climb up one depth else if ( node_info_map [ node_p ]. depth node_info_map [ node_q ]. depth ) { climbup_LCA ( node_info_map [ node_p ]. parent , node_q ); } else { climbup_LCA ( node_p , node_info_map [ node_q ]. parent ); } } }; 863. All Nodes Distance K in Binary Tree Thought: (1) Store the information of the parent node of each node. (2) Starting from the target node, traverse the parent node, left child, right child. Remember to mark the node visited, consequently it will prevent child - parent and parent - child, two times back and forth resulting in an 0 distance just owing to 2 - 1(child - parent) - 1(parent - child), but it is not the case of answer. Analysis: Time complexity O(N), Space complexity O(N) // 12ms class Solution { public : unordered_map TreeNode * , TreeNode * parent_map ; vector int res ; vector int distanceK ( TreeNode * root , TreeNode * target , int K ) { dfs_parent ( root ); dist ( target , K ); return res ; } void dfs_parent ( TreeNode * root ) { if ( root - left ) // store the child-parent information for the left child node { parent_map [ root - left ] = root ; dfs_parent ( root - left ); } if ( root - right ) // store the child-parent information for the right child node { parent_map [ root - right ] = root ; dfs_parent ( root - right ); } } void dist ( TreeNode * target , int K ) { if ( target - val 0 ) // do not push_back too much redundant node { return ; } if ( K == 0 ) { res . push_back ( target - val ); return ; //exit immediately to prevent stackoverflow } target - val = - 1 ; // mark as done if ( parent_map . count ( target )) // check for parent { dist ( parent_map [ target ], K - 1 ); } if ( target - left ) { dist ( target - left , K - 1 ); } if ( target - right ) { dist ( target - right , K - 1 ); } } };","title":"Part 2(256, 863)"},{"location":"programming_practice/leetcode_OJ_Single/tree2/#tree-problems-part-2","text":"","title":"Tree problems part 2"},{"location":"programming_practice/leetcode_OJ_Single/tree2/#236-lca","text":"Thought: (1) Store the information of the parent node of each node. (2) Ascend the node if the node is deeper in order to get closer to the common parent, finally the lowest common ancestor will match . It is quite intuitive. You may imagine by drawing a picture. The rest of the explanations are written in the comment part of the code Analysis: Time complexity O(N), Space complexity O(N) class Solution { public : struct node_info { TreeNode * parent ; int depth ; }; map TreeNode * , node_info node_info_map ; TreeNode * res ; TreeNode * lowestCommonAncestor ( TreeNode * root , TreeNode * node_p , TreeNode * node_q ) { dfs_information ( root , 0 ); node_info_map [ root ]. parent = root ; // for the root itself, preventing runtime error res = root ; // initialize climbup_LCA ( node_p , node_q ); // solve return res ; } // step1, traverse the tree first to find the child-parent pair void dfs_information ( TreeNode * root , int depth ) { if ( root == NULL ) { return ; } node_info_map [ root ]. depth = depth ; if ( root - left ) // Store the child-parent information for left child node if it is a non-null one { node_info_map [ root - left ]. parent = root ; dfs_information ( root - left , depth + 1 ); } if ( root - right ) // Store the child-parent information for right child node if it is a non-null one { node_info_map [ root - right ]. parent = root ; dfs_information ( root - right , depth + 1 ); } } // step2, climb up to find the LCA, using depth comparison algorithm void climbup_LCA ( TreeNode * node_p , TreeNode * node_q ) { if ( node_info_map [ node_p ]. parent == node_info_map [ node_q ]. parent ) { res = node_info_map [ node_p ]. parent ; return ; } else if ( node_info_map [ node_p ]. parent == node_q ) { res = node_q ; return ; } else if ( node_info_map [ node_q ]. parent == node_p ) { res = node_p ; return ; } // the deeper node has to climb up one depth else if ( node_info_map [ node_p ]. depth node_info_map [ node_q ]. depth ) { climbup_LCA ( node_info_map [ node_p ]. parent , node_q ); } else { climbup_LCA ( node_p , node_info_map [ node_q ]. parent ); } } };","title":"236. LCA"},{"location":"programming_practice/leetcode_OJ_Single/tree2/#863-all-nodes-distance-k-in-binary-tree","text":"Thought: (1) Store the information of the parent node of each node. (2) Starting from the target node, traverse the parent node, left child, right child. Remember to mark the node visited, consequently it will prevent child - parent and parent - child, two times back and forth resulting in an 0 distance just owing to 2 - 1(child - parent) - 1(parent - child), but it is not the case of answer. Analysis: Time complexity O(N), Space complexity O(N) // 12ms class Solution { public : unordered_map TreeNode * , TreeNode * parent_map ; vector int res ; vector int distanceK ( TreeNode * root , TreeNode * target , int K ) { dfs_parent ( root ); dist ( target , K ); return res ; } void dfs_parent ( TreeNode * root ) { if ( root - left ) // store the child-parent information for the left child node { parent_map [ root - left ] = root ; dfs_parent ( root - left ); } if ( root - right ) // store the child-parent information for the right child node { parent_map [ root - right ] = root ; dfs_parent ( root - right ); } } void dist ( TreeNode * target , int K ) { if ( target - val 0 ) // do not push_back too much redundant node { return ; } if ( K == 0 ) { res . push_back ( target - val ); return ; //exit immediately to prevent stackoverflow } target - val = - 1 ; // mark as done if ( parent_map . count ( target )) // check for parent { dist ( parent_map [ target ], K - 1 ); } if ( target - left ) { dist ( target - left , K - 1 ); } if ( target - right ) { dist ( target - right , K - 1 ); } } };","title":"863. All Nodes Distance K in Binary Tree"},{"location":"programming_practice/leetcode_OJ_WC/WC106/","text":"leetcode_OJ WC106 \u89e3\u984c\u5fc3\u5f97 \u9019\u6b21\u5168\u90e8\u89e3\u5b8c\uff0c\u7b2c\u56db\u984c\u5c45\u7136\u53ea\u5728\u4e00\u5802\u901a\u8b58\u8ab2\u5b8c\u6210 \ud83d\ude00 PA. 922. Sort Array By Parity II \u6c34\u984c \u984c\u610f\uff1a\u4f9d\u7167\u5947\u6578\u5076\u6578\u6392\u5e8f\u9663\u5217 \u60f3\u6cd5\uff1a\u6c34\u984c\u76f4\u63a5\u505a\u5373\u53ef \u5206\u6790\uff1aTime complexity O(N), Space complexity O(1) class Solution { public : vector int sortArrayByParityII ( vector int A ) { int n = A . size (); int odd [ n ] = { 0 }; int even [ n ] = { 0 }; int optr = 0 , eptr = 0 ; for ( int i = 0 ; i n ; i ++ ) { if ( A [ i ] 1 ) { odd [ optr ++ ] = A [ i ]; } else { even [ eptr ++ ] = A [ i ]; } } optr = 0 , eptr = 0 ; for ( int i = 0 ; i n ; i ++ ) { if ( i 1 ) { A [ i ] = odd [ optr ++ ]; } else { A [ i ] = even [ eptr ++ ]; } } return A ; } }; PB. 921. Minimum Add to Make Parentheses Valid \u62ec\u865f\u914d\u5c0d\u5269\u9918\u6578 \u984c\u610f\uff1a\u7d66\u5de6\u53f3\u62ec\u865f\u5b57\u4e32\uff0c\u554f\u81f3\u5c11\u8981\u52a0\u4e0a\u5e7e\u500b\u5de6\u53f3\u62ec\u865f\u624d\u80fd\u4f7f\u62ec\u865f\u914d\u5c0d\u6210\u529f\uff0c\u4f8b\u5982 ((( \b\u6b20\u7f3a\u4e09\u500b\u3001 ()))(( \b \u6b20\u7f3a\u56db\u500b\uff08\u5de6\u4e8c\u53f3\u4e8c\uff09 \u60f3\u6cd5\uff1a\u9047\u5230\u5de6\u62ec\u865f\u8868\u793a\u6b20\u914d\u5c0d\uff0c\u5c07to_match \u8b8a\u6578\u52a0\u8d77\u4f86\uff0c\u9047\u5230\u53c8\u62ec\u865f\u518d\u5c07\u5176\u905e\u6e1b\uff0c\u5018\u82e5to_match\u53c8\u592a\u591a\u4e86\u4ee3\u8868\u53f3\u62ec\u865f\u904e\u591a\uff0c\u518d\u7528\u7b2c\u4e8c\u500b\u8b8a\u6578lack\u8868\u793a \u5206\u6790\uff1aTime complexity O(N), Space complexity O(1) class Solution { public : int minAddToMakeValid ( string S ) { int n = S . size (), lack = 0 , to_match = 0 ; for ( int i = 0 ; i n ; i ++ ) { if ( S [ i ] == ( ) { to_match ++ ; } else if ( S [ i ] == ) ) { if ( to_match = 1 ) { to_match -- ; } else { lack ++ ; } } } return to_match + lack ; } }; PC. 923. 3Sum With Multiplicity \u7d44\u5408\u554f\u984c \u984c\u610f\uff1a\u7d66\u4e00\u500b\u6578\u5b57\u65bc\u9663\u5217\u4e2d\uff0c\u53d6\u4e09\u500b\u4e0d\u91cd\u8907\u7684\u6578\u5b57a b c\u4f46\u662fa b c\u6578\u503c\u4e0d\u4e00\u5b9a\u8981\u76f8\u7570\uff0c\u518d\u7d66\u5b9a\u4e00\u76ee\u6a19target\uff0c\u554f a + b + c = target \u4e4b\u7d44\u5408\u60c5\u5f62 \u60f3\u6cd5\uff1a\u672c\u4ee5\u70ba\u9019\u984c\u6709\u9ede\u50cf\u80cc\u5305\u554f\u984c\uff0c\u4f46\u6c92\u6709\u90a3\u9ebc\u96e3\uff0c\u8f03\u8fd1\u4f3c\u6578\u5b78\u7d44\u5408\u554f\u984c \b\u9996\u5148\u7528map\u5c07\u5404\u500b\u6578\u5b57\u7684\u6578\u91cf\u5b58\u8d77\u4f86 \u7531\u65bc\u6578\u5b57\u6700\u591a\u5230101\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528 101 * 101\u66b4\u529b\u641c\u5c0b\uff08\u4e0d\u7528\u5230\u7b2c\u4e09\u500b\u56de\u5708\uff0c\u53ea\u8981\u770bmap\u4e2d\u662f\u5426\u5b58\u5728\u5373\u53ef\uff0c\u4ea6\u5373 if(my[thr] == 0 || my[it2] == 0) //unable to use { continue; } \u70ba\u4e86\u9632\u6b62\u91cd\u8907\uff0c\u6211\u5011\u6703\u5e0c\u671b\u6578\u5b57\u662f\u905e\u589e\u7684\uff08\u4f46\u4e0d\u5fc5\u56b4\u683c\u589e\uff0c\u5426\u5247 2 + 2 + 3 = 7 \b\u9019\u7a2e\u5c31\u627e\u4e0d\u5230\u4e86\uff09\uff0c\u4ea6\u5373 if(!(fir = sec sec = thr)) //maLLain the order to prevent duplicated { continue; } \u5728\u67e5\u770b\u5404\u7a2e\u65b9\u6cd5\u7684\u7d44\u5408\u6578\uff1a C(a,1) * C(b,1) * C(c,1) or C(a,2) * C(b,1) or C(a,3) \u5206\u6790\uff1aTime complexity O(101^2), Space complexity O(1) #define LL long long const int MOD = 1e9 + 7 ; class Solution { public : int threeSumMulti ( vector int A , int target ) { unordered_map LL , LL my ; LL n = A . size (); LL res = 0 ; for ( LL i = 0 ; i n ; i ++ ) { my [ A [ i ]] ++ ; } for ( LL it1 = 0 ; it1 101 ; ++ it1 ) { if ( my [ it1 ] == 0 ) { continue ; } for ( LL it2 = it1 ; it2 101 ; ++ it2 ) { LL fir = it1 ; LL sec = it2 ; LL thr = target - fir - sec ; if ( my [ thr ] == 0 || my [ it2 ] == 0 ) //unable to use { continue ; } if ( ! ( fir = sec sec = thr )) //maLLain the order to prevent duplicated { continue ; } if (( fir == sec ) ( fir == thr )) { res += cnr ( my [ fir ], 3 ) % MOD ; } else if (( fir == sec ) ( fir != thr )) //2 and 1 { res += ( cnr ( my [ fir ], 2 ) % MOD ) * ( cnr ( my [ thr ], 1 ) % MOD ); } else if (( fir == thr ) ( fir != sec )) //2 and 1 { res += ( cnr ( my [ fir ], 2 ) % MOD ) * ( cnr ( my [ sec ], 1 ) % MOD ); } else if (( thr == sec ) ( fir != thr )) //2 and 1 { res += ( cnr ( my [ sec ], 2 ) % MOD ) * ( cnr ( my [ fir ], 1 ) % MOD ); } else //all different { res += ( cnr ( my [ fir ], 1 ) % MOD ) * ( cnr ( my [ sec ], 1 ) % MOD ) * ( cnr ( my [ thr ], 1 ) % MOD ); } res %= MOD ; } } return ( int )( res % MOD ); //test } LL cnr ( LL n , LL k ) { if ( k n ) return 0 ; if ( k * 2 n ) k = n - k ; if ( k == 0 ) return 1 ; LL result = n ; for ( LL i = 2 ; i = k ; ++ i ) { result *= ( n - i + 1 ); result /= i ; } return result ; } }; PD. 924. Minimize Malware Spread DFS\u627e\u51fa\u6700\u591a\u9023\u901a\u7684\u8d77\u9ede \u984c\u610f\uff1a\u7d66\u5716\u4e2d\u7684\u6578\u500b\u9ede\uff0c\u554f\u54ea\u4e00\u500b\u9ede\u51fa\u767c\u958b\u59cb\u505aDFS\u53ef\u4ee5\u9023\u901a\u6700\u591a\u9ede \u601d\u8def\uff1a\b\u6bcf\u4e00\u500b\u9ede\u90fdDFS\u4e00\u6b21\uff0c\u6bd4\u8f03\u51fa\u80fd\u806f\u901a\u6700\u591a\u9ede\u7684\u8d77\u9ede\uff0c\u4e26\u4e14\u627e\u51faID\u6700\u5c0f\u7684\uff08\u5f9e\u5f8c\u9762\u627e\u56de\u4f86\u5373\u53ef\uff09 \u5206\u6790\uff1aTime complexity O(N^2), Space complexity O(N) class Solution { public : int minMalwareSpread ( vector vector int graph , vector int initial ) { //check which node be removed will remove the most connection int n = initial . size (), m = graph . size (); sort ( initial . begin (), initial . end ()); vector int color_cnt ( m , 0 ); //do not use n, otherwise runtime error will occurred such as [0,9] will out of the array bound with length 2 //count how much nodes can be traversed from the starting point for ( int i = 0 ; i n ; ++ i ) { int each_cnt = 0 ; vector bool traversed ( m , false ); DFS ( graph , initial [ i ], traversed , each_cnt ); color_cnt [ initial [ i ]] = each_cnt ; } int res = INT_MAX , max_color = 0 ; for ( int i = n - 1 ; i = 0 ; -- i ) { if ( color_cnt [ initial [ i ]] = max_color ) { res = initial [ i ]; max_color = color_cnt [ initial [ i ]]; } } return res ; } void DFS ( vector vector int graph , int cur_node , vector bool traversed , int each_cnt ) { if ( traversed [ cur_node ]) //traversed node, return { return ; } traversed [ cur_node ] = true ; each_cnt ++ ; for ( int i = 1 ; i graph [ cur_node ]. size (); ++ i ) { if ( graph [ cur_node ][ i ]) //traversable and not traversed, travese it { DFS ( graph , i , traversed , each_cnt ); } } return ; //end traverse of current node } };","title":"WC106"},{"location":"programming_practice/leetcode_OJ_WC/WC106/#leetcode_oj-wc106","text":"\u9019\u6b21\u5168\u90e8\u89e3\u5b8c\uff0c\u7b2c\u56db\u984c\u5c45\u7136\u53ea\u5728\u4e00\u5802\u901a\u8b58\u8ab2\u5b8c\u6210 \ud83d\ude00","title":"leetcode_OJ WC106 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC106/#pa-922-sort-array-by-parity-ii","text":"\u984c\u610f\uff1a\u4f9d\u7167\u5947\u6578\u5076\u6578\u6392\u5e8f\u9663\u5217 \u60f3\u6cd5\uff1a\u6c34\u984c\u76f4\u63a5\u505a\u5373\u53ef \u5206\u6790\uff1aTime complexity O(N), Space complexity O(1) class Solution { public : vector int sortArrayByParityII ( vector int A ) { int n = A . size (); int odd [ n ] = { 0 }; int even [ n ] = { 0 }; int optr = 0 , eptr = 0 ; for ( int i = 0 ; i n ; i ++ ) { if ( A [ i ] 1 ) { odd [ optr ++ ] = A [ i ]; } else { even [ eptr ++ ] = A [ i ]; } } optr = 0 , eptr = 0 ; for ( int i = 0 ; i n ; i ++ ) { if ( i 1 ) { A [ i ] = odd [ optr ++ ]; } else { A [ i ] = even [ eptr ++ ]; } } return A ; } };","title":"PA. 922. Sort Array By Parity II \u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC106/#pb-921-minimum-add-to-make-parentheses-valid","text":"\u984c\u610f\uff1a\u7d66\u5de6\u53f3\u62ec\u865f\u5b57\u4e32\uff0c\u554f\u81f3\u5c11\u8981\u52a0\u4e0a\u5e7e\u500b\u5de6\u53f3\u62ec\u865f\u624d\u80fd\u4f7f\u62ec\u865f\u914d\u5c0d\u6210\u529f\uff0c\u4f8b\u5982 ((( \b\u6b20\u7f3a\u4e09\u500b\u3001 ()))(( \b \u6b20\u7f3a\u56db\u500b\uff08\u5de6\u4e8c\u53f3\u4e8c\uff09 \u60f3\u6cd5\uff1a\u9047\u5230\u5de6\u62ec\u865f\u8868\u793a\u6b20\u914d\u5c0d\uff0c\u5c07to_match \u8b8a\u6578\u52a0\u8d77\u4f86\uff0c\u9047\u5230\u53c8\u62ec\u865f\u518d\u5c07\u5176\u905e\u6e1b\uff0c\u5018\u82e5to_match\u53c8\u592a\u591a\u4e86\u4ee3\u8868\u53f3\u62ec\u865f\u904e\u591a\uff0c\u518d\u7528\u7b2c\u4e8c\u500b\u8b8a\u6578lack\u8868\u793a \u5206\u6790\uff1aTime complexity O(N), Space complexity O(1) class Solution { public : int minAddToMakeValid ( string S ) { int n = S . size (), lack = 0 , to_match = 0 ; for ( int i = 0 ; i n ; i ++ ) { if ( S [ i ] == ( ) { to_match ++ ; } else if ( S [ i ] == ) ) { if ( to_match = 1 ) { to_match -- ; } else { lack ++ ; } } } return to_match + lack ; } };","title":"PB. 921. Minimum Add to Make Parentheses Valid \u62ec\u865f\u914d\u5c0d\u5269\u9918\u6578"},{"location":"programming_practice/leetcode_OJ_WC/WC106/#pc-923-3sum-with-multiplicity","text":"\u984c\u610f\uff1a\u7d66\u4e00\u500b\u6578\u5b57\u65bc\u9663\u5217\u4e2d\uff0c\u53d6\u4e09\u500b\u4e0d\u91cd\u8907\u7684\u6578\u5b57a b c\u4f46\u662fa b c\u6578\u503c\u4e0d\u4e00\u5b9a\u8981\u76f8\u7570\uff0c\u518d\u7d66\u5b9a\u4e00\u76ee\u6a19target\uff0c\u554f a + b + c = target \u4e4b\u7d44\u5408\u60c5\u5f62 \u60f3\u6cd5\uff1a\u672c\u4ee5\u70ba\u9019\u984c\u6709\u9ede\u50cf\u80cc\u5305\u554f\u984c\uff0c\u4f46\u6c92\u6709\u90a3\u9ebc\u96e3\uff0c\u8f03\u8fd1\u4f3c\u6578\u5b78\u7d44\u5408\u554f\u984c \b\u9996\u5148\u7528map\u5c07\u5404\u500b\u6578\u5b57\u7684\u6578\u91cf\u5b58\u8d77\u4f86 \u7531\u65bc\u6578\u5b57\u6700\u591a\u5230101\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528 101 * 101\u66b4\u529b\u641c\u5c0b\uff08\u4e0d\u7528\u5230\u7b2c\u4e09\u500b\u56de\u5708\uff0c\u53ea\u8981\u770bmap\u4e2d\u662f\u5426\u5b58\u5728\u5373\u53ef\uff0c\u4ea6\u5373 if(my[thr] == 0 || my[it2] == 0) //unable to use { continue; } \u70ba\u4e86\u9632\u6b62\u91cd\u8907\uff0c\u6211\u5011\u6703\u5e0c\u671b\u6578\u5b57\u662f\u905e\u589e\u7684\uff08\u4f46\u4e0d\u5fc5\u56b4\u683c\u589e\uff0c\u5426\u5247 2 + 2 + 3 = 7 \b\u9019\u7a2e\u5c31\u627e\u4e0d\u5230\u4e86\uff09\uff0c\u4ea6\u5373 if(!(fir = sec sec = thr)) //maLLain the order to prevent duplicated { continue; } \u5728\u67e5\u770b\u5404\u7a2e\u65b9\u6cd5\u7684\u7d44\u5408\u6578\uff1a C(a,1) * C(b,1) * C(c,1) or C(a,2) * C(b,1) or C(a,3) \u5206\u6790\uff1aTime complexity O(101^2), Space complexity O(1) #define LL long long const int MOD = 1e9 + 7 ; class Solution { public : int threeSumMulti ( vector int A , int target ) { unordered_map LL , LL my ; LL n = A . size (); LL res = 0 ; for ( LL i = 0 ; i n ; i ++ ) { my [ A [ i ]] ++ ; } for ( LL it1 = 0 ; it1 101 ; ++ it1 ) { if ( my [ it1 ] == 0 ) { continue ; } for ( LL it2 = it1 ; it2 101 ; ++ it2 ) { LL fir = it1 ; LL sec = it2 ; LL thr = target - fir - sec ; if ( my [ thr ] == 0 || my [ it2 ] == 0 ) //unable to use { continue ; } if ( ! ( fir = sec sec = thr )) //maLLain the order to prevent duplicated { continue ; } if (( fir == sec ) ( fir == thr )) { res += cnr ( my [ fir ], 3 ) % MOD ; } else if (( fir == sec ) ( fir != thr )) //2 and 1 { res += ( cnr ( my [ fir ], 2 ) % MOD ) * ( cnr ( my [ thr ], 1 ) % MOD ); } else if (( fir == thr ) ( fir != sec )) //2 and 1 { res += ( cnr ( my [ fir ], 2 ) % MOD ) * ( cnr ( my [ sec ], 1 ) % MOD ); } else if (( thr == sec ) ( fir != thr )) //2 and 1 { res += ( cnr ( my [ sec ], 2 ) % MOD ) * ( cnr ( my [ fir ], 1 ) % MOD ); } else //all different { res += ( cnr ( my [ fir ], 1 ) % MOD ) * ( cnr ( my [ sec ], 1 ) % MOD ) * ( cnr ( my [ thr ], 1 ) % MOD ); } res %= MOD ; } } return ( int )( res % MOD ); //test } LL cnr ( LL n , LL k ) { if ( k n ) return 0 ; if ( k * 2 n ) k = n - k ; if ( k == 0 ) return 1 ; LL result = n ; for ( LL i = 2 ; i = k ; ++ i ) { result *= ( n - i + 1 ); result /= i ; } return result ; } };","title":"PC. 923. 3Sum With Multiplicity \u7d44\u5408\u554f\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC106/#pd-924-minimize-malware-spread-dfs","text":"\u984c\u610f\uff1a\u7d66\u5716\u4e2d\u7684\u6578\u500b\u9ede\uff0c\u554f\u54ea\u4e00\u500b\u9ede\u51fa\u767c\u958b\u59cb\u505aDFS\u53ef\u4ee5\u9023\u901a\u6700\u591a\u9ede \u601d\u8def\uff1a\b\u6bcf\u4e00\u500b\u9ede\u90fdDFS\u4e00\u6b21\uff0c\u6bd4\u8f03\u51fa\u80fd\u806f\u901a\u6700\u591a\u9ede\u7684\u8d77\u9ede\uff0c\u4e26\u4e14\u627e\u51faID\u6700\u5c0f\u7684\uff08\u5f9e\u5f8c\u9762\u627e\u56de\u4f86\u5373\u53ef\uff09 \u5206\u6790\uff1aTime complexity O(N^2), Space complexity O(N) class Solution { public : int minMalwareSpread ( vector vector int graph , vector int initial ) { //check which node be removed will remove the most connection int n = initial . size (), m = graph . size (); sort ( initial . begin (), initial . end ()); vector int color_cnt ( m , 0 ); //do not use n, otherwise runtime error will occurred such as [0,9] will out of the array bound with length 2 //count how much nodes can be traversed from the starting point for ( int i = 0 ; i n ; ++ i ) { int each_cnt = 0 ; vector bool traversed ( m , false ); DFS ( graph , initial [ i ], traversed , each_cnt ); color_cnt [ initial [ i ]] = each_cnt ; } int res = INT_MAX , max_color = 0 ; for ( int i = n - 1 ; i = 0 ; -- i ) { if ( color_cnt [ initial [ i ]] = max_color ) { res = initial [ i ]; max_color = color_cnt [ initial [ i ]]; } } return res ; } void DFS ( vector vector int graph , int cur_node , vector bool traversed , int each_cnt ) { if ( traversed [ cur_node ]) //traversed node, return { return ; } traversed [ cur_node ] = true ; each_cnt ++ ; for ( int i = 1 ; i graph [ cur_node ]. size (); ++ i ) { if ( graph [ cur_node ][ i ]) //traversable and not traversed, travese it { DFS ( graph , i , traversed , each_cnt ); } } return ; //end traverse of current node } };","title":"PD. 924. Minimize Malware Spread DFS\u627e\u51fa\u6700\u591a\u9023\u901a\u7684\u8d77\u9ede"},{"location":"programming_practice/leetcode_OJ_WC/WC120/","text":"leetcode_OJ WC120 \u89e3\u984c\u5fc3\u5f97 \u7e3d\u7b97\u5fd9\u5b8c\u4e00\u5207\uff0c\u7562\u696d\u5c08\u984c\u3001\u7814\u7a76\u6240\u3001\u56db\u4e0a\u8ab2\u696d\u3001\u6d3b\u52d5\u7b49\u7b49\uff0c\u5df2\u7d93\u5feb\u4e09\u500b\u6708\u6c92\u5beb\u984c\u76ee\u5566\uff0c\u96d6\u7136\u6709\u9ede\u751f\u758f\uff0c\u4f46\u4e45\u4e45\u56de\u6b78\u611f\u89ba\u771f\u597d PA. 977. Squares of a Sorted Array \u6c34\u984c \u984c\u610f\u4ee5\u53ca\u60f3\u6cd5\uff1a\u5e73\u65b9\u5f8c\u6392\u5e8f \u5206\u6790\uff1aTime complexity O(NlogN), Space complexity O(N) class Solution { public : vector int sortedSquares ( vector int A ) { int n = A . size (); vector int res ; for ( int i = 0 ; i n ; ++ i ) { A [ i ] = A [ i ] * A [ i ]; res . push_back ( A [ i ]); } sort ( res . begin (), res . end ()); return res ; } }; PB. 978. Longest Turbulent Subarray \u6c34\u984c \u984c\u610f\uff1a\u6eff\u8db3 a1 a2 a3 a4... \u6216 a1 a2 a3 a4... \u4e4b\u6700\u9577\u5b50\u9663\u5217 \u60f3\u6cd5\uff1a\u6c34\u984c\u76f4\u63a5\u505a \u5206\u6790\uff1aTime complexity O(N^2) (\u6703\u5c0f\u65bc\u8a31\u591a), Space complexity O(N) class Solution { public : int maxTurbulenceSize ( vector int A ) { int n = A . size (); if ( n == 1 ) { return 1 ; } int cnt = 0 , tmp = 0 , res = 0 ; for ( int i = 0 ; i n - 1 ; i ++ ) { tmp = 0 ; if ( A [ i ] A [ i + 1 ]) { cnt = 1 ; } else if ( A [ i ] A [ i + 1 ]) { cnt = 0 ; } for ( int j = i ; j n - 1 ; j ++ ) { if ( cnt ) // { if ( A [ j ] A [ j + 1 ]) { tmp ++ ; cnt ^= 1 ; } else { break ; } } else // { if ( A [ j ] A [ j + 1 ]) { tmp ++ ; cnt ^= 1 ; } else { break ; } } } res = max ( res , tmp ); } return res + 1 ; } }; PC. 979. Distribute Coins in Binary Tree \u6a39\u7bc0\u9ede\u6578\u503c\u5206\u914d \u984c\u610f\uff1a\u7d66\u5b9a\u4e00\u500b\u4e8c\u5143\u6a39\uff0c\u7bc0\u9ede\u7684\u6578\u503cval \u52a0\u7e3d\u70ba\u7bc0\u9ede\u6578\uff0c\u4e00\u6b21\u53ef\u4ee5\u5c071\u79fb\u51fa\u7bc0\u9ede\u6216\u662f\u79fb\u5165\uff08\u4ea6\u5373\uff1a\u589e\u52a0\u4e00\uff0c\u6216\u662f\u6e1b\u5c11\u4e00\uff09\uff0c\u8b02\u4e4b\u4e00\u6b65\uff0c\u554f\u8981\u591a\u5c11\u6b65\u9a5f\u624d\u80fd\u5c07\u6574\u68f5\u6a39\u7684\u5404\u500b\u7bc0\u9ede\u6578\u503c\u5e73\u8861\u70ba1 \u60f3\u6cd5\uff1a\u9019\u984c\u60f3\u6cd5\u6709\u9ede\u7279\u5225\uff0c\u6709\u5169\u500b\u6982\u5ff5\uff0c\u8003\u616e\u4e00\u500b\u5b50\u6a39\uff0c\u6709 left subtree, right subtree \u548c root \u6d41\u91cf = abs(node_val - 1)\uff0c\u6578\u503c\u6bd41\u591a\u7684subtree\u53ef\u4ee5flow\u51fa\uff08\u8981\u7d55\u5c0d\u503c\u7684\u539f\u56e0\u662f\uff0c\u6bd4\u4e00\u591a\u8981\u4f9b\u7d66\uff0c\u6bd4\u4e00\u5c11\u8981\u4ed6\u4eba\u63d0\u4f9b\uff09\uff0c\u4e0d\u9700\u8981\u5728\u610f\u662f\u8ab0\u63d0\u4f9b\u4e5f\u4e0d\u7528\u5728\u610f\u7d66\u8ab0\uff0c\u53ea\u8981\u592a\u591a\u5c31\u7d66\u51fa\uff08\u81f3\u65bcroot\u8981\u600e\u9ebc\u5206\u914d\u90a3\u662froot\u81ea\u5df1\u7684\u4e8b\u60c5\uff09\uff0c\u592a\u5c11\u9700\u6c42\uff0c\u50c5\u6b64\u800c\u5df2\uff0c\u7d42\u5c07\u5e73\u8861\u3002 \u6574\u68f5\u6a39\u7684\u5e73\u8861\u503c\uff08\u6574\u68f5\u6a39\u548c\u5b8c\u5168\u5e73\u8861 1 1 1\u7684\u6a39\u5dee\u591a\u5c11\uff09 \u6703\u662f left_subtree\u5e73\u8861\u503c + right_subtree\u5e73\u8861\u503c + root_val - 1\uff08\u56e0\u70ba root\u4e5f\u8981\u662f1\u6240\u4ee5\u5b83\u9084\u5dee root_val - 1\u5230\u9054\uff09 \u4e0d\u7528\u7d55\u5c0d\u503c\u7684\u539f\u56e0\u662f\uff0c\u5c11\u7684\u6703\u7531\u591a\u5f97\u4f86\u88dc\uff0c\u5728\u52a0\u4e0a\u7d55\u5c0d\u503c\u6703\u592a\u591a \u4f8b\u5982 [3,0,0] left subtree 0 \u7f3a\u4e00\uff0c\u6240\u4e00\u9700\u8981\u4e00\u500b\u4eba\u6d41\u52d5\u7d66\u5b83\uff0cright subtree\u4ea6\u540c\uff0c\u800c\u4e0a\u9762\u7684\u4e09\u6b63\u597d\u80fd\u5206\u7d66\u5de6\u53f3\u5404\u4e00\uff0c\u56e0\u6b64\u6d41\u91cf\uff08\u79fb\u52d5\u6b65\u6578 = abs(0-1) + abs(0-1)) \u800c \u6574\u68f5\u6a39\u7684\u5e73\u8861\u6578\u503c\u6703\u662f\uff1a (0 - 1) + (0 - 1) + (3 - 1) = 0 \u56e0\u6b64\u6574\u68f5\u6a39\u5e73\u8861 \u5206\u6790\uff1aTime complexity O(N)\uff0c\u8d70\u8a2a\u904e\u6240\u6709\u7bc0\u9ede\uff0cSpace complexity O(N) \u984d\u5916\u88dc\u5145\uff0c\u9019\u88e1\u53ef\u4ee5\u770b\u6709\u540d\u7684\u300c\u82b1\u82b1\u5237\u984c\u627e\u5de5\u4f5c\u300d\u6709\u66f4\u8a73\u7d30\u7684\u5f71\u97f3\u6a94\u8b1b\u89e3\uff0c\u6b61\u8fce\u5927\u5bb6\u8a02\u95b1\u4ed6 \u9023\u7d50 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : int res = 0 ; int distributeCoins ( TreeNode * root ) { dfs ( root ); return abs ( res ); } int dfs ( TreeNode * root ) { if ( root == NULL ) { return 0 ; } int L = dfs ( root - left ); //\u6aa2\u67e5\u5de6\u908a\u7684\u6d41\u91cf int R = dfs ( root - right ); //\u6aa2\u67e5\u5de6\u908a\u7684\u6d41\u91cf res += abs ( L ) + abs ( R ); //\u7e3d\u6d41\u91cf return L + R + ( root - val - 1 ); //\u6574\u68f5\u6a39\u7684\u5e73\u8861\u503c } }; PD. 980. Unique Paths III Hamilton path DFS, backtracking \u984c\u610f\uff1a\u554f\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\uff0c\u6709\u591a\u5c11 Hamilton path Wikipedia reference \u60f3\u6cd5\uff0c\u56e0\u70ba\u984c\u76ee\u898f\u6a21\u4e0d\u5927\uff0c(row x col) = 20 \u6578\u64da\u898f\u6a21\u89aa\u6c11\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u66b4\u529b\u7684DFS\u6c42\u89e3\uff08\u5176\u5be6\u662fDP\u60f3\u4e0d\u592a\u51fa\u4f86 XD)\uff0c\u5177\u9ad4\u63cf\u8ff0\u8acb\u898b\u4e0b\u9762\u7a0b\u5f0f\u78bc\u7684\u8a3b\u89e3 \u5206\u6790\uff1a Time complexity O(4^(row * col))\uff0c\u56e0\u70ba\u984c\u76ee\u898f\u6a21\u4e0d\u5927\uff0c\u53ef\u4ee5\u7528\u66b4\u529b\u89e3\u51fa\uff0c\u518d\u5927\u4e00\u9ede\u53ef\u80fd\u5c31 TLE\u4e86\uff0cSpace complexity O(row * col) class Solution { public : int zcnt = 0 , res = 0 ; int rt = 0 , ct = 0 ; int uniquePathsIII ( vector vector int grid ) { rt = grid . size (), ct = grid [ 0 ]. size (); int sr = 0 , sc = 0 ; for ( int r = 0 ; r rt ; r ++ ) { for ( int c = 0 ; c ct ; c ++ ) { if ( grid [ r ][ c ] == 1 ) { sr = r ; sc = c ; } else if ( grid [ r ][ c ] == 0 ) { zcnt ++ ; } } } dfs ( grid , sr , sc , 0 ); return res ; } void dfs ( vector vector int grid , int row , int col , int steps ) { if ( row 0 || row = rt || col 0 || col = ct || grid [ row ][ col ] 0 ) //illegal position { return ; } if ( grid [ row ][ col ] == 2 ) //reached the target position with steps = zcnt { if ( steps - 1 == zcnt ) { res ++ ; } return ; } grid [ row ][ col ] = - 2 ; //marked as traversed // 4 sides dfs ( grid , row - 1 , col , steps + 1 ); //U dfs ( grid , row + 1 , col , steps + 1 ); //D dfs ( grid , row , col - 1 , steps + 1 ); //L dfs ( grid , row , col + 1 , steps + 1 ); //R grid [ row ][ col ] = 0 ; //marked as untraversed, backtracking again } };","title":"WC120"},{"location":"programming_practice/leetcode_OJ_WC/WC120/#leetcode_oj-wc120","text":"\u7e3d\u7b97\u5fd9\u5b8c\u4e00\u5207\uff0c\u7562\u696d\u5c08\u984c\u3001\u7814\u7a76\u6240\u3001\u56db\u4e0a\u8ab2\u696d\u3001\u6d3b\u52d5\u7b49\u7b49\uff0c\u5df2\u7d93\u5feb\u4e09\u500b\u6708\u6c92\u5beb\u984c\u76ee\u5566\uff0c\u96d6\u7136\u6709\u9ede\u751f\u758f\uff0c\u4f46\u4e45\u4e45\u56de\u6b78\u611f\u89ba\u771f\u597d","title":"leetcode_OJ WC120 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC120/#pa-977-squares-of-a-sorted-array","text":"\u984c\u610f\u4ee5\u53ca\u60f3\u6cd5\uff1a\u5e73\u65b9\u5f8c\u6392\u5e8f \u5206\u6790\uff1aTime complexity O(NlogN), Space complexity O(N) class Solution { public : vector int sortedSquares ( vector int A ) { int n = A . size (); vector int res ; for ( int i = 0 ; i n ; ++ i ) { A [ i ] = A [ i ] * A [ i ]; res . push_back ( A [ i ]); } sort ( res . begin (), res . end ()); return res ; } };","title":"PA. 977. Squares of a Sorted Array \u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC120/#pb-978-longest-turbulent-subarray","text":"\u984c\u610f\uff1a\u6eff\u8db3 a1 a2 a3 a4... \u6216 a1 a2 a3 a4... \u4e4b\u6700\u9577\u5b50\u9663\u5217 \u60f3\u6cd5\uff1a\u6c34\u984c\u76f4\u63a5\u505a \u5206\u6790\uff1aTime complexity O(N^2) (\u6703\u5c0f\u65bc\u8a31\u591a), Space complexity O(N) class Solution { public : int maxTurbulenceSize ( vector int A ) { int n = A . size (); if ( n == 1 ) { return 1 ; } int cnt = 0 , tmp = 0 , res = 0 ; for ( int i = 0 ; i n - 1 ; i ++ ) { tmp = 0 ; if ( A [ i ] A [ i + 1 ]) { cnt = 1 ; } else if ( A [ i ] A [ i + 1 ]) { cnt = 0 ; } for ( int j = i ; j n - 1 ; j ++ ) { if ( cnt ) // { if ( A [ j ] A [ j + 1 ]) { tmp ++ ; cnt ^= 1 ; } else { break ; } } else // { if ( A [ j ] A [ j + 1 ]) { tmp ++ ; cnt ^= 1 ; } else { break ; } } } res = max ( res , tmp ); } return res + 1 ; } };","title":"PB. 978. Longest Turbulent Subarray \u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC120/#pc-979-distribute-coins-in-binary-tree","text":"\u984c\u610f\uff1a\u7d66\u5b9a\u4e00\u500b\u4e8c\u5143\u6a39\uff0c\u7bc0\u9ede\u7684\u6578\u503cval \u52a0\u7e3d\u70ba\u7bc0\u9ede\u6578\uff0c\u4e00\u6b21\u53ef\u4ee5\u5c071\u79fb\u51fa\u7bc0\u9ede\u6216\u662f\u79fb\u5165\uff08\u4ea6\u5373\uff1a\u589e\u52a0\u4e00\uff0c\u6216\u662f\u6e1b\u5c11\u4e00\uff09\uff0c\u8b02\u4e4b\u4e00\u6b65\uff0c\u554f\u8981\u591a\u5c11\u6b65\u9a5f\u624d\u80fd\u5c07\u6574\u68f5\u6a39\u7684\u5404\u500b\u7bc0\u9ede\u6578\u503c\u5e73\u8861\u70ba1 \u60f3\u6cd5\uff1a\u9019\u984c\u60f3\u6cd5\u6709\u9ede\u7279\u5225\uff0c\u6709\u5169\u500b\u6982\u5ff5\uff0c\u8003\u616e\u4e00\u500b\u5b50\u6a39\uff0c\u6709 left subtree, right subtree \u548c root \u6d41\u91cf = abs(node_val - 1)\uff0c\u6578\u503c\u6bd41\u591a\u7684subtree\u53ef\u4ee5flow\u51fa\uff08\u8981\u7d55\u5c0d\u503c\u7684\u539f\u56e0\u662f\uff0c\u6bd4\u4e00\u591a\u8981\u4f9b\u7d66\uff0c\u6bd4\u4e00\u5c11\u8981\u4ed6\u4eba\u63d0\u4f9b\uff09\uff0c\u4e0d\u9700\u8981\u5728\u610f\u662f\u8ab0\u63d0\u4f9b\u4e5f\u4e0d\u7528\u5728\u610f\u7d66\u8ab0\uff0c\u53ea\u8981\u592a\u591a\u5c31\u7d66\u51fa\uff08\u81f3\u65bcroot\u8981\u600e\u9ebc\u5206\u914d\u90a3\u662froot\u81ea\u5df1\u7684\u4e8b\u60c5\uff09\uff0c\u592a\u5c11\u9700\u6c42\uff0c\u50c5\u6b64\u800c\u5df2\uff0c\u7d42\u5c07\u5e73\u8861\u3002 \u6574\u68f5\u6a39\u7684\u5e73\u8861\u503c\uff08\u6574\u68f5\u6a39\u548c\u5b8c\u5168\u5e73\u8861 1 1 1\u7684\u6a39\u5dee\u591a\u5c11\uff09 \u6703\u662f left_subtree\u5e73\u8861\u503c + right_subtree\u5e73\u8861\u503c + root_val - 1\uff08\u56e0\u70ba root\u4e5f\u8981\u662f1\u6240\u4ee5\u5b83\u9084\u5dee root_val - 1\u5230\u9054\uff09 \u4e0d\u7528\u7d55\u5c0d\u503c\u7684\u539f\u56e0\u662f\uff0c\u5c11\u7684\u6703\u7531\u591a\u5f97\u4f86\u88dc\uff0c\u5728\u52a0\u4e0a\u7d55\u5c0d\u503c\u6703\u592a\u591a \u4f8b\u5982 [3,0,0] left subtree 0 \u7f3a\u4e00\uff0c\u6240\u4e00\u9700\u8981\u4e00\u500b\u4eba\u6d41\u52d5\u7d66\u5b83\uff0cright subtree\u4ea6\u540c\uff0c\u800c\u4e0a\u9762\u7684\u4e09\u6b63\u597d\u80fd\u5206\u7d66\u5de6\u53f3\u5404\u4e00\uff0c\u56e0\u6b64\u6d41\u91cf\uff08\u79fb\u52d5\u6b65\u6578 = abs(0-1) + abs(0-1)) \u800c \u6574\u68f5\u6a39\u7684\u5e73\u8861\u6578\u503c\u6703\u662f\uff1a (0 - 1) + (0 - 1) + (3 - 1) = 0 \u56e0\u6b64\u6574\u68f5\u6a39\u5e73\u8861 \u5206\u6790\uff1aTime complexity O(N)\uff0c\u8d70\u8a2a\u904e\u6240\u6709\u7bc0\u9ede\uff0cSpace complexity O(N) \u984d\u5916\u88dc\u5145\uff0c\u9019\u88e1\u53ef\u4ee5\u770b\u6709\u540d\u7684\u300c\u82b1\u82b1\u5237\u984c\u627e\u5de5\u4f5c\u300d\u6709\u66f4\u8a73\u7d30\u7684\u5f71\u97f3\u6a94\u8b1b\u89e3\uff0c\u6b61\u8fce\u5927\u5bb6\u8a02\u95b1\u4ed6 \u9023\u7d50 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : int res = 0 ; int distributeCoins ( TreeNode * root ) { dfs ( root ); return abs ( res ); } int dfs ( TreeNode * root ) { if ( root == NULL ) { return 0 ; } int L = dfs ( root - left ); //\u6aa2\u67e5\u5de6\u908a\u7684\u6d41\u91cf int R = dfs ( root - right ); //\u6aa2\u67e5\u5de6\u908a\u7684\u6d41\u91cf res += abs ( L ) + abs ( R ); //\u7e3d\u6d41\u91cf return L + R + ( root - val - 1 ); //\u6574\u68f5\u6a39\u7684\u5e73\u8861\u503c } };","title":"PC. 979. Distribute Coins in Binary Tree \u6a39\u7bc0\u9ede\u6578\u503c\u5206\u914d"},{"location":"programming_practice/leetcode_OJ_WC/WC120/#pd-980-unique-paths-iii-hamilton-path-dfs-backtracking","text":"\u984c\u610f\uff1a\u554f\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\uff0c\u6709\u591a\u5c11 Hamilton path Wikipedia reference \u60f3\u6cd5\uff0c\u56e0\u70ba\u984c\u76ee\u898f\u6a21\u4e0d\u5927\uff0c(row x col) = 20 \u6578\u64da\u898f\u6a21\u89aa\u6c11\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u66b4\u529b\u7684DFS\u6c42\u89e3\uff08\u5176\u5be6\u662fDP\u60f3\u4e0d\u592a\u51fa\u4f86 XD)\uff0c\u5177\u9ad4\u63cf\u8ff0\u8acb\u898b\u4e0b\u9762\u7a0b\u5f0f\u78bc\u7684\u8a3b\u89e3 \u5206\u6790\uff1a Time complexity O(4^(row * col))\uff0c\u56e0\u70ba\u984c\u76ee\u898f\u6a21\u4e0d\u5927\uff0c\u53ef\u4ee5\u7528\u66b4\u529b\u89e3\u51fa\uff0c\u518d\u5927\u4e00\u9ede\u53ef\u80fd\u5c31 TLE\u4e86\uff0cSpace complexity O(row * col) class Solution { public : int zcnt = 0 , res = 0 ; int rt = 0 , ct = 0 ; int uniquePathsIII ( vector vector int grid ) { rt = grid . size (), ct = grid [ 0 ]. size (); int sr = 0 , sc = 0 ; for ( int r = 0 ; r rt ; r ++ ) { for ( int c = 0 ; c ct ; c ++ ) { if ( grid [ r ][ c ] == 1 ) { sr = r ; sc = c ; } else if ( grid [ r ][ c ] == 0 ) { zcnt ++ ; } } } dfs ( grid , sr , sc , 0 ); return res ; } void dfs ( vector vector int grid , int row , int col , int steps ) { if ( row 0 || row = rt || col 0 || col = ct || grid [ row ][ col ] 0 ) //illegal position { return ; } if ( grid [ row ][ col ] == 2 ) //reached the target position with steps = zcnt { if ( steps - 1 == zcnt ) { res ++ ; } return ; } grid [ row ][ col ] = - 2 ; //marked as traversed // 4 sides dfs ( grid , row - 1 , col , steps + 1 ); //U dfs ( grid , row + 1 , col , steps + 1 ); //D dfs ( grid , row , col - 1 , steps + 1 ); //L dfs ( grid , row , col + 1 , steps + 1 ); //R grid [ row ][ col ] = 0 ; //marked as untraversed, backtracking again } };","title":"PD. 980. Unique Paths III Hamilton path DFS, backtracking"},{"location":"programming_practice/leetcode_OJ_WC/WC67/","text":"leetcode_OJ WC67 \u89e3\u984c\u5fc3\u5f97 Contest time: Jan 14, 2018 Virtual Contest time: Mar 24, 2018 PA. 762. Prime Number of Set Bits in Binary Representation \u4f4d\u5143\u64cd\u4f5c\u6c34\u984c \u601d\u8def\uff1a\u4f4d\u5143\u904b\u7b97\u6293\u4e00\uff0c\u770b\u770b\u4e00\u7684\u500b\u6578\u662f\u5426\u70ba\u8cea\u6578 class Solution { public : int bitcnt ( int num ) { int cnt = 0 ; while ( num 0 ) { if ( num 0x1 ) { cnt ++ ; } num = 1 ; } return cnt ; } bool is_prime ( int num ) { if ( num == 1 ) return false ; for ( int i = 2 ; i = ( int ) sqrt ( num ); i ++ ) { if ( num % i == 0 ) { return false ; } } return true ; } int countPrimeSetBits ( int left , int right ) { int cnt = 0 , bit = 0 ; for ( size_t i = left ; i = right ; i ++ ) { bit = bitcnt ( i ); if ( is_prime ( bit )) { cnt ++ ; } } return cnt ; } }; PB. 763. Partition Labels \u8caa\u5fc3\u6f14\u7b97\u6cd5\u63a8\u7406\u984c \u601d\u8def\uff1a\u5fc5\u9808\u8b93\u6240\u6709char\u958b\u59cb\u7d50\u675f\u5747\u5c6c\u65bc\u540c\u4e00\u500b\u5340\u584a\uff0c\u6545\u5229\u7528struct\u7d00\u9304\u6bcf\u4e00\u500bchar\u7684\u6700\u65e9\u958b\u59cb\u4f4d\u7f6e\uff0c\u8207\u6700\u665a\u7d50\u675f\u4f4d\u7f6e\u3002\u82e5\u5b57\u5143x\u7684\u958b\u59cb\u4f4d\u7f6ex_start\u4ecb\u65bc\u7576\u524d\u6700\u5c0f\u958b\u59cb(min_start)\u8207\u7d50\u675f(max_end)\u4e4b\u9593\uff0c\u4e26\u4e14\u5b57\u5143x\u7684\u7d50\u675f\u4f4d\u7f6e\u5927\u65bc\u7576\u524d\u7684max_end \u5247\u5fc5\u9808\u518d\u5c07max_end\u5ef6\u4f38\uff0c\u5426\u5247\u7121\u6cd5\u7b26\u5408\u984c\u76ee\u9700\u6c42\u8b93char\u6700\u5c0f\u958b\u59cb\u8207\u6700\u5927\u7d50\u675f\u8857\u4f4d\u5728\u540c\u4e00\u500b\u5340\u584a\u3002 \u6bcf\u6b21\u90fd\u627e\u7576\u524d\u6700\u9060\u7684\u4e26\u6aa2\u67e5\u662f\u5426\u66f4\u65b0\uff08\u5340\u57df\u6700\u512a\u89e3\uff09\uff0c\u662f\u5c6c\u65bc\u8caa\u5fc3\u7b97\u6cd5\u7684\u4e00\u7a2e class Solution { public : struct stend { char alpha ; int start , end ; }; bool mycompare ( stend s1 , stend s2 ) { return s1 . start s2 . start ; } vector int partitionLabels ( string str ) { int count = str . size (); vector stend vec ; vec . resize ( 26 ); for ( int i = 0 ; i 26 ; i ++ ) { vec [ i ]. start = - 1 ; vec [ i ]. end = 0 ; vec [ i ]. alpha = 0 ; } vec [ str [ 0 ] - a ]. start = 0 ; for ( size_t i = 1 ; i count ; i ++ ) { vec [ str [ i ] - a ]. alpha = str [ i ]; if ( vec [ str [ i ] - a ]. start == - 1 ) { vec [ str [ i ] - a ]. start = i ; } if ( i vec [ str [ i ] - a ]. end ) { vec [ str [ i ] - a ]. end = i ; } } int min_start = vec [ str [ 0 ] - a ]. start ; int max_end = vec [ str [ 0 ] - a ]. end ; //greedy approach int partition = 0 ; vector int res ; for ( size_t i = 0 ; i count ; i ++ ) { if ( vec [ str [ i ] - a ]. start min_start vec [ str [ i ] - a ]. start max_end vec [ str [ i ] - a ]. end max_end ) { max_end = vec [ str [ i ] - a ]. end ; } if ( i == max_end || i == count - 1 ) //last will definitely cut over to match. just in case { if ( i != count - 1 ) { res . push_back ( max_end - min_start + 1 ); min_start = vec [ str [ i + 1 ] - a ]. start ; max_end = vec [ str [ i + 1 ] - a ]. end ; } else { res . push_back ( max_end - min_start + 1 ); // a special case } } } return res ; } }; PC. 764. Largest Plus Sign \u52d5\u614b\u898f\u5283 \u7531\u65bc\u6bcf\u4e00\u9ede\u7684+\u865f\u4e2d\u5fc3\uff0c\u5468\u570d\u7684\u56db\u89d2\u90fd\u5fc5\u9808\u7b49\u9577\u70ba\u9023\u7e8c\u76841(\u91cd\u758a\u5b50\u554f\u984c)\uff0c\u82e5\u4e0d\u7b49\u9577\u5247\u53ea\u80fd\u76e1\u91cf\u5ef6\u4f38\u81f3\u300e\u56db\u89d2\u6700\u77ed\u7684\u89d2\u300f\u4f5c\u70ba\u672c\u6b21\u7684order(\u6700\u512a\u5b50\u7d50\u69cb)\uff0c\u56e0\u6b64\u63a1\u7528\u52d5\u614b\u898f\u5283 \u9996\u5148\u628a\u56db\u500b\u65b9\u5411\uff08\u671d\u4e0a \u671d\u4e0b \u671d\u5de6 \u671d\u53f3 \u9023\u7e8c\u76841\u7d66\u8a18\u8f09 \u4f8b\u5982\u671d\u53f3\u884c\u9032 0110111 0120123 \u671d\u5de6\u884c\u9032 0210321 \u7684\u5beb\u6cd5\uff09\uff0c\u6700\u5f8c\u5168\u90e8\u8d70\u8a2a\u904e\u4e00\u904d\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u4e00\u9ede\u53d6min(u,d,l,r)\u9023\u7e8c\u4e00\u7684\u500b\u6578\u5c31\u662f\u7576\u524d\u80fd\u7d44\u6210\uff0b\u865f\u7684order\uff08\u5ea6\u6578\uff09 \u6700\u5f8c\u91cd\u65b0\u8d70\u8a2a\u4e00\u904d\u627e\u51fa\u5c0d\u65bc\u6bcf\u4e00\u9ede\u6700\u5927\u7684order\u3002 class Solution { public : int orderOfLargestPlusSign ( int MAXN , vector vector int mines ) { int order = 0 , count = mines . size (); vector vector int dp_up ( MAXN , vector int ( MAXN , 1 )), dp_down ( MAXN , vector int ( MAXN , 1 )), dp_left ( MAXN , vector int ( MAXN , 1 )), dp_right ( MAXN , vector int ( MAXN , 1 )), dp_ans ( MAXN , vector int ( MAXN , 0 )); for ( size_t i = 0 ; i count ; i ++ ) { dp_up [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; dp_down [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; dp_left [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; dp_right [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; } //main dynamic programming //up continuous (bottom up) for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = MAXN - 2 ; j = 0 ; j -- ) { if ( dp_up [ j ][ i ] == 1 ) { dp_up [ j ][ i ] = dp_up [ j + 1 ][ i ] + 1 ; } } } //down continuous (top down) for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = 1 ; j MAXN ; j ++ ) { if ( dp_down [ j ][ i ] == 1 ) { dp_down [ j ][ i ] = dp_down [ j - 1 ][ i ] + 1 ; } } } //left continuous for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = MAXN - 2 ; j = 0 ; j -- ) { if ( dp_left [ i ][ j ] == 1 ) { dp_left [ i ][ j ] = dp_left [ i ][ j + 1 ] + 1 ; } } } //right continuous for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = 1 ; j MAXN ; j ++ ) { if ( dp_right [ i ][ j ] == 1 ) { dp_right [ i ][ j ] = dp_right [ i ][ j - 1 ] + 1 ; } } } //check for direction since the plus sign has to satisfiy all the four direction, if one of the direction fails. it has to decrease to that direction for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = 0 ; j MAXN ; j ++ ) { dp_ans [ i ][ j ] = min ( min ( dp_up [ i ][ j ], dp_down [ i ][ j ]), min ( dp_left [ i ][ j ], dp_right [ i ][ j ])); if ( dp_ans [ i ][ j ] order ) { order = dp_ans [ i ][ j ]; } } } return order ; } };","title":"WC67"},{"location":"programming_practice/leetcode_OJ_WC/WC67/#leetcode_oj-wc67","text":"Contest time: Jan 14, 2018 Virtual Contest time: Mar 24, 2018","title":"leetcode_OJ WC67 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC67/#pa-762-prime-number-of-set-bits-in-binary-representation","text":"\u601d\u8def\uff1a\u4f4d\u5143\u904b\u7b97\u6293\u4e00\uff0c\u770b\u770b\u4e00\u7684\u500b\u6578\u662f\u5426\u70ba\u8cea\u6578 class Solution { public : int bitcnt ( int num ) { int cnt = 0 ; while ( num 0 ) { if ( num 0x1 ) { cnt ++ ; } num = 1 ; } return cnt ; } bool is_prime ( int num ) { if ( num == 1 ) return false ; for ( int i = 2 ; i = ( int ) sqrt ( num ); i ++ ) { if ( num % i == 0 ) { return false ; } } return true ; } int countPrimeSetBits ( int left , int right ) { int cnt = 0 , bit = 0 ; for ( size_t i = left ; i = right ; i ++ ) { bit = bitcnt ( i ); if ( is_prime ( bit )) { cnt ++ ; } } return cnt ; } };","title":"PA. 762. Prime Number of Set Bits in Binary Representation \u4f4d\u5143\u64cd\u4f5c\u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC67/#pb-763-partition-labels","text":"\u601d\u8def\uff1a\u5fc5\u9808\u8b93\u6240\u6709char\u958b\u59cb\u7d50\u675f\u5747\u5c6c\u65bc\u540c\u4e00\u500b\u5340\u584a\uff0c\u6545\u5229\u7528struct\u7d00\u9304\u6bcf\u4e00\u500bchar\u7684\u6700\u65e9\u958b\u59cb\u4f4d\u7f6e\uff0c\u8207\u6700\u665a\u7d50\u675f\u4f4d\u7f6e\u3002\u82e5\u5b57\u5143x\u7684\u958b\u59cb\u4f4d\u7f6ex_start\u4ecb\u65bc\u7576\u524d\u6700\u5c0f\u958b\u59cb(min_start)\u8207\u7d50\u675f(max_end)\u4e4b\u9593\uff0c\u4e26\u4e14\u5b57\u5143x\u7684\u7d50\u675f\u4f4d\u7f6e\u5927\u65bc\u7576\u524d\u7684max_end \u5247\u5fc5\u9808\u518d\u5c07max_end\u5ef6\u4f38\uff0c\u5426\u5247\u7121\u6cd5\u7b26\u5408\u984c\u76ee\u9700\u6c42\u8b93char\u6700\u5c0f\u958b\u59cb\u8207\u6700\u5927\u7d50\u675f\u8857\u4f4d\u5728\u540c\u4e00\u500b\u5340\u584a\u3002 \u6bcf\u6b21\u90fd\u627e\u7576\u524d\u6700\u9060\u7684\u4e26\u6aa2\u67e5\u662f\u5426\u66f4\u65b0\uff08\u5340\u57df\u6700\u512a\u89e3\uff09\uff0c\u662f\u5c6c\u65bc\u8caa\u5fc3\u7b97\u6cd5\u7684\u4e00\u7a2e class Solution { public : struct stend { char alpha ; int start , end ; }; bool mycompare ( stend s1 , stend s2 ) { return s1 . start s2 . start ; } vector int partitionLabels ( string str ) { int count = str . size (); vector stend vec ; vec . resize ( 26 ); for ( int i = 0 ; i 26 ; i ++ ) { vec [ i ]. start = - 1 ; vec [ i ]. end = 0 ; vec [ i ]. alpha = 0 ; } vec [ str [ 0 ] - a ]. start = 0 ; for ( size_t i = 1 ; i count ; i ++ ) { vec [ str [ i ] - a ]. alpha = str [ i ]; if ( vec [ str [ i ] - a ]. start == - 1 ) { vec [ str [ i ] - a ]. start = i ; } if ( i vec [ str [ i ] - a ]. end ) { vec [ str [ i ] - a ]. end = i ; } } int min_start = vec [ str [ 0 ] - a ]. start ; int max_end = vec [ str [ 0 ] - a ]. end ; //greedy approach int partition = 0 ; vector int res ; for ( size_t i = 0 ; i count ; i ++ ) { if ( vec [ str [ i ] - a ]. start min_start vec [ str [ i ] - a ]. start max_end vec [ str [ i ] - a ]. end max_end ) { max_end = vec [ str [ i ] - a ]. end ; } if ( i == max_end || i == count - 1 ) //last will definitely cut over to match. just in case { if ( i != count - 1 ) { res . push_back ( max_end - min_start + 1 ); min_start = vec [ str [ i + 1 ] - a ]. start ; max_end = vec [ str [ i + 1 ] - a ]. end ; } else { res . push_back ( max_end - min_start + 1 ); // a special case } } } return res ; } };","title":"PB. 763. Partition Labels \u8caa\u5fc3\u6f14\u7b97\u6cd5\u63a8\u7406\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC67/#pc-764-largest-plus-sign","text":"\u7531\u65bc\u6bcf\u4e00\u9ede\u7684+\u865f\u4e2d\u5fc3\uff0c\u5468\u570d\u7684\u56db\u89d2\u90fd\u5fc5\u9808\u7b49\u9577\u70ba\u9023\u7e8c\u76841(\u91cd\u758a\u5b50\u554f\u984c)\uff0c\u82e5\u4e0d\u7b49\u9577\u5247\u53ea\u80fd\u76e1\u91cf\u5ef6\u4f38\u81f3\u300e\u56db\u89d2\u6700\u77ed\u7684\u89d2\u300f\u4f5c\u70ba\u672c\u6b21\u7684order(\u6700\u512a\u5b50\u7d50\u69cb)\uff0c\u56e0\u6b64\u63a1\u7528\u52d5\u614b\u898f\u5283 \u9996\u5148\u628a\u56db\u500b\u65b9\u5411\uff08\u671d\u4e0a \u671d\u4e0b \u671d\u5de6 \u671d\u53f3 \u9023\u7e8c\u76841\u7d66\u8a18\u8f09 \u4f8b\u5982\u671d\u53f3\u884c\u9032 0110111 0120123 \u671d\u5de6\u884c\u9032 0210321 \u7684\u5beb\u6cd5\uff09\uff0c\u6700\u5f8c\u5168\u90e8\u8d70\u8a2a\u904e\u4e00\u904d\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u4e00\u9ede\u53d6min(u,d,l,r)\u9023\u7e8c\u4e00\u7684\u500b\u6578\u5c31\u662f\u7576\u524d\u80fd\u7d44\u6210\uff0b\u865f\u7684order\uff08\u5ea6\u6578\uff09 \u6700\u5f8c\u91cd\u65b0\u8d70\u8a2a\u4e00\u904d\u627e\u51fa\u5c0d\u65bc\u6bcf\u4e00\u9ede\u6700\u5927\u7684order\u3002 class Solution { public : int orderOfLargestPlusSign ( int MAXN , vector vector int mines ) { int order = 0 , count = mines . size (); vector vector int dp_up ( MAXN , vector int ( MAXN , 1 )), dp_down ( MAXN , vector int ( MAXN , 1 )), dp_left ( MAXN , vector int ( MAXN , 1 )), dp_right ( MAXN , vector int ( MAXN , 1 )), dp_ans ( MAXN , vector int ( MAXN , 0 )); for ( size_t i = 0 ; i count ; i ++ ) { dp_up [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; dp_down [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; dp_left [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; dp_right [ mines [ i ][ 0 ]][ mines [ i ][ 1 ]] = 0 ; } //main dynamic programming //up continuous (bottom up) for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = MAXN - 2 ; j = 0 ; j -- ) { if ( dp_up [ j ][ i ] == 1 ) { dp_up [ j ][ i ] = dp_up [ j + 1 ][ i ] + 1 ; } } } //down continuous (top down) for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = 1 ; j MAXN ; j ++ ) { if ( dp_down [ j ][ i ] == 1 ) { dp_down [ j ][ i ] = dp_down [ j - 1 ][ i ] + 1 ; } } } //left continuous for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = MAXN - 2 ; j = 0 ; j -- ) { if ( dp_left [ i ][ j ] == 1 ) { dp_left [ i ][ j ] = dp_left [ i ][ j + 1 ] + 1 ; } } } //right continuous for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = 1 ; j MAXN ; j ++ ) { if ( dp_right [ i ][ j ] == 1 ) { dp_right [ i ][ j ] = dp_right [ i ][ j - 1 ] + 1 ; } } } //check for direction since the plus sign has to satisfiy all the four direction, if one of the direction fails. it has to decrease to that direction for ( int i = 0 ; i MAXN ; i ++ ) { for ( int j = 0 ; j MAXN ; j ++ ) { dp_ans [ i ][ j ] = min ( min ( dp_up [ i ][ j ], dp_down [ i ][ j ]), min ( dp_left [ i ][ j ], dp_right [ i ][ j ])); if ( dp_ans [ i ][ j ] order ) { order = dp_ans [ i ][ j ]; } } } return order ; } };","title":"PC. 764. Largest Plus Sign \u52d5\u614b\u898f\u5283"},{"location":"programming_practice/leetcode_OJ_WC/WC70/","text":"leetcode_OJ WC70 \u89e3\u984c\u5fc3\u5f97 Contest time: Feb 4, 2018 Virtual contest by myself: Mar 4, 2018 PA. 779. K-th Symbol in Grammar \u627e\u898f\u5f8b\u984c \u601d\u8def\uff1a\u627e\u898f\u5f8b\uff0c\u524d\u9762\u7684N\uff0c\u5be6\u969b\u4e0a\u662f\u969c\u773c\u6cd5\u3002 \u4ee5\u4e0b\u7684N\u662f\u4e00(1-based) 2 3 5 8 9 12 14 15 \u5176-1\u5f8c\u4e8c\u9032\u4f4d\u8868\u793a\u6cd5\u70ba\uff1a 0001 0010 0100 0111 1000 1011 1101 1110 \u6e1b\u4e00\u5f8c\u6709\u5947\u6578\u500b\u4e00\u5247\u70ba1 \u5426\u5247\u70ba0 class Solution { public : int kthGrammar ( int nin , int kin ) { int cnt = 0 ; kin -- ; while ( kin ) { if ( kin 1 ) { cnt ++ ; } kin = 1 ; } return cnt 1 ; } }; PB. \u88ab\u9396\u4f4f\u770b\u4e0d\u5230\uff20\uff20\uff0c\u4e8b\u5f8c\u8cfd\uff0c\u9700\u8981\u5347\u7d1a\u6210\u9ad8\u7d1a\u6703\u54e1\u624d\u6709\uff0c\u770b\u984c\u76ee\u662f\u5207\u5272\u4e8c\u5143\u6a39 PC. 777. Swap Adjacent in LR String \u5b57\u4e32\u5167\u90e8dfs \u932f\u8aa4\u601d\u8def \uff1a\u60f3\u8aaa\u7528\u64f4\u6563\u89e3\u6cd5\uff0cdfs\u4e0b\u53bb\u8996\u60c5\u6cc1\u4ea4\u63db\uff0c\u7136\u5403\u4e86\u4e00\u500b\u5927RE(stack overflow) \u5f8c\u4f86\u767c\u73fe\u662f\u5fd8\u4e86\u5bebvisited\uff1d \uff1d\uff0c\u6839\u672c\u8822\uff0c\u770b\u4f86\u9019\u65b9\u9762\u9084\u5f97\u591a\u591a\u78e8\u7df4\u9020\u5316 //Runtime Error (stack overflow) class Solution { public : bool can = false ; bool canTransform ( string start , string end ) { if ( start == end ) return 1 ; else { dfs ( start , end , 0 , start . size () - 1 ); } return can ; } void dfs ( string start , string end , int lptr , int rptr ) //quick sort-like recusrion { if ( lptr = rptr ) //length end { return ; } if ( start == end ) { can = true ; return ; } int len = start . size () 1 ; int lptr1 = lptr , rptr1 = len ; int lptr2 = len + 1 , rptr2 = rptr ; for ( int pos = lptr ; pos = rptr ; pos ++ ) { if ( start [ pos ] == X start [ pos + 1 ] == L ) { swap ( start [ pos ], start [ pos + 1 ]); } else if ( start [ pos ] == R start [ pos + 1 ] == X ) { swap ( start [ pos ], start [ pos + 1 ]); } } dfs ( start , end , lptr1 , rptr1 ); dfs ( start , end , lptr2 , rptr2 ); } }; \u6b63\u78ba\u601d\u8def\uff0c\u53c3\u8003\u4e86\u8a0e\u8ad6\u5340\u63d0\u793a\uff1a\u7531\u65bcR\u53ea\u80fd\u5411\u53f3\uff0c\u800cL\u53ea\u80fd\u5411\u5de6\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u900f\u904e\u5169\u500b\u6307\u6a19\u5728\u5169\u5b57\u4e32\u4e2d\u8dd1\uff0c\u627e\u5230\u7b2c\u4e00\u500b\u975eX\u7684\u5b57\u5143\uff0c\u82e5\u4e0d\u4e00\u6a23\u5247\u5fc5\u7136\u7121\u6cd5\u66ff\u63db\uff0c\u800c\u8981\u4f7f\u5f97R\u80fd\u5920\u66ff\u63db\u6210\u7d50\u679c \u552f\u6709start \u7684 R \u8f03 end \u7684 R \u5de6\u5074\uff0c\u624d\u6709\u6a5f\u6703\u5411\u53f3\uff0c\u82e5R\u5df2\u7d93\u592a\u53f3\u908a\u4e86\uff08\u4ea6\u5373\u8d85\u51faend\u7684R \uff09 \u4fbf\u662f\u63db\u4e0d\u904e\u53bb\u4e86\uff0c\u540c\u7406\u53ef\u5f97L\u7684\u6982\u5ff5 class Solution { public : bool can = false ; bool canTransform ( string start , string end ) { if ( start == end ) return 1 ; else if ( start . size () != end . size ()) { return 0 ; } int len = start . size (); int ptr1 = 0 , ptr2 = 0 ; while ( ptr1 len ptr2 len ) //both in the boundary { while ( ptr1 len start [ ptr1 ] == X ) //iterate till not X in start ptr1 ++ ; while ( ptr2 len end [ ptr2 ] == X ) //iterate till not X in end ptr2 ++ ; if ( start [ ptr1 ] != end [ ptr2 ]) //example XL RX they are different, unable to swap return 0 ; //iterate till next non X, both increment if ( start [ ptr1 ] == R ptr1 ptr2 ) //R of start is right to the R of end, //R can only move right but this situation needs R to move left, which is a contradiction //\u6ce8\u610f\u4e0d\u80fd\u5bebptr1 = ptr2 \u56e0\u70ba XRXL XRLX XR\u90e8\u4efd\u5df2\u7d93\u6eff\u8db3\uff0c\u662f XR RX\u624d\u4e0d\u884c\uff01\uff01 { return 0 ; } else if ( start [ ptr1 ] == L ptr2 ptr1 ) //L of start is left to the L of end, //L can only move left but this situation needs L to move right, which is a contradiction { return 0 ; } ptr1 ++ ; ptr2 ++ ; } return 1 ; } };","title":"WC70"},{"location":"programming_practice/leetcode_OJ_WC/WC70/#leetcode_oj-wc70","text":"Contest time: Feb 4, 2018 Virtual contest by myself: Mar 4, 2018","title":"leetcode_OJ WC70 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC70/#pa-779-k-th-symbol-in-grammar","text":"\u601d\u8def\uff1a\u627e\u898f\u5f8b\uff0c\u524d\u9762\u7684N\uff0c\u5be6\u969b\u4e0a\u662f\u969c\u773c\u6cd5\u3002 \u4ee5\u4e0b\u7684N\u662f\u4e00(1-based) 2 3 5 8 9 12 14 15 \u5176-1\u5f8c\u4e8c\u9032\u4f4d\u8868\u793a\u6cd5\u70ba\uff1a 0001 0010 0100 0111 1000 1011 1101 1110 \u6e1b\u4e00\u5f8c\u6709\u5947\u6578\u500b\u4e00\u5247\u70ba1 \u5426\u5247\u70ba0 class Solution { public : int kthGrammar ( int nin , int kin ) { int cnt = 0 ; kin -- ; while ( kin ) { if ( kin 1 ) { cnt ++ ; } kin = 1 ; } return cnt 1 ; } };","title":"PA. 779. K-th Symbol in Grammar \u627e\u898f\u5f8b\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC70/#pb","text":"\u88ab\u9396\u4f4f\u770b\u4e0d\u5230\uff20\uff20\uff0c\u4e8b\u5f8c\u8cfd\uff0c\u9700\u8981\u5347\u7d1a\u6210\u9ad8\u7d1a\u6703\u54e1\u624d\u6709\uff0c\u770b\u984c\u76ee\u662f\u5207\u5272\u4e8c\u5143\u6a39","title":"PB."},{"location":"programming_practice/leetcode_OJ_WC/WC70/#pc-777-swap-adjacent-in-lr-string-dfs","text":"\u932f\u8aa4\u601d\u8def \uff1a\u60f3\u8aaa\u7528\u64f4\u6563\u89e3\u6cd5\uff0cdfs\u4e0b\u53bb\u8996\u60c5\u6cc1\u4ea4\u63db\uff0c\u7136\u5403\u4e86\u4e00\u500b\u5927RE(stack overflow) \u5f8c\u4f86\u767c\u73fe\u662f\u5fd8\u4e86\u5bebvisited\uff1d \uff1d\uff0c\u6839\u672c\u8822\uff0c\u770b\u4f86\u9019\u65b9\u9762\u9084\u5f97\u591a\u591a\u78e8\u7df4\u9020\u5316 //Runtime Error (stack overflow) class Solution { public : bool can = false ; bool canTransform ( string start , string end ) { if ( start == end ) return 1 ; else { dfs ( start , end , 0 , start . size () - 1 ); } return can ; } void dfs ( string start , string end , int lptr , int rptr ) //quick sort-like recusrion { if ( lptr = rptr ) //length end { return ; } if ( start == end ) { can = true ; return ; } int len = start . size () 1 ; int lptr1 = lptr , rptr1 = len ; int lptr2 = len + 1 , rptr2 = rptr ; for ( int pos = lptr ; pos = rptr ; pos ++ ) { if ( start [ pos ] == X start [ pos + 1 ] == L ) { swap ( start [ pos ], start [ pos + 1 ]); } else if ( start [ pos ] == R start [ pos + 1 ] == X ) { swap ( start [ pos ], start [ pos + 1 ]); } } dfs ( start , end , lptr1 , rptr1 ); dfs ( start , end , lptr2 , rptr2 ); } }; \u6b63\u78ba\u601d\u8def\uff0c\u53c3\u8003\u4e86\u8a0e\u8ad6\u5340\u63d0\u793a\uff1a\u7531\u65bcR\u53ea\u80fd\u5411\u53f3\uff0c\u800cL\u53ea\u80fd\u5411\u5de6\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u900f\u904e\u5169\u500b\u6307\u6a19\u5728\u5169\u5b57\u4e32\u4e2d\u8dd1\uff0c\u627e\u5230\u7b2c\u4e00\u500b\u975eX\u7684\u5b57\u5143\uff0c\u82e5\u4e0d\u4e00\u6a23\u5247\u5fc5\u7136\u7121\u6cd5\u66ff\u63db\uff0c\u800c\u8981\u4f7f\u5f97R\u80fd\u5920\u66ff\u63db\u6210\u7d50\u679c \u552f\u6709start \u7684 R \u8f03 end \u7684 R \u5de6\u5074\uff0c\u624d\u6709\u6a5f\u6703\u5411\u53f3\uff0c\u82e5R\u5df2\u7d93\u592a\u53f3\u908a\u4e86\uff08\u4ea6\u5373\u8d85\u51faend\u7684R \uff09 \u4fbf\u662f\u63db\u4e0d\u904e\u53bb\u4e86\uff0c\u540c\u7406\u53ef\u5f97L\u7684\u6982\u5ff5 class Solution { public : bool can = false ; bool canTransform ( string start , string end ) { if ( start == end ) return 1 ; else if ( start . size () != end . size ()) { return 0 ; } int len = start . size (); int ptr1 = 0 , ptr2 = 0 ; while ( ptr1 len ptr2 len ) //both in the boundary { while ( ptr1 len start [ ptr1 ] == X ) //iterate till not X in start ptr1 ++ ; while ( ptr2 len end [ ptr2 ] == X ) //iterate till not X in end ptr2 ++ ; if ( start [ ptr1 ] != end [ ptr2 ]) //example XL RX they are different, unable to swap return 0 ; //iterate till next non X, both increment if ( start [ ptr1 ] == R ptr1 ptr2 ) //R of start is right to the R of end, //R can only move right but this situation needs R to move left, which is a contradiction //\u6ce8\u610f\u4e0d\u80fd\u5bebptr1 = ptr2 \u56e0\u70ba XRXL XRLX XR\u90e8\u4efd\u5df2\u7d93\u6eff\u8db3\uff0c\u662f XR RX\u624d\u4e0d\u884c\uff01\uff01 { return 0 ; } else if ( start [ ptr1 ] == L ptr2 ptr1 ) //L of start is left to the L of end, //L can only move left but this situation needs L to move right, which is a contradiction { return 0 ; } ptr1 ++ ; ptr2 ++ ; } return 1 ; } };","title":"PC. 777. Swap Adjacent in LR String \u5b57\u4e32\u5167\u90e8dfs"},{"location":"programming_practice/leetcode_OJ_WC/WC74/","text":"leetcode_OJ WC74 \u89e3\u984c\u5fc3\u5f97 Contest time: Mar 4, 2018 \u4eca\u5929\u4e0a\u5348\u6253\uff0c\u5bb6\u88e1\u7684\u7db2\u8def\u901f\u5ea6\u53ea\u6709\u5b78\u6821\u7684\u767e\u5206\u4e4b\u4e00\u4e0d\u5230R\uff08\u4e0b\u8f09 10 \u4e0a\u50b34\uff09\uff0c\u52a0\u4e0aLeetCode\u7684server\u4e00\u76f4timeout\uff0c\u7528debug\u6a21\u5f0f\u4e00\u76f4\u7c97\u4e0d\u4e43\uff0c\u7279\u5224\u548c\u512a\u5316\u82b1\u4e86\u597d\u591a\u6642\u9593\u624d\u627e\u5230w \u4e0d\u904emap\u9084\u771f\u7684\u662f\u597d\u7528\uff0c\u800c\u4e14\u89c0\u6469\u4e86\u4e00\u4e0buwi\u548cdreamoon\u7684\u89e3\u6cd5\uff0c\u4e0d\u6127\u662f\u5967\u8cfd\u5927\u795eR PA. 794. Valid Tic-Tac-Toe State \u89c0\u5bdf\u66b4\u529b\u984c \u601d\u8def\uff1a\u66b4\u529b\uff0b\u60c5\u6cc1\u908f\u8f2f\u7279\u5224\u3002 \u984c\u76ee\u898f\u5247\u6240\u8ff0\u70ba\uff1a Players take turns placing characters into empty squares ( ). The first player always places X characters, while the second player always places O characters. X and O characters are always placed into empty squares, never filled ones. The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over. \u4e00\u5b9a\u8981\u662fx\u5148\u653b\uff0c\u4e26\u4e14\u6709\u4efb\u4e00\u65b9\u7372\u52dd\u5f8c\u5247\u4e0d\u53ef\u4ee5\u518d\u4e0b\u6a19\u8a18\uff0c\u7372\u52dd\u7684\u65b9\u6cd5\u540c\u50b3\u7d71\u4e95\u5b57\u904a\u6232\u3002 \u5f9e\u908f\u8f2f\u4f86\u770b\uff0c\u9996\u5148\u6211\u5011\u7d71\u8a08o\u7684\u500b\u6578\u4ee5\u53cax\u7684\u500b\u6578 \u7531\u65bc\u662f\u8f2a\u6d41\u9032\u884c \uff0c\u4e14\u5148x\u5f8co\uff0c\u56e0\u6b64x\u81f3\u591a\u6bd4o\u591a\u51fa1\uff0c\u800c\u4e14o\u4e0d\u53ef\u80fd\u5927\u65bcx\uff0c\u9019\u4e9b\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u5f62\uff0c\u53ef\u4ee5\u5148\u522a\u9664 if ( xcnt == 0 ocnt == 1 ) { return 0 ; } else if ( xcnt ocnt + 1 || ocnt xcnt + 1 ) { return 0 ; } else if ( ocnt xcnt ) { return 0 ; } \u63a5\u4e0b\u4f86\u6aa2\u67e5\u7372\u52dd\u7684\u60c5\u5f62\uff0c\u7576\u7372\u52dd\u6642\uff0c\u53ea\u80fd\u6709\u4e00\u6b21\u7684\u7372\u52dd\uff0c\u4ea6\u5373\u4e0d\u80fd\u6709ooo xxx\u540c\u6642\u51fa\u73fe\u7684\u60c5\u6cc1 \u56e0\u6b64\u6211\u5011\u7528 win_cnt\u4f86\u7d71\u8a08\u7372\u52dd\u7684\u6b21\u6578\uff0c\u53ea\u8981 win_cnt 1\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u7d50\u69cb\u3002 \u800c\u5728\u7372\u52dd\u5f8c\uff0c\u53ef\u4ee5\u5224\u65b7\u662fx\u7372\u52dd\u6216\u662fo\u7372\u52dd \u82e5\u662fx\u7372\u52dd\uff0c\u5247o\u4e00\u5b9a\u4e0d\u53ef\u80fd =x \uff0c\u539f\u56e0\u4e43\u662fx\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u7d50\u675f\uff0c\u56e0\u6b64\u6b64\u6642\u7684x\u82e5\u662f\u6bd4o\u591a\u4e00\u5247\u6b63\u597d\u7b26\u5408\u898f\u5247 \u800c\u82e5\u662fo\u7372\u52dd\uff0c\u5247o\u300e\u53ea\u80fd\u300f\u548cx\u4e00\u6a23\u591a\uff0c\u4e00\u6a23\u7684\u9053\u7406\uff0c\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u6703\u7d50\u675f\uff0c\u56e0\u6b64\u5c0d\u65bc xcnt\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u6cc1 \u5b8c\u6574AC\u4ee3\u78bc\u5982\u4e0b\uff08\u7db2\u8def\u8d85\u5361\u9813\u7121\u6cd5\u4f7f\u7528debug\u6a21\u5f0f\uff0c\u53ea\u597d\u6012\u7528submit solution\u4f86\u9a57\u8b49\u6b63\u78ba\uff0c\u4e0d\u77e5\u4e0d\u89ba\u5403\u4e868\u500b\u7f70\u5206\u554a\u6b98\u5ff5...) //[ XOX , O O , XOX ] class Solution { public : int xcnt , ocnt ; bool validTicTacToe ( vector string board ) { xcnt = 0 ; ocnt = 0 ; for ( int i = 0 ; i board . size (); i ++ ) { for ( int j = 0 ; j board [ i ]. size (); j ++ ) { if ( board [ i ][ j ] == O ) { ocnt ++ ; } else if ( board [ i ][ j ] == X ) { xcnt ++ ; } } } if ( xcnt == 0 ocnt == 1 ) { return 0 ; } else if ( xcnt ocnt + 1 || ocnt xcnt + 1 ) { return 0 ; } else if ( ocnt xcnt ) { return 0 ; } else if ( ! checkwin ( board )) { return 0 ; } return 1 ; } bool checkwin ( vector string board ) { int win_cnt = 0 ; int xwin = 0 , owin = 0 ; for ( int i = 0 ; i board . size (); i ++ ) { if ( board [ i ][ 0 ] == board [ i ][ 1 ] board [ i ][ 0 ] == board [ i ][ 2 ] board [ i ][ 0 ] != ) { if ( board [ i ][ 0 ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } } for ( int i = 0 ; i 3 ; i ++ ) { if ( board [ 0 ][ i ] == board [ 1 ][ i ] board [ 0 ][ i ] == board [ 2 ][ i ] board [ 0 ][ i ] != ) { if ( board [ 0 ][ i ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } } if ( board [ 0 ][ 0 ] == board [ 1 ][ 1 ] board [ 0 ][ 0 ] == board [ 2 ][ 2 ] board [ 0 ][ 0 ] != ) { if ( board [ 0 ][ 0 ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } if ( board [ 0 ][ 2 ] == board [ 1 ][ 1 ] board [ 0 ][ 2 ] == board [ 2 ][ 0 ] board [ 0 ][ 2 ] != ) { if ( board [ 0 ][ 2 ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } if ( win_cnt == 0 ) return 1 ; else if ( win_cnt == 1 ) { if ( xwin ) { if ( ocnt = xcnt ) { return 0 ; } else if ( xcnt == ocnt + 1 ) { return 1 ; } else { return 0 ; } } else if ( owin ) { if ( ocnt xcnt ) { return 0 ; } else if ( xcnt == ocnt ) { return 1 ; } else if ( ocnt xcnt ) { return 0 ; } } } else { return 0 ; } } }; PB. 792. Number of Matching Subsequences a \u662f\u5426\u70ba b\u7684\u5b50\u5e8f\u5217\uff0c\u7d93\u5178\u5b57\u4e32\u554f\u984c \u7d93\u5178\u984c\u76ee\uff0c\u770b\u770bword[i]\u662f\u5426\u70bastr\u7684subsequence * \u601d\u8def\uff1a\u5169\u500b\u6307\u6a19\u5206\u5225\u8fed\u4ee3str\u548cword[i]\uff0c\u770b\u5230\u4e00\u6a23\u7684\u4fbf\u5c07word\u7684\u6307\u91dd\u5411\u524d\uff0c\u5982\u679c\u6307\u91dd\u6700\u5f8c\uff1d\uff1d\u9577\u5ea6\u5247\u5b58\u5728\uff0c\u5426\u5247\u5373\u7121 \u7c21\u55ae\u7684\u60f3\u6cd5\u537bTLE\u4e86\uff0c\u56e0\u70ba\u6709\u5927\u91cf\u91cd\u8907\u7684word[i]\u9700\u8981\u88ab\u91cd\u8907\u64cd\u4f5c\uff0c\u56e0\u6b64\u6539\u7528map\u512a\u5316\u7d71\u8a08\u5404\u7a2eword\u7684\u51fa\u73fe\u6b21\u6578\uff0c\u518d\u5c07subseq\u7b26\u5408\u7684\u72c0\u6cc1\u52a0\u4e0amap- second\u8a08\u6578\u5668\u5373\u53ef map\u512a\u5316\u904e\u5f8cAC\u5982\u4e0b class Solution { public : int numMatchingSubseq ( string str , vector string words ) { int cnt = 0 ; map string , int mymap ; for ( int i = 0 ; i words . size (); i ++ ) { mymap [ words [ i ]] ++ ; } for ( std :: map string , int :: iterator it = mymap . begin () ; it != mymap . end (); it ++ ) { std :: size_t fd = str . find ( it - first ); cout it - first , it - second endl ; if ( it - first . size () str . size ()) { continue ; } else if ( fd != std :: string :: npos ) { cnt += it - second ; } else if ( issubseq ( it - first , str , it - first . size (), str . size ())) { cnt += it - second ; } } return cnt ; } bool issubseq ( string str1 , string str2 , int len1 , int len2 ) { int same_idx = 0 ; for ( int i = 0 ; i len2 same_idx len1 ; i ++ ) { if ( str1 [ same_idx ] == str2 [ i ]) same_idx ++ ; } return ( same_idx == len1 ); } }; PC. 792. Number of Matching Subsequences \u627e\u898f\u5f8b\u63a8\u7406\u984c \u6709\u9ede\u5fae\u5999\u7684\u4e00\u984c\uff0c\u770b\u4f3c\u7c21\u55ae\u5be6\u969b\u4e0a\u4e0d\u597d\u62ff\u5206 \u672c\u4f86\u7684\u7b97\u6cd5\u5982\u4e0b\uff0c\u7e3d\u662f\u591a\u4e00\u500b\u6216\u5c11\u4e00\u500b\uff0c\u56e0\u70ba\u5728\u9032\u5165\u7684\u908a\u754c\u554f\u984c\u6c92\u6709\u62ff\u634f\u597d #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : int numSubarrayBoundedMax ( vector int arr , int low , int up ) { int max_val = 0 , can = 0 , cnt = 0 ; int pre_max_val = 0 , dist = 0 ; FORI ( arr . size ()) { pre_max_val = arr [ i ]; max_val = arr [ i ]; dist = 0 ; for ( int j = i + 1 ; j arr . size (); j ++ ) { pre_max_val = max_val ; max_val = max ( max_val , arr [ j ]); if ( max_val low || max_val up ) { break ; } dist = j - i ; } if ( pre_max_val = low pre_max_val = up ) { cnt += ( dist == 0 ) ? 1 : dist + 1 ; } } return cnt ; } }; \u5f8c\u4f86\u53c3\u8003\u4e86 \u5927\u795e\u7684\u89e3\u6cd5 \uff0c\u7406\u89e3\u5f8c\u5982\u4e0b //algorithm and source credit to : https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/discuss/117612/C++-O(n)-solution-with-explanations class Solution { public : int numSubarrayBoundedMax ( vector int A , int L , int R ) { int res = 0 , heads = 0 , tails = 0 ; for ( int val : A ) { if ( L = val val = R ) { //\u5982\u679c\u627e\u5230\u4e00\u500b\u7b26\u5408\u5340\u9593\u7684\u6578\u503c\uff0c\u5247\u4e4b\u524d\u8eab\u70batail\u7684\uff0c\u5168\u90e8\u53ef\u4ee5\u88ab\u63d0\u62d4\u70bahead\uff0c\u5728\u52a0\u4e0a\u81ea\u5df1\u672c\u8eab\u65b0\u627e\u5230\u7684\u6578\u5b57\uff0c\u56e0\u6b64head += tails + 1 //\u800cres\u8b8a\u53ef\u4ee5\u65b0\u589e\u90a3\u500b\u9577\u5ea6 heads += tails + 1 ; tails = 0 ; res += heads ; } else if ( val L ) { //\u5c0f\u65bcL\u7684\u6578\u5b57\u53ef\u4ee5\u4f5c\u70ba\u5340\u9593\u6578\u5217\u5ef6\u4f38\u7684\u5c3e\u90e8\uff0c \u56e0\u6b64\u9663\u5217\u53c8\u5728\u5ef6\u9577\u65b9\u624d\u7684head\u6578\u76ee //\u8209\u4f8b\uff1aL=32 R=69 \u4eca\u5df2\u7d93iterate\uff0c[55 36] \u5df2\u7d93\u6709\u4e09\u500b\u4e86 \u5728\u591a\u4e00\u500b5\u5f8c\uff0c\u4fbf\u53ef\u6709[55] [36] [55,36] [55 36 55] [36 55] //\u56e0\u70ba\u81ea\u5df1\u4e0d\u7b97\u5728LR\u5340\u9593 \u56e0\u6b64\u53ea\u80fd\u3000+= heads \u800c\u4e0d\u9700\u8981\u518d\u52a0\u4e00 tails ++ ; res += heads ; } else { heads = 0 ; tails = 0 ; } } return res ; } }; \u4ee5[73,55,36,5,55,14,9,7,72,52] 32 69 \u4f86\u770b\uff0c\u6f14\u7b97\u6cd5\u8dd1\u51fa\u5f8c\u4e09\u8b8a\u6578\u7684\u7d50\u679c\u5982\u4e0b PD. 793. Preimage Size of Factorial Zeroes Function \u9ad8\u96e3\u5ea6\u627emod\u898f\u5f8b\u6578\u5b78\u984c \u89e3\u4e0d\u7c97\u4e43\uff0c\u5148\u653e\u7f6e class Solution { public : int preimageSizeFZF ( int kin ) { int cnt = 0 , factorial = 0 , zeros = 0 , current_pow = 25 ; while ( 1 ) { if ( factorial == current_pow * 5 ) { cout factorial is now factorial current_pow is now current_pow endl ; current_pow *= 5 ; } if ( factorial % current_pow == 0 factorial ) { zeros += (( int )( log ( factorial ) / log ( 5 ))); cout factorial is of 25 multiple factorial zeros zeros add (( int )( log ( factorial ) / log ( 5 ))) endl ; } else if ( factorial % 5 == 0 factorial ) { cout factorial not 25 factorial endl ; zeros ++ ; } if ( zeros == kin ) { cnt ++ ; } else if ( zeros kin ) { break ; } cout factorial factorial zeros zeros endl ; factorial ++ ; } return cnt ; } //compare 2 casting, one is the original integer value of log and the other is the double type log, if they are equal of each other //in double precision //then this is correct one bool is_powoffive ( int real , int base ) { int integer = ( int )( log ( real ) / log ( base )); double precised = ( log ( real ) / log ( base )); return integer == precised ; } };","title":"WC74"},{"location":"programming_practice/leetcode_OJ_WC/WC74/#leetcode_oj-wc74","text":"Contest time: Mar 4, 2018 \u4eca\u5929\u4e0a\u5348\u6253\uff0c\u5bb6\u88e1\u7684\u7db2\u8def\u901f\u5ea6\u53ea\u6709\u5b78\u6821\u7684\u767e\u5206\u4e4b\u4e00\u4e0d\u5230R\uff08\u4e0b\u8f09 10 \u4e0a\u50b34\uff09\uff0c\u52a0\u4e0aLeetCode\u7684server\u4e00\u76f4timeout\uff0c\u7528debug\u6a21\u5f0f\u4e00\u76f4\u7c97\u4e0d\u4e43\uff0c\u7279\u5224\u548c\u512a\u5316\u82b1\u4e86\u597d\u591a\u6642\u9593\u624d\u627e\u5230w \u4e0d\u904emap\u9084\u771f\u7684\u662f\u597d\u7528\uff0c\u800c\u4e14\u89c0\u6469\u4e86\u4e00\u4e0buwi\u548cdreamoon\u7684\u89e3\u6cd5\uff0c\u4e0d\u6127\u662f\u5967\u8cfd\u5927\u795eR","title":"leetcode_OJ WC74 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC74/#pa-794-valid-tic-tac-toe-state","text":"\u601d\u8def\uff1a\u66b4\u529b\uff0b\u60c5\u6cc1\u908f\u8f2f\u7279\u5224\u3002 \u984c\u76ee\u898f\u5247\u6240\u8ff0\u70ba\uff1a Players take turns placing characters into empty squares ( ). The first player always places X characters, while the second player always places O characters. X and O characters are always placed into empty squares, never filled ones. The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over. \u4e00\u5b9a\u8981\u662fx\u5148\u653b\uff0c\u4e26\u4e14\u6709\u4efb\u4e00\u65b9\u7372\u52dd\u5f8c\u5247\u4e0d\u53ef\u4ee5\u518d\u4e0b\u6a19\u8a18\uff0c\u7372\u52dd\u7684\u65b9\u6cd5\u540c\u50b3\u7d71\u4e95\u5b57\u904a\u6232\u3002 \u5f9e\u908f\u8f2f\u4f86\u770b\uff0c\u9996\u5148\u6211\u5011\u7d71\u8a08o\u7684\u500b\u6578\u4ee5\u53cax\u7684\u500b\u6578 \u7531\u65bc\u662f\u8f2a\u6d41\u9032\u884c \uff0c\u4e14\u5148x\u5f8co\uff0c\u56e0\u6b64x\u81f3\u591a\u6bd4o\u591a\u51fa1\uff0c\u800c\u4e14o\u4e0d\u53ef\u80fd\u5927\u65bcx\uff0c\u9019\u4e9b\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u5f62\uff0c\u53ef\u4ee5\u5148\u522a\u9664 if ( xcnt == 0 ocnt == 1 ) { return 0 ; } else if ( xcnt ocnt + 1 || ocnt xcnt + 1 ) { return 0 ; } else if ( ocnt xcnt ) { return 0 ; } \u63a5\u4e0b\u4f86\u6aa2\u67e5\u7372\u52dd\u7684\u60c5\u5f62\uff0c\u7576\u7372\u52dd\u6642\uff0c\u53ea\u80fd\u6709\u4e00\u6b21\u7684\u7372\u52dd\uff0c\u4ea6\u5373\u4e0d\u80fd\u6709ooo xxx\u540c\u6642\u51fa\u73fe\u7684\u60c5\u6cc1 \u56e0\u6b64\u6211\u5011\u7528 win_cnt\u4f86\u7d71\u8a08\u7372\u52dd\u7684\u6b21\u6578\uff0c\u53ea\u8981 win_cnt 1\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u7d50\u69cb\u3002 \u800c\u5728\u7372\u52dd\u5f8c\uff0c\u53ef\u4ee5\u5224\u65b7\u662fx\u7372\u52dd\u6216\u662fo\u7372\u52dd \u82e5\u662fx\u7372\u52dd\uff0c\u5247o\u4e00\u5b9a\u4e0d\u53ef\u80fd =x \uff0c\u539f\u56e0\u4e43\u662fx\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u7d50\u675f\uff0c\u56e0\u6b64\u6b64\u6642\u7684x\u82e5\u662f\u6bd4o\u591a\u4e00\u5247\u6b63\u597d\u7b26\u5408\u898f\u5247 \u800c\u82e5\u662fo\u7372\u52dd\uff0c\u5247o\u300e\u53ea\u80fd\u300f\u548cx\u4e00\u6a23\u591a\uff0c\u4e00\u6a23\u7684\u9053\u7406\uff0c\u7372\u52dd\u5f8c\u904a\u6232\u4fbf\u6703\u7d50\u675f\uff0c\u56e0\u6b64\u5c0d\u65bc xcnt\u90fd\u662f\u4e0d\u5408\u7406\u7684\u60c5\u6cc1 \u5b8c\u6574AC\u4ee3\u78bc\u5982\u4e0b\uff08\u7db2\u8def\u8d85\u5361\u9813\u7121\u6cd5\u4f7f\u7528debug\u6a21\u5f0f\uff0c\u53ea\u597d\u6012\u7528submit solution\u4f86\u9a57\u8b49\u6b63\u78ba\uff0c\u4e0d\u77e5\u4e0d\u89ba\u5403\u4e868\u500b\u7f70\u5206\u554a\u6b98\u5ff5...) //[ XOX , O O , XOX ] class Solution { public : int xcnt , ocnt ; bool validTicTacToe ( vector string board ) { xcnt = 0 ; ocnt = 0 ; for ( int i = 0 ; i board . size (); i ++ ) { for ( int j = 0 ; j board [ i ]. size (); j ++ ) { if ( board [ i ][ j ] == O ) { ocnt ++ ; } else if ( board [ i ][ j ] == X ) { xcnt ++ ; } } } if ( xcnt == 0 ocnt == 1 ) { return 0 ; } else if ( xcnt ocnt + 1 || ocnt xcnt + 1 ) { return 0 ; } else if ( ocnt xcnt ) { return 0 ; } else if ( ! checkwin ( board )) { return 0 ; } return 1 ; } bool checkwin ( vector string board ) { int win_cnt = 0 ; int xwin = 0 , owin = 0 ; for ( int i = 0 ; i board . size (); i ++ ) { if ( board [ i ][ 0 ] == board [ i ][ 1 ] board [ i ][ 0 ] == board [ i ][ 2 ] board [ i ][ 0 ] != ) { if ( board [ i ][ 0 ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } } for ( int i = 0 ; i 3 ; i ++ ) { if ( board [ 0 ][ i ] == board [ 1 ][ i ] board [ 0 ][ i ] == board [ 2 ][ i ] board [ 0 ][ i ] != ) { if ( board [ 0 ][ i ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } } if ( board [ 0 ][ 0 ] == board [ 1 ][ 1 ] board [ 0 ][ 0 ] == board [ 2 ][ 2 ] board [ 0 ][ 0 ] != ) { if ( board [ 0 ][ 0 ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } if ( board [ 0 ][ 2 ] == board [ 1 ][ 1 ] board [ 0 ][ 2 ] == board [ 2 ][ 0 ] board [ 0 ][ 2 ] != ) { if ( board [ 0 ][ 2 ] == X ) { xwin = 1 ; } else { owin = 1 ; } win_cnt ++ ; } if ( win_cnt == 0 ) return 1 ; else if ( win_cnt == 1 ) { if ( xwin ) { if ( ocnt = xcnt ) { return 0 ; } else if ( xcnt == ocnt + 1 ) { return 1 ; } else { return 0 ; } } else if ( owin ) { if ( ocnt xcnt ) { return 0 ; } else if ( xcnt == ocnt ) { return 1 ; } else if ( ocnt xcnt ) { return 0 ; } } } else { return 0 ; } } };","title":"PA. 794. Valid Tic-Tac-Toe State \u89c0\u5bdf\u66b4\u529b\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC74/#pb-792-number-of-matching-subsequences-a-b","text":"\u7d93\u5178\u984c\u76ee\uff0c\u770b\u770bword[i]\u662f\u5426\u70bastr\u7684subsequence * \u601d\u8def\uff1a\u5169\u500b\u6307\u6a19\u5206\u5225\u8fed\u4ee3str\u548cword[i]\uff0c\u770b\u5230\u4e00\u6a23\u7684\u4fbf\u5c07word\u7684\u6307\u91dd\u5411\u524d\uff0c\u5982\u679c\u6307\u91dd\u6700\u5f8c\uff1d\uff1d\u9577\u5ea6\u5247\u5b58\u5728\uff0c\u5426\u5247\u5373\u7121 \u7c21\u55ae\u7684\u60f3\u6cd5\u537bTLE\u4e86\uff0c\u56e0\u70ba\u6709\u5927\u91cf\u91cd\u8907\u7684word[i]\u9700\u8981\u88ab\u91cd\u8907\u64cd\u4f5c\uff0c\u56e0\u6b64\u6539\u7528map\u512a\u5316\u7d71\u8a08\u5404\u7a2eword\u7684\u51fa\u73fe\u6b21\u6578\uff0c\u518d\u5c07subseq\u7b26\u5408\u7684\u72c0\u6cc1\u52a0\u4e0amap- second\u8a08\u6578\u5668\u5373\u53ef map\u512a\u5316\u904e\u5f8cAC\u5982\u4e0b class Solution { public : int numMatchingSubseq ( string str , vector string words ) { int cnt = 0 ; map string , int mymap ; for ( int i = 0 ; i words . size (); i ++ ) { mymap [ words [ i ]] ++ ; } for ( std :: map string , int :: iterator it = mymap . begin () ; it != mymap . end (); it ++ ) { std :: size_t fd = str . find ( it - first ); cout it - first , it - second endl ; if ( it - first . size () str . size ()) { continue ; } else if ( fd != std :: string :: npos ) { cnt += it - second ; } else if ( issubseq ( it - first , str , it - first . size (), str . size ())) { cnt += it - second ; } } return cnt ; } bool issubseq ( string str1 , string str2 , int len1 , int len2 ) { int same_idx = 0 ; for ( int i = 0 ; i len2 same_idx len1 ; i ++ ) { if ( str1 [ same_idx ] == str2 [ i ]) same_idx ++ ; } return ( same_idx == len1 ); } };","title":"PB. 792. Number of Matching Subsequences a \u662f\u5426\u70ba b\u7684\u5b50\u5e8f\u5217\uff0c\u7d93\u5178\u5b57\u4e32\u554f\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC74/#pc-792-number-of-matching-subsequences","text":"\u6709\u9ede\u5fae\u5999\u7684\u4e00\u984c\uff0c\u770b\u4f3c\u7c21\u55ae\u5be6\u969b\u4e0a\u4e0d\u597d\u62ff\u5206 \u672c\u4f86\u7684\u7b97\u6cd5\u5982\u4e0b\uff0c\u7e3d\u662f\u591a\u4e00\u500b\u6216\u5c11\u4e00\u500b\uff0c\u56e0\u70ba\u5728\u9032\u5165\u7684\u908a\u754c\u554f\u984c\u6c92\u6709\u62ff\u634f\u597d #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : int numSubarrayBoundedMax ( vector int arr , int low , int up ) { int max_val = 0 , can = 0 , cnt = 0 ; int pre_max_val = 0 , dist = 0 ; FORI ( arr . size ()) { pre_max_val = arr [ i ]; max_val = arr [ i ]; dist = 0 ; for ( int j = i + 1 ; j arr . size (); j ++ ) { pre_max_val = max_val ; max_val = max ( max_val , arr [ j ]); if ( max_val low || max_val up ) { break ; } dist = j - i ; } if ( pre_max_val = low pre_max_val = up ) { cnt += ( dist == 0 ) ? 1 : dist + 1 ; } } return cnt ; } }; \u5f8c\u4f86\u53c3\u8003\u4e86 \u5927\u795e\u7684\u89e3\u6cd5 \uff0c\u7406\u89e3\u5f8c\u5982\u4e0b //algorithm and source credit to : https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/discuss/117612/C++-O(n)-solution-with-explanations class Solution { public : int numSubarrayBoundedMax ( vector int A , int L , int R ) { int res = 0 , heads = 0 , tails = 0 ; for ( int val : A ) { if ( L = val val = R ) { //\u5982\u679c\u627e\u5230\u4e00\u500b\u7b26\u5408\u5340\u9593\u7684\u6578\u503c\uff0c\u5247\u4e4b\u524d\u8eab\u70batail\u7684\uff0c\u5168\u90e8\u53ef\u4ee5\u88ab\u63d0\u62d4\u70bahead\uff0c\u5728\u52a0\u4e0a\u81ea\u5df1\u672c\u8eab\u65b0\u627e\u5230\u7684\u6578\u5b57\uff0c\u56e0\u6b64head += tails + 1 //\u800cres\u8b8a\u53ef\u4ee5\u65b0\u589e\u90a3\u500b\u9577\u5ea6 heads += tails + 1 ; tails = 0 ; res += heads ; } else if ( val L ) { //\u5c0f\u65bcL\u7684\u6578\u5b57\u53ef\u4ee5\u4f5c\u70ba\u5340\u9593\u6578\u5217\u5ef6\u4f38\u7684\u5c3e\u90e8\uff0c \u56e0\u6b64\u9663\u5217\u53c8\u5728\u5ef6\u9577\u65b9\u624d\u7684head\u6578\u76ee //\u8209\u4f8b\uff1aL=32 R=69 \u4eca\u5df2\u7d93iterate\uff0c[55 36] \u5df2\u7d93\u6709\u4e09\u500b\u4e86 \u5728\u591a\u4e00\u500b5\u5f8c\uff0c\u4fbf\u53ef\u6709[55] [36] [55,36] [55 36 55] [36 55] //\u56e0\u70ba\u81ea\u5df1\u4e0d\u7b97\u5728LR\u5340\u9593 \u56e0\u6b64\u53ea\u80fd\u3000+= heads \u800c\u4e0d\u9700\u8981\u518d\u52a0\u4e00 tails ++ ; res += heads ; } else { heads = 0 ; tails = 0 ; } } return res ; } }; \u4ee5[73,55,36,5,55,14,9,7,72,52] 32 69 \u4f86\u770b\uff0c\u6f14\u7b97\u6cd5\u8dd1\u51fa\u5f8c\u4e09\u8b8a\u6578\u7684\u7d50\u679c\u5982\u4e0b","title":"PC. 792. Number of Matching Subsequences \u627e\u898f\u5f8b\u63a8\u7406\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC74/#pd-793-preimage-size-of-factorial-zeroes-function-mod","text":"\u89e3\u4e0d\u7c97\u4e43\uff0c\u5148\u653e\u7f6e class Solution { public : int preimageSizeFZF ( int kin ) { int cnt = 0 , factorial = 0 , zeros = 0 , current_pow = 25 ; while ( 1 ) { if ( factorial == current_pow * 5 ) { cout factorial is now factorial current_pow is now current_pow endl ; current_pow *= 5 ; } if ( factorial % current_pow == 0 factorial ) { zeros += (( int )( log ( factorial ) / log ( 5 ))); cout factorial is of 25 multiple factorial zeros zeros add (( int )( log ( factorial ) / log ( 5 ))) endl ; } else if ( factorial % 5 == 0 factorial ) { cout factorial not 25 factorial endl ; zeros ++ ; } if ( zeros == kin ) { cnt ++ ; } else if ( zeros kin ) { break ; } cout factorial factorial zeros zeros endl ; factorial ++ ; } return cnt ; } //compare 2 casting, one is the original integer value of log and the other is the double type log, if they are equal of each other //in double precision //then this is correct one bool is_powoffive ( int real , int base ) { int integer = ( int )( log ( real ) / log ( base )); double precised = ( log ( real ) / log ( base )); return integer == precised ; } };","title":"PD. 793. Preimage Size of Factorial Zeroes Function \u9ad8\u96e3\u5ea6\u627emod\u898f\u5f8b\u6578\u5b78\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC75/","text":"leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97 Contest time: Mar 11, 2018 \u773c\u775b\u767c\u708e\uff0c\u6253\u6263\u9014\u4e2d\u9817\u4e0d\u8212\u670d\uff0c\u53ea\u6709\u5feb\u901f\u89e3\u51faPA\u5f8c\uff0cPB DFS\u6c92\u5beb\u597d\u4e0d\u65b7WA\uff0cPD\u7528\u66b4\u529b\u89e3\u7136\u4e26\u5375TLE\uff0c\u5c31\uff0c\u5beb\u500b\u7db2\u8a8c\u4f86\u6aa2\u8a0e\u5427 PA. 796. Rotate String \u7c21\u55ae\u5b57\u4e32\u984c \u601d\u8def\uff1a\u6c34\u984c\u4e0d\u89e3\u91cb #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : bool rotateString ( string aa , string bb ) { string tmp = aa ; string tmp2 ; FORI ( aa . size ()) { tmp2 = tmp [ 0 ]; tmp = tmp . substr ( 1 , aa . size () - 1 ); tmp += tmp2 ; if ( tmp == bb ) return 1 ; } return 0 ; } }; PB. 797. ALl path from src to dst \u5716\u8ad6\u984c\uff0c\u8d77\u7d42\u9ede\u6240\u6709\u53ef\u80fd\u8def\u5f91 \u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91\uff0c\u5716\u8ad6\u6f14\u7b97\u6cd5\u7d93\u5178\u984c\u76ee!!!!!!!!!!!!!!!!!!!!! \u601d\u8def\uff1adfs\u6df1\u5ea6\u512a\u5148\u641c\u7d22 \u9019\u500b\u662fWA\u7684\u4ee3\u78bc\uff0c\u7e3d\u6703\u6709\u4e9bcase\u6c92\u6709\u627e\u5230\uff0c\u56e0\u70ba\u5728output deg\u90a3\u88e1\u7684\u908f\u8f2f\u4e9b\u8a31\u932f\u8aa4 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector vector int allPathsSourceTarget ( vector vector int graph ) { int target = 0 ; int pos = 0 , total_size = 0 ; vector int res_part , output_deg ; output_deg . resize ( graph . size ()); vector vector int final_res ; FORI ( graph . size ()) { if ( graph [ i ]. size () == 0 ) { target = i ; } else { total_size += graph [ i ]. size (); output_deg [ i ] = graph [ i ]. size (); } } int visited = 0 , i = 0 , tmp , undone = 1 ; while ( visited != total_size ) { res_part . push_back ( pos ); if ( output_deg [ pos ]) { tmp = pos ; pos = graph [ pos ][ output_deg [ pos ] - 1 ]; output_deg [ tmp ] -- ; visited ++ ; } else { FORI ( output_deg . size ()) { if ( output_deg [ i ]) pos = output_deg [ i ]; } } if ( graph [ pos ]. size () == 0 ) { pos = 0 ; res_part . push_back ( target ); final_res . push_back ( res_part ); res_part . clear (); } } return final_res ; } }; \u9019\u500b\u662f\u6b63\u78ba\u89e3\u6cd5\u7684\u4ee3\u78bc\uff0c\u4f7f\u7528\u7684\u6f14\u7b97\u6cd5\u4fbf\u662f\uff1aDFS\u6df1\u5ea6\u512a\u5148\u641c\u7d22\uff0c\u4ee5\u627e\u51fa\u8d77\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91 Geekforgeeks reference weibo weibo\u7684\u4f5c\u6cd5\u63a1\u7528\u975e\u905e\u8ff4\u505a\u6cd5 1.\u9078\u53d6\u8d77\u9ede 2.\u79fb\u52d5\uff0c\u79fb\u5230\u7684\u9ede\u628a\u5b83\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u82e5\u8a72\u9ede\u4e0d\u662f\u7d42\u9ede\uff0c\u5247\u64f4\u6563\u67e5\u627e\u5468\u570d\u300e\u9084\u6c92\u6709\u8d70\u904e\u7684\u9ede\u300f 3.\u8d70\u5230\u4e86\u7d42\u9ede\u4e4b\u5f8c\uff0c\u300e\u9000\u56de\u4e0a\u4e00\u6b65\u300f\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u500b\u6b65\u9a5f\uff0c\u56e0\u70ba\u9084\u6709\u53ef\u80fd\u6709\u5176\u4ed6\u8def\u5f91\uff0c\u6545\u5f9e\u7d42\u9ede\u7684\u4e0a\u4e00\u500b\u6b65\u9a5f 4.\u4e0b\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c\u539f\u672c44\u884c\u7684return\u5beb\u4e0a\u5f8c\u6703\u9020\u6210\u7b54\u6848\u6e1b\u5c11\uff0c\u539f\u56e0\u5728\u65bc\u505abacktrace\u7684\u6642\u5019\uff0c\u9000\u56de\u5305\u522e\u7d42\u9ede\u4e5f\u8981\u6a19\u8a18\u70ba\u6c92\u6709\u8d70\u8a2a\u904e\uff0c \u5982\u679c\u7d42\u9ede\u4ecd\u7136\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u90a3\u9ebc\u4e4b\u5f8c\u7b2c\u4e8c\u689d\u8def\u5f91\u8981\u8d70\u5230\u7d42\u9ede\u7684\u6642\u5019\u4fbf\u6703\u770b\u5230\u7d42\u9ede\u5df2\u7d93\u8d70\u8a2a\u904e\uff0c\u4fbf\u4e0d\u518d\u5411\u524d\u8d70\u53bb\u7d42\u9ede\uff0c\u800c\u5c0e\u81f4\u7d50\u679c\u4e0d\u9f4a\u5168 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector vector int final_res ; vector int res , visited ; stack int traversed_path ; vector vector int allPathsSourceTarget ( vector vector int graph ) //graph in adjacency list { int dst ; FORI ( graph . size ()) { if ( graph [ i ]. size () == 0 ) { dst = i ; } visited . push_back ( false ); } dfs ( 0 , dst , res , graph ); return final_res ; } void dfs ( int cur_node , int dst , vector int res , vector vector int graph ) { traversed_path . push ( cur_node ); visited [ cur_node ] = true ; if ( cur_node == dst ) { stack int copied_stk = traversed_path ; while ( copied_stk . size ()) { res . push_back ( copied_stk . top ()); copied_stk . pop (); } reverse ( res . begin (), res . end ()); final_res . push_back ( res ); res . clear (); //return ; } else { FORI ( graph [ cur_node ]. size ()) { if ( ! visited [ graph [ cur_node ][ i ]]) { dfs ( graph [ cur_node ][ i ], dst , res , graph ); } } } //back trace if there will be still some nodes have to be visited but now path are blocked since adj nodes are marked visited visited [ cur_node ] = false ; cur_node = traversed_path . top (); traversed_path . pop (); } }; PC. 799. Champagne Tower \u6578\u5b78\u898f\u5283\u8207\u89c0\u5bdf\u984c \u601d\u8def\uff1a\u96d6\u7136\u984c\u76ee\u6709\u9ede\u5687\u4eba\uff0c\u4f46\u53ea\u662f\u500b\u969c\u773c\u6cd5\uff0c\u525b\u958b\u59cb\u60f3\u8aaa\u4e00\u6b21\u5728\u7b2c\u4e00\u76c3\u6dfb\u52a0\u4e00\u6b21\uff0c\u518d\u8b93\u6bcf\u4e00\u6b21\u7684\u6d41\u6c34\u4f9d\u5e8f\u5f80\u4e0b\u6d41\u7ac4\uff0c\u5982\u679c\u6709\u676f\u5b50\u5df2\u7d93\u6eff\u6c34\u4f4d\uff0c\u5c31\u5c07row++ \u518d\u5ea6\u5f80\u4e0b\u6d41\u7ac4\uff0c\u76f4\u5230\u5e95\uff0c\u7136\u4e0d\u50c5\u6642\u9593\u8907\u96dc\u5ea6\u592a\u9ad8\u4e5f\u5728\u7b2c260\u500b\u6e2c\u8cc7WA\u4e86 \u4e8b\u5be6\u4e0a\uff0c\u53ea\u8981\u5148\u5c07\u6700\u9ad8\u7684\u90a3\u4e00\u676f\u6c34\uff0c\u4efb\u610f\u88dd\u6eff\u4ed6\u7684pour\u91cf\uff0c\u5148\u4e0d\u7528\u5728\u4e4e\u662f\u5426\u5df2\u7d93\u8d85\u51fa\u6eff\u6c34\u4f4d\uff0c\u53ea\u8981\u5148\u628a\u591a\u51fa\u7684\u6c34\u4f9d\u5e8f\u6d41\u7ac4\uff0c\u4e26\u4e14\u5de6\u53f3\u5747\u5206\u5373\u53ef\uff0c\u800c\u6703\u591a\u51fa\u7684\u6c34\u4f4d\u5c31\u662f \u7576\u524d\u6c34\u4f4d - \u4e00\u676f\u6c34 \u4e4b\u5f8c\u518d\u5c07\u9019\u500b\u5806\u51fa\u7684\u6c34\u4f4d\u8a55\u5206\u7d66\u6a13\u4e0b\u5169\u676f\u5373\u53ef\u3002 \u5f88\u667a\u969c\u7684\u662f \u4ee5\u70ba\u6a13\u4e0b\u5169\u676f\u662f row+1 col-1 and row+1 col+1 \u5229\u99ac\u62ff\u4e86\u4e00\u500bRE\uff0c\u5be6\u969b\u4e0a\u61c9\u8a72\u662fcol col+1\u5566w class Solution { public : double champagneTower ( int poured , int query_row , int query_glass ) { vector vector double cups ; cups . resize ( 101 ); //padding for ( int i = 0 ; i 101 ; i ++ ) { for ( int j = 0 ; j = i ; j ++ ) { cups [ i ]. push_back ( 0.0 ); } } cups [ 0 ][ 0 ] = poured ; for ( int i = 0 ; i 100 ; i ++ ) { for ( int j = 0 ; j = i ; j ++ ) { if ( cups [ i ][ j ] = 1.0 ) { cups [ i + 1 ][ j ] += ( cups [ i ][ j ] - 1.0 ) / 2.0 ; cups [ i + 1 ][ j + 1 ] += ( cups [ i ][ j ] - 1.0 ) / 2.0 ; cups [ i ][ j ] = 1.0 ; } } } return cups [ query_row ][ query_glass ]; } }; PD. 800. Smallest rotation with highest score \u6578\u5b78\u63a8\u7406+\u5340\u9593\u67e5\u8a62\u7dda\u6027\u512a\u5316O(N) \u6b64\u984c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u4e00\u5b9a\u8981\u5728O(N)\uff0c\u5fc5\u9808\u4f7f\u7528\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\uff0c\u5927\u795e\u5ba4\u53cb\u99ac\u4e0a\u60f3\u5230\u7dda\u6bb5\u6a39segment tree\u67e5\u627e \u5340\u9593\u67e5\u8a62\u7b97\u6cd5\u6982\u5ff5\uff0c\u5f9e\u66b4\u529b\u5230NlogN \u5230N * \u601d\u8def\uff0c\u53ef\u4ee5\u770b\u51fa\u6709\u5169\u7a2e\u60c5\u5f62\uff0c\u4e00\u7a2e\u662f\u672c\u4f86\u5c31\u6703\u5f97\u5206\u7684(value = index)\uff0c\u4e00\u7a2e\u662f\u9084\u6c92\u6709\u5f97\u5206\u7684 else \u7b2c\u4e00\u985e\u578b \u9996\u5148\u7b2c\u4e00\u7a2e\u672c\u4f86\u5c31\u53ef\u4ee5\u5f97\u5206\uff0c\u4f8b\u5982[2,3,1,4,0]\u4e2d\u76841 , 0\uff0c\u5411\u53f3\u79fb\u52d5\u81ea\u7136\u53ef\u4ee5\u5f97\u5206\uff0c\u6240\u4ee5\u4ed6\u7684\u53f3\u908a\u53ef\u4ee5\u7684\u6b65\u6578\u4fbf\u662f[index+1(\u76f4\u63a5\u5411\u5de6\u79fb\u52d5\u5230\u6700\u53f3\u5074\uff08\u8d85\u904e\u5f8c\u91cd\u65b0\u5f9e\u7d50\u5c3e\u56de\u4f86\uff09\uff0c\u5fc5\u7136\u7b26\u5408\u7684\u958b\u5916\u639b\u6a21\u5f0f),len-1\uff08\u79fb\u52d5\u5230\u4ed6\u4e0b\u4e00\u500b\uff09] \u4ee5\u53ca[0(\u4e0d\u52d5)\uff0cindex - value\uff08\u4f8b\u5982\u4e0a\u9762\u76841\u57282 \u81f3\u591a\u79fb\u52d5\u52301\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 2 - 1 \u4e00\u6b65\uff09] \u7b2c\u4e8c\u985e\u578b \u800c\u53e6\u5916\u4e00\u7a2e\u7576\u524d\u7121\u6cd5\u5f97\u5206\u7684\uff0c\u4fbf\u8981[index+1 (\u958b\u5916\u639b\u79fb\u5230\u6700\u53f3\u908a), total_len - (value - index)(\u7e7c\u7e8c\u79fb\u52d5\uff0cvalue - index \u4ee3\u8868\u8207\u6700\u5927\u79fb\u52d5\u6b21\u6578\u7684\u76f8\u5dee\uff0c\u4e5f\u5c31\u662f\u5b83\u5fc5\u9808\u5411\u53f3\u79fb\u52d5val - index\u9019\u500b\u5dee\u503c\u624d\u6709\u5206\uff0c\u5411\u53f3\u79fb\u52d5\u7684\u81f3\u5c11\u6b21\u6578\uff0c\u63db\u904e\u4f86\u8b1b\u7528 len \u4f86\u6263\u9664\u5c31\u662f\u5411\u5de6\u79fb\u52d5\u7684\u6700\u5927\u6b21\u6578)] \u6c42\u51fa\u6bcf\u4e00\u500b\u6578\u5b57\u61c9\u8a72\u6709\u7684\u5340\u9593\uff0c\u628a\u4ed6\u5011\u6620\u5c04\u5230\u5340\u9593\u67e5\u8a62\u6bb5\uff0c\u4f7f\u7528python\u7684pair\u8868\u793a\u958b\u59cb\u548c\u7d50\u675f for index , value in enumerate ( arr ): if index value : #one segment for this ones pair . append ([ index + 1 , total_len - ( value - index )]) #segment start and end else : #two segments for this one pair . append ([ index + 1 , total_len - 1 ]) pair . append ([ 0 , index - value ]) \u6700\u5f8c\u627e\u5230prefix sum (\u52a0\u7e3d\u5230\u6b64\u6642\u7684\u7e3d\u548c)\uff0c\u601d\u7dd2\u898b\u8a3b\u89e3 segment_query = [ 0 ] * ( total_len + 1 ) #aux arrat for the prefix sum, segment query for i in range ( len ( pair )): #+1 padding segment_query [ pair [ i ][ 0 ]] += 1 #go in the interval, overlapping with all the other segment segment_query [ pair [ i ][ 1 ] + 1 ] -= 1 #leave the interval, cancelling the infulence of segment overlapping \u6574\u9ad4AC\u4ee3\u78bc\u5982\u4e0b class Solution : def bestRotation ( self , arr ): best = 0 shift = 0 total_len = len ( arr ) #start_pos_arr = [] pair = [] #initial the start_pos_arr to record the starting position of the given array #initial score for index , value in enumerate ( arr ): if index value : #one segment for this ones pair . append ([ index + 1 , total_len - ( value - index )]) #segment start and end else : #two segments for this one pair . append ([ index + 1 , total_len - 1 ]) pair . append ([ 0 , index - value ]) segment_query = [ 0 ] * ( total_len + 1 ) #aux arrat for the prefix sum, segment query for i in range ( len ( pair )): #+1 padding segment_query [ pair [ i ][ 0 ]] += 1 #go in the interval, overlapping with all the other segment segment_query [ pair [ i ][ 1 ] + 1 ] -= 1 #leave the interval, cancelling the infulence of segment overlapping cur_pts = 0 for i in range ( len ( segment_query )): cur_pts += segment_query [ i ] if ( cur_pts best ): best = cur_pts shift = i return shift","title":"WC75"},{"location":"programming_practice/leetcode_OJ_WC/WC75/#leetcode_oj-wc75","text":"Contest time: Mar 11, 2018 \u773c\u775b\u767c\u708e\uff0c\u6253\u6263\u9014\u4e2d\u9817\u4e0d\u8212\u670d\uff0c\u53ea\u6709\u5feb\u901f\u89e3\u51faPA\u5f8c\uff0cPB DFS\u6c92\u5beb\u597d\u4e0d\u65b7WA\uff0cPD\u7528\u66b4\u529b\u89e3\u7136\u4e26\u5375TLE\uff0c\u5c31\uff0c\u5beb\u500b\u7db2\u8a8c\u4f86\u6aa2\u8a0e\u5427","title":"leetcode_OJ WC75 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC75/#pa-796-rotate-string","text":"\u601d\u8def\uff1a\u6c34\u984c\u4e0d\u89e3\u91cb #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : bool rotateString ( string aa , string bb ) { string tmp = aa ; string tmp2 ; FORI ( aa . size ()) { tmp2 = tmp [ 0 ]; tmp = tmp . substr ( 1 , aa . size () - 1 ); tmp += tmp2 ; if ( tmp == bb ) return 1 ; } return 0 ; } };","title":"PA. 796. Rotate String \u7c21\u55ae\u5b57\u4e32\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC75/#pb-797-all-path-from-src-to-dst","text":"\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91\uff0c\u5716\u8ad6\u6f14\u7b97\u6cd5\u7d93\u5178\u984c\u76ee!!!!!!!!!!!!!!!!!!!!! \u601d\u8def\uff1adfs\u6df1\u5ea6\u512a\u5148\u641c\u7d22 \u9019\u500b\u662fWA\u7684\u4ee3\u78bc\uff0c\u7e3d\u6703\u6709\u4e9bcase\u6c92\u6709\u627e\u5230\uff0c\u56e0\u70ba\u5728output deg\u90a3\u88e1\u7684\u908f\u8f2f\u4e9b\u8a31\u932f\u8aa4 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector vector int allPathsSourceTarget ( vector vector int graph ) { int target = 0 ; int pos = 0 , total_size = 0 ; vector int res_part , output_deg ; output_deg . resize ( graph . size ()); vector vector int final_res ; FORI ( graph . size ()) { if ( graph [ i ]. size () == 0 ) { target = i ; } else { total_size += graph [ i ]. size (); output_deg [ i ] = graph [ i ]. size (); } } int visited = 0 , i = 0 , tmp , undone = 1 ; while ( visited != total_size ) { res_part . push_back ( pos ); if ( output_deg [ pos ]) { tmp = pos ; pos = graph [ pos ][ output_deg [ pos ] - 1 ]; output_deg [ tmp ] -- ; visited ++ ; } else { FORI ( output_deg . size ()) { if ( output_deg [ i ]) pos = output_deg [ i ]; } } if ( graph [ pos ]. size () == 0 ) { pos = 0 ; res_part . push_back ( target ); final_res . push_back ( res_part ); res_part . clear (); } } return final_res ; } }; \u9019\u500b\u662f\u6b63\u78ba\u89e3\u6cd5\u7684\u4ee3\u78bc\uff0c\u4f7f\u7528\u7684\u6f14\u7b97\u6cd5\u4fbf\u662f\uff1aDFS\u6df1\u5ea6\u512a\u5148\u641c\u7d22\uff0c\u4ee5\u627e\u51fa\u8d77\u7d42\u9ede\u7684\u6240\u6709\u8def\u5f91 Geekforgeeks reference weibo weibo\u7684\u4f5c\u6cd5\u63a1\u7528\u975e\u905e\u8ff4\u505a\u6cd5 1.\u9078\u53d6\u8d77\u9ede 2.\u79fb\u52d5\uff0c\u79fb\u5230\u7684\u9ede\u628a\u5b83\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u82e5\u8a72\u9ede\u4e0d\u662f\u7d42\u9ede\uff0c\u5247\u64f4\u6563\u67e5\u627e\u5468\u570d\u300e\u9084\u6c92\u6709\u8d70\u904e\u7684\u9ede\u300f 3.\u8d70\u5230\u4e86\u7d42\u9ede\u4e4b\u5f8c\uff0c\u300e\u9000\u56de\u4e0a\u4e00\u6b65\u300f\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u500b\u6b65\u9a5f\uff0c\u56e0\u70ba\u9084\u6709\u53ef\u80fd\u6709\u5176\u4ed6\u8def\u5f91\uff0c\u6545\u5f9e\u7d42\u9ede\u7684\u4e0a\u4e00\u500b\u6b65\u9a5f 4.\u4e0b\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c\u539f\u672c44\u884c\u7684return\u5beb\u4e0a\u5f8c\u6703\u9020\u6210\u7b54\u6848\u6e1b\u5c11\uff0c\u539f\u56e0\u5728\u65bc\u505abacktrace\u7684\u6642\u5019\uff0c\u9000\u56de\u5305\u522e\u7d42\u9ede\u4e5f\u8981\u6a19\u8a18\u70ba\u6c92\u6709\u8d70\u8a2a\u904e\uff0c \u5982\u679c\u7d42\u9ede\u4ecd\u7136\u6a19\u8a18\u70ba\u8d70\u8a2a\u904e\uff0c\u90a3\u9ebc\u4e4b\u5f8c\u7b2c\u4e8c\u689d\u8def\u5f91\u8981\u8d70\u5230\u7d42\u9ede\u7684\u6642\u5019\u4fbf\u6703\u770b\u5230\u7d42\u9ede\u5df2\u7d93\u8d70\u8a2a\u904e\uff0c\u4fbf\u4e0d\u518d\u5411\u524d\u8d70\u53bb\u7d42\u9ede\uff0c\u800c\u5c0e\u81f4\u7d50\u679c\u4e0d\u9f4a\u5168 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector vector int final_res ; vector int res , visited ; stack int traversed_path ; vector vector int allPathsSourceTarget ( vector vector int graph ) //graph in adjacency list { int dst ; FORI ( graph . size ()) { if ( graph [ i ]. size () == 0 ) { dst = i ; } visited . push_back ( false ); } dfs ( 0 , dst , res , graph ); return final_res ; } void dfs ( int cur_node , int dst , vector int res , vector vector int graph ) { traversed_path . push ( cur_node ); visited [ cur_node ] = true ; if ( cur_node == dst ) { stack int copied_stk = traversed_path ; while ( copied_stk . size ()) { res . push_back ( copied_stk . top ()); copied_stk . pop (); } reverse ( res . begin (), res . end ()); final_res . push_back ( res ); res . clear (); //return ; } else { FORI ( graph [ cur_node ]. size ()) { if ( ! visited [ graph [ cur_node ][ i ]]) { dfs ( graph [ cur_node ][ i ], dst , res , graph ); } } } //back trace if there will be still some nodes have to be visited but now path are blocked since adj nodes are marked visited visited [ cur_node ] = false ; cur_node = traversed_path . top (); traversed_path . pop (); } };","title":"PB. 797. ALl path from src to dst \u5716\u8ad6\u984c\uff0c\u8d77\u7d42\u9ede\u6240\u6709\u53ef\u80fd\u8def\u5f91 "},{"location":"programming_practice/leetcode_OJ_WC/WC75/#pc-799-champagne-tower","text":"\u601d\u8def\uff1a\u96d6\u7136\u984c\u76ee\u6709\u9ede\u5687\u4eba\uff0c\u4f46\u53ea\u662f\u500b\u969c\u773c\u6cd5\uff0c\u525b\u958b\u59cb\u60f3\u8aaa\u4e00\u6b21\u5728\u7b2c\u4e00\u76c3\u6dfb\u52a0\u4e00\u6b21\uff0c\u518d\u8b93\u6bcf\u4e00\u6b21\u7684\u6d41\u6c34\u4f9d\u5e8f\u5f80\u4e0b\u6d41\u7ac4\uff0c\u5982\u679c\u6709\u676f\u5b50\u5df2\u7d93\u6eff\u6c34\u4f4d\uff0c\u5c31\u5c07row++ \u518d\u5ea6\u5f80\u4e0b\u6d41\u7ac4\uff0c\u76f4\u5230\u5e95\uff0c\u7136\u4e0d\u50c5\u6642\u9593\u8907\u96dc\u5ea6\u592a\u9ad8\u4e5f\u5728\u7b2c260\u500b\u6e2c\u8cc7WA\u4e86 \u4e8b\u5be6\u4e0a\uff0c\u53ea\u8981\u5148\u5c07\u6700\u9ad8\u7684\u90a3\u4e00\u676f\u6c34\uff0c\u4efb\u610f\u88dd\u6eff\u4ed6\u7684pour\u91cf\uff0c\u5148\u4e0d\u7528\u5728\u4e4e\u662f\u5426\u5df2\u7d93\u8d85\u51fa\u6eff\u6c34\u4f4d\uff0c\u53ea\u8981\u5148\u628a\u591a\u51fa\u7684\u6c34\u4f9d\u5e8f\u6d41\u7ac4\uff0c\u4e26\u4e14\u5de6\u53f3\u5747\u5206\u5373\u53ef\uff0c\u800c\u6703\u591a\u51fa\u7684\u6c34\u4f4d\u5c31\u662f \u7576\u524d\u6c34\u4f4d - \u4e00\u676f\u6c34 \u4e4b\u5f8c\u518d\u5c07\u9019\u500b\u5806\u51fa\u7684\u6c34\u4f4d\u8a55\u5206\u7d66\u6a13\u4e0b\u5169\u676f\u5373\u53ef\u3002 \u5f88\u667a\u969c\u7684\u662f \u4ee5\u70ba\u6a13\u4e0b\u5169\u676f\u662f row+1 col-1 and row+1 col+1 \u5229\u99ac\u62ff\u4e86\u4e00\u500bRE\uff0c\u5be6\u969b\u4e0a\u61c9\u8a72\u662fcol col+1\u5566w class Solution { public : double champagneTower ( int poured , int query_row , int query_glass ) { vector vector double cups ; cups . resize ( 101 ); //padding for ( int i = 0 ; i 101 ; i ++ ) { for ( int j = 0 ; j = i ; j ++ ) { cups [ i ]. push_back ( 0.0 ); } } cups [ 0 ][ 0 ] = poured ; for ( int i = 0 ; i 100 ; i ++ ) { for ( int j = 0 ; j = i ; j ++ ) { if ( cups [ i ][ j ] = 1.0 ) { cups [ i + 1 ][ j ] += ( cups [ i ][ j ] - 1.0 ) / 2.0 ; cups [ i + 1 ][ j + 1 ] += ( cups [ i ][ j ] - 1.0 ) / 2.0 ; cups [ i ][ j ] = 1.0 ; } } } return cups [ query_row ][ query_glass ]; } };","title":"PC. 799. Champagne Tower \u6578\u5b78\u898f\u5283\u8207\u89c0\u5bdf\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC75/#pd-800-smallest-rotation-with-highest-score-on","text":"\u6b64\u984c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u4e00\u5b9a\u8981\u5728O(N)\uff0c\u5fc5\u9808\u4f7f\u7528\u5340\u9593\u67e5\u8a62\u7b97\u6cd5\uff0c\u5927\u795e\u5ba4\u53cb\u99ac\u4e0a\u60f3\u5230\u7dda\u6bb5\u6a39segment tree\u67e5\u627e \u5340\u9593\u67e5\u8a62\u7b97\u6cd5\u6982\u5ff5\uff0c\u5f9e\u66b4\u529b\u5230NlogN \u5230N * \u601d\u8def\uff0c\u53ef\u4ee5\u770b\u51fa\u6709\u5169\u7a2e\u60c5\u5f62\uff0c\u4e00\u7a2e\u662f\u672c\u4f86\u5c31\u6703\u5f97\u5206\u7684(value = index)\uff0c\u4e00\u7a2e\u662f\u9084\u6c92\u6709\u5f97\u5206\u7684 else \u7b2c\u4e00\u985e\u578b \u9996\u5148\u7b2c\u4e00\u7a2e\u672c\u4f86\u5c31\u53ef\u4ee5\u5f97\u5206\uff0c\u4f8b\u5982[2,3,1,4,0]\u4e2d\u76841 , 0\uff0c\u5411\u53f3\u79fb\u52d5\u81ea\u7136\u53ef\u4ee5\u5f97\u5206\uff0c\u6240\u4ee5\u4ed6\u7684\u53f3\u908a\u53ef\u4ee5\u7684\u6b65\u6578\u4fbf\u662f[index+1(\u76f4\u63a5\u5411\u5de6\u79fb\u52d5\u5230\u6700\u53f3\u5074\uff08\u8d85\u904e\u5f8c\u91cd\u65b0\u5f9e\u7d50\u5c3e\u56de\u4f86\uff09\uff0c\u5fc5\u7136\u7b26\u5408\u7684\u958b\u5916\u639b\u6a21\u5f0f),len-1\uff08\u79fb\u52d5\u5230\u4ed6\u4e0b\u4e00\u500b\uff09] \u4ee5\u53ca[0(\u4e0d\u52d5)\uff0cindex - value\uff08\u4f8b\u5982\u4e0a\u9762\u76841\u57282 \u81f3\u591a\u79fb\u52d5\u52301\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 2 - 1 \u4e00\u6b65\uff09] \u7b2c\u4e8c\u985e\u578b \u800c\u53e6\u5916\u4e00\u7a2e\u7576\u524d\u7121\u6cd5\u5f97\u5206\u7684\uff0c\u4fbf\u8981[index+1 (\u958b\u5916\u639b\u79fb\u5230\u6700\u53f3\u908a), total_len - (value - index)(\u7e7c\u7e8c\u79fb\u52d5\uff0cvalue - index \u4ee3\u8868\u8207\u6700\u5927\u79fb\u52d5\u6b21\u6578\u7684\u76f8\u5dee\uff0c\u4e5f\u5c31\u662f\u5b83\u5fc5\u9808\u5411\u53f3\u79fb\u52d5val - index\u9019\u500b\u5dee\u503c\u624d\u6709\u5206\uff0c\u5411\u53f3\u79fb\u52d5\u7684\u81f3\u5c11\u6b21\u6578\uff0c\u63db\u904e\u4f86\u8b1b\u7528 len \u4f86\u6263\u9664\u5c31\u662f\u5411\u5de6\u79fb\u52d5\u7684\u6700\u5927\u6b21\u6578)] \u6c42\u51fa\u6bcf\u4e00\u500b\u6578\u5b57\u61c9\u8a72\u6709\u7684\u5340\u9593\uff0c\u628a\u4ed6\u5011\u6620\u5c04\u5230\u5340\u9593\u67e5\u8a62\u6bb5\uff0c\u4f7f\u7528python\u7684pair\u8868\u793a\u958b\u59cb\u548c\u7d50\u675f for index , value in enumerate ( arr ): if index value : #one segment for this ones pair . append ([ index + 1 , total_len - ( value - index )]) #segment start and end else : #two segments for this one pair . append ([ index + 1 , total_len - 1 ]) pair . append ([ 0 , index - value ]) \u6700\u5f8c\u627e\u5230prefix sum (\u52a0\u7e3d\u5230\u6b64\u6642\u7684\u7e3d\u548c)\uff0c\u601d\u7dd2\u898b\u8a3b\u89e3 segment_query = [ 0 ] * ( total_len + 1 ) #aux arrat for the prefix sum, segment query for i in range ( len ( pair )): #+1 padding segment_query [ pair [ i ][ 0 ]] += 1 #go in the interval, overlapping with all the other segment segment_query [ pair [ i ][ 1 ] + 1 ] -= 1 #leave the interval, cancelling the infulence of segment overlapping \u6574\u9ad4AC\u4ee3\u78bc\u5982\u4e0b class Solution : def bestRotation ( self , arr ): best = 0 shift = 0 total_len = len ( arr ) #start_pos_arr = [] pair = [] #initial the start_pos_arr to record the starting position of the given array #initial score for index , value in enumerate ( arr ): if index value : #one segment for this ones pair . append ([ index + 1 , total_len - ( value - index )]) #segment start and end else : #two segments for this one pair . append ([ index + 1 , total_len - 1 ]) pair . append ([ 0 , index - value ]) segment_query = [ 0 ] * ( total_len + 1 ) #aux arrat for the prefix sum, segment query for i in range ( len ( pair )): #+1 padding segment_query [ pair [ i ][ 0 ]] += 1 #go in the interval, overlapping with all the other segment segment_query [ pair [ i ][ 1 ] + 1 ] -= 1 #leave the interval, cancelling the infulence of segment overlapping cur_pts = 0 for i in range ( len ( segment_query )): cur_pts += segment_query [ i ] if ( cur_pts best ): best = cur_pts shift = i return shift","title":"PD. 800. Smallest rotation with highest score \u6578\u5b78\u63a8\u7406+\u5340\u9593\u67e5\u8a62\u7dda\u6027\u512a\u5316O(N)"},{"location":"programming_practice/leetcode_OJ_WC/WC76/","text":"leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97 Contest time: Mar 18, 2018 PA. 800. Similar RGB Color \u9ebb\u7169\u7684\u6c34\u984c \u5982\u984c\u76ee\u6240\u8ff0\uff0c\u6703\u9700\u8981\u7528\u5230\u4e00\u4e9b\u4f4d\u5143\u904b\u7b97\uff0c\u56e0\u6b64\u7a0d\u5acc\u9ebb\u7169\uff0c\u5c45\u7136\u5beb\u4e86\u4e00\u500b\u591a\u5c0f\u6642\u624d\u5beb\u51fa\u4f86\u3002 \u4e2d\u9014\u9084\u88ab\u8b8a\u66f4\u7684\u984c\u8aaa\u660e\u800d\u4e86\u4e00\u9053\uff0c\u800c\u4e14\u984c\u76ee\u8aaa\u660e\u6839\u672c\u8aaa\u932f\u4e86gg\u3002 cti itc \u53ef\u4ee5\u5728\u5341\u516d\u9032\u4f4d\u548cchar\u4e92\u76f8\u8f49\u63db\uff0c\u9817\u70ba\u65b9\u4fbf\u3002\u800cstringstream\u53ef\u4ee5\u628a\u5b57\u4e32\u5728\u8996\u70ba\u8f38\u5165\u8655\u7406\u4e00\u6b21\u8f49\u6210\u5341\u516d\u76e1\u4f4d\u5728\u8f38\u5165\u7d66\u6574\u6578\u3002 #define FORI(n) for(int i = 0; i n; ++ i) #include cstdlib class Solution { public : int cti ( char c ) { if ( 0 = c c = 9 ) return c - 0 ; else return 10 + c - a ; } char itc ( int i ) { if ( 0 = i i = 9 ) return 0 + i ; else return a + i - 10 ; } string similarRGB ( string color ) { int dist = 0 , best = 99999999 ; int original = 0 ; color = color . substr ( 1 , 6 ); stringstream ss ; ss hex color ; ss original ; int R , G , B , nr , ng , nb , nr1 , ng1 , nb1 ; string sr , sg , sb ; R = original 0xff0000 ; G = original 0xff00 ; B = original 0xff ; R = 16 ; G = 8 ; //find smallest R for ( int i = 0 ; i 16 ; i ++ ) { nr = i 4 | i ; if ( abs ( nr - R ) best ) { sr = ; best = abs ( nr - R ); nr = i ; sr += itc ( i ); } } //fins smallest G best = 99999999 ; for ( int i = 0 ; i 16 ; i ++ ) { ng = i 4 | i ; if ( abs ( ng - G ) best ) { sg = ; best = abs ( ng - G ); ng = i ; sg += itc ( i ); } } //find smallest B best = 99999999 ; for ( int i = 0 ; i 16 ; i ++ ) { nb = i 4 | i ; if ( abs ( nb - B ) best ) { sb = ; best = abs ( nb - B ); nb = i ; sb += itc ( i ); } } return # + sr + sr + sg + sg + sb + sb ; } }; PB. 801. Minimum Swaps To Make Sequences Increasing \u52d5\u614b\u898f\u5283 \u5f9e\u984c\u76ee\u7684\u6027\u8cea\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u500b\u968e\u6bb5\u5747\u8981\u4e0d\u65b7\u6c42\u89e3\u9019\u500b\u968e\u6bb5\u662f\u5426\u8981\u4ea4\u63db\uff08\u91cd\u758a\u5b50\u554f\u984c\uff09\uff0c\u4ee5\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5e8f\u5217\u3002 \u4f46\u662f\u5728\u6bcf\u4e00\u500b\u905e\u589e\u4e2d\uff0c\u5982\u679c\u6bcf\u4e00\u500b\u5143\u7d20\u548c\u5b83\u524d\u4e00\u500b\u5143\u7d20\u90fd\u7b26\u5408\u56b4\u683c\u589e\uff08\u6700\u512a\u5b50\u7d50\u69cb\uff09\uff0c\u90a3\u9ebc\u6574\u500b\u6578\u5217\u4e5f\u6703\u662f\u4e00\u500b\u56b4\u683c\u589e\u3002 \u6b64\u5916\uff0c\u5982\u679c\u672c\u4f86\u5c31\u7b26\u5408\u56b4\u683c\u589e\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\uff0c\u6216\u662f\u56e0\u70ba\u4e4b\u524d\u7684\u4ea4\u63db(\u81f3i-1)\u800c\u5c0e\u81f4\u7b2ci\u500b\u9700\u8981\u66ff\u63db\uff0c\u4fbf\u9700\u8981\u6aa2\u67e5\u6b64\u6b21\u662f\u5426\u8981\u63db\uff0c\u4e5f\u5c31\u662f\u5411\u524d\u6aa2\u67e5\u5230\u524d\u4e00\u500b\u3002 \u56e0\u6b64\u65e2\u6709\u7b26\u5408\u91cd\u758a\u5b50\u554f\u984c\uff0c\u53c8\u6709\u6700\u512a\u5b50\u7d50\u69cb\uff0c\u90a3\u5c31\u662f\u52d5\u614b\u898f\u5283\u8a66\u7528\u7684\u7bc4\u570d\u56c9 \u53c3\u8003\u9023\u7d50:\u4ec0\u9ebc\u6642\u5019\u7528\u52d5\u614b\u898f\u5283\u6f14\u7b97\u6cd5 \u51fa\u984c\u8005\u89e3\u6790 \u89e3\u6790\u7684\u7ffb\u8b6f\u7fd4\u898b\u7a0b\u5f0f\u78bc\u4e2d\u7684\u8a3b\u89e3 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : int minSwap ( vector int A , vector int B ) { int sz = A . size (); vector int swap ( sz , INT_MAX ), unswap ( sz , INT_MAX ); //calculating the step of swapped or not till this place. unswap [ 0 ] = 0 ; swap [ 0 ] = 1 ; for ( int i = 1 ; i sz ; i ++ ) { //\u5982\u679c\u5169\u65b9\u90fd\u4f9d\u7136\u7b26\u5408\u905e\u589e\uff0c\u5247\u53ef\u4ee5\u4e00\u6b21\u63db\u5169\u500bcolumn\u6216\u662f\u90fd\u4e0d\u8981\u63db\uff0c\u56e0\u70ba\u4e4b\u524d\u7684\u5df2\u7d93\u7b26\u5408\u56b4\u683c\u905e\u589e if ( A [ i - 1 ] A [ i ] B [ i - 1 ] B [ i ]) //\u63a8\u7406\u904e\u4f86\u5fc5\u5b9a\u4e5f\u6703\u7e7c\u7e8c\u56b4\u683c\u905e\u589e\uff0c\u5426\u5247\u5c31\u6703\u88ab\u66ff\u63db\u4e86 { unswap [ i ] = min ( unswap [ i - 1 ], unswap [ i ]); //\u5982\u679c\u4e0d\u8981\u66ff\u63db\uff0c\u5c31\u662f\u4f9d\u7136\u7dad\u6301\u8ddf\u4e0a\u4e00\u6b21\u4e00\u6a23\u7684\u672a\u66ff\u63db\u6578\u5b57\uff08\u9019\u4e00\u6b21\u662fintmax \u6240\u4ee5\u4e00\u5b9a\u6703\u53d6\u5230\u8f03\u5c0f\u7684\uff09 swap [ i ] = min ( swap [ i - 1 ] + 1 , swap [ i ]); //\u5982\u679c\u8981\u66ff\u63db\uff0c\u90a3\u9ebc\u5148\u524d\u7d2f\u7a4d\u7684\u66ff\u63db\u6b21\u6578\u5230\u9019\u88e1\u5c31\u6703\u518d\u591a\u4e00\u6b21\uff0c\u56e0\u70ba\u73fe\u5728\u591a\u7684i\u53c8\u8981\u518d\u63db\u4e00\u6b21\u4e86\u3002 } //\u82e5\u662f\u9019\u7a2e\u4ea4\u53c9\u7b26\u5408\u5f62\uff0c\u5247i\u6216\u662fi-1\u4f4d\u7f6e\u53ef\u4ee5\u6709\u4e00\u500b\u5fc5\u8981\u88ab\u66ff\u63db\uff0c\u4e5f\u5c31\u662fi, i-1\u6703\u6709\u905e\u589e\u5f62\u6210\u3002\uff08\u9019\u7a2e\u610f\u601d\u5c31\u662f\u8aaa\uff0c\u56e0\u70baA B\u7684\u300e\u96d9\u91cd\u7b26\u5408\u300f\u905e\u589e\u5728\u6b64\u88ab\u6253\u65b7\u4e86\u300f //\u56e0\u70ba\u88ab\u6253\u65b7\uff0c\u52e2\u5fc5\u5f97\u5229\u7528\u4ea4\u63db\u5176\u4e2d\u4e00\u500b\uff0c\u4f8b\u5982\u5c07i or i-1 \u5176\u4e2d\u4e4b\u4e00\u5404\u81ea\u66ff\u63db\u5373\u53ef\u3002 if ( A [ i - 1 ] B [ i ] B [ i - 1 ] A [ i ]) { unswap [ i ] = min ( unswap [ i ], swap [ i - 1 ]); //\u5982\u679c\u4e0d\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u4f9d\u7136\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u9ebc\u5148\u524d\u7684\u52e2\u5fc5\u90fd\u8981\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5f97\u66ff\u63db\u4e0a\u4e00\u500b //\u4e5f\u5c31\u662f\u8a0e\u8ad6\u4e32\u88e1\u9762\u6240\u8aaa\u7684\uff1athe cost n2 of having a legal sequence up to column i that ends with column i not flipped, is going //to be the cost s1 of having a legal sequence up to column i-1 that ends in column i-1 flipped swap [ i ] = min ( unswap [ i - 1 ] + 1 , swap [ i ]); //\u5982\u679c\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u624d\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u5c31\u4ee3\u8868\u5148\u524d\u5230i-1\u90fd\u8981\u662f\u6301\u7e8c\u56b4\u683c\u589e\uff0c\u56e0\u6b64\u5f9e\u9019\u88e1\u958b\u59cb\u66ff\u63db\u5c31\u662f\u7b97\u5148\u524d\u6c92\u66ff\u63db\u4f46\u9019\u500b\u6709\u66ff\u63db\uff0c\u6240\u4ee5\u662f\u5f9eunswap + 1 } } return min ( swap [ sz - 1 ], unswap [ sz - 1 ]); } }; PC. 802. Find Eventual Safe States \u5716\u8ad6\u7d93\u5178\u984c\uff0c\u67e5\u627e\u74b0\u4ee5\u53ca\u53ef\u80fd\u89f8\u53ca\u74b0\u4e4b\u6240\u6709\u9ede \u5229\u7528\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4f86\u5132\u5b58\u6240\u6709\u9ede\u7684\u985e\u578b -1\u4ee3\u8868\u5c1a\u672a\u8655\u7406 0\u4ee3\u8868\u4e0d\u5728\u74b0\u4e0a\uff0c\u6216\u662f\u4e0d\u53ef\u80fd\u89f8\u53ca\u5230\u4ed6\u4eba\u7684\u74b0 1\u4ee3\u8868\u662f\u74b0\u7684\u4e00\u90e8\u5206 \u512a\u5316\u53ea\u5c0b\u627e\u9084\u6c92\u8655\u7406\u904e\u5f97\u9ede\uff0c\u5176\u4ed6\u518d\u628a\u6a19\u8a18\u70ba0\u7684\u9ede\uff0c\u653e\u5230\u7d50\u679c\u88e1\u9762\u3002 \u4f46\u4f9d\u7136\u512a\u5316\u4e0d\u5920TLE:( \u5148\u653e\u7f6e\u5427 Wrong Answer 37/111 \u8907\u96dc\u7684\u66b4\u529b\u4f5c\u6cd5\uff0c\u9084\u6703\u932f TLE 81/111 \u63d0\u65e9\u8df3\u51fa\uff0c\u4f46\u4f9d\u7136TLE \u4ee5\u4e0b\u4ee3\u78bc\u512a\u5316\u5230 101/111 \u4f46\u4f9d\u7136TLE\u4e86 \u5148\u300e\u7cbe\u795e\u300fac\u4e00\u4e0b\u3002 \u4ee3\u78bc\u908f\u8f2f\u898b\u8a3b\u89e3 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector int res , visited , in_cycle ; vector int eventualSafeNodes ( vector vector int graph ) { in_cycle . resize ( graph . size ()); fill ( in_cycle . begin (), in_cycle . end (), - 1 ); //-1 for unprocessed, 1 for in cycle and 0 for not in cycle FORI ( graph . size ()) { if ( in_cycle [ i ] == - 1 ) //if this node is not the terminal node { if ( graph [ i ]. size ()) //the node which unsure in a node should be processed, otherwiswe, just dont do { visited . resize ( graph . size ()); fill ( visited . begin (), visited . end (), 0 ); // cout Start from i endl; if ( ! dfs ( i , i , graph , 0 )) { in_cycle [ i ] = 0 ; } } else { in_cycle [ i ] = 0 ; } } } // cout is in_cycle ; FORI ( in_cycle . size ()) { if ( in_cycle [ i ] == 0 ) { res . push_back ( i ); } // cout in_cycle[i] ; } return res ; } bool dfs ( int cur_node , int start , vector vector int graph , int step ) { // cout DFS to cur_node endl; // cout is in_cycle ; FORI ( in_cycle . size ()) { cout in_cycle [ i ] ; } // cout endl; if ( in_cycle [ cur_node ] == 1 ) { // cout Hit a node that causes cycle endl; return true ; } else if ( in_cycle [ cur_node ] == 0 ) //reach the node that will not form a cycle, which is safe { return false ; } if ( visited [ cur_node ] == 1 ) //visit the visited node again, that is a cycle { // cout Hit a node that visited before, CYCLE CONFIRMED!! now cur_node is cur_node endl; in_cycle [ cur_node ] = 1 ; return true ; } //traversed_path.push_back(cur_node); visited [ cur_node ] = 1 ; FORI ( graph [ cur_node ]. size ()) //search the next node that can be traversed from the current node { //if this node will connect to its neighbor that forms a circle, than cur_node will be treated as circle-hazard as well //cout i endl; if ( dfs ( graph [ cur_node ][ i ], start , graph , step + 1 )) { in_cycle [ cur_node ] = 1 ; // cout Node cur_node connect to i that forms a cycle endl; return true ; } } visited [ cur_node ] = 0 ; //if next traverse meet the terminal, it does not count as meet before that form a cycle since terminal is OK to meet again in_cycle [ cur_node ] = 0 ; //this node is terminal since the aforementioned FORI wont get in, so this is the node with output degree zero return false ; } };","title":"WC76"},{"location":"programming_practice/leetcode_OJ_WC/WC76/#leetcode_oj-wc76","text":"Contest time: Mar 18, 2018","title":"leetcode_OJ WC76 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC76/#pa-800-similar-rgb-color","text":"\u5982\u984c\u76ee\u6240\u8ff0\uff0c\u6703\u9700\u8981\u7528\u5230\u4e00\u4e9b\u4f4d\u5143\u904b\u7b97\uff0c\u56e0\u6b64\u7a0d\u5acc\u9ebb\u7169\uff0c\u5c45\u7136\u5beb\u4e86\u4e00\u500b\u591a\u5c0f\u6642\u624d\u5beb\u51fa\u4f86\u3002 \u4e2d\u9014\u9084\u88ab\u8b8a\u66f4\u7684\u984c\u8aaa\u660e\u800d\u4e86\u4e00\u9053\uff0c\u800c\u4e14\u984c\u76ee\u8aaa\u660e\u6839\u672c\u8aaa\u932f\u4e86gg\u3002 cti itc \u53ef\u4ee5\u5728\u5341\u516d\u9032\u4f4d\u548cchar\u4e92\u76f8\u8f49\u63db\uff0c\u9817\u70ba\u65b9\u4fbf\u3002\u800cstringstream\u53ef\u4ee5\u628a\u5b57\u4e32\u5728\u8996\u70ba\u8f38\u5165\u8655\u7406\u4e00\u6b21\u8f49\u6210\u5341\u516d\u76e1\u4f4d\u5728\u8f38\u5165\u7d66\u6574\u6578\u3002 #define FORI(n) for(int i = 0; i n; ++ i) #include cstdlib class Solution { public : int cti ( char c ) { if ( 0 = c c = 9 ) return c - 0 ; else return 10 + c - a ; } char itc ( int i ) { if ( 0 = i i = 9 ) return 0 + i ; else return a + i - 10 ; } string similarRGB ( string color ) { int dist = 0 , best = 99999999 ; int original = 0 ; color = color . substr ( 1 , 6 ); stringstream ss ; ss hex color ; ss original ; int R , G , B , nr , ng , nb , nr1 , ng1 , nb1 ; string sr , sg , sb ; R = original 0xff0000 ; G = original 0xff00 ; B = original 0xff ; R = 16 ; G = 8 ; //find smallest R for ( int i = 0 ; i 16 ; i ++ ) { nr = i 4 | i ; if ( abs ( nr - R ) best ) { sr = ; best = abs ( nr - R ); nr = i ; sr += itc ( i ); } } //fins smallest G best = 99999999 ; for ( int i = 0 ; i 16 ; i ++ ) { ng = i 4 | i ; if ( abs ( ng - G ) best ) { sg = ; best = abs ( ng - G ); ng = i ; sg += itc ( i ); } } //find smallest B best = 99999999 ; for ( int i = 0 ; i 16 ; i ++ ) { nb = i 4 | i ; if ( abs ( nb - B ) best ) { sb = ; best = abs ( nb - B ); nb = i ; sb += itc ( i ); } } return # + sr + sr + sg + sg + sb + sb ; } };","title":"PA. 800. Similar RGB Color \u9ebb\u7169\u7684\u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC76/#pb801-minimum-swaps-to-make-sequences-increasing","text":"\u5f9e\u984c\u76ee\u7684\u6027\u8cea\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u500b\u968e\u6bb5\u5747\u8981\u4e0d\u65b7\u6c42\u89e3\u9019\u500b\u968e\u6bb5\u662f\u5426\u8981\u4ea4\u63db\uff08\u91cd\u758a\u5b50\u554f\u984c\uff09\uff0c\u4ee5\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5e8f\u5217\u3002 \u4f46\u662f\u5728\u6bcf\u4e00\u500b\u905e\u589e\u4e2d\uff0c\u5982\u679c\u6bcf\u4e00\u500b\u5143\u7d20\u548c\u5b83\u524d\u4e00\u500b\u5143\u7d20\u90fd\u7b26\u5408\u56b4\u683c\u589e\uff08\u6700\u512a\u5b50\u7d50\u69cb\uff09\uff0c\u90a3\u9ebc\u6574\u500b\u6578\u5217\u4e5f\u6703\u662f\u4e00\u500b\u56b4\u683c\u589e\u3002 \u6b64\u5916\uff0c\u5982\u679c\u672c\u4f86\u5c31\u7b26\u5408\u56b4\u683c\u589e\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\uff0c\u6216\u662f\u56e0\u70ba\u4e4b\u524d\u7684\u4ea4\u63db(\u81f3i-1)\u800c\u5c0e\u81f4\u7b2ci\u500b\u9700\u8981\u66ff\u63db\uff0c\u4fbf\u9700\u8981\u6aa2\u67e5\u6b64\u6b21\u662f\u5426\u8981\u63db\uff0c\u4e5f\u5c31\u662f\u5411\u524d\u6aa2\u67e5\u5230\u524d\u4e00\u500b\u3002 \u56e0\u6b64\u65e2\u6709\u7b26\u5408\u91cd\u758a\u5b50\u554f\u984c\uff0c\u53c8\u6709\u6700\u512a\u5b50\u7d50\u69cb\uff0c\u90a3\u5c31\u662f\u52d5\u614b\u898f\u5283\u8a66\u7528\u7684\u7bc4\u570d\u56c9 \u53c3\u8003\u9023\u7d50:\u4ec0\u9ebc\u6642\u5019\u7528\u52d5\u614b\u898f\u5283\u6f14\u7b97\u6cd5 \u51fa\u984c\u8005\u89e3\u6790 \u89e3\u6790\u7684\u7ffb\u8b6f\u7fd4\u898b\u7a0b\u5f0f\u78bc\u4e2d\u7684\u8a3b\u89e3 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : int minSwap ( vector int A , vector int B ) { int sz = A . size (); vector int swap ( sz , INT_MAX ), unswap ( sz , INT_MAX ); //calculating the step of swapped or not till this place. unswap [ 0 ] = 0 ; swap [ 0 ] = 1 ; for ( int i = 1 ; i sz ; i ++ ) { //\u5982\u679c\u5169\u65b9\u90fd\u4f9d\u7136\u7b26\u5408\u905e\u589e\uff0c\u5247\u53ef\u4ee5\u4e00\u6b21\u63db\u5169\u500bcolumn\u6216\u662f\u90fd\u4e0d\u8981\u63db\uff0c\u56e0\u70ba\u4e4b\u524d\u7684\u5df2\u7d93\u7b26\u5408\u56b4\u683c\u905e\u589e if ( A [ i - 1 ] A [ i ] B [ i - 1 ] B [ i ]) //\u63a8\u7406\u904e\u4f86\u5fc5\u5b9a\u4e5f\u6703\u7e7c\u7e8c\u56b4\u683c\u905e\u589e\uff0c\u5426\u5247\u5c31\u6703\u88ab\u66ff\u63db\u4e86 { unswap [ i ] = min ( unswap [ i - 1 ], unswap [ i ]); //\u5982\u679c\u4e0d\u8981\u66ff\u63db\uff0c\u5c31\u662f\u4f9d\u7136\u7dad\u6301\u8ddf\u4e0a\u4e00\u6b21\u4e00\u6a23\u7684\u672a\u66ff\u63db\u6578\u5b57\uff08\u9019\u4e00\u6b21\u662fintmax \u6240\u4ee5\u4e00\u5b9a\u6703\u53d6\u5230\u8f03\u5c0f\u7684\uff09 swap [ i ] = min ( swap [ i - 1 ] + 1 , swap [ i ]); //\u5982\u679c\u8981\u66ff\u63db\uff0c\u90a3\u9ebc\u5148\u524d\u7d2f\u7a4d\u7684\u66ff\u63db\u6b21\u6578\u5230\u9019\u88e1\u5c31\u6703\u518d\u591a\u4e00\u6b21\uff0c\u56e0\u70ba\u73fe\u5728\u591a\u7684i\u53c8\u8981\u518d\u63db\u4e00\u6b21\u4e86\u3002 } //\u82e5\u662f\u9019\u7a2e\u4ea4\u53c9\u7b26\u5408\u5f62\uff0c\u5247i\u6216\u662fi-1\u4f4d\u7f6e\u53ef\u4ee5\u6709\u4e00\u500b\u5fc5\u8981\u88ab\u66ff\u63db\uff0c\u4e5f\u5c31\u662fi, i-1\u6703\u6709\u905e\u589e\u5f62\u6210\u3002\uff08\u9019\u7a2e\u610f\u601d\u5c31\u662f\u8aaa\uff0c\u56e0\u70baA B\u7684\u300e\u96d9\u91cd\u7b26\u5408\u300f\u905e\u589e\u5728\u6b64\u88ab\u6253\u65b7\u4e86\u300f //\u56e0\u70ba\u88ab\u6253\u65b7\uff0c\u52e2\u5fc5\u5f97\u5229\u7528\u4ea4\u63db\u5176\u4e2d\u4e00\u500b\uff0c\u4f8b\u5982\u5c07i or i-1 \u5176\u4e2d\u4e4b\u4e00\u5404\u81ea\u66ff\u63db\u5373\u53ef\u3002 if ( A [ i - 1 ] B [ i ] B [ i - 1 ] A [ i ]) { unswap [ i ] = min ( unswap [ i ], swap [ i - 1 ]); //\u5982\u679c\u4e0d\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u4f9d\u7136\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u9ebc\u5148\u524d\u7684\u52e2\u5fc5\u90fd\u8981\u7b26\u5408\u56b4\u683c\u905e\u589e\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5f97\u66ff\u63db\u4e0a\u4e00\u500b //\u4e5f\u5c31\u662f\u8a0e\u8ad6\u4e32\u88e1\u9762\u6240\u8aaa\u7684\uff1athe cost n2 of having a legal sequence up to column i that ends with column i not flipped, is going //to be the cost s1 of having a legal sequence up to column i-1 that ends in column i-1 flipped swap [ i ] = min ( unswap [ i - 1 ] + 1 , swap [ i ]); //\u5982\u679c\u8981\u66ff\u63db\u9019\u4e00\u500b\uff0c\u624d\u80fd\u8b93\u6574\u500b\u6578\u5217\u56b4\u683c\u589e\uff0c\u90a3\u5c31\u4ee3\u8868\u5148\u524d\u5230i-1\u90fd\u8981\u662f\u6301\u7e8c\u56b4\u683c\u589e\uff0c\u56e0\u6b64\u5f9e\u9019\u88e1\u958b\u59cb\u66ff\u63db\u5c31\u662f\u7b97\u5148\u524d\u6c92\u66ff\u63db\u4f46\u9019\u500b\u6709\u66ff\u63db\uff0c\u6240\u4ee5\u662f\u5f9eunswap + 1 } } return min ( swap [ sz - 1 ], unswap [ sz - 1 ]); } };","title":"PB.801. Minimum Swaps To Make Sequences Increasing \u52d5\u614b\u898f\u5283"},{"location":"programming_practice/leetcode_OJ_WC/WC76/#pc-802-find-eventual-safe-states","text":"\u5229\u7528\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4f86\u5132\u5b58\u6240\u6709\u9ede\u7684\u985e\u578b -1\u4ee3\u8868\u5c1a\u672a\u8655\u7406 0\u4ee3\u8868\u4e0d\u5728\u74b0\u4e0a\uff0c\u6216\u662f\u4e0d\u53ef\u80fd\u89f8\u53ca\u5230\u4ed6\u4eba\u7684\u74b0 1\u4ee3\u8868\u662f\u74b0\u7684\u4e00\u90e8\u5206 \u512a\u5316\u53ea\u5c0b\u627e\u9084\u6c92\u8655\u7406\u904e\u5f97\u9ede\uff0c\u5176\u4ed6\u518d\u628a\u6a19\u8a18\u70ba0\u7684\u9ede\uff0c\u653e\u5230\u7d50\u679c\u88e1\u9762\u3002 \u4f46\u4f9d\u7136\u512a\u5316\u4e0d\u5920TLE:( \u5148\u653e\u7f6e\u5427 Wrong Answer 37/111 \u8907\u96dc\u7684\u66b4\u529b\u4f5c\u6cd5\uff0c\u9084\u6703\u932f TLE 81/111 \u63d0\u65e9\u8df3\u51fa\uff0c\u4f46\u4f9d\u7136TLE \u4ee5\u4e0b\u4ee3\u78bc\u512a\u5316\u5230 101/111 \u4f46\u4f9d\u7136TLE\u4e86 \u5148\u300e\u7cbe\u795e\u300fac\u4e00\u4e0b\u3002 \u4ee3\u78bc\u908f\u8f2f\u898b\u8a3b\u89e3 #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector int res , visited , in_cycle ; vector int eventualSafeNodes ( vector vector int graph ) { in_cycle . resize ( graph . size ()); fill ( in_cycle . begin (), in_cycle . end (), - 1 ); //-1 for unprocessed, 1 for in cycle and 0 for not in cycle FORI ( graph . size ()) { if ( in_cycle [ i ] == - 1 ) //if this node is not the terminal node { if ( graph [ i ]. size ()) //the node which unsure in a node should be processed, otherwiswe, just dont do { visited . resize ( graph . size ()); fill ( visited . begin (), visited . end (), 0 ); // cout Start from i endl; if ( ! dfs ( i , i , graph , 0 )) { in_cycle [ i ] = 0 ; } } else { in_cycle [ i ] = 0 ; } } } // cout is in_cycle ; FORI ( in_cycle . size ()) { if ( in_cycle [ i ] == 0 ) { res . push_back ( i ); } // cout in_cycle[i] ; } return res ; } bool dfs ( int cur_node , int start , vector vector int graph , int step ) { // cout DFS to cur_node endl; // cout is in_cycle ; FORI ( in_cycle . size ()) { cout in_cycle [ i ] ; } // cout endl; if ( in_cycle [ cur_node ] == 1 ) { // cout Hit a node that causes cycle endl; return true ; } else if ( in_cycle [ cur_node ] == 0 ) //reach the node that will not form a cycle, which is safe { return false ; } if ( visited [ cur_node ] == 1 ) //visit the visited node again, that is a cycle { // cout Hit a node that visited before, CYCLE CONFIRMED!! now cur_node is cur_node endl; in_cycle [ cur_node ] = 1 ; return true ; } //traversed_path.push_back(cur_node); visited [ cur_node ] = 1 ; FORI ( graph [ cur_node ]. size ()) //search the next node that can be traversed from the current node { //if this node will connect to its neighbor that forms a circle, than cur_node will be treated as circle-hazard as well //cout i endl; if ( dfs ( graph [ cur_node ][ i ], start , graph , step + 1 )) { in_cycle [ cur_node ] = 1 ; // cout Node cur_node connect to i that forms a cycle endl; return true ; } } visited [ cur_node ] = 0 ; //if next traverse meet the terminal, it does not count as meet before that form a cycle since terminal is OK to meet again in_cycle [ cur_node ] = 0 ; //this node is terminal since the aforementioned FORI wont get in, so this is the node with output degree zero return false ; } };","title":"PC. 802. Find Eventual Safe States \u5716\u8ad6\u7d93\u5178\u984c\uff0c\u67e5\u627e\u74b0\u4ee5\u53ca\u53ef\u80fd\u89f8\u53ca\u74b0\u4e4b\u6240\u6709\u9ede"},{"location":"programming_practice/leetcode_OJ_WC/WC78/","text":"leetcode_OJ WC78 \u89e3\u984c\u5fc3\u5f97 Contest time: Apr 1, 2018 PA. 811. Subdomain Visit Count substr + map \u6d3b\u7528\u6c34\u984c \u601d\u8def\uff1a\u7c21\u55ae\u7684\u6c34\u984c\uff0c\u7528substr\u88c1\u5207\u7db2\u57df\u540d\u7a31\u5f8c\u518dhash\u5230\u7d71\u8a08\u6578\u5b57\uff0c\u4ee5stoi\u51fd\u6578\u4f86\u5c07string\u7684\u6578\u5b57\u8f49\u6210\u7d71\u8a08\u503c #define FORI(n) for(int i = 0; i n; ++ i) #define pb push_back class Solution { public : vector string subdomainVisits ( vector string cpdomains ) { map string , int mymap ; vector vector int dotpos ; vector int visit ; //each domain visit dotpos . resize ( cpdomains . size ()); //cpdomains[i].size() - 1 FORI ( cpdomains . size ()) { for ( int j = cpdomains [ i ]. size () - 1 ; j = 0 ; j -- ) { if ( cpdomains [ i ][ j ] == . ) { dotpos [ i ]. pb ( j ); } else if ( cpdomains [ i ][ j ] == ) { dotpos [ i ]. pb ( j ); break ; } } } //subdomain pos string tmp ; FORI ( cpdomains . size ()) { for ( int j = 0 ; j cpdomains [ i ]. size (); j ++ ) { if ( cpdomains [ i ][ j ] == ) { tmp = cpdomains [ i ]. substr ( 0 , j + 1 ); int tmp2 = stoi ( tmp ); visit . pb ( tmp2 ); break ; } } } //times int poscnt = 0 ; FORI ( cpdomains . size ()) { for ( int j = 0 ; j dotpos [ i ]. size (); j ++ ) { tmp = cpdomains [ i ]. substr ( dotpos [ i ][ j ] + 1 , cpdomains [ i ]. size () - dotpos [ i ][ j ] + 1 ); mymap [ tmp ] += visit [ i ]; } } //accumulate vector string res ; string timestr ; for ( map string , int :: iterator it = mymap . begin (); it != mymap . end (); ++ it ) { timestr = to_string ( it - second ); res . pb ( timestr + + it - first ); } return res ; } }; PB. 809. Expressive Words \u5b57\u4e32\u96d9\u6307\u6a19\u63a8\u7406\u89c0\u5bdf\u984c \u601d\u8def\uff1a\u4e0d\u7b97\u96e3\u7684\u984c\u76ee\uff0c\u53ea\u662f\u984c\u76ee\u6709\u9ede\u542b\u7cca\u4e0d\u597d\u61c2\uff0c\u5be6\u969b\u4e0a\u610f\u601d\u70ba \u82e5\u4ee5word\u7684char\u4f86\u5ef6\u4f38\u6210\u529f\uff08\u5ef6\u4f38\u6210\u529f\u7684\u5b9a\u7fa9\u70ba\uff1a\u4e26\u5217\u7684char\u9054\u5230\u4e09\u500b\u4ee5\u4e0a\uff09\"\u4e26\u4e14\" \u7d93\u7531\u6210\u529f\u5ef6\u4f38\u7684char \u6700\u5f8c\u80fd\u9054\u5230\u76ee\u6a19\u5b57\u4e32\uff0c\u4fbf\u662f\u4e00\u500bexpressive word\u8f49\u63db \u4f8b\u5982\uff1adddiiiinnssssssoooo \u82e5\u70ba\u76ee\u6a19\u5b57\u4e32 \u5247 dinnsoo \u53ef\u4ee5 \u56e0\u70ba d+dd(\u5ef6\u4f38\u9054\u52303) i+iii(\u5ef6\u4f38\u9054\u52304) nn=nn s+sssss(\u5ef6\u4f38\u9054\u52306) o+ooo(\u5ef6\u4f38\u9054\u52304) \u6700\u5f8c\u80fd\u7d44\u6210\u76ee\u6a19\u5b57\u4e32 ddinnso\u4e5f\u53ef(\u7576\u521d\u4ee5\u70ba\u8981dd\u8996\u70ba\u4e00\u7d44\u4f86\u5ef6\u795e \uff0c\u800cddd / dd \u53ea\u67091.5\u500d\u4e0d\u884c\uff0c\u7136\u800c\u984c\u76ee\u53ea\u8981\u6c42\u5ef6\u4f38\uff0c\u56e0\u6b64\u4e5f\u80fd\u7528\u55ae\u4e00\u5b57\u5143\u6e4a\u6210\uff0c\u662f\u6545\u4ee5\u55ae\u4e00\u5b57\u5143\u5ef6\u4f38\u662f\u4e00\u7a2e\u4fdd\u96aa\u7684\u4f5c\u6cd5) \u53c8\u5982 ddinsoo\u4fbf\u4e0d\u884c\uff0c\u4e43\u662f\u65bc n+n\u53ea\u5ef6\u4f38\u4e86\u5169\u6b21\uff0c\u7121\u6cd5\u9054\u9663\uff0c\u56e0\u6b64\u52e2\u5fc5\u7121\u6cd5\u505a\u6210\u539f\u672c\u7684\u76ee\u6a19\u5b57\u4e32\u800c\u653e\u68c4\u3002 \u7528\u4e0a\u8ff0\u7684\u60f3\u6cd5\u4fbf\u80fd\u5beb\u51fa\u4ee5\u4e0bac\u4ee3\u78bc #define FORI(n) for(int i = 0; i n; ++ i) #define pb push_back class Solution { public : int expressiveWords ( string str , vector string words ) { int res = 0 , can = 0 , cnt = 0 , total_len = 0 , extend_len = 0 , group_len ; for ( int i = 0 ; i words . size (); i ++ ) { can = 1 ; //can -- \u53ef\u5ef6\u4f38\u6e4a\u51fa\u7d50\u679c int k = 0 ; total_len = words [ i ]. size (); //\u7b2ci\u500b\u6aa2\u6e2cword\u7684\u9577\u5ea6 for ( int j = 0 ; j words [ i ]. size ();) { extend_len = 0 ; group_len = 1 ; if ( words [ i ][ j ] != str [ k ]) { can = 0 ; //\u82e5\u6709\u4e0d\u4e00\u6a23\u7684\uff0c\u52e2\u5fc5\u7121\u6cd5\u6e4a\u6210\uff0c break ; } else { while ( j != words [ i ]. size () - 1 words [ i ][ j + 1 ] == words [ i ][ j ]) //\u627e\u51fa\u5728word\u4e2d\uff0c\u76f8\u9023\u4e00\u6a23\u7684\u7d44\u6210\u4e00\u7fa4\u7684\u9577\u5ea6 { j ++ ; group_len ++ ; } while ( 1 ) //able to extend { if ( words [ i ][ j ] == str [ k ]) //\u5ef6\u4f38 { k ++ ; extend_len ++ ; } else //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa { // can = 0; \u9019\u500bcan = 0\u4e0d\u53ef\u4ee5\u52a0\uff0c\u56e0\u70ba\u9019\u662f\u518d\u5ef6\u6df1\u5f8c\u5224\u65b7\u8df3\u51fa\u7684\u689d\u4ef6\uff0c\u4e26\u4e0d\u662f\u767c\u73femismatch break ; } } //last character extend while ( k str . size () j == words [ i ]. size () - 1 ) //\u7d50\u5c3e\u7279\u4f8b\uff0c\u7e7c\u7e8c\u5ef6\u4f38 { if ( words [ i ][ j ] == str [ k ]) //\u5ef6\u4f38 { k ++ ; extend_len ++ ; } else //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa { can = 0 ; //\u5728\u6b64\u7684can \u4fbf\u8981\u52a0\u5165 = 0 \u4f8b\u5982 target = abcd \u4f46\u662f word = abc \u800c \u6b64\u6642j\u6703\u5361\u5728size - 1 \u4e4b\u5f8ck\u7e7c\u7e8c\u8d70\u5230d\u767c\u73fe\u4e0d\u4e00\u6a23\u4fbf\u662f\u7121\u6cd5\u7d44\u6210 break ; } } if ( extend_len group_len ) //\u82e5\u5ef6\u4f38\u7684\u9577\u5ea6\u5c0f\u65bc\u539f\u672c\u9577\u5ea6\u4e5f\u4e0d\u884c { can = 0 ; break ; } if ( extend_len = 3 ) //if extend, should =3 (as a group per unit) { total_len += extend_len - group_len ; // aa\u5ef6\u4f38\u6210 aaaa \u5ef6\u4f38\u7684\u9577\u5ea6\u70ba 2 \u800c\u975e 4 \u6545\u8981\u6263\u9664\u672c\u8eab\u7fa4\u7d44\u9577\u5ea6 } j ++ ; } } if ( total_len != str . size ()) //\u82e5\u6700\u5f8c\u4f9d\u7136\u9577\u5ea6\u9644\u7b49\uff0c\u4e5f\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6545can=0 { can = 0 ; } if ( can ) { res ++ ; } } return res ; } }; PC. 808. Soup Servings \u6709\u9ede\u96e3\u89c0\u5bdf\u51fa\u898f\u5f8b\u7684\u52d5\u614b\u898f\u5283\u984c(\u65bd\u5de5\u4e2d) \u601d\u8def\uff1a\u4ee5\u6bcf25\u6beb\u5347\u70ba\u55ae\u4f4d\u5207\u5272\uff0c\u56e0\u6b64\u5148\u628aa b\u6e6f\u7a2e\u7684\u4efd\u91cf/25\u5316\u7e41\u70ba\u7c21\u3002 \u63a5\u8457\uff0c\u4ee5dp\u8868\u793a\u300e\u5df2\u7d93\u6d88\u8cbb\u7684\u6e6f\u7a2e\u4efd\u91cf\u300f a\u6e6f\u7a2e\u70barow b\u70bacol\uff0c\u7531\u65bc\u6bcf\u4e00\u683c\u5747\u4ee3\u8868\u6d88\u8017\u7684\u4efd\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u63a1\u7528\u7531\u5e95\u5c64\u63a8\u4e0a\u4f86\u7684\u65b9\u5f0f\uff0c\u5c07\u6bcf\u4e00\u683c\u7531\u4e4b\u524d\u7684\u56db\u9805\u9ede\u63a8\u5f97\uff0c\u4e26\u4e14\u9010\u6b65\u69cb\u7bc9\u5230serve\u4efd\u3002 \u800c\u7336\u5982\u984c\u76ee\u6240\u8aaa\uff0c\u540c\u6642\u8b93ab\u6e6f\u7a2e\u8017\u76e1\u6642\uff0c\u9700\u8981\u4e58\u4e0a0.5\u7684\u4fc2\u6578\uff0c\u800c\u8017\u76e1a\u6e6f\u7a2e\uff0c\u56e0\u70ba\u662f\u76ee\u6a19\uff0c\u6545\u4e58\u4e0a1\u4fc2\u6578\uff0c\u7136\u800c\u8017\u76e1b\u6e6f\u7a2e\u4e26\u4e0d\u662f\u6211\u5011\u6240\u8981\u7684\uff0c\u6545\u4e58\u4e0a0\u4fc2\u6578 \u5982\u4e0b\u67e5\u770b\u6bcf\u4e00\u7a2e\u6d88\u8cbb\uff08\u5be6\u969b\u4e0a\u662f\u5f9e0 0\u958b\u59cb\u770b\u300e\u5df2\u7d93\u300f\u6d88\u8017\u7684\u6e6f\u7a2e\u4efd\u91cf\uff0c\u6162\u6162\u758a\u5230serve\u4efd\uff0c\u9700\u6ce8\u610f\u8981\u5c07serve + 1\u4f86\u4f5c\u70badp\u65b9\u9663\u7684\u56e0\u5728\u65bc\u6211\u5011\u8981\u6d88\u8017\u52300\u4efd\u800c\u975e1\u4efd\uff0c\u56e0\u6b64\u5728dp\u8868\u683c\u5fc5\u9808 + 1\u4f5c\u70ba\u521d\u59cb\u5316\u7684\u5927\u5c0f\u908a\u754c\uff0c\u6700\u5f8c\u8ff4\u5708\u4e5f\u8dd1\u5230\u7b49\u65bcserve\u624d\u505c\u4e0b\uff0c\u800c\u975e\u5c0f\u65bcserve \u4ee5\u4e0b\u70ba\u8fed\u4ee3\u7248\u672c\u7684\u7a0b\u5f0f\u78bc if ( i - 4 = 0 j = 0 ) { dir1 = 0.5 ; } else if ( i - 4 = 0 ) { dir1 = 1 ; } else if ( j = 0 ) { dir1 = 0 ; } else { dir1 = dp [ i - 4 ][ j ]; } (\u5728\u984c\u76ee\u4ee5\u4e0b\u7684\u6bcf\u500b\u56de\u5708\u5224\u65b7\u5f0f\u4fbf\u53ef\u4ee5\u770b\u5230\uff0c\u8a73\u7d30\u5206\u6790\u8acb\u898b\u7a0b\u5f0f\u78bc\u8a3b\u89e3) class Solution { public : double soupServings ( int all ) { if ( all 6000 ) //monotonically increasing since A is always used more than B. (by empirical method) return 1.0 ; int serve = ceil ( all / 25.0 ) ; //25 ml as a serving unit, //\u4e00\u5b9a\u8981\u7528ceil\u56e0\u70ba\u5373\u4fbf\u662f\u6c92\u6709\u6eff25ml\u4e5f\u8981\u5b8c\u6574\u7684\u8655\u7406\u5b8c\u7562\uff0c\u6545\u5f97\u7528ceil\u4f86\u5c07\u672a\u6eff\u4e00\u55ae\u4f4d\u7684\u6e6f\u7a2e\u8655\u7406\uff0c\u65e2\u6709\u7684cpp\u9664\u6cd5\u6703\u6368\u53bb vector vector double dp ( serve + 1 , vector double ( serve + 1 , 0 )); //each grid represent the rest amount(unit) of a and be which //comes to here //A row, B col double dir1 , dir2 , dir3 , dir4 ; for ( int i = 0 ; i = serve ; i ++ ) { for ( int j = 0 ; j = serve ; j ++ ) { if ( i - 4 = 0 j = 0 ) { dir1 = 0.5 ; } else if ( i - 4 = 0 ) { dir1 = 1 ; } else if ( j = 0 ) { dir1 = 0 ; } else { dir1 = dp [ i - 4 ][ j ]; } if ( i - 3 = 0 j - 1 = 0 ) { dir2 = 0.5 ; } else if ( i - 3 = 0 ) { dir2 = 1 ; } else if ( j - 1 = 0 ) { dir2 = 0 ; } else { dir2 = dp [ i - 3 ][ j - 1 ]; } if ( i - 2 = 0 j - 2 = 0 ) { dir3 = 0.5 ; } else if ( i - 2 = 0 ) { dir3 = 1 ; } else if ( j - 2 = 0 ) { dir3 = 0 ; } else { dir3 = dp [ i - 2 ][ j - 2 ]; } if ( i - 1 = 0 j - 3 = 0 ) { dir4 = 0.5 ; } else if ( i - 1 = 0 ) { dir4 = 1 ; } else if ( j - 3 = 0 ) { dir4 = 0 ; } else { dir4 = dp [ i - 1 ][ j - 3 ]; } dp [ i ][ j ] = 0.25 * ( dir1 + dir2 + dir3 + dir4 ); } } return dp [ serve ][ serve ]; } };","title":"WC78"},{"location":"programming_practice/leetcode_OJ_WC/WC78/#leetcode_oj-wc78","text":"Contest time: Apr 1, 2018","title":"leetcode_OJ WC78 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC78/#pa-811-subdomain-visit-count-substr-map","text":"\u601d\u8def\uff1a\u7c21\u55ae\u7684\u6c34\u984c\uff0c\u7528substr\u88c1\u5207\u7db2\u57df\u540d\u7a31\u5f8c\u518dhash\u5230\u7d71\u8a08\u6578\u5b57\uff0c\u4ee5stoi\u51fd\u6578\u4f86\u5c07string\u7684\u6578\u5b57\u8f49\u6210\u7d71\u8a08\u503c #define FORI(n) for(int i = 0; i n; ++ i) #define pb push_back class Solution { public : vector string subdomainVisits ( vector string cpdomains ) { map string , int mymap ; vector vector int dotpos ; vector int visit ; //each domain visit dotpos . resize ( cpdomains . size ()); //cpdomains[i].size() - 1 FORI ( cpdomains . size ()) { for ( int j = cpdomains [ i ]. size () - 1 ; j = 0 ; j -- ) { if ( cpdomains [ i ][ j ] == . ) { dotpos [ i ]. pb ( j ); } else if ( cpdomains [ i ][ j ] == ) { dotpos [ i ]. pb ( j ); break ; } } } //subdomain pos string tmp ; FORI ( cpdomains . size ()) { for ( int j = 0 ; j cpdomains [ i ]. size (); j ++ ) { if ( cpdomains [ i ][ j ] == ) { tmp = cpdomains [ i ]. substr ( 0 , j + 1 ); int tmp2 = stoi ( tmp ); visit . pb ( tmp2 ); break ; } } } //times int poscnt = 0 ; FORI ( cpdomains . size ()) { for ( int j = 0 ; j dotpos [ i ]. size (); j ++ ) { tmp = cpdomains [ i ]. substr ( dotpos [ i ][ j ] + 1 , cpdomains [ i ]. size () - dotpos [ i ][ j ] + 1 ); mymap [ tmp ] += visit [ i ]; } } //accumulate vector string res ; string timestr ; for ( map string , int :: iterator it = mymap . begin (); it != mymap . end (); ++ it ) { timestr = to_string ( it - second ); res . pb ( timestr + + it - first ); } return res ; } };","title":"PA. 811. Subdomain Visit Count substr + map \u6d3b\u7528\u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC78/#pb809-expressive-words","text":"\u601d\u8def\uff1a\u4e0d\u7b97\u96e3\u7684\u984c\u76ee\uff0c\u53ea\u662f\u984c\u76ee\u6709\u9ede\u542b\u7cca\u4e0d\u597d\u61c2\uff0c\u5be6\u969b\u4e0a\u610f\u601d\u70ba \u82e5\u4ee5word\u7684char\u4f86\u5ef6\u4f38\u6210\u529f\uff08\u5ef6\u4f38\u6210\u529f\u7684\u5b9a\u7fa9\u70ba\uff1a\u4e26\u5217\u7684char\u9054\u5230\u4e09\u500b\u4ee5\u4e0a\uff09\"\u4e26\u4e14\" \u7d93\u7531\u6210\u529f\u5ef6\u4f38\u7684char \u6700\u5f8c\u80fd\u9054\u5230\u76ee\u6a19\u5b57\u4e32\uff0c\u4fbf\u662f\u4e00\u500bexpressive word\u8f49\u63db \u4f8b\u5982\uff1adddiiiinnssssssoooo \u82e5\u70ba\u76ee\u6a19\u5b57\u4e32 \u5247 dinnsoo \u53ef\u4ee5 \u56e0\u70ba d+dd(\u5ef6\u4f38\u9054\u52303) i+iii(\u5ef6\u4f38\u9054\u52304) nn=nn s+sssss(\u5ef6\u4f38\u9054\u52306) o+ooo(\u5ef6\u4f38\u9054\u52304) \u6700\u5f8c\u80fd\u7d44\u6210\u76ee\u6a19\u5b57\u4e32 ddinnso\u4e5f\u53ef(\u7576\u521d\u4ee5\u70ba\u8981dd\u8996\u70ba\u4e00\u7d44\u4f86\u5ef6\u795e \uff0c\u800cddd / dd \u53ea\u67091.5\u500d\u4e0d\u884c\uff0c\u7136\u800c\u984c\u76ee\u53ea\u8981\u6c42\u5ef6\u4f38\uff0c\u56e0\u6b64\u4e5f\u80fd\u7528\u55ae\u4e00\u5b57\u5143\u6e4a\u6210\uff0c\u662f\u6545\u4ee5\u55ae\u4e00\u5b57\u5143\u5ef6\u4f38\u662f\u4e00\u7a2e\u4fdd\u96aa\u7684\u4f5c\u6cd5) \u53c8\u5982 ddinsoo\u4fbf\u4e0d\u884c\uff0c\u4e43\u662f\u65bc n+n\u53ea\u5ef6\u4f38\u4e86\u5169\u6b21\uff0c\u7121\u6cd5\u9054\u9663\uff0c\u56e0\u6b64\u52e2\u5fc5\u7121\u6cd5\u505a\u6210\u539f\u672c\u7684\u76ee\u6a19\u5b57\u4e32\u800c\u653e\u68c4\u3002 \u7528\u4e0a\u8ff0\u7684\u60f3\u6cd5\u4fbf\u80fd\u5beb\u51fa\u4ee5\u4e0bac\u4ee3\u78bc #define FORI(n) for(int i = 0; i n; ++ i) #define pb push_back class Solution { public : int expressiveWords ( string str , vector string words ) { int res = 0 , can = 0 , cnt = 0 , total_len = 0 , extend_len = 0 , group_len ; for ( int i = 0 ; i words . size (); i ++ ) { can = 1 ; //can -- \u53ef\u5ef6\u4f38\u6e4a\u51fa\u7d50\u679c int k = 0 ; total_len = words [ i ]. size (); //\u7b2ci\u500b\u6aa2\u6e2cword\u7684\u9577\u5ea6 for ( int j = 0 ; j words [ i ]. size ();) { extend_len = 0 ; group_len = 1 ; if ( words [ i ][ j ] != str [ k ]) { can = 0 ; //\u82e5\u6709\u4e0d\u4e00\u6a23\u7684\uff0c\u52e2\u5fc5\u7121\u6cd5\u6e4a\u6210\uff0c break ; } else { while ( j != words [ i ]. size () - 1 words [ i ][ j + 1 ] == words [ i ][ j ]) //\u627e\u51fa\u5728word\u4e2d\uff0c\u76f8\u9023\u4e00\u6a23\u7684\u7d44\u6210\u4e00\u7fa4\u7684\u9577\u5ea6 { j ++ ; group_len ++ ; } while ( 1 ) //able to extend { if ( words [ i ][ j ] == str [ k ]) //\u5ef6\u4f38 { k ++ ; extend_len ++ ; } else //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa { // can = 0; \u9019\u500bcan = 0\u4e0d\u53ef\u4ee5\u52a0\uff0c\u56e0\u70ba\u9019\u662f\u518d\u5ef6\u6df1\u5f8c\u5224\u65b7\u8df3\u51fa\u7684\u689d\u4ef6\uff0c\u4e26\u4e0d\u662f\u767c\u73femismatch break ; } } //last character extend while ( k str . size () j == words [ i ]. size () - 1 ) //\u7d50\u5c3e\u7279\u4f8b\uff0c\u7e7c\u7e8c\u5ef6\u4f38 { if ( words [ i ][ j ] == str [ k ]) //\u5ef6\u4f38 { k ++ ; extend_len ++ ; } else //\u767c\u73fe\u4e0d\u4e00\u6a23\u5f8c\u8df3\u51fa { can = 0 ; //\u5728\u6b64\u7684can \u4fbf\u8981\u52a0\u5165 = 0 \u4f8b\u5982 target = abcd \u4f46\u662f word = abc \u800c \u6b64\u6642j\u6703\u5361\u5728size - 1 \u4e4b\u5f8ck\u7e7c\u7e8c\u8d70\u5230d\u767c\u73fe\u4e0d\u4e00\u6a23\u4fbf\u662f\u7121\u6cd5\u7d44\u6210 break ; } } if ( extend_len group_len ) //\u82e5\u5ef6\u4f38\u7684\u9577\u5ea6\u5c0f\u65bc\u539f\u672c\u9577\u5ea6\u4e5f\u4e0d\u884c { can = 0 ; break ; } if ( extend_len = 3 ) //if extend, should =3 (as a group per unit) { total_len += extend_len - group_len ; // aa\u5ef6\u4f38\u6210 aaaa \u5ef6\u4f38\u7684\u9577\u5ea6\u70ba 2 \u800c\u975e 4 \u6545\u8981\u6263\u9664\u672c\u8eab\u7fa4\u7d44\u9577\u5ea6 } j ++ ; } } if ( total_len != str . size ()) //\u82e5\u6700\u5f8c\u4f9d\u7136\u9577\u5ea6\u9644\u7b49\uff0c\u4e5f\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6545can=0 { can = 0 ; } if ( can ) { res ++ ; } } return res ; } };","title":"PB.809. Expressive Words \u5b57\u4e32\u96d9\u6307\u6a19\u63a8\u7406\u89c0\u5bdf\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC78/#pc-808-soup-servings","text":"\u601d\u8def\uff1a\u4ee5\u6bcf25\u6beb\u5347\u70ba\u55ae\u4f4d\u5207\u5272\uff0c\u56e0\u6b64\u5148\u628aa b\u6e6f\u7a2e\u7684\u4efd\u91cf/25\u5316\u7e41\u70ba\u7c21\u3002 \u63a5\u8457\uff0c\u4ee5dp\u8868\u793a\u300e\u5df2\u7d93\u6d88\u8cbb\u7684\u6e6f\u7a2e\u4efd\u91cf\u300f a\u6e6f\u7a2e\u70barow b\u70bacol\uff0c\u7531\u65bc\u6bcf\u4e00\u683c\u5747\u4ee3\u8868\u6d88\u8017\u7684\u4efd\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u63a1\u7528\u7531\u5e95\u5c64\u63a8\u4e0a\u4f86\u7684\u65b9\u5f0f\uff0c\u5c07\u6bcf\u4e00\u683c\u7531\u4e4b\u524d\u7684\u56db\u9805\u9ede\u63a8\u5f97\uff0c\u4e26\u4e14\u9010\u6b65\u69cb\u7bc9\u5230serve\u4efd\u3002 \u800c\u7336\u5982\u984c\u76ee\u6240\u8aaa\uff0c\u540c\u6642\u8b93ab\u6e6f\u7a2e\u8017\u76e1\u6642\uff0c\u9700\u8981\u4e58\u4e0a0.5\u7684\u4fc2\u6578\uff0c\u800c\u8017\u76e1a\u6e6f\u7a2e\uff0c\u56e0\u70ba\u662f\u76ee\u6a19\uff0c\u6545\u4e58\u4e0a1\u4fc2\u6578\uff0c\u7136\u800c\u8017\u76e1b\u6e6f\u7a2e\u4e26\u4e0d\u662f\u6211\u5011\u6240\u8981\u7684\uff0c\u6545\u4e58\u4e0a0\u4fc2\u6578 \u5982\u4e0b\u67e5\u770b\u6bcf\u4e00\u7a2e\u6d88\u8cbb\uff08\u5be6\u969b\u4e0a\u662f\u5f9e0 0\u958b\u59cb\u770b\u300e\u5df2\u7d93\u300f\u6d88\u8017\u7684\u6e6f\u7a2e\u4efd\u91cf\uff0c\u6162\u6162\u758a\u5230serve\u4efd\uff0c\u9700\u6ce8\u610f\u8981\u5c07serve + 1\u4f86\u4f5c\u70badp\u65b9\u9663\u7684\u56e0\u5728\u65bc\u6211\u5011\u8981\u6d88\u8017\u52300\u4efd\u800c\u975e1\u4efd\uff0c\u56e0\u6b64\u5728dp\u8868\u683c\u5fc5\u9808 + 1\u4f5c\u70ba\u521d\u59cb\u5316\u7684\u5927\u5c0f\u908a\u754c\uff0c\u6700\u5f8c\u8ff4\u5708\u4e5f\u8dd1\u5230\u7b49\u65bcserve\u624d\u505c\u4e0b\uff0c\u800c\u975e\u5c0f\u65bcserve \u4ee5\u4e0b\u70ba\u8fed\u4ee3\u7248\u672c\u7684\u7a0b\u5f0f\u78bc if ( i - 4 = 0 j = 0 ) { dir1 = 0.5 ; } else if ( i - 4 = 0 ) { dir1 = 1 ; } else if ( j = 0 ) { dir1 = 0 ; } else { dir1 = dp [ i - 4 ][ j ]; } (\u5728\u984c\u76ee\u4ee5\u4e0b\u7684\u6bcf\u500b\u56de\u5708\u5224\u65b7\u5f0f\u4fbf\u53ef\u4ee5\u770b\u5230\uff0c\u8a73\u7d30\u5206\u6790\u8acb\u898b\u7a0b\u5f0f\u78bc\u8a3b\u89e3) class Solution { public : double soupServings ( int all ) { if ( all 6000 ) //monotonically increasing since A is always used more than B. (by empirical method) return 1.0 ; int serve = ceil ( all / 25.0 ) ; //25 ml as a serving unit, //\u4e00\u5b9a\u8981\u7528ceil\u56e0\u70ba\u5373\u4fbf\u662f\u6c92\u6709\u6eff25ml\u4e5f\u8981\u5b8c\u6574\u7684\u8655\u7406\u5b8c\u7562\uff0c\u6545\u5f97\u7528ceil\u4f86\u5c07\u672a\u6eff\u4e00\u55ae\u4f4d\u7684\u6e6f\u7a2e\u8655\u7406\uff0c\u65e2\u6709\u7684cpp\u9664\u6cd5\u6703\u6368\u53bb vector vector double dp ( serve + 1 , vector double ( serve + 1 , 0 )); //each grid represent the rest amount(unit) of a and be which //comes to here //A row, B col double dir1 , dir2 , dir3 , dir4 ; for ( int i = 0 ; i = serve ; i ++ ) { for ( int j = 0 ; j = serve ; j ++ ) { if ( i - 4 = 0 j = 0 ) { dir1 = 0.5 ; } else if ( i - 4 = 0 ) { dir1 = 1 ; } else if ( j = 0 ) { dir1 = 0 ; } else { dir1 = dp [ i - 4 ][ j ]; } if ( i - 3 = 0 j - 1 = 0 ) { dir2 = 0.5 ; } else if ( i - 3 = 0 ) { dir2 = 1 ; } else if ( j - 1 = 0 ) { dir2 = 0 ; } else { dir2 = dp [ i - 3 ][ j - 1 ]; } if ( i - 2 = 0 j - 2 = 0 ) { dir3 = 0.5 ; } else if ( i - 2 = 0 ) { dir3 = 1 ; } else if ( j - 2 = 0 ) { dir3 = 0 ; } else { dir3 = dp [ i - 2 ][ j - 2 ]; } if ( i - 1 = 0 j - 3 = 0 ) { dir4 = 0.5 ; } else if ( i - 1 = 0 ) { dir4 = 1 ; } else if ( j - 3 = 0 ) { dir4 = 0 ; } else { dir4 = dp [ i - 1 ][ j - 3 ]; } dp [ i ][ j ] = 0.25 * ( dir1 + dir2 + dir3 + dir4 ); } } return dp [ serve ][ serve ]; } };","title":"PC. 808. Soup Servings \u6709\u9ede\u96e3\u89c0\u5bdf\u51fa\u898f\u5f8b\u7684\u52d5\u614b\u898f\u5283\u984c(\u65bd\u5de5\u4e2d)"},{"location":"programming_practice/leetcode_OJ_WC/WC79/","text":"leetcode_OJ WC79 \u89e3\u984c\u5fc3\u5f97 Contest time: Apr 1, 2018 PA. 812. Largest Triangle Area \u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f \u601d\u8def\uff1a\u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f\u5373\u53ef\uff0c\u7a0b\u5f0f\u78bc\u4e2d\u7684 a b c \u5206\u5225\u70ba\u4e09\u89d2\u5f62\u7684\u4e09\u908a\uff0cs\u70ba\u9031\u9577\u7684\u4e00\u534a class Solution { public : double largestTriangleArea ( vector vector int points ) { //points = 50, butr force OK double a = 0.0f , b = 0.0f , c = 0.0f , s = 0.0f , area = 0.0f , max_area = 0.0f ; for ( int i = 0 ; i points . size () - 2 ; i ++ ) { for ( int j = i + 1 ; j points . size () - 1 ; j ++ ) { for ( int k = j + 1 ; k points . size (); k ++ ) { a = dist ( points [ i ], points [ j ]); b = dist ( points [ j ], points [ k ]); c = dist ( points [ i ], points [ k ]); s = ( a + b + c ) / 2.0f ; area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c )); max_area = max ( max_area , area ); } } } return max_area ; } double dist ( vector int p1 , vector int p2 ) { return sqrt ( abs ( p1 [ 0 ] - p2 [ 0 ]) * abs ( p1 [ 0 ] - p2 [ 0 ]) + abs ( p1 [ 1 ] - p2 [ 1 ]) * abs ( p1 [ 1 ] - p2 [ 1 ])); } }; PB. 814. Binary Tree Pruning \u4e8c\u5143\u6a39\u4fee\u526a \u984c\u610f\uff1a\u5c0d\u65bc\u4e00\u500b\u53ea\u6709\u6578\u503c\u70ba0 or 1\u7684\u4e8c\u5143\u6a39\uff0c\u5018\u82e5\u6b64\u7bc0\u9ede\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\u5747\u70ba0\uff0c\u5247\u522a\u9664\u6b64\u7bc0\u9ede\u4ee5\u53ca\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\uff0c\u7b97\u662f\u6f38\u6f38\u5f04\u61c2\u905e\u8ff4\u7684\u57f7\u884c\u539f\u5247\u4e86\uff0c\u4e5f\u6bd4\u8f03\u770b\u5f97\u61c2\u5c0d\u65bc\u8655\u7406\u6a39\u7684\u984c\u76ee\u3002 \u7576\u4e0d\u77e5\u9053\u905e\u8ff4\u600e\u9ebc\u8dd1\u6642\uff0c\u53ef\u4ee5\u5148\u7528\u5c0f\u7684\u4f8b\u5b50\u4f86\u8f14\u52a9\u9a57\u8b49 \u601d\u8def\uff1a\u4f7f\u7528\u905e\u8ff4\uff0c\u5f80\u4e0b\u8d70\u8a2a\uff0c\u300e\u552f\u4e00\u6709\u9700\u8981\u522a\u9664\u7684\u7bc0\u9ede\u4fbf\u662f\uff0c\u81ea\u5df1\u70ba\u96f6\uff0c\u4e26\u4e14\u8a72\u5e95\u4e0b\u6240\u6709\u5b50\u6a39\u90fd\u53ea\u6709\u6578\u503c\u70ba0\u7684\u7bc0\u9ede\uff08\u5305\u542b0\u4f5c\u70baleaf\u4e5f\u61c9\u8a72\u522a\u9664\uff0c\u56e0\u6b64\u53ef\u4ee5\u5207\u51fa\u6578\u500b\u72c0\u6cc1\uff09\u300f 1.\u5c0d\u65bcnull\u7bc0\u9ede\uff0c\u8fd4\u56de0\u5373\u53ef\uff0c\u56e0\u70ba\u5df2\u7d93\u6c92\u6709\u5fc5\u8981\u64cd\u4f5c\uff0c\u5148\u4ee5 if \u5de6\u5b50\u6a39\u53f3\u5b50\u6a39\u5747true\u5fc5\u9808\u522a\u9664\u4e14\u81ea\u5df1\u4e5f\u662f0 \u4f86\u5224\u65b7\u522a\u9664\uff0c\u4ea6\u5373 ( if pruneit ( left ) pruneit ( right ) val == 0 ) br / br / 2.\u4f46\u7531\u65bc null -0- null\u7684\u7bc0\u9ede \u5169\u500bnull\u8fd4\u56de0\u6703\u4f7f\u5f97\u9019\u7a2e\u7bc0\u9ede\u522a\u4e0d\u6389\uff0c\u56e0\u6b64\u7279\u5224\u4e00\u500b if ( cur - left == NULL cur - right == NULL cur - val == 0 ) { return 1 ; } 3.\u5c0d\u65bc true -0- null \u6216\u662f null -0- true \u5be6\u969b\u4e0a\u4e5f\u90fd\u5fc5\u9808\u522a\u9664\uff0c\u4f46\u7531\u65bc(if pruneit(left) pruneit(right) val == 0)and\u4e32\u63a5\u908f\u8f2f\u7684\u95dc\u4fc2\uff0c\u4e5f\u6703\u522a\u4e0d\u6389\uff0c\u6545\u589e\u52a0\u5169\u500b\u7279\u5224 if ( cur - left == NULL cur - right pruneit ( cur - right ) cur - val == 0 ) { return 1 ; } if ( cur - left cur - right == NULL pruneit ( cur - left ) cur - val == 0 ) { return 1 ; } 4. \u5c0d\u65bc \u6578\u503c\u70ba1\u7684node\uff0c\u7121\u9808\u8655\u7406\uff0c\u56e0\u6b64\u8fd4\u56de left_check right_check (cur- val == 0); \u4f8b\u5982 1 / 0 / | true true \u5247\u6700\u5f8c0\u8fd4\u56de true true val == 0 \u905e\u8ff4\u7d50\u675f\u5f8c\u8fd4\u56de\u7d661\uff0c1\u7684 left_check = pruneit(cur- left);\u4fbf\u6703\u8857\u6536\u5230true\uff0c\u5c07\u5176\u526a\u6389\uff0c\u5b8c\u6210prune\u3002 5.\u7279\u5225\u8655\u7406\u9023\u6839\u62d4\u8d77\u7684\u60c5\u5f62 if ( pruneit ( root )) //last one for root { root = NULL ; } /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : TreeNode * pruneTree ( TreeNode * root ) { if ( pruneit ( root )) //last one for root { root = NULL ; } return root ; } bool pruneit ( TreeNode * cur ) //1 for need prune { if ( cur == NULL ) { return 0 ; } //due to left_check right_check (cur- val == 0); null -0- null should also be deleted if ( cur - left == NULL cur - right == NULL cur - val == 0 ) { return 1 ; } //due to left_check right_check (cur- val == 0); null -0- true should also be deleted if ( cur - left == NULL cur - right pruneit ( cur - right ) cur - val == 0 ) { return 1 ; } //due to left_check right_check (cur- val == 0); true -0- null should also be deleted if ( cur - left cur - right == NULL pruneit ( cur - left ) cur - val == 0 ) { return 1 ; } bool left_check = pruneit ( cur - left ); bool right_check = pruneit ( cur - right ); if ( left_check ) //if left subtree needs to be pruned { cur - left = NULL ; } if ( right_check ) //if right subtree needs to be pruned { cur - right = NULL ; } return left_check right_check ( cur - val == 0 ); //subtree only delete for this one } }; PC. 813. Largest Sum of Averages \u7565\u5acc\u9ebb\u7169\u7684\u52d5\u614b\u898f\u5283\u984c\u76ee \u601d\u8def\uff1a\u52d5\u614b\u898f\u5283\uff0c\u5207\u5272\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u5b50\u554f\u984c\uff0c\u5728\u7531\u5c0d\u61c9\u7684\u5b50\u554f\u984c\u5c07\u4ee5\u524d\u7b97\u904e\u5f97\u5b50\u554f\u984c\u6578\u503c\u53d6\u51fa\uff0c\u6700\u5f8c\u52a0\u7e3d\uff0c\u800c\u5728\u9019\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u52a0\u7e3d\u6578\u503c\uff0c\u518d\u9078\u53d6\u6700\u5927\u7684\uff0c\u4f5c\u70ba\u7576\u524d\u52d5\u614b\u898f\u5283\u7684\u6578\u503c\u3002 \u8a73\u7d30\u6d41\u7a0b\u63a8\u5c0e\uff0c\u8acb\u898b \u5167\u9644\u8a3b\u89e3 class Solution { public : double largestSumOfAverages ( vector int arr , int kin ) { double dp [ 105 ][ 105 ] = { 0.0f }; for ( int i = 0 ; i arr . size (); i ++ ) { double sum = 0.0f ; for ( int j = 0 ; j = i ; j ++ ) { sum += arr [ j ]; } dp [ 0 ][ i ] = sum / ( double ) ( i + 1 ); } double cur_val = 0.0f , max_val = 0.0f , segment_avg = 0.0 , segment_avg2 = 0.0f ; for ( int i = 1 ; i kin ; i ++ ) { for ( int j = i ; j arr . size (); j ++ ) { cur_val = 0.0f , max_val = 0.0f ; if ( j i ) { continue ; } else if ( j == i ) { segment_avg = 0.0f ; for ( int k = 0 ; k = j ; k ++ ) { segment_avg += arr [ k ]; } dp [ i ][ j ] = segment_avg ; } else if ( i == 1 ) { for ( int k = 1 ; k = j ; k ++ ) { segment_avg = 0.0f ; segment_avg2 = 0.0f ; for ( int l = 0 ; l k ; l ++ ) { segment_avg += arr [ l ]; } for ( int m = k ; m = j ; m ++ ) { segment_avg2 += arr [ m ]; } max_val = max ( max_val , segment_avg / k + segment_avg2 / double ( j - k + 1 )); } dp [ i ][ j ] = max_val ; } else { for ( int n = j ; n = i ; n -- ) //let s say the slice is zero based, for the i th slice, the smallest group //should contain at least i element ex: 1 2 3 4 for 3 slice then at least in DP 12 [3 4](grouped for current slice) is OK //but for 1 [2 3 4](grouped for current slice) is not right { segment_avg = 0.0f ; for ( int k = j ; k = n ; k -- ) //forward to accumulate and the average /* let s say the slice is zero based, for the n th slice. ex: for 1 2 3 4 5 and slice for 3 ()as the slice group need to search for the 2-slice of best line(row) we will then check (1 2 3 4)(search for i = slice - 1 for the SUBPROBLEM OF SIZE - 1 and j = 3 (since 1 2 3 4 till 4th element)) [5] which is value = dp[2][3] + avg(5) = 8.5 + 5 = 13.5 the same is true for (1 2 3) [4 5] value = dp[2][2] + avg(4 5) = 6 + 4.5 = 10.5 (1 2) [3 4 5] value = dp[2][1] + avg(3,4,5) = (1) [2 3 4 5] //unable to do since the smallest group is less then i - 1 = 3 - 1 = 2 then we take the max value of these calculation for dp[i][j] */ { segment_avg += arr [ k ]; } //the other part of from 0 to i - 1 there are i elements to search for the previous saved (best value) dp grid cur_val = dp [ i - 1 ][ n - 1 ] + segment_avg / ( double )( j - n + 1 ); max_val = max ( max_val , cur_val ); } dp [ i ][ j ] = max_val ; //after choosing the max_val of the dp } } } return dp [ kin - 1 ][ arr . size () - 1 ]; } };","title":"WC79"},{"location":"programming_practice/leetcode_OJ_WC/WC79/#leetcode_oj-wc79","text":"Contest time: Apr 1, 2018","title":"leetcode_OJ WC79 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC79/#pa-812-largest-triangle-area","text":"\u601d\u8def\uff1a\u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f\u5373\u53ef\uff0c\u7a0b\u5f0f\u78bc\u4e2d\u7684 a b c \u5206\u5225\u70ba\u4e09\u89d2\u5f62\u7684\u4e09\u908a\uff0cs\u70ba\u9031\u9577\u7684\u4e00\u534a class Solution { public : double largestTriangleArea ( vector vector int points ) { //points = 50, butr force OK double a = 0.0f , b = 0.0f , c = 0.0f , s = 0.0f , area = 0.0f , max_area = 0.0f ; for ( int i = 0 ; i points . size () - 2 ; i ++ ) { for ( int j = i + 1 ; j points . size () - 1 ; j ++ ) { for ( int k = j + 1 ; k points . size (); k ++ ) { a = dist ( points [ i ], points [ j ]); b = dist ( points [ j ], points [ k ]); c = dist ( points [ i ], points [ k ]); s = ( a + b + c ) / 2.0f ; area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c )); max_area = max ( max_area , area ); } } } return max_area ; } double dist ( vector int p1 , vector int p2 ) { return sqrt ( abs ( p1 [ 0 ] - p2 [ 0 ]) * abs ( p1 [ 0 ] - p2 [ 0 ]) + abs ( p1 [ 1 ] - p2 [ 1 ]) * abs ( p1 [ 1 ] - p2 [ 1 ])); } };","title":"PA. 812. Largest Triangle Area \u66b4\u529b\u89e3+\u6d77\u9f8d\u516c\u5f0f"},{"location":"programming_practice/leetcode_OJ_WC/WC79/#pb-814-binary-tree-pruning","text":"\u984c\u610f\uff1a\u5c0d\u65bc\u4e00\u500b\u53ea\u6709\u6578\u503c\u70ba0 or 1\u7684\u4e8c\u5143\u6a39\uff0c\u5018\u82e5\u6b64\u7bc0\u9ede\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\u5747\u70ba0\uff0c\u5247\u522a\u9664\u6b64\u7bc0\u9ede\u4ee5\u53ca\u4ee5\u4e0b\u6240\u6709\u7684\u7bc0\u9ede\uff0c\u7b97\u662f\u6f38\u6f38\u5f04\u61c2\u905e\u8ff4\u7684\u57f7\u884c\u539f\u5247\u4e86\uff0c\u4e5f\u6bd4\u8f03\u770b\u5f97\u61c2\u5c0d\u65bc\u8655\u7406\u6a39\u7684\u984c\u76ee\u3002 \u7576\u4e0d\u77e5\u9053\u905e\u8ff4\u600e\u9ebc\u8dd1\u6642\uff0c\u53ef\u4ee5\u5148\u7528\u5c0f\u7684\u4f8b\u5b50\u4f86\u8f14\u52a9\u9a57\u8b49 \u601d\u8def\uff1a\u4f7f\u7528\u905e\u8ff4\uff0c\u5f80\u4e0b\u8d70\u8a2a\uff0c\u300e\u552f\u4e00\u6709\u9700\u8981\u522a\u9664\u7684\u7bc0\u9ede\u4fbf\u662f\uff0c\u81ea\u5df1\u70ba\u96f6\uff0c\u4e26\u4e14\u8a72\u5e95\u4e0b\u6240\u6709\u5b50\u6a39\u90fd\u53ea\u6709\u6578\u503c\u70ba0\u7684\u7bc0\u9ede\uff08\u5305\u542b0\u4f5c\u70baleaf\u4e5f\u61c9\u8a72\u522a\u9664\uff0c\u56e0\u6b64\u53ef\u4ee5\u5207\u51fa\u6578\u500b\u72c0\u6cc1\uff09\u300f 1.\u5c0d\u65bcnull\u7bc0\u9ede\uff0c\u8fd4\u56de0\u5373\u53ef\uff0c\u56e0\u70ba\u5df2\u7d93\u6c92\u6709\u5fc5\u8981\u64cd\u4f5c\uff0c\u5148\u4ee5 if \u5de6\u5b50\u6a39\u53f3\u5b50\u6a39\u5747true\u5fc5\u9808\u522a\u9664\u4e14\u81ea\u5df1\u4e5f\u662f0 \u4f86\u5224\u65b7\u522a\u9664\uff0c\u4ea6\u5373 ( if pruneit ( left ) pruneit ( right ) val == 0 ) br / br / 2.\u4f46\u7531\u65bc null -0- null\u7684\u7bc0\u9ede \u5169\u500bnull\u8fd4\u56de0\u6703\u4f7f\u5f97\u9019\u7a2e\u7bc0\u9ede\u522a\u4e0d\u6389\uff0c\u56e0\u6b64\u7279\u5224\u4e00\u500b if ( cur - left == NULL cur - right == NULL cur - val == 0 ) { return 1 ; } 3.\u5c0d\u65bc true -0- null \u6216\u662f null -0- true \u5be6\u969b\u4e0a\u4e5f\u90fd\u5fc5\u9808\u522a\u9664\uff0c\u4f46\u7531\u65bc(if pruneit(left) pruneit(right) val == 0)and\u4e32\u63a5\u908f\u8f2f\u7684\u95dc\u4fc2\uff0c\u4e5f\u6703\u522a\u4e0d\u6389\uff0c\u6545\u589e\u52a0\u5169\u500b\u7279\u5224 if ( cur - left == NULL cur - right pruneit ( cur - right ) cur - val == 0 ) { return 1 ; } if ( cur - left cur - right == NULL pruneit ( cur - left ) cur - val == 0 ) { return 1 ; } 4. \u5c0d\u65bc \u6578\u503c\u70ba1\u7684node\uff0c\u7121\u9808\u8655\u7406\uff0c\u56e0\u6b64\u8fd4\u56de left_check right_check (cur- val == 0); \u4f8b\u5982 1 / 0 / | true true \u5247\u6700\u5f8c0\u8fd4\u56de true true val == 0 \u905e\u8ff4\u7d50\u675f\u5f8c\u8fd4\u56de\u7d661\uff0c1\u7684 left_check = pruneit(cur- left);\u4fbf\u6703\u8857\u6536\u5230true\uff0c\u5c07\u5176\u526a\u6389\uff0c\u5b8c\u6210prune\u3002 5.\u7279\u5225\u8655\u7406\u9023\u6839\u62d4\u8d77\u7684\u60c5\u5f62 if ( pruneit ( root )) //last one for root { root = NULL ; } /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : TreeNode * pruneTree ( TreeNode * root ) { if ( pruneit ( root )) //last one for root { root = NULL ; } return root ; } bool pruneit ( TreeNode * cur ) //1 for need prune { if ( cur == NULL ) { return 0 ; } //due to left_check right_check (cur- val == 0); null -0- null should also be deleted if ( cur - left == NULL cur - right == NULL cur - val == 0 ) { return 1 ; } //due to left_check right_check (cur- val == 0); null -0- true should also be deleted if ( cur - left == NULL cur - right pruneit ( cur - right ) cur - val == 0 ) { return 1 ; } //due to left_check right_check (cur- val == 0); true -0- null should also be deleted if ( cur - left cur - right == NULL pruneit ( cur - left ) cur - val == 0 ) { return 1 ; } bool left_check = pruneit ( cur - left ); bool right_check = pruneit ( cur - right ); if ( left_check ) //if left subtree needs to be pruned { cur - left = NULL ; } if ( right_check ) //if right subtree needs to be pruned { cur - right = NULL ; } return left_check right_check ( cur - val == 0 ); //subtree only delete for this one } };","title":"PB. 814. Binary Tree Pruning \u4e8c\u5143\u6a39\u4fee\u526a"},{"location":"programming_practice/leetcode_OJ_WC/WC79/#pc-813-largest-sum-of-averages","text":"\u601d\u8def\uff1a\u52d5\u614b\u898f\u5283\uff0c\u5207\u5272\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u5b50\u554f\u984c\uff0c\u5728\u7531\u5c0d\u61c9\u7684\u5b50\u554f\u984c\u5c07\u4ee5\u524d\u7b97\u904e\u5f97\u5b50\u554f\u984c\u6578\u503c\u53d6\u51fa\uff0c\u6700\u5f8c\u52a0\u7e3d\uff0c\u800c\u5728\u9019\u4e0d\u540c\u9577\u5ea6\u5e73\u5747\u6240\u5c0d\u61c9\u7684\u52a0\u7e3d\u6578\u503c\uff0c\u518d\u9078\u53d6\u6700\u5927\u7684\uff0c\u4f5c\u70ba\u7576\u524d\u52d5\u614b\u898f\u5283\u7684\u6578\u503c\u3002 \u8a73\u7d30\u6d41\u7a0b\u63a8\u5c0e\uff0c\u8acb\u898b \u5167\u9644\u8a3b\u89e3 class Solution { public : double largestSumOfAverages ( vector int arr , int kin ) { double dp [ 105 ][ 105 ] = { 0.0f }; for ( int i = 0 ; i arr . size (); i ++ ) { double sum = 0.0f ; for ( int j = 0 ; j = i ; j ++ ) { sum += arr [ j ]; } dp [ 0 ][ i ] = sum / ( double ) ( i + 1 ); } double cur_val = 0.0f , max_val = 0.0f , segment_avg = 0.0 , segment_avg2 = 0.0f ; for ( int i = 1 ; i kin ; i ++ ) { for ( int j = i ; j arr . size (); j ++ ) { cur_val = 0.0f , max_val = 0.0f ; if ( j i ) { continue ; } else if ( j == i ) { segment_avg = 0.0f ; for ( int k = 0 ; k = j ; k ++ ) { segment_avg += arr [ k ]; } dp [ i ][ j ] = segment_avg ; } else if ( i == 1 ) { for ( int k = 1 ; k = j ; k ++ ) { segment_avg = 0.0f ; segment_avg2 = 0.0f ; for ( int l = 0 ; l k ; l ++ ) { segment_avg += arr [ l ]; } for ( int m = k ; m = j ; m ++ ) { segment_avg2 += arr [ m ]; } max_val = max ( max_val , segment_avg / k + segment_avg2 / double ( j - k + 1 )); } dp [ i ][ j ] = max_val ; } else { for ( int n = j ; n = i ; n -- ) //let s say the slice is zero based, for the i th slice, the smallest group //should contain at least i element ex: 1 2 3 4 for 3 slice then at least in DP 12 [3 4](grouped for current slice) is OK //but for 1 [2 3 4](grouped for current slice) is not right { segment_avg = 0.0f ; for ( int k = j ; k = n ; k -- ) //forward to accumulate and the average /* let s say the slice is zero based, for the n th slice. ex: for 1 2 3 4 5 and slice for 3 ()as the slice group need to search for the 2-slice of best line(row) we will then check (1 2 3 4)(search for i = slice - 1 for the SUBPROBLEM OF SIZE - 1 and j = 3 (since 1 2 3 4 till 4th element)) [5] which is value = dp[2][3] + avg(5) = 8.5 + 5 = 13.5 the same is true for (1 2 3) [4 5] value = dp[2][2] + avg(4 5) = 6 + 4.5 = 10.5 (1 2) [3 4 5] value = dp[2][1] + avg(3,4,5) = (1) [2 3 4 5] //unable to do since the smallest group is less then i - 1 = 3 - 1 = 2 then we take the max value of these calculation for dp[i][j] */ { segment_avg += arr [ k ]; } //the other part of from 0 to i - 1 there are i elements to search for the previous saved (best value) dp grid cur_val = dp [ i - 1 ][ n - 1 ] + segment_avg / ( double )( j - n + 1 ); max_val = max ( max_val , cur_val ); } dp [ i ][ j ] = max_val ; //after choosing the max_val of the dp } } } return dp [ kin - 1 ][ arr . size () - 1 ]; } };","title":"PC. 813. Largest Sum of Averages\u7565\u5acc\u9ebb\u7169\u7684\u52d5\u614b\u898f\u5283\u984c\u76ee"},{"location":"programming_practice/leetcode_OJ_WC/WC91/","text":"leetcode_OJ WC91 \u89e3\u984c\u5fc3\u5f97 Contest time: Jul 1,2018 PA. 860. Lemonade Change \u6c34\u984c \u601d\u8def\uff1a\u6c34\u984c\uff0c\u7528map\u5132\u5b58\u6bcf\u4e00\u7a2e\u786c\u5e63\u8207\u5176\u5c0d\u61c9\u7684\u6578\u91cf\uff0c\u6ce8\u610f\u5341\u4e94\u5143\u4e5f\u80fd\u7528\u4e09\u500b\u4e94\u584a\u627e\u9322\u5373\u53ef Time complexity = O(N), Space complexity (with auxilary map structure) = O(N) #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : bool lemonadeChange ( vector int bl ) { map int , int mymap ; FORI ( bl . size ()) { mymap [ bl [ i ]] ++ ; if ( bl [ i ] == 10 ) { if ( mymap [ 5 ] == 0 ) { return 0 ; } else { mymap [ 5 ] -- ; } } else { if ( mymap [ 5 ] 0 mymap [ 10 ] 0 ) { mymap [ 5 ] -- ; mymap [ 10 ] -- ; } else if ( mymap [ 5 ] = 3 mymap [ 10 ] == 0 ) { mymap [ 5 ] -= 3 ; } else if ( mymap [ 5 ] == 0 || mymap [ 10 ] == 0 ) { return 0 ; } } } return 1 ; } }; PB. 863. All Nodes Distance K in Binary Tree \u7d93\u5178\u6a39\u5716\u8ad6\u984c\uff0cDFS\u52a0\u4e0aset, map \u5be6\u4f5c\u61c9\u7528 \u627e\u51fa\u4e00\u500b\u4e8c\u5143\u6a39\u4e2d\uff0c\u5f9e\u6307\u5b9a\u7d50\u9ede\u51fa\u767c\uff0c\u7d66\u5b9a\u4e00\u8ddd\u96e2K\uff0c\u627e\u51fa\u6240\u6709\u8ddd\u96e2\u540c\u70baK\u7684\u7bc0\u9ede\uff0c\u76f8\u7576\u91cd\u8981\u53c8\u7d93\u5178\uff01 Geekforgeeks ref \u984c\u610f\uff1a\u627e\u51fa\u4e00\u500b\u4e8c\u5143\u6a39\u4e2d\uff0c\u5f9e\u4e00\u500b\u9ede\u51fa\u767c\uff0c\u627e\u51fa\u6240\u6709\u8ddd\u96e2\u8a72\u9ede\u70baK\u7684\u7bc0\u9ede\uff08\u5305\u542b\u7236\u7bc0\u9ede\u4e5f\u7b97\uff09 \u601d\u8def\uff1a\u9996\u5148DFS\u7528map\u5132\u5b58\u6bcf\u4e00\u500bchild-parent node pair\uff0c\u63a5\u8457\u5f9e\u8a72\u9ede\u51fa\u767c\uff0c\u8d70\u8a2a\u5169\u7a2eCASE \u5de6\u53f3\u5b50\u6a39\uff08\u6bcf\u8d70\u904e\u4e00\u500b\u9ede\u5c31\u5c07K-1\uff0c\u4ee3\u8868\u4e00\u500b\u8ddd\u96e2\u7684\u6e1b\u5c11\uff09\uff0c\u76f4\u5230K==0 \u4ee3\u8868\u6307\u5b9a\u7684\u8ddd\u96e2\u5230\u4e86\uff0c\u4fbf\u53ef\u4ee5\u505c\u4e0b\u3002 \u7236\u7bc0\u9ede\uff0c\u5247\u662f\u5c07child\u5c0d\u61c9\u7684perent\u4ee5 parent_ptr = map[current_node]\u53d6\u51fa\uff0c\u518d\u884c\u8d70\u8a2a\uff0c\u56e0\u70ba\u65b9\u624d\u8d70\u8a2a\u904e\u7684\u9ede\u6703\u88ab\u653e\u5165set\u4e2d\uff0c\u56e0\u6b64\u63db\u5230\u7236\u7d50\u9ede\u7684\u6642\u5019\u4fbf\u4e0d\u6703\u53c8\u8d70\u56de\u4f86\u73fe\u5728\u7684\u9ede\uff0c\u4e00\u8209\u5169\u5f97 \u8d70\u8a2a\u7684\u540c\u6642\u4e5f\u4e0d\u5fd8\u4e86\u4f7f\u7528set \u5132\u5b58visited path\u4ee5\u9632\u91cd\u8907\u8d70\u8a2a\uff0c\u4e5f\u5c31\u662f\u6a19\u8a18\u904e\u5df2\u7d93\u9032\u884cDFS\u904e\u7684\u7bc0\u9ede\u3002 \u5206\u6790: Time complexity = O(N), Space complexity = O(N) where N is # of nodes in that BT. /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : map TreeNode * , TreeNode * child_par_pair ; //[child parent] pair for accessing the relationship b/w the child and parent set int visited ; vector int res ; //store the result vector int distanceK ( TreeNode * root , TreeNode * target , int dist_K ) { if ( root == NULL ) //return nothing if the { return vector int ( 1 , 0 ); } dfs_parent ( root ); dfs_relation ( target , dist_K ); return res ; } void dfs_parent ( TreeNode * root ) { if ( root == NULL ) { return ; } if ( root - left ) { child_par_pair [ root - left ] = root ; dfs_parent ( root - left ); } if ( root - right ) { child_par_pair [ root - right ] = root ; dfs_parent ( root - right ); } } void dfs_relation ( TreeNode * root , int dist_K ) { if ( root == NULL ) { return ; } for ( set int :: iterator it = visited . begin (); it != visited . end (); ++ it ) { if ( * it == root - val ) //the current-visiting node has been traversed before, so we just quit { return ; } } visited . insert ( root - val ); //push the current visited node for dfs mark what node has been traversed to prevent duplicated traversing if ( dist_K == 0 ) //dist_K reached { res . push_back ( root - val ); return ; } if ( root - left ) //traverse left child` { dfs_relation ( root - left , dist_K - 1 ); } if ( root - right ) //traverse left child` { dfs_relation ( root - right , dist_K - 1 ); } TreeNode * parent_node_to_traverse = child_par_pair [ root ]; if ( parent_node_to_traverse ) { dfs_relation ( parent_node_to_traverse , dist_K - 1 ); } } }; PC. 861. Score After Flipping Matrix \u8caa\u5fc3\u7b97\u6cd5 \u540c\u6b65\u520a\u8f09\u65bc leetcode discussion thread \u984c\u610f\uff1a\u6578\u500b\u4e8c\u9032\u4f4d\u6578\u5b57\u4ee5\u77e9\u9663\u7684row\u8868\u793a\uff0c\u6bcf\u4e00\u6b21\u6211\u5011\u80fdtoggle\u6574\u500brow\u6216column\u4f7f\u5f97\u6574\u500brow\u6216column\u7684\u5168\u90e8\u5143\u7d20XOR with 1\uff0c\u554f\u6700\u5927\u7684\u4e8c\u9032\u4f4d\u6578\u5b57\u662f\u591a\u5c11\uff08\u4ea6\u5373\u5c07\u6bcf\u500brow\u7684\u4e8c\u9032\u4f4d\u6578\u5b57\u52a0\u7e3d\uff09 \u601d\u8def\uff1a\u57fa\u672c\u7684\u8caa\u5fc3\u6f14\u7b97\u6cd5\u984c(\u56e0\u70ba\u6211\u5011\u5e0c\u671b\u5c40\u90e8\u89e3\u6108\u5927\u6108\u597d\uff0c\u6bcf\u4e00\u6b21\u90fd\u8b93\u8a72col or row\u7684\u7d44\u5408\u60c5\u5f62\u80fd\u6700\u5927)\uff0c\u56e0\u6b64\u6709\u4ee5\u4e0b\u5169\u7a2e\u60c5\u5f62 \u5c0d\u65bc\u6a6b\u6392\u7531\u65bc 2^n sum(2^n-1 + 2^n-2 + ....... + 1)\uff0c\u56e0\u6b64\u6539\u8b8a\u6700\u5de6\u908a\u7684MSB\u6703\u5c07\u5269\u9918\u7684\u90fd\u8a2d\u70ba\u4e00\u4f86\u7684\u597d\uff0c\u6240\u4ee5\u53cd\u8f49\u4f7f\u5f97MSB = 1\u662f\u597d\u7684 \u5c0d\u65bc\u76f4\u6392\u4ea6\u5373\u6bcf\u4e00\u500b\u4f4d\u6578\uff08\u5373column\u800c\u8a00\uff0c\u628a1\u8b8a\u5f97\u6bd40\u591a\u4e5f\u662f\u597d\u4e8b)\uff0c\u56e0\u6b64\u5c0d\u65bccol\u6211\u5011\u53ef\u4ee5\u8a18\u9304\u8a72col\u6709\u591a\u5c11\u500b\u96f6\u4ee5\u53ca\u4e00\uff0c\u5018\u82e5\u96f6\u7684\u500b\u6578\u5927\u65bc\u4e00\u7684\u500b\u6578\uff0c\u5247\u53cd\u8f49\u6574\u500bcol\u4f7f\u5f97\u4e00\u7684\u500b\u6578\u6bd4\u8f03\u591a\u3002 \u7d9c\u5408\u4ee5\u4e0a\u5169\u9ede\u4fbf\u80fd\u5f97\u5230\u4ee5\u4e0b\u7684code\uff0c \u5176\u4e2d\u8ff4\u5708\u8df3\u51fa\u689d\u4ef6\u70ba\uff0c\u6bcf\u4e00\u500b\u4e8c\u9032\u4f4d\u6578\u5b57\u77e9\u9663\uff0c\u6bcf\u4e00\u500bcol\u7684\u4e00\u7684\u500b\u6578\u5747\u5927\u65bc\u96f6\u7684\u500b\u6578\uff08\u5c40\u90e8\u6700\u4f73\u89e3\uff09\uff0c\u6bcf\u4e00\u500brow\u7684MSB\u90fd\u662f1(\u6e90\u81ea\u65bc\u65b9\u624d\u7684\u6578\u5b78\u8a08\u7b97\u5f0f) * \u5206\u6790: Time complexity = O(row * col), Space complexity (with auxiliary vector of pair) = O(col) /* Algorithm design: Greedy algorithm is used in this problem. Since 2^n sum(2^n-1 + 2^n-2 + ....... + 1), so the msb(most significant bit) has more power than all the other. Steps: 1. We may toggle the whole column if cnt_0 is greater than cnt_1 in such row to make # of 1s more than 0s. 2. Than we toggle the whole row if the first 3. For loop termination, we check 2 flags First we check if all of the columns that 1s are greater than 0s. Than we check if all of the rows that the msb is all 1 to max the value. */ class Solution { public : int matrixScore ( vector vector int arr ) { int flag_1 = 0 , flag_2 = 0 , cnt_0 = 0 , cnt_1 = 0 ; vector pair int , int col_data_pair ; while ( 1 ) { //data structure col_data_pair . clear (); col_data_pair . resize ( arr [ 0 ]. size ()); flag_1 = 1 ; flag_2 = 1 ; //statistical data of 1 and 0 of each column for ( int i = 0 ; i arr [ 0 ]. size (); i ++ ) { cnt_0 = cnt_1 = 0 ; for ( int j = 0 ; j arr . size (); j ++ ) { if ( arr [ j ][ i ]) { cnt_1 ++ ; } else { cnt_0 ++ ; } } //check the first flag of 1s and 0s if ( cnt_0 cnt_1 ) { flag_1 = 0 ; } col_data_pair [ i ]. first = cnt_0 ; col_data_pair [ i ]. second = cnt_1 ; } //check the second flag of MSB for ( int i = 0 ; i arr . size (); i ++ ) { if ( arr [ i ][ 0 ] == 0 ) { flag_2 = 0 ; } } if ( flag_1 == 1 flag_2 == 1 ) { break ; } //toggle the column if such column s 0 more than 1 for ( int i = 0 ; i col_data_pair . size (); i ++ ) { if ( col_data_pair [ i ]. first col_data_pair [ i ]. second ) { for ( int j = 0 ; j arr . size (); j ++ ) { arr [ j ][ i ] ^= 1 ; } } } //toggle the row if such row s arr[0][col] = 0, if so, toggle the whole row for ( int i = 0 ; i arr . size (); i ++ ) { if ( arr [ i ][ 0 ] == 0 ) { for ( int j = 0 ; j arr [ i ]. size (); j ++ ) { arr [ i ][ j ] ^= 1 ; } } } } return binary_sum ( arr ); } int binary_sum ( vector vector int arr ) { unsigned int sum = 0 ; for ( int i = 0 ; i arr . size (); i ++ ) { string str_bin ( ); for ( int j = 0 ; j arr [ i ]. size (); j ++ ) { str_bin += arr [ i ][ j ] + 0 ; } sum += ( unsigned int ) stoi ( str_bin , nullptr , 2 ); } return sum ; } }; PD 862. Shortest Subarray with Sum at Least K deque\u61c9\u7528 TLE VERSION \u601d\u8def:\u7cbe\u7c21\u4e4b\u5f8c\u7684\u66b4\u529b\u89e3\uff0c\u96d6\u7136\u4f7f\u7528\u4e86\u6ed1\u52d5\u8996\u7a97\uff0c\u4f46\u662f\u6642\u9593\u4e26\u6c92\u6709\u58d3\u5728O(N^2)\uff0c\u57fa\u672c\u4e0a\u9084\u662f\u8fd1\u4e4e\u67e5\u627e\u6bcf\u4e00\u500b\u6240\u6709\u53ef\u80fd\u7684subarray\u800c\u5df2\u3002 \u5206\u6790: Time complexity O(N^2) Space complexity O(1) (only some helper variables) /* TLE in very large testcases(vector with length more than 30000), testcases 83/93 the algorithm is implemented in the sliding-window. need to optimize to O(N) */ class Solutio { public : int shortestSubarray ( vector int arr , int target_val ) { if ( arr . size () == 1 ) { return 1 ; } int start_idx = 0 , end_idx = 1 , cur_sum = 0 ; unsigned int min_len = 9999999 ; while ( arr . size () 1 ) { cur_sum = 0 ; for ( int i = start_idx ; i = end_idx ; i ++ ) { cur_sum += arr [ i ]; } if ( cur_sum target_val ) { if ( end_idx != arr . size () - 1 ) //keep adding the elements, extending the right side of the window { end_idx ++ ; } else if ( end_idx == arr . size () - 1 start_idx end_idx ) //shrink the subarray, try to toss away some negative values { if ( cur_sum - arr [ start_idx ] = target_val ) //if successfully toss away enough negative value, then the min_len can be updated { min_len = min (( unsigned int ) end_idx - start_idx , min_len ); } start_idx ++ ; //shrink the left side of the window } } else //if the target value is reached, then we can try to shrink the left side of the window to try to make the window narrower { min_len = min (( unsigned int ) end_idx - start_idx + 1 , min_len ); if ( start_idx end_idx ) //shrink the leftside { start_idx ++ ; } else if ( start_idx == end_idx ) //moving forward to prevent locked situation { start_idx ++ ; end_idx ++ ; } if ( cur_sum - arr [ start_idx - 1 ] = target_val ) //update the min value if the shrinked sliding window still satisfies the criteria { min_len = min (( unsigned int ) end_idx - start_idx + 1 , min_len ); } } //I think the TLE mainly due to this part since my time complexity is not O(N) but O(N^2) if ( start_idx == arr . size () - 1 end_idx == arr . size () - 1 ) //if we reach the end of the vector, pop the last element, to do again for the smaller array. { arr . pop_back (); start_idx = 0 ; end_idx = 1 ; } } return ( min_len == 9999999 ) ? - 1 : min_len ; //check the return answer } }; AC VERSION \u6539\u9032: \u63a1\u7528deque(\u548cqueue\u4e00\u6a23FCFS\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u4f46\u662f\u53ef\u4ee5\u982d\u5c3e\u90fd\u51fa\u53bb\u7684\u96d9\u968a\u5217)\uff0c\u63a1\u7528prefix_sum\u4f86\u627e\u5230\u54ea\u500b\u5340\u9593\u7684prefix_sum \u662f\u8ca0\u7684\uff0c\u90a3\u4ee3\u8868\u7d93\u904e\u90a3\u6bb5\u5340\u9593\u53ea\u6703\u8b8a\u5c0f\uff0c\u53ef\u4ee5\u6368\u68c4\u4ed6\u3002 \u601d\u8def: \u9996\u5148\u5c07\u5404\u500barray\u5230\u8a72\u9ede\u7684prefix_sum\u5beb\u51fa\u4f86\uff0c\u5176\u4e2dprefix_sum[i] = sum(arr[0] + arr[1] + ... arr[i - 1]) (\u52a0\u7e3d\u5230\u524d\u4e00\u9805\u7684\u548c)\uff0c\u63a5\u8457\uff0c\u7531\u65bc prefix_sum[j] - prefix_sum[i] \u4ee3\u8868\u5f9e\u7b2ci\u9805\u5230\u7b2cj - 1\u9805\u76ee\u7684\u5340\u9593\u548c\uff0c\u518d\u4ee5\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u6c42\u89e3(\u5177\u9ad4\u66f4\u8a73\u7d30\u7684\u601d\u8def\u8acb\u898b\u7a0b\u5f0f\u78bc\u7684\u8a3b\u89e3) \u5206\u6790: Time complexity: O(N) Space complexity O(N) (auxiliary deque) \u5099\u8a3b:\u4e0b\u9762\u7684printf\u53ef\u4ee5\u81ea\u5df1\u653e\u6e2c\u8cc7\u8dd1\u8dd1\u770b\uff0c\u6bd4\u8f03\u597d\u7406\u89e3\u6d41\u7a0b\u5537 :D photo class Solution { public : int shortestSubarray ( vector int arr , int target ) { int prefix_sum [ arr . size () + 1 ] = { 0 }; for ( int i = 1 ; i = arr . size (); i ++ ) { prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i - 1 ]; } int ans = 0x7fffffff ; deque int window_left ; for ( int end = 0 ; end = arr . size (); end ++ ) { printf ( end now %d back , end ); while ( ! window_left . empty () prefix_sum [ end ] - prefix_sum [ window_left . back ()] = 0 ) { printf ( %d , window_left . back ()); window_left . pop_back (); } printf ( front while loop 2 front ); while ( ! window_left . empty () prefix_sum [ end ] - prefix_sum [ window_left . front ()] = target ) //\u5340\u9593\u548c\u5927\u65bc\u7b49\u65bc\u6728\u96d5\u54e6\u8981\u6108\u77ed\u6108\u597d\uff0c\u6240\u4ee5\u5f9edeque\u7684front(\u6bd4\u8f03\u65e9\u9032\u4f86\u7684 \u4e5f\u5c31\u662f\u6bd4\u8f03\u5de6\u908a\u7684\uff0c\u5411\u53f3\u7e2e\u6e1b\uff0c\u6700\u5f8c\u671f\u671b\u7e2e\u77ed\u5230\u6700\u5c0f\u53c8\u80fd\u7b26\u5408\u5927\u65bc\u7b49\u65bc\u76ee\u6a19\u503c(\u4ea6\u5373\uff0c\u9019\u500b\u5340\u9593(prefix_sum[j] - prefix_sum[i] \u4ee3\u8868\u5f9e\u7b2ci\u9805\u5230\u7b2cj - 1\u9805\u76ee\u7684\u5340\u9593\u548c)\u80fd\u7b26\u5408 prefix_sum[end] - prefix_sum[window_left.front()] = target)\u7684\u9577\u5ea6\uff0c\u6bcf\u6b21\u5c31\u5411\u53f3\u908a\u7e2e\u77ed\u4e00\u683c(\u898b\u4e0b\u65b9) { int beg = window_left . front (); printf ( %d , window_left . front ()); window_left . pop_front (); //\u76ee\u524d\u9019\u4e00\u683c\u7684\u9577\u5ea6\u627e\u51fa\u5f8c\uff0c\u5411\u53f3\u908a\u7e2e\u77ed\u4e00\u683c\uff0c\u63a5\u8457\u91cd\u65b0\u8dd1\u9019\u500bwhile\u8ff4\u5708\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u7e7c\u7e8c\u7b26\u5408\u4ed6\u7684\u76ee\u6a19\u6578\u503c\u8981\u6c42\uff0c\u53ef\u4ee5\u7684\u8a71\u5c31\u5728\u7e7c\u7e8c\u7e2e\u77ed\uff0c\u4e0d\u53ef\u4ee5\u5c31\u8df3\u96e2\u8ff4\u5708 ans = min ( ans , end - beg ); //\u627e\u51fa\u6bd4\u8f03\u77ed\u7684\u9577\u5ea6 } printf ( back \\n ); window_left . push_back ( end ); } return ans == 0x7fffffff ? - 1 : ans ; } };","title":"WC91"},{"location":"programming_practice/leetcode_OJ_WC/WC91/#leetcode_oj-wc91","text":"Contest time: Jul 1,2018","title":"leetcode_OJ WC91 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC91/#pa-860-lemonade-change","text":"\u601d\u8def\uff1a\u6c34\u984c\uff0c\u7528map\u5132\u5b58\u6bcf\u4e00\u7a2e\u786c\u5e63\u8207\u5176\u5c0d\u61c9\u7684\u6578\u91cf\uff0c\u6ce8\u610f\u5341\u4e94\u5143\u4e5f\u80fd\u7528\u4e09\u500b\u4e94\u584a\u627e\u9322\u5373\u53ef Time complexity = O(N), Space complexity (with auxilary map structure) = O(N) #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : bool lemonadeChange ( vector int bl ) { map int , int mymap ; FORI ( bl . size ()) { mymap [ bl [ i ]] ++ ; if ( bl [ i ] == 10 ) { if ( mymap [ 5 ] == 0 ) { return 0 ; } else { mymap [ 5 ] -- ; } } else { if ( mymap [ 5 ] 0 mymap [ 10 ] 0 ) { mymap [ 5 ] -- ; mymap [ 10 ] -- ; } else if ( mymap [ 5 ] = 3 mymap [ 10 ] == 0 ) { mymap [ 5 ] -= 3 ; } else if ( mymap [ 5 ] == 0 || mymap [ 10 ] == 0 ) { return 0 ; } } } return 1 ; } };","title":"PA. 860. Lemonade Change \u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC91/#pb-863-all-nodes-distance-k-in-binary-tree-dfsset-map","text":"\u627e\u51fa\u4e00\u500b\u4e8c\u5143\u6a39\u4e2d\uff0c\u5f9e\u6307\u5b9a\u7d50\u9ede\u51fa\u767c\uff0c\u7d66\u5b9a\u4e00\u8ddd\u96e2K\uff0c\u627e\u51fa\u6240\u6709\u8ddd\u96e2\u540c\u70baK\u7684\u7bc0\u9ede\uff0c\u76f8\u7576\u91cd\u8981\u53c8\u7d93\u5178\uff01 Geekforgeeks ref \u984c\u610f\uff1a\u627e\u51fa\u4e00\u500b\u4e8c\u5143\u6a39\u4e2d\uff0c\u5f9e\u4e00\u500b\u9ede\u51fa\u767c\uff0c\u627e\u51fa\u6240\u6709\u8ddd\u96e2\u8a72\u9ede\u70baK\u7684\u7bc0\u9ede\uff08\u5305\u542b\u7236\u7bc0\u9ede\u4e5f\u7b97\uff09 \u601d\u8def\uff1a\u9996\u5148DFS\u7528map\u5132\u5b58\u6bcf\u4e00\u500bchild-parent node pair\uff0c\u63a5\u8457\u5f9e\u8a72\u9ede\u51fa\u767c\uff0c\u8d70\u8a2a\u5169\u7a2eCASE \u5de6\u53f3\u5b50\u6a39\uff08\u6bcf\u8d70\u904e\u4e00\u500b\u9ede\u5c31\u5c07K-1\uff0c\u4ee3\u8868\u4e00\u500b\u8ddd\u96e2\u7684\u6e1b\u5c11\uff09\uff0c\u76f4\u5230K==0 \u4ee3\u8868\u6307\u5b9a\u7684\u8ddd\u96e2\u5230\u4e86\uff0c\u4fbf\u53ef\u4ee5\u505c\u4e0b\u3002 \u7236\u7bc0\u9ede\uff0c\u5247\u662f\u5c07child\u5c0d\u61c9\u7684perent\u4ee5 parent_ptr = map[current_node]\u53d6\u51fa\uff0c\u518d\u884c\u8d70\u8a2a\uff0c\u56e0\u70ba\u65b9\u624d\u8d70\u8a2a\u904e\u7684\u9ede\u6703\u88ab\u653e\u5165set\u4e2d\uff0c\u56e0\u6b64\u63db\u5230\u7236\u7d50\u9ede\u7684\u6642\u5019\u4fbf\u4e0d\u6703\u53c8\u8d70\u56de\u4f86\u73fe\u5728\u7684\u9ede\uff0c\u4e00\u8209\u5169\u5f97 \u8d70\u8a2a\u7684\u540c\u6642\u4e5f\u4e0d\u5fd8\u4e86\u4f7f\u7528set \u5132\u5b58visited path\u4ee5\u9632\u91cd\u8907\u8d70\u8a2a\uff0c\u4e5f\u5c31\u662f\u6a19\u8a18\u904e\u5df2\u7d93\u9032\u884cDFS\u904e\u7684\u7bc0\u9ede\u3002 \u5206\u6790: Time complexity = O(N), Space complexity = O(N) where N is # of nodes in that BT. /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : map TreeNode * , TreeNode * child_par_pair ; //[child parent] pair for accessing the relationship b/w the child and parent set int visited ; vector int res ; //store the result vector int distanceK ( TreeNode * root , TreeNode * target , int dist_K ) { if ( root == NULL ) //return nothing if the { return vector int ( 1 , 0 ); } dfs_parent ( root ); dfs_relation ( target , dist_K ); return res ; } void dfs_parent ( TreeNode * root ) { if ( root == NULL ) { return ; } if ( root - left ) { child_par_pair [ root - left ] = root ; dfs_parent ( root - left ); } if ( root - right ) { child_par_pair [ root - right ] = root ; dfs_parent ( root - right ); } } void dfs_relation ( TreeNode * root , int dist_K ) { if ( root == NULL ) { return ; } for ( set int :: iterator it = visited . begin (); it != visited . end (); ++ it ) { if ( * it == root - val ) //the current-visiting node has been traversed before, so we just quit { return ; } } visited . insert ( root - val ); //push the current visited node for dfs mark what node has been traversed to prevent duplicated traversing if ( dist_K == 0 ) //dist_K reached { res . push_back ( root - val ); return ; } if ( root - left ) //traverse left child` { dfs_relation ( root - left , dist_K - 1 ); } if ( root - right ) //traverse left child` { dfs_relation ( root - right , dist_K - 1 ); } TreeNode * parent_node_to_traverse = child_par_pair [ root ]; if ( parent_node_to_traverse ) { dfs_relation ( parent_node_to_traverse , dist_K - 1 ); } } };","title":"PB. 863. All Nodes Distance K in Binary Tree \u7d93\u5178\u6a39\u5716\u8ad6\u984c\uff0cDFS\u52a0\u4e0aset, map \u5be6\u4f5c\u61c9\u7528"},{"location":"programming_practice/leetcode_OJ_WC/WC91/#pc861-score-after-flipping-matrix","text":"\u540c\u6b65\u520a\u8f09\u65bc leetcode discussion thread \u984c\u610f\uff1a\u6578\u500b\u4e8c\u9032\u4f4d\u6578\u5b57\u4ee5\u77e9\u9663\u7684row\u8868\u793a\uff0c\u6bcf\u4e00\u6b21\u6211\u5011\u80fdtoggle\u6574\u500brow\u6216column\u4f7f\u5f97\u6574\u500brow\u6216column\u7684\u5168\u90e8\u5143\u7d20XOR with 1\uff0c\u554f\u6700\u5927\u7684\u4e8c\u9032\u4f4d\u6578\u5b57\u662f\u591a\u5c11\uff08\u4ea6\u5373\u5c07\u6bcf\u500brow\u7684\u4e8c\u9032\u4f4d\u6578\u5b57\u52a0\u7e3d\uff09 \u601d\u8def\uff1a\u57fa\u672c\u7684\u8caa\u5fc3\u6f14\u7b97\u6cd5\u984c(\u56e0\u70ba\u6211\u5011\u5e0c\u671b\u5c40\u90e8\u89e3\u6108\u5927\u6108\u597d\uff0c\u6bcf\u4e00\u6b21\u90fd\u8b93\u8a72col or row\u7684\u7d44\u5408\u60c5\u5f62\u80fd\u6700\u5927)\uff0c\u56e0\u6b64\u6709\u4ee5\u4e0b\u5169\u7a2e\u60c5\u5f62 \u5c0d\u65bc\u6a6b\u6392\u7531\u65bc 2^n sum(2^n-1 + 2^n-2 + ....... + 1)\uff0c\u56e0\u6b64\u6539\u8b8a\u6700\u5de6\u908a\u7684MSB\u6703\u5c07\u5269\u9918\u7684\u90fd\u8a2d\u70ba\u4e00\u4f86\u7684\u597d\uff0c\u6240\u4ee5\u53cd\u8f49\u4f7f\u5f97MSB = 1\u662f\u597d\u7684 \u5c0d\u65bc\u76f4\u6392\u4ea6\u5373\u6bcf\u4e00\u500b\u4f4d\u6578\uff08\u5373column\u800c\u8a00\uff0c\u628a1\u8b8a\u5f97\u6bd40\u591a\u4e5f\u662f\u597d\u4e8b)\uff0c\u56e0\u6b64\u5c0d\u65bccol\u6211\u5011\u53ef\u4ee5\u8a18\u9304\u8a72col\u6709\u591a\u5c11\u500b\u96f6\u4ee5\u53ca\u4e00\uff0c\u5018\u82e5\u96f6\u7684\u500b\u6578\u5927\u65bc\u4e00\u7684\u500b\u6578\uff0c\u5247\u53cd\u8f49\u6574\u500bcol\u4f7f\u5f97\u4e00\u7684\u500b\u6578\u6bd4\u8f03\u591a\u3002 \u7d9c\u5408\u4ee5\u4e0a\u5169\u9ede\u4fbf\u80fd\u5f97\u5230\u4ee5\u4e0b\u7684code\uff0c \u5176\u4e2d\u8ff4\u5708\u8df3\u51fa\u689d\u4ef6\u70ba\uff0c\u6bcf\u4e00\u500b\u4e8c\u9032\u4f4d\u6578\u5b57\u77e9\u9663\uff0c\u6bcf\u4e00\u500bcol\u7684\u4e00\u7684\u500b\u6578\u5747\u5927\u65bc\u96f6\u7684\u500b\u6578\uff08\u5c40\u90e8\u6700\u4f73\u89e3\uff09\uff0c\u6bcf\u4e00\u500brow\u7684MSB\u90fd\u662f1(\u6e90\u81ea\u65bc\u65b9\u624d\u7684\u6578\u5b78\u8a08\u7b97\u5f0f) * \u5206\u6790: Time complexity = O(row * col), Space complexity (with auxiliary vector of pair) = O(col) /* Algorithm design: Greedy algorithm is used in this problem. Since 2^n sum(2^n-1 + 2^n-2 + ....... + 1), so the msb(most significant bit) has more power than all the other. Steps: 1. We may toggle the whole column if cnt_0 is greater than cnt_1 in such row to make # of 1s more than 0s. 2. Than we toggle the whole row if the first 3. For loop termination, we check 2 flags First we check if all of the columns that 1s are greater than 0s. Than we check if all of the rows that the msb is all 1 to max the value. */ class Solution { public : int matrixScore ( vector vector int arr ) { int flag_1 = 0 , flag_2 = 0 , cnt_0 = 0 , cnt_1 = 0 ; vector pair int , int col_data_pair ; while ( 1 ) { //data structure col_data_pair . clear (); col_data_pair . resize ( arr [ 0 ]. size ()); flag_1 = 1 ; flag_2 = 1 ; //statistical data of 1 and 0 of each column for ( int i = 0 ; i arr [ 0 ]. size (); i ++ ) { cnt_0 = cnt_1 = 0 ; for ( int j = 0 ; j arr . size (); j ++ ) { if ( arr [ j ][ i ]) { cnt_1 ++ ; } else { cnt_0 ++ ; } } //check the first flag of 1s and 0s if ( cnt_0 cnt_1 ) { flag_1 = 0 ; } col_data_pair [ i ]. first = cnt_0 ; col_data_pair [ i ]. second = cnt_1 ; } //check the second flag of MSB for ( int i = 0 ; i arr . size (); i ++ ) { if ( arr [ i ][ 0 ] == 0 ) { flag_2 = 0 ; } } if ( flag_1 == 1 flag_2 == 1 ) { break ; } //toggle the column if such column s 0 more than 1 for ( int i = 0 ; i col_data_pair . size (); i ++ ) { if ( col_data_pair [ i ]. first col_data_pair [ i ]. second ) { for ( int j = 0 ; j arr . size (); j ++ ) { arr [ j ][ i ] ^= 1 ; } } } //toggle the row if such row s arr[0][col] = 0, if so, toggle the whole row for ( int i = 0 ; i arr . size (); i ++ ) { if ( arr [ i ][ 0 ] == 0 ) { for ( int j = 0 ; j arr [ i ]. size (); j ++ ) { arr [ i ][ j ] ^= 1 ; } } } } return binary_sum ( arr ); } int binary_sum ( vector vector int arr ) { unsigned int sum = 0 ; for ( int i = 0 ; i arr . size (); i ++ ) { string str_bin ( ); for ( int j = 0 ; j arr [ i ]. size (); j ++ ) { str_bin += arr [ i ][ j ] + 0 ; } sum += ( unsigned int ) stoi ( str_bin , nullptr , 2 ); } return sum ; } };","title":"PC.861. Score After Flipping Matrix \u8caa\u5fc3\u7b97\u6cd5"},{"location":"programming_practice/leetcode_OJ_WC/WC91/#pd-862-shortest-subarray-with-sum-at-least-k-deque","text":"TLE VERSION \u601d\u8def:\u7cbe\u7c21\u4e4b\u5f8c\u7684\u66b4\u529b\u89e3\uff0c\u96d6\u7136\u4f7f\u7528\u4e86\u6ed1\u52d5\u8996\u7a97\uff0c\u4f46\u662f\u6642\u9593\u4e26\u6c92\u6709\u58d3\u5728O(N^2)\uff0c\u57fa\u672c\u4e0a\u9084\u662f\u8fd1\u4e4e\u67e5\u627e\u6bcf\u4e00\u500b\u6240\u6709\u53ef\u80fd\u7684subarray\u800c\u5df2\u3002 \u5206\u6790: Time complexity O(N^2) Space complexity O(1) (only some helper variables) /* TLE in very large testcases(vector with length more than 30000), testcases 83/93 the algorithm is implemented in the sliding-window. need to optimize to O(N) */ class Solutio { public : int shortestSubarray ( vector int arr , int target_val ) { if ( arr . size () == 1 ) { return 1 ; } int start_idx = 0 , end_idx = 1 , cur_sum = 0 ; unsigned int min_len = 9999999 ; while ( arr . size () 1 ) { cur_sum = 0 ; for ( int i = start_idx ; i = end_idx ; i ++ ) { cur_sum += arr [ i ]; } if ( cur_sum target_val ) { if ( end_idx != arr . size () - 1 ) //keep adding the elements, extending the right side of the window { end_idx ++ ; } else if ( end_idx == arr . size () - 1 start_idx end_idx ) //shrink the subarray, try to toss away some negative values { if ( cur_sum - arr [ start_idx ] = target_val ) //if successfully toss away enough negative value, then the min_len can be updated { min_len = min (( unsigned int ) end_idx - start_idx , min_len ); } start_idx ++ ; //shrink the left side of the window } } else //if the target value is reached, then we can try to shrink the left side of the window to try to make the window narrower { min_len = min (( unsigned int ) end_idx - start_idx + 1 , min_len ); if ( start_idx end_idx ) //shrink the leftside { start_idx ++ ; } else if ( start_idx == end_idx ) //moving forward to prevent locked situation { start_idx ++ ; end_idx ++ ; } if ( cur_sum - arr [ start_idx - 1 ] = target_val ) //update the min value if the shrinked sliding window still satisfies the criteria { min_len = min (( unsigned int ) end_idx - start_idx + 1 , min_len ); } } //I think the TLE mainly due to this part since my time complexity is not O(N) but O(N^2) if ( start_idx == arr . size () - 1 end_idx == arr . size () - 1 ) //if we reach the end of the vector, pop the last element, to do again for the smaller array. { arr . pop_back (); start_idx = 0 ; end_idx = 1 ; } } return ( min_len == 9999999 ) ? - 1 : min_len ; //check the return answer } }; AC VERSION \u6539\u9032: \u63a1\u7528deque(\u548cqueue\u4e00\u6a23FCFS\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u4f46\u662f\u53ef\u4ee5\u982d\u5c3e\u90fd\u51fa\u53bb\u7684\u96d9\u968a\u5217)\uff0c\u63a1\u7528prefix_sum\u4f86\u627e\u5230\u54ea\u500b\u5340\u9593\u7684prefix_sum \u662f\u8ca0\u7684\uff0c\u90a3\u4ee3\u8868\u7d93\u904e\u90a3\u6bb5\u5340\u9593\u53ea\u6703\u8b8a\u5c0f\uff0c\u53ef\u4ee5\u6368\u68c4\u4ed6\u3002 \u601d\u8def: \u9996\u5148\u5c07\u5404\u500barray\u5230\u8a72\u9ede\u7684prefix_sum\u5beb\u51fa\u4f86\uff0c\u5176\u4e2dprefix_sum[i] = sum(arr[0] + arr[1] + ... arr[i - 1]) (\u52a0\u7e3d\u5230\u524d\u4e00\u9805\u7684\u548c)\uff0c\u63a5\u8457\uff0c\u7531\u65bc prefix_sum[j] - prefix_sum[i] \u4ee3\u8868\u5f9e\u7b2ci\u9805\u5230\u7b2cj - 1\u9805\u76ee\u7684\u5340\u9593\u548c\uff0c\u518d\u4ee5\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u6c42\u89e3(\u5177\u9ad4\u66f4\u8a73\u7d30\u7684\u601d\u8def\u8acb\u898b\u7a0b\u5f0f\u78bc\u7684\u8a3b\u89e3) \u5206\u6790: Time complexity: O(N) Space complexity O(N) (auxiliary deque) \u5099\u8a3b:\u4e0b\u9762\u7684printf\u53ef\u4ee5\u81ea\u5df1\u653e\u6e2c\u8cc7\u8dd1\u8dd1\u770b\uff0c\u6bd4\u8f03\u597d\u7406\u89e3\u6d41\u7a0b\u5537 :D photo class Solution { public : int shortestSubarray ( vector int arr , int target ) { int prefix_sum [ arr . size () + 1 ] = { 0 }; for ( int i = 1 ; i = arr . size (); i ++ ) { prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i - 1 ]; } int ans = 0x7fffffff ; deque int window_left ; for ( int end = 0 ; end = arr . size (); end ++ ) { printf ( end now %d back , end ); while ( ! window_left . empty () prefix_sum [ end ] - prefix_sum [ window_left . back ()] = 0 ) { printf ( %d , window_left . back ()); window_left . pop_back (); } printf ( front while loop 2 front ); while ( ! window_left . empty () prefix_sum [ end ] - prefix_sum [ window_left . front ()] = target ) //\u5340\u9593\u548c\u5927\u65bc\u7b49\u65bc\u6728\u96d5\u54e6\u8981\u6108\u77ed\u6108\u597d\uff0c\u6240\u4ee5\u5f9edeque\u7684front(\u6bd4\u8f03\u65e9\u9032\u4f86\u7684 \u4e5f\u5c31\u662f\u6bd4\u8f03\u5de6\u908a\u7684\uff0c\u5411\u53f3\u7e2e\u6e1b\uff0c\u6700\u5f8c\u671f\u671b\u7e2e\u77ed\u5230\u6700\u5c0f\u53c8\u80fd\u7b26\u5408\u5927\u65bc\u7b49\u65bc\u76ee\u6a19\u503c(\u4ea6\u5373\uff0c\u9019\u500b\u5340\u9593(prefix_sum[j] - prefix_sum[i] \u4ee3\u8868\u5f9e\u7b2ci\u9805\u5230\u7b2cj - 1\u9805\u76ee\u7684\u5340\u9593\u548c)\u80fd\u7b26\u5408 prefix_sum[end] - prefix_sum[window_left.front()] = target)\u7684\u9577\u5ea6\uff0c\u6bcf\u6b21\u5c31\u5411\u53f3\u908a\u7e2e\u77ed\u4e00\u683c(\u898b\u4e0b\u65b9) { int beg = window_left . front (); printf ( %d , window_left . front ()); window_left . pop_front (); //\u76ee\u524d\u9019\u4e00\u683c\u7684\u9577\u5ea6\u627e\u51fa\u5f8c\uff0c\u5411\u53f3\u908a\u7e2e\u77ed\u4e00\u683c\uff0c\u63a5\u8457\u91cd\u65b0\u8dd1\u9019\u500bwhile\u8ff4\u5708\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u7e7c\u7e8c\u7b26\u5408\u4ed6\u7684\u76ee\u6a19\u6578\u503c\u8981\u6c42\uff0c\u53ef\u4ee5\u7684\u8a71\u5c31\u5728\u7e7c\u7e8c\u7e2e\u77ed\uff0c\u4e0d\u53ef\u4ee5\u5c31\u8df3\u96e2\u8ff4\u5708 ans = min ( ans , end - beg ); //\u627e\u51fa\u6bd4\u8f03\u77ed\u7684\u9577\u5ea6 } printf ( back \\n ); window_left . push_back ( end ); } return ans == 0x7fffffff ? - 1 : ans ; } };","title":"PD 862. Shortest Subarray with Sum at Least K deque\u61c9\u7528"},{"location":"programming_practice/leetcode_OJ_WC/WC92/","text":"leetcode_OJ WC92 \u89e3\u984c\u5fc3\u5f97 Contest time: Jul 8,2018 \u7d00\u5ff5\u4e00\u4e0b\u96e3\u5f97\u6253\u9032\u524d10% PA. 868. Transpose Matrix \u6c42\u8f49\u7f6e\u77e9\u9663 \u601d\u8def: \u76f4\u63a5\u89e3\u5373\u53ef \u6ce8\u610f\u5148\u4ee5\u539f\u77e9\u9663\u6bd4\u8f03\u5927\u7684row or col(\u770b\u8ab0\u5927) \u958b\u4e00\u500b\u66ab\u6642\u5b58\u653e\u7528\u7684\uff0c\u4ee5\u514dsegfault\uff0c\u6700\u5f8c\u4e1f\u5230res\uff0c\u5176\u4e2d\u5927\u5c0f\u525b\u597d\u8ddf\u539f\u672c\u7684\u77e9\u9663\u662f\u5c0d\u7a31\u7684 \u5206\u6790: Time complexity = O(ROW * COL), Space complexity = O(ROW * COL) #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector vector int transpose ( vector vector int arr ) { vector vector int trans , res ; int big = max ( arr [ 0 ]. size (), arr . size ()); trans . resize ( big ); FORI ( trans . size ()) { trans [ i ]. resize ( big ); } cout 1 endl ; for ( int i = 0 ; i arr . size (); i ++ ) { for ( int j = 0 ; j arr [ 0 ]. size (); j ++ ) { trans [ j ][ i ] = arr [ i ][ j ]; } } cout 1 endl ; res . resize ( arr [ 0 ]. size ()); FORI ( res . size ()) { res [ i ]. resize ( arr . size ()); } cout 1 endl ; for ( int i = 0 ; i arr [ 0 ]. size (); i ++ ) { for ( int j = 0 ; j arr . size (); j ++ ) { res [ i ][ j ] = trans [ i ][ j ]; } } return res ; } }; PB. 866. Smallest Subtree with all the Deepest Nodes \u64c1\u6709\u6700\u6df1\u7bc0\u9ede\u7684\u6700\u5c0f\u5b50\u6a39(\u7d93\u5178\u984c\u76ee\uff0c\u53ef\u642d\u914dLCA\u4e26\u7528) \u601d\u8def: \u7528\u4e00\u500bstruct\u8868\u793a\u6bcf\u4e00\u500bnode\u7684\u7236\u7bc0\u9ede\u4ee5\u53ca\u4ed6\u7684\u6df1\u5ea6(annotated node)\uff0c\u63a5\u7684\u7528\u4e00\u500bmap\u5132\u5b58\u8a72\u7bc0\u9ede\u8207\u5176\u5c0d\u61c9\u8cc7\u8a0a\u7684\u95dc\u4fc2(\u56e0\u70ba\u5728\u4e8c\u5143\u6a39\uff0c\u7bc0\u9ede\u6578\u503c\u90fd\u662f\u55ae\u4e00\u7684\uff0c\u4e0d\u5fc5\u64d4\u5fc3\u91cd\u8907\u84cb\u904e\u7684\u554f\u984c) \u4f7f\u7528 dfs_information\u9019\u500b\u51fd\u6578\u4f86\u8d70\u8a2a\u6a39\uff0c\u540c\u6642\u5132\u5b58\u7bc0\u9ede\u7684\u7236\u89aa\u3001\u6df1\u5ea6\u8cc7\u8a0a\u3002 \u5c07\u8a72map\u8cbc\u5230\u7b2c\u4e8c\u500bmap\uff0c\u67e5\u627e\u6700\u6df1\u7684node\uff0c\u627e\u5b8c\u5f8c\u79fb\u9664\u4ed6(\u8981\u8cbc\u5230\u7b2c\u4e8c\u500bmap\u7684\u539f\u56e0\u5728\u65bc\uff0c\u5982\u679c\u7528\u539f\u672c\u7684map\uff0c\u79fb\u9664\u5f8c\u627e\u7b2c\u4e8c\u6df1\u7684\uff0c\u6700\u5f8c\u8981LCA\u6703\u55aa\u5931\u6700\u6df1\u7bc0\u9ede\u7684\u8cc7\u8a0a\uff0c\u6703\u932f) \u5982\u679c\u6709\u4e00\u500b\u4e00\u6a23\u6df1\u7684\u7bc0\u9ede(\u4e00\u6a23\u6700\u6df1)\u5247samllest subtree\u6703\u662f\u4ed6\u5011\u7684LCA(\u61c9\u8a72\u5f88\u597d\u60f3\u50cf\uff0c\u56e0\u70ba\u4e00\u6a23\u6df1\u7684\u95dc\u4fc2\uff0c\u52e2\u5fc5\u5f97\u627e\u4ed6\u5011\u7684LCA)\uff0c\u5982\u679c\u6700\u6df1\u7684\u7bc0\u9ede\u6c92\u6709\u4eba\u8ddf\u4ed6\u4e00\u6a23\u6df1\uff0c\u90a3\u5c31\u662f\u4ed6\u81ea\u5df1\u4f5c\u70ba\u6700\u5c0fsubtree \u5169\u500b\u6700\u6df1\u7684\u7bc0\u9ede\u5c31LCA\uff0c\u4e00\u500b\u5c31\u8fd4\u56de\u6700\u6df1\u7684 \u5206\u6790: Time complexity = O(N), Space complexity = O(N) (auxiliary map structure to store the information, where N is # of nodes of the binary tree) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : struct node_info { TreeNode * parent ; int depth ; }; map TreeNode * , node_info node_info_map ; map TreeNode * , node_info node_info_map_2 ; TreeNode * deepest_node ; TreeNode * deepest_2nd_node ; TreeNode * res ; TreeNode * subtreeWithAllDeepest ( TreeNode * root ) { if ( root - left == NULL root - right == NULL ) //if tree size is 1 just return the root { return root ; } dfs_information ( root , 0 ); //find the 1st deepest leaf int deepest = 0 ; deepest_node = deepest_2nd_node = NULL ; node_info_map_2 = node_info_map ; for ( map TreeNode * , node_info :: iterator it = node_info_map_2 . begin (); it != node_info_map_2 . end (); it ++ ) { if ( it - first - left == NULL it - first - right == NULL ) { // if ( it - second . depth deepest ) { deepest = it - second . depth ; deepest_node = it - first ; } } } node_info_map_2 . erase ( deepest_node ); //find the 2nd deepest leaf if same depth, then update the sceond one for the LCA for ( map TreeNode * , node_info :: iterator it = node_info_map_2 . begin (); it != node_info_map_2 . end (); it ++ ) { if ( it - first - left == NULL it - first - right == NULL ) { // if ( it - second . depth == deepest ) { deepest = it - second . depth ; deepest_2nd_node = it - first ; } } } //if no other deepest with same depth, do not do LCA, since the deepest_node ITSELF is the smallest subtree containing the deepest_node if ( deepest_2nd_node == NULL ) { return deepest_node ; } climbup_LCA ( deepest_node , deepest_2nd_node ); return res ; } void dfs_information ( TreeNode * root , int depth ) { if ( root == NULL ) { return ; } node_info_map [ root ]. depth = depth ; if ( root - left ) { node_info_map [ root - left ]. parent = root ; dfs_information ( root - left , depth + 1 ); } if ( root - right ) { node_info_map [ root - right ]. parent = root ; dfs_information ( root - right , depth + 1 ); } } void climbup_LCA ( TreeNode * node_p , TreeNode * node_q ) { if ( node_info_map [ node_p ]. parent == node_info_map [ node_q ]. parent ) { res = node_info_map [ node_p ]. parent ; return ; } else if ( node_info_map [ node_p ]. parent == node_q ) { res = node_q ; return ; } else if ( node_info_map [ node_q ]. parent == node_p ) { res = node_p ; return ; } else if ( node_info_map [ node_p ]. depth node_info_map [ node_q ]. depth ) //the one who is lower has to climb up one depth { climbup_LCA ( node_info_map [ node_p ]. parent , node_q ); } else { climbup_LCA ( node_p , node_info_map [ node_q ]. parent ); } } }; \u5728\u6b64\u4e5f\u984d\u5916\u5206\u4eabLCA\u7684\u89e3\u6cd5 \u7d93\u5178tree\u984c\u76ee\uff0c\u4e00\u5b9a\u8981\u6703\uff01\uff01\uff01\uff01\uff01 236. Lowest Common Ancestor of a Binary Tree \u601d\u8def: \u5132\u5b58\u6bcf\u500b\u7bc0\u9ede\u7684parent\u7bc0\u9ede\u8cc7\u8a0a\uff0c\u4e4b\u5f8c\u770b\u54ea\u500b\u7bc0\u9ede\u6bd4\u8f03\u6df1\uff0c\u5c31\u5f80parent\u7bc0\u9ede\u56de\u6eaf\uff0c\u6700\u5f8c\u770b\u5169\u500b\u7bc0\u9ede\u7684parent\u662f\u5426\u4e00\u6a23\uff0c\u5c31\u662f\u7b54\u6848\uff0c\u883b\u76f4\u89c0\u7684\uff0c\u756b\u500b\u5716\u5c31\u80fd\u60f3\u50cf\u3002 \u5206\u6790: Time complexity = O(N), Space complexity = O(N) (auxiliary map structure to store the information, where N is # of nodes of the binary tree) \u5fc3\u5f97: \u7528map\u4f86\u5132\u5b58\u7bc0\u9ede\u7684\u8cc7\u8a0a\u771f\u7684\u597d\u7528(\u56e0\u70baunique value\u7684\u95dc\u4fc2\uff0c\u5f62\u6210\u5f88\u597d\u7684node_value, node_information pair)\uff0c\u4ee5\u5f8c\u53ef\u4ee5\u591a\u7df4tree\u4e86 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : struct node_info { TreeNode * parent ; int depth ; }; map TreeNode * , node_info node_info_map ; TreeNode * res ; TreeNode * lowestCommonAncestor ( TreeNode * root , TreeNode * node_p , TreeNode * node_q ) { dfs_information ( root , 0 ); node_info_map [ root ]. parent = root ; //for the root itself without runtime error res = root ; //initialize climbup_LCA ( node_p , node_q ); return res ; } //traverse the tree first to find the child-parent pair void dfs_information ( TreeNode * root , int depth ) { if ( root == NULL ) { return ; } node_info_map [ root ]. depth = depth ; if ( root - left ) { node_info_map [ root - left ]. parent = root ; dfs_information ( root - left , depth + 1 ); } if ( root - right ) { node_info_map [ root - right ]. parent = root ; dfs_information ( root - right , depth + 1 ); } } //climb up to find the LCA, using depth comparison algorithm void climbup_LCA ( TreeNode * node_p , TreeNode * node_q ) { // if ( node_info_map [ node_p ]. parent == node_info_map [ node_q ]. parent ) { res = node_info_map [ node_p ]. parent ; return ; } else if ( node_info_map [ node_p ]. parent == node_q ) { res = node_q ; return ; } else if ( node_info_map [ node_q ]. parent == node_p ) { res = node_p ; return ; } else if ( node_info_map [ node_p ]. depth node_info_map [ node_q ]. depth ) //the one who is lower has to climb up one depth { climbup_LCA ( node_info_map [ node_p ]. parent , node_q ); } else { climbup_LCA ( node_p , node_info_map [ node_q ]. parent ); } } }; PC. 867. Prime Palindrome \u56de\u6587\u8cea\u6578 \u601d\u8def: \u7c21\u55ae\u4f86\u8aaa\u5c31\u53ea\u662f\u627e\u6709\u300e\u56de\u6587\u300f\u6027\u8cea\u7684\u690d\u6a39\uff0c\u7531\u65bc\u5076\u6578\u7684\u56de\u6587ABBCCBBA\u3001ABBA\u9664\u4e8611\u4ee5\u5916\u90fd\u662f11\u7684\u500d\u6578\uff0c\u56e0\u6b64\u53ef\u4ee5\u5ffd\u7565\u6389\u52a0\u5feb\u6642\u9593\u3002 \u5c0d\u65bc\u5927\u65bc\u4e5d\u767e\u842c\u7684\uff0c\u56e0\u70ba\u6e2c\u8cc7\u4e0a\u754c\u662f\u4e00\u5343\u842c\uff0c\u53ef\u4ee5\u7528OEIS\u6aa2\u6e2c \u88dc\u5145: \u5c0d\u65bc900\u842c\u4ee5\u4e0a\u7684\u6e2c\u8cc7\u600e\u9ebc\u6a23\u5c31\u662fTLE\uff0c\u5f8c\u4f86\u81ea\u5df1\u751f\u4e86\u4e00\u6b21\u6e2c\u8cc7\uff0c\u767c\u73fe900\u842c\u4ee5\u4e0a\u76f4\u52301000\u842c\uff0c\u6e2c\u8cc7\u4e0a\u754c\u7684\u53ea\u5269\u4e0b100030001\u9019\u500b\uff0c\u56e0\u6b64\u8d85\u904e\u90a3\u500bTLE\u7684\u6578\u5b57\uff0c\u6211\u9078\u64c7\u76f4\u63a5\u56de\u50b3100030001\uff0c\u7d50\u679c\u83ab\u540d\u5176\u5999\u5c31AC\u4e86@@\uff0c\u56e0\u6b64\u4e5f\u6709\u76f4\u63a5\u5217\u51faOEIS\u7248\u672c\u7684\u89e3\u6cd5(\u7b97\u662f\u6709\u9ede\u5077\u5403\u6b65)\uff0c\u8a73\u898b LeetCode\u8a0e\u8ad6\u4e32\u6211\u5beb\u7684\u9019\u7bc7\u6587\u7ae0 \u5206\u6790: Time complexity O(N * sqrt (N)), Space complexity O(1), where N is the magnitude of input. class Solution { public : int primePalindrome ( int num ) { if ( num == 1 ) { return 2 ; } else if ( num = 9989900 ) { return 100030001 ; } int flag = 0 , cnt = 2 ; while ( 1 ) { if ( cnt = num ) { if ( is_prime ( cnt )) { if ( is_palindrome ( cnt ) ) { break ; } } } cnt ++ ; } return cnt ; } bool is_prime ( int num ) { for ( int i = 2 ; i = sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { return 0 ; } } return 1 ; } bool is_palindrome ( int num ) { string str = to_string ( num ); string rev = str ; if ( num 11 str . size () % 2 == 0 ) { return 0 ; } reverse ( rev . begin (), rev . end ()); return str == rev ; } }; PD. 865. Shortest Path to Get All Keys \u9084\u6c92\u505a\uff0c\u597d\u50cf\u662fdijkstra\u7684\u8b8a\u5316\u984c\uff0c\u7a0b\u5ea6\u5c1a\u4e0d\u5920\uff0c\u4e4b\u5f8c\u518d\u4f86\u8a66\u8a66\u770b\u56c9:D","title":"WC92"},{"location":"programming_practice/leetcode_OJ_WC/WC92/#leetcode_oj-wc92","text":"Contest time: Jul 8,2018 \u7d00\u5ff5\u4e00\u4e0b\u96e3\u5f97\u6253\u9032\u524d10%","title":"leetcode_OJ WC92 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC92/#pa-868-transpose-matrix","text":"\u601d\u8def: \u76f4\u63a5\u89e3\u5373\u53ef \u6ce8\u610f\u5148\u4ee5\u539f\u77e9\u9663\u6bd4\u8f03\u5927\u7684row or col(\u770b\u8ab0\u5927) \u958b\u4e00\u500b\u66ab\u6642\u5b58\u653e\u7528\u7684\uff0c\u4ee5\u514dsegfault\uff0c\u6700\u5f8c\u4e1f\u5230res\uff0c\u5176\u4e2d\u5927\u5c0f\u525b\u597d\u8ddf\u539f\u672c\u7684\u77e9\u9663\u662f\u5c0d\u7a31\u7684 \u5206\u6790: Time complexity = O(ROW * COL), Space complexity = O(ROW * COL) #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : vector vector int transpose ( vector vector int arr ) { vector vector int trans , res ; int big = max ( arr [ 0 ]. size (), arr . size ()); trans . resize ( big ); FORI ( trans . size ()) { trans [ i ]. resize ( big ); } cout 1 endl ; for ( int i = 0 ; i arr . size (); i ++ ) { for ( int j = 0 ; j arr [ 0 ]. size (); j ++ ) { trans [ j ][ i ] = arr [ i ][ j ]; } } cout 1 endl ; res . resize ( arr [ 0 ]. size ()); FORI ( res . size ()) { res [ i ]. resize ( arr . size ()); } cout 1 endl ; for ( int i = 0 ; i arr [ 0 ]. size (); i ++ ) { for ( int j = 0 ; j arr . size (); j ++ ) { res [ i ][ j ] = trans [ i ][ j ]; } } return res ; } };","title":"PA. 868. Transpose Matrix \u6c42\u8f49\u7f6e\u77e9\u9663"},{"location":"programming_practice/leetcode_OJ_WC/WC92/#pb-866-smallest-subtree-with-all-the-deepest-nodes-lca","text":"\u601d\u8def: \u7528\u4e00\u500bstruct\u8868\u793a\u6bcf\u4e00\u500bnode\u7684\u7236\u7bc0\u9ede\u4ee5\u53ca\u4ed6\u7684\u6df1\u5ea6(annotated node)\uff0c\u63a5\u7684\u7528\u4e00\u500bmap\u5132\u5b58\u8a72\u7bc0\u9ede\u8207\u5176\u5c0d\u61c9\u8cc7\u8a0a\u7684\u95dc\u4fc2(\u56e0\u70ba\u5728\u4e8c\u5143\u6a39\uff0c\u7bc0\u9ede\u6578\u503c\u90fd\u662f\u55ae\u4e00\u7684\uff0c\u4e0d\u5fc5\u64d4\u5fc3\u91cd\u8907\u84cb\u904e\u7684\u554f\u984c) \u4f7f\u7528 dfs_information\u9019\u500b\u51fd\u6578\u4f86\u8d70\u8a2a\u6a39\uff0c\u540c\u6642\u5132\u5b58\u7bc0\u9ede\u7684\u7236\u89aa\u3001\u6df1\u5ea6\u8cc7\u8a0a\u3002 \u5c07\u8a72map\u8cbc\u5230\u7b2c\u4e8c\u500bmap\uff0c\u67e5\u627e\u6700\u6df1\u7684node\uff0c\u627e\u5b8c\u5f8c\u79fb\u9664\u4ed6(\u8981\u8cbc\u5230\u7b2c\u4e8c\u500bmap\u7684\u539f\u56e0\u5728\u65bc\uff0c\u5982\u679c\u7528\u539f\u672c\u7684map\uff0c\u79fb\u9664\u5f8c\u627e\u7b2c\u4e8c\u6df1\u7684\uff0c\u6700\u5f8c\u8981LCA\u6703\u55aa\u5931\u6700\u6df1\u7bc0\u9ede\u7684\u8cc7\u8a0a\uff0c\u6703\u932f) \u5982\u679c\u6709\u4e00\u500b\u4e00\u6a23\u6df1\u7684\u7bc0\u9ede(\u4e00\u6a23\u6700\u6df1)\u5247samllest subtree\u6703\u662f\u4ed6\u5011\u7684LCA(\u61c9\u8a72\u5f88\u597d\u60f3\u50cf\uff0c\u56e0\u70ba\u4e00\u6a23\u6df1\u7684\u95dc\u4fc2\uff0c\u52e2\u5fc5\u5f97\u627e\u4ed6\u5011\u7684LCA)\uff0c\u5982\u679c\u6700\u6df1\u7684\u7bc0\u9ede\u6c92\u6709\u4eba\u8ddf\u4ed6\u4e00\u6a23\u6df1\uff0c\u90a3\u5c31\u662f\u4ed6\u81ea\u5df1\u4f5c\u70ba\u6700\u5c0fsubtree \u5169\u500b\u6700\u6df1\u7684\u7bc0\u9ede\u5c31LCA\uff0c\u4e00\u500b\u5c31\u8fd4\u56de\u6700\u6df1\u7684 \u5206\u6790: Time complexity = O(N), Space complexity = O(N) (auxiliary map structure to store the information, where N is # of nodes of the binary tree) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : struct node_info { TreeNode * parent ; int depth ; }; map TreeNode * , node_info node_info_map ; map TreeNode * , node_info node_info_map_2 ; TreeNode * deepest_node ; TreeNode * deepest_2nd_node ; TreeNode * res ; TreeNode * subtreeWithAllDeepest ( TreeNode * root ) { if ( root - left == NULL root - right == NULL ) //if tree size is 1 just return the root { return root ; } dfs_information ( root , 0 ); //find the 1st deepest leaf int deepest = 0 ; deepest_node = deepest_2nd_node = NULL ; node_info_map_2 = node_info_map ; for ( map TreeNode * , node_info :: iterator it = node_info_map_2 . begin (); it != node_info_map_2 . end (); it ++ ) { if ( it - first - left == NULL it - first - right == NULL ) { // if ( it - second . depth deepest ) { deepest = it - second . depth ; deepest_node = it - first ; } } } node_info_map_2 . erase ( deepest_node ); //find the 2nd deepest leaf if same depth, then update the sceond one for the LCA for ( map TreeNode * , node_info :: iterator it = node_info_map_2 . begin (); it != node_info_map_2 . end (); it ++ ) { if ( it - first - left == NULL it - first - right == NULL ) { // if ( it - second . depth == deepest ) { deepest = it - second . depth ; deepest_2nd_node = it - first ; } } } //if no other deepest with same depth, do not do LCA, since the deepest_node ITSELF is the smallest subtree containing the deepest_node if ( deepest_2nd_node == NULL ) { return deepest_node ; } climbup_LCA ( deepest_node , deepest_2nd_node ); return res ; } void dfs_information ( TreeNode * root , int depth ) { if ( root == NULL ) { return ; } node_info_map [ root ]. depth = depth ; if ( root - left ) { node_info_map [ root - left ]. parent = root ; dfs_information ( root - left , depth + 1 ); } if ( root - right ) { node_info_map [ root - right ]. parent = root ; dfs_information ( root - right , depth + 1 ); } } void climbup_LCA ( TreeNode * node_p , TreeNode * node_q ) { if ( node_info_map [ node_p ]. parent == node_info_map [ node_q ]. parent ) { res = node_info_map [ node_p ]. parent ; return ; } else if ( node_info_map [ node_p ]. parent == node_q ) { res = node_q ; return ; } else if ( node_info_map [ node_q ]. parent == node_p ) { res = node_p ; return ; } else if ( node_info_map [ node_p ]. depth node_info_map [ node_q ]. depth ) //the one who is lower has to climb up one depth { climbup_LCA ( node_info_map [ node_p ]. parent , node_q ); } else { climbup_LCA ( node_p , node_info_map [ node_q ]. parent ); } } }; \u5728\u6b64\u4e5f\u984d\u5916\u5206\u4eabLCA\u7684\u89e3\u6cd5 \u7d93\u5178tree\u984c\u76ee\uff0c\u4e00\u5b9a\u8981\u6703\uff01\uff01\uff01\uff01\uff01 236. Lowest Common Ancestor of a Binary Tree \u601d\u8def: \u5132\u5b58\u6bcf\u500b\u7bc0\u9ede\u7684parent\u7bc0\u9ede\u8cc7\u8a0a\uff0c\u4e4b\u5f8c\u770b\u54ea\u500b\u7bc0\u9ede\u6bd4\u8f03\u6df1\uff0c\u5c31\u5f80parent\u7bc0\u9ede\u56de\u6eaf\uff0c\u6700\u5f8c\u770b\u5169\u500b\u7bc0\u9ede\u7684parent\u662f\u5426\u4e00\u6a23\uff0c\u5c31\u662f\u7b54\u6848\uff0c\u883b\u76f4\u89c0\u7684\uff0c\u756b\u500b\u5716\u5c31\u80fd\u60f3\u50cf\u3002 \u5206\u6790: Time complexity = O(N), Space complexity = O(N) (auxiliary map structure to store the information, where N is # of nodes of the binary tree) \u5fc3\u5f97: \u7528map\u4f86\u5132\u5b58\u7bc0\u9ede\u7684\u8cc7\u8a0a\u771f\u7684\u597d\u7528(\u56e0\u70baunique value\u7684\u95dc\u4fc2\uff0c\u5f62\u6210\u5f88\u597d\u7684node_value, node_information pair)\uff0c\u4ee5\u5f8c\u53ef\u4ee5\u591a\u7df4tree\u4e86 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : struct node_info { TreeNode * parent ; int depth ; }; map TreeNode * , node_info node_info_map ; TreeNode * res ; TreeNode * lowestCommonAncestor ( TreeNode * root , TreeNode * node_p , TreeNode * node_q ) { dfs_information ( root , 0 ); node_info_map [ root ]. parent = root ; //for the root itself without runtime error res = root ; //initialize climbup_LCA ( node_p , node_q ); return res ; } //traverse the tree first to find the child-parent pair void dfs_information ( TreeNode * root , int depth ) { if ( root == NULL ) { return ; } node_info_map [ root ]. depth = depth ; if ( root - left ) { node_info_map [ root - left ]. parent = root ; dfs_information ( root - left , depth + 1 ); } if ( root - right ) { node_info_map [ root - right ]. parent = root ; dfs_information ( root - right , depth + 1 ); } } //climb up to find the LCA, using depth comparison algorithm void climbup_LCA ( TreeNode * node_p , TreeNode * node_q ) { // if ( node_info_map [ node_p ]. parent == node_info_map [ node_q ]. parent ) { res = node_info_map [ node_p ]. parent ; return ; } else if ( node_info_map [ node_p ]. parent == node_q ) { res = node_q ; return ; } else if ( node_info_map [ node_q ]. parent == node_p ) { res = node_p ; return ; } else if ( node_info_map [ node_p ]. depth node_info_map [ node_q ]. depth ) //the one who is lower has to climb up one depth { climbup_LCA ( node_info_map [ node_p ]. parent , node_q ); } else { climbup_LCA ( node_p , node_info_map [ node_q ]. parent ); } } };","title":"PB. 866. Smallest Subtree with all the Deepest Nodes \u64c1\u6709\u6700\u6df1\u7bc0\u9ede\u7684\u6700\u5c0f\u5b50\u6a39(\u7d93\u5178\u984c\u76ee\uff0c\u53ef\u642d\u914dLCA\u4e26\u7528)"},{"location":"programming_practice/leetcode_OJ_WC/WC92/#pc867-prime-palindrome","text":"\u601d\u8def: \u7c21\u55ae\u4f86\u8aaa\u5c31\u53ea\u662f\u627e\u6709\u300e\u56de\u6587\u300f\u6027\u8cea\u7684\u690d\u6a39\uff0c\u7531\u65bc\u5076\u6578\u7684\u56de\u6587ABBCCBBA\u3001ABBA\u9664\u4e8611\u4ee5\u5916\u90fd\u662f11\u7684\u500d\u6578\uff0c\u56e0\u6b64\u53ef\u4ee5\u5ffd\u7565\u6389\u52a0\u5feb\u6642\u9593\u3002 \u5c0d\u65bc\u5927\u65bc\u4e5d\u767e\u842c\u7684\uff0c\u56e0\u70ba\u6e2c\u8cc7\u4e0a\u754c\u662f\u4e00\u5343\u842c\uff0c\u53ef\u4ee5\u7528OEIS\u6aa2\u6e2c \u88dc\u5145: \u5c0d\u65bc900\u842c\u4ee5\u4e0a\u7684\u6e2c\u8cc7\u600e\u9ebc\u6a23\u5c31\u662fTLE\uff0c\u5f8c\u4f86\u81ea\u5df1\u751f\u4e86\u4e00\u6b21\u6e2c\u8cc7\uff0c\u767c\u73fe900\u842c\u4ee5\u4e0a\u76f4\u52301000\u842c\uff0c\u6e2c\u8cc7\u4e0a\u754c\u7684\u53ea\u5269\u4e0b100030001\u9019\u500b\uff0c\u56e0\u6b64\u8d85\u904e\u90a3\u500bTLE\u7684\u6578\u5b57\uff0c\u6211\u9078\u64c7\u76f4\u63a5\u56de\u50b3100030001\uff0c\u7d50\u679c\u83ab\u540d\u5176\u5999\u5c31AC\u4e86@@\uff0c\u56e0\u6b64\u4e5f\u6709\u76f4\u63a5\u5217\u51faOEIS\u7248\u672c\u7684\u89e3\u6cd5(\u7b97\u662f\u6709\u9ede\u5077\u5403\u6b65)\uff0c\u8a73\u898b LeetCode\u8a0e\u8ad6\u4e32\u6211\u5beb\u7684\u9019\u7bc7\u6587\u7ae0 \u5206\u6790: Time complexity O(N * sqrt (N)), Space complexity O(1), where N is the magnitude of input. class Solution { public : int primePalindrome ( int num ) { if ( num == 1 ) { return 2 ; } else if ( num = 9989900 ) { return 100030001 ; } int flag = 0 , cnt = 2 ; while ( 1 ) { if ( cnt = num ) { if ( is_prime ( cnt )) { if ( is_palindrome ( cnt ) ) { break ; } } } cnt ++ ; } return cnt ; } bool is_prime ( int num ) { for ( int i = 2 ; i = sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { return 0 ; } } return 1 ; } bool is_palindrome ( int num ) { string str = to_string ( num ); string rev = str ; if ( num 11 str . size () % 2 == 0 ) { return 0 ; } reverse ( rev . begin (), rev . end ()); return str == rev ; } };","title":"PC.867. Prime Palindrome\u56de\u6587\u8cea\u6578"},{"location":"programming_practice/leetcode_OJ_WC/WC92/#pd865-shortest-path-to-get-all-keys","text":"\u9084\u6c92\u505a\uff0c\u597d\u50cf\u662fdijkstra\u7684\u8b8a\u5316\u984c\uff0c\u7a0b\u5ea6\u5c1a\u4e0d\u5920\uff0c\u4e4b\u5f8c\u518d\u4f86\u8a66\u8a66\u770b\u56c9:D","title":"PD.865. Shortest Path to Get All Keys"},{"location":"programming_practice/leetcode_OJ_WC/WC93/","text":"leetcode_OJ WC93 \u89e3\u984c\u5fc3\u5f97 Contest time: Jul 15, 2018 PA. 868. Binary Gap \u7c21\u55ae\u96d9\u6307\u6a19 \u601d\u8def\uff1a\u76f4\u63a5\u89e3\u5373\u53ef\uff0c\u7528\u96d9\u6307\u6a19\u6e2c\u91cf\u5169\u500b\u9130\u8fd1\u76841\u7684\u8ddd\u96e2(\u4e0d\u4e00\u5b9a\u8981\u76f8\u9130\uff0c\u984c\u76ee\u89e3\u8aaa\u6709\u9ede\u4e0d\u6e05\u695a)\uff0c\u5176\u4e2d\u7684to_binary\u662f\u5be6\u7528\u7684\u6578\u5b57\u8f49\u4e8c\u9032\u4f4d\u5b57\u4e32\u7684\u65b9\u6cd5\u3002 \u5206\u6790 Time complexity = O(N), Space complexity (with auxilary string structure to store the binary number) = O(N) #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : int binaryGap ( int num ) { string binstr = to_binary ( num ); int maxd = 0 ; for ( int i = 0 ; i binstr . size () - 1 ; i ++ ) { if ( binstr [ i ] == 1 ) { for ( int j = i + 1 ; j binstr . size (); j ++ ) { if ( binstr [ j ] == 1 ) { maxd = max ( maxd , j - i ); i = j ; break ; } } } } return maxd ; } string to_binary ( int num ) { string res ; while ( num ) { if ( num 1 ) { res += 1 ; } else { res += 0 ; } num /= 2 ; } reverse ( res . begin (), res . end ()); return res ; } }; PB. 869. Reordered Power of 2 STL\u6d3b\u7528 \u984c\u610f\uff1a\u4e00\u500b\u6578\u5b57\u7684\u5404\u500b\u4f4d\u6578\uff0c\u7d93\u904e\u6392\u5217\u7d44\u5408(\u5305\u62ec\u4e0d\u91cd\u6392)\u5f8c\uff0c\u5176\u7d44\u5408\u662f\u5426\u6709\u53ef\u80fd\u6210\u70ba\u4e8c\u7684\u6b21\u65b9\uff0c\u4f8b\u598246\u91cd\u6392\u8b8a\u621064\u5247\u7b26\u5408\uff0c1232\u4e0d\u7ba1\u600e\u6392\u90fd\u4e0d\u884c \u601d\u8def\uff1a \u5148\u5c07\u5df2\u7d93\u662f\u4e8c\u7684\u500d\u6578\uff0c\u4e0d\u9700\u91cd\u6392\u7684\u76f4\u63a5\u56de\u50b3true\u3002 \u63a5\u8457\u9032\u5165while\u8ff4\u5708\u5c07\u6bcf\u4e00\u4f4d\u6578push\u9032\u5165vector\u4e2d\uff0c\u7528algorithm std\u4e2d\u7684next_permutation\u6392\u51fa\u6240\u6709\u53ef\u80fd\uff0c\u518d\u628a\u5b83\u4e32\u8d77\u4f86\uff0c\u4ee5.c_str()\uff0c\u52a0\u4e0aatoi\u7684\u65b9\u5f0f\u50b3\u5165is_pow2\u5224\u65b7\uff0c\u82e5\u6709\u7b26\u5408\u5247\u76f4\u63a5\u56de\u50b3true\uff0c\u6700\u5f8c\u90fd\u6c92\u6709\u5247\u56de\u50b3false\u3002 num (num - 1) == 0 \u7684\u8a71\u5c31\u662f\u4e8c\u7684\u6b21\u65b9\uff0c\u633a\u5be6\u7528\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u900f\u904e\u4e8c\u9032\u4f4d\u5236\u60f3\u4e00\u4e0b\u70ba\u4ec0\u9ebc \u5206\u6790 Time complexity = O(logN!??)( \u4e0d\u78ba\u5b9a\uff0c\u5f85\u78ba\u8a8d\uff0c\u5e0c\u671b\u6709\u5148\u9032\u80fd\u8cdc\u6559\uff0c\u7e3d\u89ba\u5f97\u4e0d\u592a\u53ef\u80fd\u5230fraction\uff0c\u4e0d\u7136\u6c92\u6709\u6a5f\u6703ac ), Space complexity (with auxilary string structure to store the number) = O(N) #define pb push_back class Solution { public : bool reorderedPowerOf2 ( int num ) { if ( num = 1 num = 10 ) { if ( is_pow2 ( num )) { return true ; } return false ; } else if ( is_pow2 ( num )) //original order { return true ; } vector int dgt ; while ( num ) { dgt . pb ( num % 10 ); num /= 10 ; } sort ( dgt . begin (), dgt . end ()); int sz = dgt . size (), judge = 0 ; string str ; do { str = ; for ( int i = 0 ; i sz ; i ++ ) { str += ( dgt [ i ] + 0 ); } cout str endl ; judge = atoi ( str . c_str ()); if ( is_pow2 ( judge )) { return true ; } } while ( next_permutation ( dgt . begin (), dgt . end ())); return false ; } bool is_pow2 ( int num ) { if (( num ( num - 1 )) == 0 ) { return true ; } return false ; } }; PC. 870. Advantage Shuffle \u8caa\u5fc3\u7b97\u6cd5 \u984c\u89e3\u8acb \u898b\u6b64 (\u96d9\u8a9e\u7248\u672c\u540c\u6b65\u520a\u8f09\u65bc\u8a0e\u8ad6\u5340) PD. 871. Minimum Number of Refueling Stops priority_queue\u56de\u6eaf\u6cd5 \u984c\u610f: \u7d66\u5b9a\u76ee\u6a19\u8ddd\u96e2\u8207\u6700\u521d\u7684\u6c7d\u6cb9\u91cf\uff0c\u5176\u4e2d\u52a0\u6cb9\u7ad9\u6703\u5728\u67d0\u4e9b\u8ddd\u96e2\uff0c\u7d93\u904e\u7684\u6642\u5019\u53ef\u4ee5\u5c07\u52a0\u6cb9\u7684\u6c7d\u6cb9\u5168\u90e8\u79fb\u8f49\u904e\u4f86\uff0c\u6b64\u6642\u52a0\u6cb9\u7ad9\u7684\u6c7d\u6cb9\u5c07\u6703\u7528\u7f44(\u5168\u6709\u5168\u7121)\uff0c\u4e26\u4e14\u4e00\u516c\u91cc\u7684\u884c\u8eca\u6703\u6d88\u8017\u6c7d\u6cb9\u4e00\u516c\u5347(\u6cb9\u8017\u771f\u721b?)\uff0c\u554f\u627e\u51fa\u6700\u5c11\u5bb6\u7531\u6b21\u6578\u540c\u6642\u53c8\u80fd\u62b5\u9054\u76ee\u6a19\uff0c\u82e5\u7121\u6cd5\u5247\u56de\u50b3-1 WA\u601d\u8def: \u9019\u984c\u7576\u4e0b\u6c92\u6709\u89e3\u51fa\u53ea\u6709WA\uff0c\u770b\u4e86\u63d0\u793a\u89e3\u51fa\uff0c\u6bd4\u8f03\u96e3\u3002\u4ee5\u4e0b\u662f\u539f\u672c\u932f\u8aa4\u7684\u4f5c\u6cd5 \u9996\u5148\u6bcf\u4e00\u6b21\u90fd\u76e1\u91cf\u8d70\u5230\u6700\u9060\u7684\u52a0\u6cb9\u7ad9\u3002 \u518d\u770b\u7576\u524d\u53ef\u4ee5\u627e(\u4e5f\u5c31\u662f\u8ddd\u96e2station position - my position = current gas fuel)\u7684\u52a0\u6cb9\u7ad9\u4e2d\uff0c\u80fd\u88dc\u5145\u6700\u591a\u7684(\u5305\u62ec\u5f80\u56de\u8d70) \u4f46\u8caa\u5fc3\u7b97\u6cd5\u5ffd\u7565\u4e86: \u5982\u679c\u8d70\u4f86\u9019\u88e1\u524d\uff0c\u4e8b\u5148\u88dc\u5145\u904e\u5e7e\u500b\u52a0\u6cb9\u7ad9\uff0c\u96d6\u6703\u9020\u6210\u52a0\u6cb9\u6b21\u6578\u8b8a\u591a\uff0c\u4f46\u4e5f\u53ef\u80fd\u66f4\u9060\uff0c\u4f8b\u5982 target = 200 startFuel = 100, stations = [[10, 60],[100, 80]]\uff0c \u932f\u8aa4\u7b97\u6cd5\u6703\u5148\u8d70\u5230 100 \u52a0\u6cb9\u7ad9 \u4e4b\u5f8c\u53c8\u9006\u56de10\u52a0\u6cb9\u7ad9\u53bb\u52a0\u6cb9 \u5c0e\u81f4\u6700\u5f8c\u6c7d\u6cb9\u91cf\u8b8a\u621050(80-(100-10)+60) \u54ea\u90fd\u4e0d\u80fd\u53bb \u7f3a\u5931\u5206\u6790: \u5be6\u969b\u4e0a\uff0c\u4e0a\u65b9\u7684\u7b2c\u4e09\u9ede\u60f3\u6cd5\u662f\u932f\u7684\uff0c\u56e0\u70ba\u6839\u672c\u4e0d\u662f\u7528\u56de\u53bb\u52a0\u6cb9\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u8d70\u5230\u6b64\uff0c\u518d\u52a0\u4e0a\"\u7576\u521d\u5982\u679c\u7d93\u904e\u8a72\u52a0\u6cb9\u7ad9\u6240\u80fd\u5ef6\u4f38\u7684\u8ddd\u96e2\" /* wrong answer testcase102 : 1000 299 [[13,21],[26,115],[100,47],[225,99],[299,141],[444,198],[608,190],[636,157],[647,255],[841,123]] */ class Solution { public : int minRefuelStops ( int target , int startFuel , vector vector int stations ) { if ( startFuel = target ) { return 0 ; } else if ( stations . size () == 0 ) { return ( startFuel = target ) ? 0 : - 1 ; } int dp [ 500 ][ 500 ] = { 0 }, cur_fuel = startFuel , car_pos = 0 , refuel = 0 ; int best_choice = 0 , max_refuel = 0 , stations_pos = 0 , can_reach_next = 1 ; int closest_next_pos = 0 , closest_next_dist = INT_MAX ; while ( 1 ) { printf ( car_pos %d fuel_now %d \\n , car_pos , cur_fuel ); if ( car_pos + cur_fuel = target || car_pos = target ) //should have the highest priority { printf ( reach target! \\n ); break ; } can_reach_next = 0 ; //search the next, closest stations to go, reachable or not (check the requirement of break if unreachable) closest_next_pos = 0 ; closest_next_dist = INT_MAX ; for ( int i = 0 ; i stations . size (); i ++ ) { if ( abs ( stations [ i ][ 0 ] - car_pos ) closest_next_dist stations [ i ][ 1 ] 0 /*still useable*/ ) { closest_next_dist = stations [ i ][ 0 ]; closest_next_pos = i ; } } if ( stations [ closest_next_pos ][ 0 ] - car_pos cur_fuel || closest_next_dist == INT_MAX ) //unracehable with current fuel { printf ( unreachable to all \\n ); return - 1 ; } max_refuel = stations_pos = 0 ; for ( int i = 0 ; i stations . size (); i ++ ) //find all reachable stations with max fuel to refill { if ( /*stations[i][0] - car_pos = 0*/ cur_fuel = abs ( stations [ i ][ 0 ] - car_pos ) /*reachable with current fuel*/ stations [ i ][ 1 ] max_refuel /*bigger fuel slot*/ ) { printf ( i %d i0 %d i1 %d ok \\n , i , stations [ i ][ 0 ], stations [ i ][ 1 ]); max_refuel = stations [ i ][ 1 ]; stations_pos = i ; } } cur_fuel -= abs ( stations [ stations_pos ][ 0 ] - car_pos ); //drive car_pos = stations [ stations_pos ][ 0 ]; //reach cur_fuel += stations [ stations_pos ][ 1 ]; //refill // stations[stations_pos][0] = INT_MAX; //marked such station as used to prevent duplicate using stations [ stations_pos ][ 1 ] = 0 ; //used out such fuel refuel ++ ; printf ( select stations_pos %d, car_pos is now %d, car_fuel is now %d \\n , stations_pos , car_pos , cur_fuel ); } return refuel ; } }; \u6539\u6b63\u5f8c AC\u601d\u8def: \u63a1\u7528 priority_queue\u512a\u5148\u968a\u5217\u56de\u6eaf \u9996\u5148\u4e00\u76f4\u8d70 \u76f4\u5230\u5728\u67d0\u500b\u52a0\u6cb9\u7ad9\u505c\u4e0b\u6642\uff0c\u71c3\u6599\u5df2\u7d93\u5448\u73fe\u8ca0\u50b5\uff0c\u9019\u6642\u5019\u56de\u6eaf\u4e4b\u524d\u8d70\u904e\u7684\u52a0\u6cb9\u7ad9\uff0c\u4f9d\u64da\u512a\u5148\u968a\u5217\u5148\u627e\u51fa\u6700\u591a\u6cb9\u91cf\u7684\u52a0\u6cb9\u7ad9\u3002 \u9014\u4e2d\u82e5 \u7576\u524d\u7684\u4f4d\u7f6e\u52a0\u4e0a\u6c7d\u6cb9\u91cf\u8db3\u4ee5\u8d70\u5230\u7d42\u9ede \u5247\u76f4\u63a5\u8df3\u51fa\u56de\u50b3\u7d50\u679c(\u53e6\u5916\uff0c\u82e5\u56de\u6eaf\u4e5f\u7121\u6cd5\u88dc\u8db3\u8ca0\u50b5\u7684\u71c3\u6599\uff0c\u4ee3\u8868\u7121\u8ad6\u5982\u4f55\u90fd\u627e\u4e0d\u5230\uff0c\u56e0\u70ba\u5373\u4fbf\u52a0\u4e86\u6cb9\u4e5f\u7121\u6cd5\u524d\u9032\uff0c\u4ee3\u8868\u5230\u4e0d\u4e86target)\uff0c \u8d70\u5b8c\u6240\u6709\u52a0\u6cb9\u7ad9\u5f8c\u82e5\u9084\u6c92\u6709\u5230\u7d42\u9ede\uff0c\u5247\u7e7c\u7e8c\u56de\u6eaf\u4e4b\u524d\u8d70\u904e\u7684\u52a0\u6cb9\u7ad9\uff0c\u6700\u5f8c\u5728\u4e00\u6a23\u770b \u7576\u524d\u7684\u4f4d\u7f6e\u52a0\u4e0a\u6c7d\u6cb9\u91cf\u8db3\u4ee5\u8d70\u5230\u7d42\u9ede \u6c7a\u5b9a\u662f\u5426\u56de\u50b3-1\u3002 \u81ea\u5df1\u8dd1\u904e\u4e00\u4fbf\u6703\u60f3\u5f97\u6bd4\u8f03\u6e05\u695a\uff0c\u4f8b\u5982\u65b9\u624d\u7684target = 200 startFuel = 100, stations = [[10, 60],[100, 80]] \u9996\u5148\u4e00\u8def\u8d70\u5230\u5c3e\u7aef \u6b64\u6642\u6cb9\u91cf\u5269\u4e0b0 \u4f4d\u7f6e\u5728100\uff0c\u958b\u59cb\u56de\u6eaf \u9996\u5148\u5c07[100, 80]pop \u51fa\u4f86\uff0c\u4ee3\u8868\u6211\u5982\u679c\u5728100\u52a0\u6cb9\u53ef\u4ee5\u518d\u5f9e100\u8d7080\uff0c\u5f97\u5230180\uff0c\u6b64\u6642\u52a0\u6cb9\u6b21\u65781\uff1b\u518d\u4f86\u5c07[10, 60]pop \u51fa\u4f86\uff0c\u4ee3\u8868\u6211 \u7576\u521d\u5982\u679c \u6709\u572810\u52a0\u6cb9\uff0c\u6211\u53ef\u4ee5\u66f4\u518d\u5ef6\u4f3860KM\uff0c\u65bc\u662f\u80fd\u8d70\u5230240 \u6539\u9032\u6982\u5ff5: \u8d70\u5230\u5f8c\u767c\u73fe\u6c92\u6cb9\uff0c\u56de\u6eaf\u4e0d\u662f\u76f4\u63a5\u8d70\u53bb\u8a72\u52a0\u6cb9\u7ad9\uff0c\u800c\u662f\u52a0\u4e0a\u8a72\u52a0\u6cb9\u7ad9\u6211\u7576\u521d\u5982\u679c\u8d70\u904e\uff0c\u6703\u518d\u5ef6\u4f38\u591a\u5c11\u3002 \u5206\u6790: Time complexity O(N log N) (log N for priority_queue structure maintenance, heap), Space complexity O(N), (the priority_queue) \u5fc3\u5f97: \u9019\u984c\u8b93\u6211\u5b78\u6703\u5ba2\u88fd\u5316\u512a\u5148\u968a\u5217\u7684\u5beb\u6cd5\uff0c\u56e0\u70ba\u8981\u81ea\u8a02\u4e0a\u9762\u662f\u6700\u5927\u7684\u6240\u4ee5\u5beb\u4e86compare \u88e1\u9762\u8981\u653eoperator\u591a\u8f09\u624d\u53ef\u4ee5\u7528\uff0c\u4e0d\u7136\u6703\u6709priority_queue argument\u7684compile error (\u8a73\u60c5\u53ef\u4ee5\u81ea\u884cgoogle\uff0c\u6211\u4e5f\u662f\u67e5\u904e\u624d\u767c\u73fe\u9019\u500b\u65b0\u5beb\u6cd5) /* AC version, try using the priority queue. we keep traversing through the stations without refuling, that means try our best with current fuel. Once we traverse to a gas station with the negative fuel, we refill the tank with the gas station we have visited before(pushed in to the traversed_stations priority queue) to check if we can reach even further if we refueled before using the retroactive method. ---------------------------------------------------------------------------------------------------------------- Please try the following testcases for understanding how the code runs 1000 299 [[13,21],[26,115],[100,47],[225,99],[299,141],[444,198],[608,190],[636,157],[647,255],[841,123]] */ class Solution { public : struct mycompare { bool operator ()( pair int , int p1 , pair int , int p2 ) //pair first for station position and second for how much gas does a staion hace { return p1 . second p2 . second ; //sort descending to get the largest element first } }; int minRefuelStops ( int target , int startFuel , vector vector int stations ) { if ( stations . size () == 0 ) { return ( startFuel = target ) ? 0 : - 1 ; } priority_queue pair int , int , vector pair int , int , mycompare traversed_stations ; //logN query int cur_fuel = startFuel , car_pos = 0 , has_chance_to_refuel = 1 , refuel = 0 ; for ( int i = 0 ; i stations . size (); i ++ ) { cur_fuel -= ( stations [ i ][ 0 ] - car_pos ); if ( car_pos + cur_fuel = target ) { break ; } while ( ! traversed_stations . empty () cur_fuel 0 ) //traverse to certain gas station but we ran out of fuel, that we have to trace back to see if we can refuel before { cur_fuel += traversed_stations . top (). second ; refuel ++ ; traversed_stations . pop (); } if ( cur_fuel 0 ) { return - 1 ; } car_pos = stations [ i ][ 0 ]; traversed_stations . push ( make_pair ( stations [ i ][ 0 ], stations [ i ][ 1 ]));; has_chance_to_refuel = 0 ; } //if hasn t reach the target yet while ( ! traversed_stations . empty () car_pos + cur_fuel target ) //traverse to certain gas station but we ran out of fuel, that we have to trace back to see if we can refuel before { cur_fuel += traversed_stations . top (). second ; // car_pos = traversed_stations.top().first; refuel ++ ; traversed_stations . pop (); } return ( car_pos + cur_fuel = target ) ? refuel : - 1 ; //able to reach the target destination or not } };","title":"WC93"},{"location":"programming_practice/leetcode_OJ_WC/WC93/#leetcode_oj-wc93","text":"Contest time: Jul 15, 2018","title":"leetcode_OJ WC93 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC93/#pa-868-binary-gap","text":"\u601d\u8def\uff1a\u76f4\u63a5\u89e3\u5373\u53ef\uff0c\u7528\u96d9\u6307\u6a19\u6e2c\u91cf\u5169\u500b\u9130\u8fd1\u76841\u7684\u8ddd\u96e2(\u4e0d\u4e00\u5b9a\u8981\u76f8\u9130\uff0c\u984c\u76ee\u89e3\u8aaa\u6709\u9ede\u4e0d\u6e05\u695a)\uff0c\u5176\u4e2d\u7684to_binary\u662f\u5be6\u7528\u7684\u6578\u5b57\u8f49\u4e8c\u9032\u4f4d\u5b57\u4e32\u7684\u65b9\u6cd5\u3002 \u5206\u6790 Time complexity = O(N), Space complexity (with auxilary string structure to store the binary number) = O(N) #define FORI(n) for(int i = 0; i n; ++ i) class Solution { public : int binaryGap ( int num ) { string binstr = to_binary ( num ); int maxd = 0 ; for ( int i = 0 ; i binstr . size () - 1 ; i ++ ) { if ( binstr [ i ] == 1 ) { for ( int j = i + 1 ; j binstr . size (); j ++ ) { if ( binstr [ j ] == 1 ) { maxd = max ( maxd , j - i ); i = j ; break ; } } } } return maxd ; } string to_binary ( int num ) { string res ; while ( num ) { if ( num 1 ) { res += 1 ; } else { res += 0 ; } num /= 2 ; } reverse ( res . begin (), res . end ()); return res ; } };","title":"PA. 868. Binary Gap \u7c21\u55ae\u96d9\u6307\u6a19"},{"location":"programming_practice/leetcode_OJ_WC/WC93/#pb-869-reordered-power-of-2-stl","text":"\u984c\u610f\uff1a\u4e00\u500b\u6578\u5b57\u7684\u5404\u500b\u4f4d\u6578\uff0c\u7d93\u904e\u6392\u5217\u7d44\u5408(\u5305\u62ec\u4e0d\u91cd\u6392)\u5f8c\uff0c\u5176\u7d44\u5408\u662f\u5426\u6709\u53ef\u80fd\u6210\u70ba\u4e8c\u7684\u6b21\u65b9\uff0c\u4f8b\u598246\u91cd\u6392\u8b8a\u621064\u5247\u7b26\u5408\uff0c1232\u4e0d\u7ba1\u600e\u6392\u90fd\u4e0d\u884c \u601d\u8def\uff1a \u5148\u5c07\u5df2\u7d93\u662f\u4e8c\u7684\u500d\u6578\uff0c\u4e0d\u9700\u91cd\u6392\u7684\u76f4\u63a5\u56de\u50b3true\u3002 \u63a5\u8457\u9032\u5165while\u8ff4\u5708\u5c07\u6bcf\u4e00\u4f4d\u6578push\u9032\u5165vector\u4e2d\uff0c\u7528algorithm std\u4e2d\u7684next_permutation\u6392\u51fa\u6240\u6709\u53ef\u80fd\uff0c\u518d\u628a\u5b83\u4e32\u8d77\u4f86\uff0c\u4ee5.c_str()\uff0c\u52a0\u4e0aatoi\u7684\u65b9\u5f0f\u50b3\u5165is_pow2\u5224\u65b7\uff0c\u82e5\u6709\u7b26\u5408\u5247\u76f4\u63a5\u56de\u50b3true\uff0c\u6700\u5f8c\u90fd\u6c92\u6709\u5247\u56de\u50b3false\u3002 num (num - 1) == 0 \u7684\u8a71\u5c31\u662f\u4e8c\u7684\u6b21\u65b9\uff0c\u633a\u5be6\u7528\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u900f\u904e\u4e8c\u9032\u4f4d\u5236\u60f3\u4e00\u4e0b\u70ba\u4ec0\u9ebc \u5206\u6790 Time complexity = O(logN!??)( \u4e0d\u78ba\u5b9a\uff0c\u5f85\u78ba\u8a8d\uff0c\u5e0c\u671b\u6709\u5148\u9032\u80fd\u8cdc\u6559\uff0c\u7e3d\u89ba\u5f97\u4e0d\u592a\u53ef\u80fd\u5230fraction\uff0c\u4e0d\u7136\u6c92\u6709\u6a5f\u6703ac ), Space complexity (with auxilary string structure to store the number) = O(N) #define pb push_back class Solution { public : bool reorderedPowerOf2 ( int num ) { if ( num = 1 num = 10 ) { if ( is_pow2 ( num )) { return true ; } return false ; } else if ( is_pow2 ( num )) //original order { return true ; } vector int dgt ; while ( num ) { dgt . pb ( num % 10 ); num /= 10 ; } sort ( dgt . begin (), dgt . end ()); int sz = dgt . size (), judge = 0 ; string str ; do { str = ; for ( int i = 0 ; i sz ; i ++ ) { str += ( dgt [ i ] + 0 ); } cout str endl ; judge = atoi ( str . c_str ()); if ( is_pow2 ( judge )) { return true ; } } while ( next_permutation ( dgt . begin (), dgt . end ())); return false ; } bool is_pow2 ( int num ) { if (( num ( num - 1 )) == 0 ) { return true ; } return false ; } };","title":"PB. 869. Reordered Power of 2 STL\u6d3b\u7528"},{"location":"programming_practice/leetcode_OJ_WC/WC93/#pc870-advantage-shuffle","text":"\u984c\u89e3\u8acb \u898b\u6b64 (\u96d9\u8a9e\u7248\u672c\u540c\u6b65\u520a\u8f09\u65bc\u8a0e\u8ad6\u5340)","title":"PC.870. Advantage Shuffle \u8caa\u5fc3\u7b97\u6cd5"},{"location":"programming_practice/leetcode_OJ_WC/WC93/#pd-871-minimum-number-of-refueling-stops-priority_queue","text":"\u984c\u610f: \u7d66\u5b9a\u76ee\u6a19\u8ddd\u96e2\u8207\u6700\u521d\u7684\u6c7d\u6cb9\u91cf\uff0c\u5176\u4e2d\u52a0\u6cb9\u7ad9\u6703\u5728\u67d0\u4e9b\u8ddd\u96e2\uff0c\u7d93\u904e\u7684\u6642\u5019\u53ef\u4ee5\u5c07\u52a0\u6cb9\u7684\u6c7d\u6cb9\u5168\u90e8\u79fb\u8f49\u904e\u4f86\uff0c\u6b64\u6642\u52a0\u6cb9\u7ad9\u7684\u6c7d\u6cb9\u5c07\u6703\u7528\u7f44(\u5168\u6709\u5168\u7121)\uff0c\u4e26\u4e14\u4e00\u516c\u91cc\u7684\u884c\u8eca\u6703\u6d88\u8017\u6c7d\u6cb9\u4e00\u516c\u5347(\u6cb9\u8017\u771f\u721b?)\uff0c\u554f\u627e\u51fa\u6700\u5c11\u5bb6\u7531\u6b21\u6578\u540c\u6642\u53c8\u80fd\u62b5\u9054\u76ee\u6a19\uff0c\u82e5\u7121\u6cd5\u5247\u56de\u50b3-1 WA\u601d\u8def: \u9019\u984c\u7576\u4e0b\u6c92\u6709\u89e3\u51fa\u53ea\u6709WA\uff0c\u770b\u4e86\u63d0\u793a\u89e3\u51fa\uff0c\u6bd4\u8f03\u96e3\u3002\u4ee5\u4e0b\u662f\u539f\u672c\u932f\u8aa4\u7684\u4f5c\u6cd5 \u9996\u5148\u6bcf\u4e00\u6b21\u90fd\u76e1\u91cf\u8d70\u5230\u6700\u9060\u7684\u52a0\u6cb9\u7ad9\u3002 \u518d\u770b\u7576\u524d\u53ef\u4ee5\u627e(\u4e5f\u5c31\u662f\u8ddd\u96e2station position - my position = current gas fuel)\u7684\u52a0\u6cb9\u7ad9\u4e2d\uff0c\u80fd\u88dc\u5145\u6700\u591a\u7684(\u5305\u62ec\u5f80\u56de\u8d70) \u4f46\u8caa\u5fc3\u7b97\u6cd5\u5ffd\u7565\u4e86: \u5982\u679c\u8d70\u4f86\u9019\u88e1\u524d\uff0c\u4e8b\u5148\u88dc\u5145\u904e\u5e7e\u500b\u52a0\u6cb9\u7ad9\uff0c\u96d6\u6703\u9020\u6210\u52a0\u6cb9\u6b21\u6578\u8b8a\u591a\uff0c\u4f46\u4e5f\u53ef\u80fd\u66f4\u9060\uff0c\u4f8b\u5982 target = 200 startFuel = 100, stations = [[10, 60],[100, 80]]\uff0c \u932f\u8aa4\u7b97\u6cd5\u6703\u5148\u8d70\u5230 100 \u52a0\u6cb9\u7ad9 \u4e4b\u5f8c\u53c8\u9006\u56de10\u52a0\u6cb9\u7ad9\u53bb\u52a0\u6cb9 \u5c0e\u81f4\u6700\u5f8c\u6c7d\u6cb9\u91cf\u8b8a\u621050(80-(100-10)+60) \u54ea\u90fd\u4e0d\u80fd\u53bb \u7f3a\u5931\u5206\u6790: \u5be6\u969b\u4e0a\uff0c\u4e0a\u65b9\u7684\u7b2c\u4e09\u9ede\u60f3\u6cd5\u662f\u932f\u7684\uff0c\u56e0\u70ba\u6839\u672c\u4e0d\u662f\u7528\u56de\u53bb\u52a0\u6cb9\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u8d70\u5230\u6b64\uff0c\u518d\u52a0\u4e0a\"\u7576\u521d\u5982\u679c\u7d93\u904e\u8a72\u52a0\u6cb9\u7ad9\u6240\u80fd\u5ef6\u4f38\u7684\u8ddd\u96e2\" /* wrong answer testcase102 : 1000 299 [[13,21],[26,115],[100,47],[225,99],[299,141],[444,198],[608,190],[636,157],[647,255],[841,123]] */ class Solution { public : int minRefuelStops ( int target , int startFuel , vector vector int stations ) { if ( startFuel = target ) { return 0 ; } else if ( stations . size () == 0 ) { return ( startFuel = target ) ? 0 : - 1 ; } int dp [ 500 ][ 500 ] = { 0 }, cur_fuel = startFuel , car_pos = 0 , refuel = 0 ; int best_choice = 0 , max_refuel = 0 , stations_pos = 0 , can_reach_next = 1 ; int closest_next_pos = 0 , closest_next_dist = INT_MAX ; while ( 1 ) { printf ( car_pos %d fuel_now %d \\n , car_pos , cur_fuel ); if ( car_pos + cur_fuel = target || car_pos = target ) //should have the highest priority { printf ( reach target! \\n ); break ; } can_reach_next = 0 ; //search the next, closest stations to go, reachable or not (check the requirement of break if unreachable) closest_next_pos = 0 ; closest_next_dist = INT_MAX ; for ( int i = 0 ; i stations . size (); i ++ ) { if ( abs ( stations [ i ][ 0 ] - car_pos ) closest_next_dist stations [ i ][ 1 ] 0 /*still useable*/ ) { closest_next_dist = stations [ i ][ 0 ]; closest_next_pos = i ; } } if ( stations [ closest_next_pos ][ 0 ] - car_pos cur_fuel || closest_next_dist == INT_MAX ) //unracehable with current fuel { printf ( unreachable to all \\n ); return - 1 ; } max_refuel = stations_pos = 0 ; for ( int i = 0 ; i stations . size (); i ++ ) //find all reachable stations with max fuel to refill { if ( /*stations[i][0] - car_pos = 0*/ cur_fuel = abs ( stations [ i ][ 0 ] - car_pos ) /*reachable with current fuel*/ stations [ i ][ 1 ] max_refuel /*bigger fuel slot*/ ) { printf ( i %d i0 %d i1 %d ok \\n , i , stations [ i ][ 0 ], stations [ i ][ 1 ]); max_refuel = stations [ i ][ 1 ]; stations_pos = i ; } } cur_fuel -= abs ( stations [ stations_pos ][ 0 ] - car_pos ); //drive car_pos = stations [ stations_pos ][ 0 ]; //reach cur_fuel += stations [ stations_pos ][ 1 ]; //refill // stations[stations_pos][0] = INT_MAX; //marked such station as used to prevent duplicate using stations [ stations_pos ][ 1 ] = 0 ; //used out such fuel refuel ++ ; printf ( select stations_pos %d, car_pos is now %d, car_fuel is now %d \\n , stations_pos , car_pos , cur_fuel ); } return refuel ; } }; \u6539\u6b63\u5f8c AC\u601d\u8def: \u63a1\u7528 priority_queue\u512a\u5148\u968a\u5217\u56de\u6eaf \u9996\u5148\u4e00\u76f4\u8d70 \u76f4\u5230\u5728\u67d0\u500b\u52a0\u6cb9\u7ad9\u505c\u4e0b\u6642\uff0c\u71c3\u6599\u5df2\u7d93\u5448\u73fe\u8ca0\u50b5\uff0c\u9019\u6642\u5019\u56de\u6eaf\u4e4b\u524d\u8d70\u904e\u7684\u52a0\u6cb9\u7ad9\uff0c\u4f9d\u64da\u512a\u5148\u968a\u5217\u5148\u627e\u51fa\u6700\u591a\u6cb9\u91cf\u7684\u52a0\u6cb9\u7ad9\u3002 \u9014\u4e2d\u82e5 \u7576\u524d\u7684\u4f4d\u7f6e\u52a0\u4e0a\u6c7d\u6cb9\u91cf\u8db3\u4ee5\u8d70\u5230\u7d42\u9ede \u5247\u76f4\u63a5\u8df3\u51fa\u56de\u50b3\u7d50\u679c(\u53e6\u5916\uff0c\u82e5\u56de\u6eaf\u4e5f\u7121\u6cd5\u88dc\u8db3\u8ca0\u50b5\u7684\u71c3\u6599\uff0c\u4ee3\u8868\u7121\u8ad6\u5982\u4f55\u90fd\u627e\u4e0d\u5230\uff0c\u56e0\u70ba\u5373\u4fbf\u52a0\u4e86\u6cb9\u4e5f\u7121\u6cd5\u524d\u9032\uff0c\u4ee3\u8868\u5230\u4e0d\u4e86target)\uff0c \u8d70\u5b8c\u6240\u6709\u52a0\u6cb9\u7ad9\u5f8c\u82e5\u9084\u6c92\u6709\u5230\u7d42\u9ede\uff0c\u5247\u7e7c\u7e8c\u56de\u6eaf\u4e4b\u524d\u8d70\u904e\u7684\u52a0\u6cb9\u7ad9\uff0c\u6700\u5f8c\u5728\u4e00\u6a23\u770b \u7576\u524d\u7684\u4f4d\u7f6e\u52a0\u4e0a\u6c7d\u6cb9\u91cf\u8db3\u4ee5\u8d70\u5230\u7d42\u9ede \u6c7a\u5b9a\u662f\u5426\u56de\u50b3-1\u3002 \u81ea\u5df1\u8dd1\u904e\u4e00\u4fbf\u6703\u60f3\u5f97\u6bd4\u8f03\u6e05\u695a\uff0c\u4f8b\u5982\u65b9\u624d\u7684target = 200 startFuel = 100, stations = [[10, 60],[100, 80]] \u9996\u5148\u4e00\u8def\u8d70\u5230\u5c3e\u7aef \u6b64\u6642\u6cb9\u91cf\u5269\u4e0b0 \u4f4d\u7f6e\u5728100\uff0c\u958b\u59cb\u56de\u6eaf \u9996\u5148\u5c07[100, 80]pop \u51fa\u4f86\uff0c\u4ee3\u8868\u6211\u5982\u679c\u5728100\u52a0\u6cb9\u53ef\u4ee5\u518d\u5f9e100\u8d7080\uff0c\u5f97\u5230180\uff0c\u6b64\u6642\u52a0\u6cb9\u6b21\u65781\uff1b\u518d\u4f86\u5c07[10, 60]pop \u51fa\u4f86\uff0c\u4ee3\u8868\u6211 \u7576\u521d\u5982\u679c \u6709\u572810\u52a0\u6cb9\uff0c\u6211\u53ef\u4ee5\u66f4\u518d\u5ef6\u4f3860KM\uff0c\u65bc\u662f\u80fd\u8d70\u5230240 \u6539\u9032\u6982\u5ff5: \u8d70\u5230\u5f8c\u767c\u73fe\u6c92\u6cb9\uff0c\u56de\u6eaf\u4e0d\u662f\u76f4\u63a5\u8d70\u53bb\u8a72\u52a0\u6cb9\u7ad9\uff0c\u800c\u662f\u52a0\u4e0a\u8a72\u52a0\u6cb9\u7ad9\u6211\u7576\u521d\u5982\u679c\u8d70\u904e\uff0c\u6703\u518d\u5ef6\u4f38\u591a\u5c11\u3002 \u5206\u6790: Time complexity O(N log N) (log N for priority_queue structure maintenance, heap), Space complexity O(N), (the priority_queue) \u5fc3\u5f97: \u9019\u984c\u8b93\u6211\u5b78\u6703\u5ba2\u88fd\u5316\u512a\u5148\u968a\u5217\u7684\u5beb\u6cd5\uff0c\u56e0\u70ba\u8981\u81ea\u8a02\u4e0a\u9762\u662f\u6700\u5927\u7684\u6240\u4ee5\u5beb\u4e86compare \u88e1\u9762\u8981\u653eoperator\u591a\u8f09\u624d\u53ef\u4ee5\u7528\uff0c\u4e0d\u7136\u6703\u6709priority_queue argument\u7684compile error (\u8a73\u60c5\u53ef\u4ee5\u81ea\u884cgoogle\uff0c\u6211\u4e5f\u662f\u67e5\u904e\u624d\u767c\u73fe\u9019\u500b\u65b0\u5beb\u6cd5) /* AC version, try using the priority queue. we keep traversing through the stations without refuling, that means try our best with current fuel. Once we traverse to a gas station with the negative fuel, we refill the tank with the gas station we have visited before(pushed in to the traversed_stations priority queue) to check if we can reach even further if we refueled before using the retroactive method. ---------------------------------------------------------------------------------------------------------------- Please try the following testcases for understanding how the code runs 1000 299 [[13,21],[26,115],[100,47],[225,99],[299,141],[444,198],[608,190],[636,157],[647,255],[841,123]] */ class Solution { public : struct mycompare { bool operator ()( pair int , int p1 , pair int , int p2 ) //pair first for station position and second for how much gas does a staion hace { return p1 . second p2 . second ; //sort descending to get the largest element first } }; int minRefuelStops ( int target , int startFuel , vector vector int stations ) { if ( stations . size () == 0 ) { return ( startFuel = target ) ? 0 : - 1 ; } priority_queue pair int , int , vector pair int , int , mycompare traversed_stations ; //logN query int cur_fuel = startFuel , car_pos = 0 , has_chance_to_refuel = 1 , refuel = 0 ; for ( int i = 0 ; i stations . size (); i ++ ) { cur_fuel -= ( stations [ i ][ 0 ] - car_pos ); if ( car_pos + cur_fuel = target ) { break ; } while ( ! traversed_stations . empty () cur_fuel 0 ) //traverse to certain gas station but we ran out of fuel, that we have to trace back to see if we can refuel before { cur_fuel += traversed_stations . top (). second ; refuel ++ ; traversed_stations . pop (); } if ( cur_fuel 0 ) { return - 1 ; } car_pos = stations [ i ][ 0 ]; traversed_stations . push ( make_pair ( stations [ i ][ 0 ], stations [ i ][ 1 ]));; has_chance_to_refuel = 0 ; } //if hasn t reach the target yet while ( ! traversed_stations . empty () car_pos + cur_fuel target ) //traverse to certain gas station but we ran out of fuel, that we have to trace back to see if we can refuel before { cur_fuel += traversed_stations . top (). second ; // car_pos = traversed_stations.top().first; refuel ++ ; traversed_stations . pop (); } return ( car_pos + cur_fuel = target ) ? refuel : - 1 ; //able to reach the target destination or not } };","title":"PD. 871. Minimum Number of Refueling Stops priority_queue\u56de\u6eaf\u6cd5"},{"location":"programming_practice/leetcode_OJ_WC/WC94/","text":"leetcode_OJ WC94 \u89e3\u984c\u5fc3\u5f97 + \u304a\u307e\u3051 Contest time: Jul 22, 2018 PA. Leaf-similar Trees \u6a39\u6c34\u984c \u984c\u610f\uff1a\u5f9e\u5de6\u5230\u53f3\u8449\u5b50\u9806\u5e8f\u4e00\u6a23\u7684\u6a39 \u601d\u8def\uff1aDFS\u4e00\u904d\uff0c\u653e\u5165\u8449\u5b50\u5373\u53ef \u5206\u6790\uff1aTime complexity O(N), Space complexity O(N), (auxiliary vector to store the leaf data) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #define pb push_back class Solution { public : vector int l1 ; vector int l2 ; bool leafSimilar ( TreeNode * root1 , TreeNode * root2 ) { get_leaf ( root1 , l1 ); get_leaf ( root2 , l2 ); return l1 == l2 ; } void get_leaf ( TreeNode * root , vector int lv ) { if ( root == NULL ) { return ; } else if ( root - left == NULL root - right == NULL ) { lv . pb ( root - val ); } if ( root - left ) { get_leaf ( root - left , lv ); } if ( root - right ) { get_leaf ( root - right , lv ); } } }; PB. 874. Walking Robot Simulation \u81ea\u5df1\u6bd4\u8f03\u5f31\u7684\u6a21\u64ec\u984c \u984c\u610f\uff1a\u6a21\u64ec\u6a5f\u5668\u4eba\u8d70\u8def\uff0c\u9047\u5230\u969c\u7919\u7269\u5ea7\u6a19\u5247\u6703\u505c\u5728\u4ed6 \u524d\u4e00\u500b\u4f4d\u7f6e \uff08\u4f8b\u5982\u969c\u7919\u7269\u7684X=6\uff0c\u5247\u9047\u5230\u969c\u7919\u7269\u81f3\u591a\u884c\u8d70\u5230X=5) \u89e3\u6cd5\u4e00 \u601d\u8def\uff1a\u7528\u6578\u5b78\u786c\u5e79\uff0c\u78ba\u8a8d\u56db\u500b\u65b9\u5411\u770b\u5f80\u54ea\u8d70\uff0c\u4f8b\u5982\u671d\u5411+y\u7684\u65b9\u5411(\u5411\u5317)\uff0c\u5247\u4ee5\u4e0b\u689d\u4ef6\u6210\u7acb\u4ee3\u8868\u649e\u4e0a\u969c\u7919\u7269 posx == obstacles[j][0] posy obstacles[j][1] posy + commands[i] = obstacles[j][1] \u8868\u793aX\u8ef8\u4e00\u81f4\uff0c\u5f80\u5317\u8d70\u525b\u597d\u649e\u4e0a\uff0c\u518d\u628aY\u8ef8\u8a2d\u70ba\u969c\u7919\u7269\u524d\u4e00\u500b\u5373\u53ef\u3002 \u5206\u6790\uff1aTime complexity O(N + K)where N, K = # of commands and obstacles respectively. Space complexity O(1) class Solution { public : int robotSim ( vector int commands , vector vector int obstacles ) { int posx = 0 , posy = 0 , dir = 0 , ans = 0 ; //0 north 1 east 2 south 3 west int cango = 1 ; for ( int i = 0 ; i commands . size (); i ++ ) { if ( commands [ i ] == - 1 ) { dir = ( dir + 1 ) % 4 ; } else if ( commands [ i ] == - 2 ) { if ( dir == 0 ) { dir = 3 ; } else { dir -- ; dir %= 4 ; } } else { cango = 1 ; for ( int j = 0 ; j obstacles . size (); j ++ ) { switch ( dir ) { case 0 : { if ( posx == obstacles [ j ][ 0 ]) { if ( posy obstacles [ j ][ 1 ] posy + commands [ i ] = obstacles [ j ][ 1 ]) { posy = obstacles [ j ][ 1 ] - 1 ; cango = 0 ; } } break ; } case 1 : { if ( posy == obstacles [ j ][ 1 ]) { if ( posx obstacles [ j ][ 0 ] posx + commands [ i ] = obstacles [ j ][ 0 ]) { posx = obstacles [ j ][ 0 ] - 1 ; cango = 0 ; } } break ; } case 2 : { if ( posx == obstacles [ j ][ 0 ]) { if ( posy obstacles [ j ][ 1 ] posy - commands [ i ] = obstacles [ j ][ 1 ]) { posy = obstacles [ j ][ 1 ] + 1 ; cango = 0 ; } } break ; } case 3 : { if ( posy == obstacles [ j ][ 1 ]) { if ( posx obstacles [ j ][ 0 ] posx - commands [ i ] = obstacles [ j ][ 0 ]) { posx = obstacles [ j ][ 0 ] + 1 ; cango = 0 ; } } break ; } cout endl ; default : break ; } if ( cango == 0 ) { break ; } } if ( cango ) { switch ( dir ) { case 0 : { posy += commands [ i ]; break ; } case 1 : { posx += commands [ i ]; break ; } case 2 : { posy -= commands [ i ]; break ; } case 3 : { posx -= commands [ i ]; break ; } default : break ; } } } ans = max ( ans , posx * posx + posy * posy ); } return ans ; } }; \u89e3\u6cd5\u4e8c \u601d\u8def\uff1a\u7528set\u5b58\u969c\u7919\u7269\uff0c\u6a21\u64ec\u56db\u65b9\u4f4d\uff0cdx dy\uff0c\u5317\u6771\u5357\u897f\uff0c\u7528dir\u8b8a\u6578\u642d\u914dmod4\u4f86\u505a\u8f49\u5411\u7684\u52d5\u4f5c\uff0c\u6bcf\u6b21\u5411\u6307\u5b9a\u7684\u79fb\u52d5\u65b9\u5411\u8d70\u4e00\u55ae\u4f4d\uff0c\u4e26\u4e14\u6aa2\u67e5\u7576\u524d\u4f4d\u7f6e\u662f\u5426\u5b58\u5728\u65bc\u969c\u7919\u7269\u7684set\u4e2d\uff0c\u4fbf\u6703\u81ea\u7136\u800c\u7136\u8d70\u5230\u969c\u7919\u7269\u524d\u505c\u4e0b\u3002 \u5206\u6790\uff1aTime complexity O(N + K)where N, K = # of commands and obstacles respectively. Space complexity O(K), use a set to store the positions of obstacles. class Solution { public : int dx [ 4 ] = { 0 , 1 , 0 , - 1 }; int dy [ 4 ] = { 1 , 0 , - 1 , 0 }; int robotSim ( vector int commands , vector vector int obstacles ) { int posx = 0 , posy = 0 , dir = 0 , ans = 0 , tmpx = 0 , tmpy = 0 ; //0 north 1 east 2 south 3 west int cango = 1 ; set pair int , int obst_set ; for ( auto it : obstacles ) { obst_set . insert ( make_pair ( it [ 0 ], it [ 1 ])); } for ( int i = 0 ; i commands . size (); i ++ ) { if ( commands [ i ] == - 1 ) { dir = ( dir + 1 ) % 4 ; } else if ( commands [ i ] == - 2 ) { if ( dir == 0 ) { dir = 3 ; } else { dir -- ; dir %= 4 ; } } else { for ( int j = 0 ; j commands [ i ] ; j ++ ) //move grid one by one { tmpx = posx + dx [ dir ]; tmpy = posy + dy [ dir ]; if ( obst_set . find ( make_pair ( tmpx , tmpy )) != obst_set . end ()) { break ; } else { posx = tmpx ; posy = tmpy ; } } } ans = max ( ans , posx * posx + posy * posy ); } return ans ; } }; PC. 875. Koko Eating Bananas \u4e8c\u5206\u641c \u984c\u610f\uff1a\u7334\u5b50\u5403\u9999\u8549\uff0c\u4e00\u5c0f\u6642\u5403K\u500b\uff0c\u9664\u4e0d\u76e1\u4e5f\u7b97\u4e00\u5c0f\u6642\uff0c\u6709\u6578\u5806\u9999\u8549\uff0c\u5f9e\u7b2c\u4e00\u5806\u958b\u59cb\u98df\u7528\uff0c\u8b66\u885b\u6703\u5728H\u6642\u9593\u5f8c\u56de\u4f86\uff0c\u5426\u5247\u7334\u5b50\u6703\u88ab\u6293\u5305\uff0c\u554f\u6700\u5c0f\u7684K\u70ba\u4f55\u3002 TLE\u601d\u8def\uff1a \u8b66\u885b\u53ef\u80fd\u5f88\u4e45\u624d\u56de\u4f86(H\u5927\uff0cK\u52e2\u5fc5\u5c31\u53ef\u4ee5\u5f88\u5c0f)\u6216\u76f8\u53cd\uff0c\u56e0\u6b64 \u6c7a\u5b9a\u5f9e\u6700\u5927\u7684\u6642\u9593\uff081e9\uff09\u964d\u4e0b\uff0c\u4ee5\u53ca\u5f9e0\u4e0a\u5347\uff0c\u540c\u6642\u770b\u9019\u5169\u7a2e\u98df\u7528\u901f\u5ea6\u662f\u5426\u903e\u6642 mxm\u5f9e1e9\u964d\u4e0b(\u4e00\u5b9a\u5403\u5f97\u5b8c\uff0c\u6642\u9593\u903e\u6642\u5c07flg\u8a2d1\u4ee3\u8868\u627e\u5230\u80fd\u98df\u7528\u901f\u5ea6K\u7684\u4e0a\u754c)/zr\u5f9e\u96f6\u958b\u59cb\u7b97\uff0c\u7576\u4e0d\u6703\u903e\u6642(\u56e0\u70ba\u5f9e\u96f6\u958b\u59cb\u7b97\uff0c\u4e0d\u6703\u903e\u6642\u4ee3\u8868\u627e\u5230\u6700\u5c11)\uff0c\u4ee3\u8868\u627e\u5230K\u7684\u4e0b\u754c\u3002 \u7f3a\u5931\u5206\u6790\uff1a\u82e5\u98df\u7528\u901f\u5ea6\u8da8\u65bc1e9\u7684\u4e2d\u9593\uff0c\u5247\u5f9e\u982d\u5c3e\u8d70\u8981\u76f8\u7576\u4e45\uff0c\u5373\u4fbf\u4e00\u6b21\u8d70\u96d9\u5411\uff0c\u662f\u6545\u61c9\u8a72\u7528\u4e8c\u5206\u641c\u5c0b\uff0c\u6bcf\u6b21\u5207\u534a\u770b\u6642\u9593\u4e0a\u4e0b\u754c\u7dda\u4e2d\u4f4d\u6578\u662f\u5426\u8d95\u5f97\u53ca\u98df\u7528\u5b8c\u7562\u3002 \u5206\u6790\uff1aTime complexity O(N^2), Space complexity O(1) \u4ee5\u4e0b\u70baTLE\u7684\u7a0b\u5f0f\u78bc class Solution { public : int minEatingSpeed ( vector int pls , int hr ) { int mxm = 1e9 , minn = 0 ; int zr = 1 ; int tmp_time = 0 ; int flg = 0 , flg2 = 0 ; while ( 1 ) { //cnt down from max tmp_time = 0 ; if ( ! flg ) { for ( auto j : pls ) { tmp_time += ceil (( float ) (( float ) j / ( float ) mxm )); } mxm -- ; } if ( tmp_time hr ) { flg = 1 ; } //cnt up from min tmp_time = 0 ; if ( ! flg2 ) { for ( auto j : pls ) { tmp_time += ceil (( float ) (( float ) j / ( float ) zr )); } zr ++ ; } if ( tmp_time hr ) { flg2 = 1 ; } if ( flg flg2 ) { break ; } if ( zr = mxm ) { break ; } } return zr mxm ? mxm + 2 : zr + 2 ; } }; \u6539\u9032\u601d\u8def\uff1a\u4e8c\u5206\u641c\u5c0b \u5206\u6790\uff1aTime complexity O(N log K) where N is the number of piles and K is the maximum size of a pile(binary search according to pile size to determine the eating speed and each round in testing we have to run through the whole pile to sum up the time = sum(pile[i] / current eating speed)) Space complexity O(1) //binary search class Solution { public : int minEatingSpeed ( vector int pls , int hr ) { int mxm = 1e9 , minn = 1 , mid = 0 , ans = 1e9 ; while ( minn mxm ) { int tmp_time = 0 ; //count the time for current eating speed K mid = ( mxm + minn ) / 2 ; for ( auto j : pls ) { tmp_time += ceil ((( float ) j / ( float ) mid )); } if ( tmp_time hr ) //cannot finish before guard back, should eat faster { minn = mid + 1 ; } else //can finish before guard back, may eat slower { mxm = mid ; ans = min ( ans , mid ); } } return ans ; } }; PD. 873. Length of Longest Fibonacci Subsequence LIS \u7684\u8cbb\u6ce2\u90a3\u5951\u7248\u672c \u984c\u610f\uff1a\u4e00\u6a23\u7d66\u4e00\u500b\u56b4\u683c\u589e\u7684\u5e8f\u5217\uff0c\u554f\u6700\u9577\u56b4\u683c\u589e\u7684\u8cbb\u6ce2\u90a3\u5951\u5b50\u5e8f\u5217 TLE\u601d\u8def\uff1a \u7a0d\u5fae\u512a\u5316\u7684\u66b4\u529b\u89e3\uff0c\u9996\u5148\u5c07\u8cbb\u6c0f\u6578\u5217\u4e09\u9805\u5b9a\u597d\u3002 \u63a5\u8457\u770b\u73fe\u5728\u4e00(i) \u4e8c(j) \u9805\u76ee\u52a0\u7e3d\u662f\u5426\u80fd\u5927\u65bc\u7b49\u65bcj + 1(\u56e0\u70ba\u56b4\u683c\u589e\uff0c\u5c0f\u65bc\u5c31\u6c92\u6a5f\u6703\u5f9e\u6b64\u9ede\u51fa\u767c\u5f62\u6210\u8cbb\u6c0f\u6578\u5217\uff0c\u4f8b\u59821 2 5 9 14 .... \u4fbf\u4e0d\u53ef\u80fd\u5f9e1\u70ba\u8d77\u9ede\uff0c\u56e0\u70ba1 + 2 5) \u82e5\u5927\u65bc j + 1\uff0c\u5247\u6301\u7e8c\u641c\u7d22j + 1\u4e4b\u5f8c\u7684\u5e8f\u5217\uff0c\u4e26\u4e14 \u4e09\u500b\u6578\u5b57\u4e00\u7d44\u79fb\u52d5 \uff0c\u5217\u51fa\u7b2c\u4e09\u9805\u9810\u671f\u6578\u503c thr_expected \uff0c\u7b26\u5408 arr[k] \u5c31\u6301\u7e8c\u5f80\u5f8c\u8d70\u4e26\u4e14\u905e\u589e(\u4e09\u9805\u4e26\u4e0d\u4e00\u5b9a\u8981\u6bd7\u9130\uff0c\u56e0\u6b64thr_expected\u7b26\u5408\u7684\u6642\u5019\uff0c\u53ea\u8981\u5411\u5f8c\u79fb\u52d5\u5373\u53ef) \u4f8b\u5982 1 2 3 4 5 6 8 10 14 \u5f9e 1(fir) 2(sec) 3(thr_expected) - (4\u88ab\u8df3\u6389\uff0c\u56e0\u70ba arr[3] != thr_expected) 2(fir) 3(sec) 5(thr_expected) - 3(fir) 5(sec) 8(thr_expected)... \u6700\u5f8c\u770b\u9577\u5ea6\u662f\u5426\u5927\u65bc\u4e8c\u78ba\u8a8d\u6709\u8cbb\u6c0f\u5b50\u5e8f\u5217\uff0c\u7121\u5247\u56de\u50b30 \u7f3a\u5931\u5206\u6790\uff1aO(N^3)\u592a\u66b4\u529b\uff0c\u5728\u67e5\u627e thr_expected \u5be6\u969b\u4e0a\u53ef\u4ee5\u7528unordered_set\u52a0\u901f(\u5132\u5b58\u6574\u4efdarray)\uff0c\u5c07\u5e73\u5747\u7dda\u6027\u7684\u6642\u9593\u512a\u5316\u70ba\u5e38\u6578(unordered_set worst = linear, average = constant) \u5206\u6790\uff1aTime complexity O(N^3), Space complexity O(1) class Solution { public : int lenLongestFibSubseq ( vector int arr ) { int fir = arr [ 0 ], sec = arr [ 1 ], thr_expected = 0 , res = 0 , cur_len ; for ( int i = 0 ; i arr . size () - 2 ; i ++ ) { for ( int j = i + 1 ; j arr . size () - 1 ; j ++ ) { if ( arr [ i ] + arr [ j ] = arr [ j + 1 ]) { fir = arr [ i ]; sec = arr [ j ]; thr_expected = arr [ i ] + arr [ j ]; cur_len = 2 ; for ( int k = j + 1 ; k arr . size (); k ++ ) { if ( thr_expected == arr [ k ]) { fir = sec ; sec = thr_expected ; thr_expected = fir + sec ; cur_len ++ ; res = max ( cur_len , res ); } } } } } return res == 2 ? 0 : res ; } }; \u6539\u9032\u601d\u8def\uff1a\u5c07\u67e5\u8a62\u7684\u7d50\u69cb\u512a\u5316\u70baunordered_map(\u5be6\u969b\u4e0amap\u4e5f\u884c\uff0c\u4f46\u6211\u5011\u4e0d\u5728\u610f\u9806\u5e8f\uff0c\u6c92\u5dee) \u5206\u6790\uff1aTime complexity O(N^2), Space complexity O(N) class Solution { public : int lenLongestFibSubseq ( vector int arr ) { int fir = arr [ 0 ], sec = arr [ 1 ], thr_expected = 0 , res = 0 , cur_len ; unordered_set int myset ( arr . begin (), arr . end ()); for ( int i = 0 ; i arr . size () - 2 ; i ++ ) { for ( int j = i + 1 ; j arr . size () - 1 ; j ++ ) { if ( arr [ i ] + arr [ j ] = arr [ j + 1 ]) { fir = arr [ i ]; sec = arr [ j ]; thr_expected = arr [ i ] + arr [ j ]; cur_len = 2 ; while ( myset . find ( thr_expected ) != myset . end ()) //keep going the rest in the array { fir = sec ; sec = thr_expected ; thr_expected = fir + sec ; cur_len ++ ; res = max ( cur_len , res ); } } } } return res == 2 ? 0 : res ; } }; ---\u3000 \u304a\u307e\u3051 856. Score of Parentheses stack\u61c9\u7528 \u984c\u610f\uff1a\u7d66\u4e00\u5806\u5e73\u8861\u597d\u7684\u62ec\u865f\uff0c () = 1, (()) = 2, ()() = 2, (()(()) = 2 * ( 1 + 2 ) = 6 \u601d\u8def\uff1a\u7528stack \u8a18\u9304\u5de6\u62ec\u865f\u4f4d\u7f6e\u4ee5\u53ca\u7576\u524d\u5206\u6578\uff0c\u9047\u5230\u53f3\u62ec\u865f\uff0c \u68e7\u9802\u7aef\u662f-1\u5247\u4ee3\u8868\uff0c\u5c0d\u7a31\u5f62\u5f0f\u7684\u62ec\u865f\u5df2\u7d93\u914d\u5c0d\uff0c\u5c07\u5206\u6578\u4e00\u5206\u63a8\u5165\u68e7\uff1b\u53cd\u4e4b\u82e5\u4e0d\u662f\u4ee3\u8868\u9084\u6c92\u6709-1\u5c31\u4e00\u8defpop\u88e1\u9762\u7684\u5143\u7d20\u76f4\u5230-1\u53c8\u51fa\u73fe(\u4ee3\u8868\u6b64\u53c8\u522e\u597d\u5df2\u7d93\u4e00\u8def\u5c07\u5167\u90e8\u7684\u5206\u6578\u52a0\u7e3d\uff0c\u56de\u6eaf\u5230\u4ed6\u81ea\u5df1\u5c0d\u61c9\u5c0d\u7a31\u7684\u5de6\u62ec\u865f)\uff0c \u4f8b\u5982 (()(())) (\u53ef\u4ee5\u5c07\u7a0b\u5f0f\u78bc\u81ea\u5df1stdout\u68e7\u7684\u5167\u5bb9\u6703\u6bd4\u8f03\u597d\u61c2\u5537 :D) ( stack top [-1] back (( stack top [-1,-1] back (() stack top is -1, pop -1 out, push -1 in (source code line 17), now stack top [1,-1] back (()( stack top [-1,1,-1] back (()(( stack top [-1,-1,1,-1] back (()(() pop -1 out, push -1 in stack top [1,-1,1,-1] back (()(()) stack top is not -1, keep popping until -1 and x2 the pushed score in, pop -1 out, now stack top [2,1,-1] back (()(())) stack top is not -1, keep popping until -1 and x2 the pushed score in, pop -1 out now stack top [6] back \u6700\u5f8c\u7684while loop \u5c07\u6c92\u6709\u52a0\u7e3d\u5b8c\u6210\u7684\u5206\u6578\u5168\u6578\u52a0\u7e3d \u5206\u6790\uff1aSpace complexity O(N), Time complexity O(N) class Solution { public : int scoreOfParentheses ( string str ) { stack int stk ; unsigned int total_score = 0 ; for ( int i = 0 ; i str . size (); i ++ ) { int acculmulate_score = 0 ; if ( str [ i ] == ( ) { stk . push ( - 1 ); } else { if ( stk . top () == - 1 ) { stk . pop (); stk . push ( 1 ); } else //keep adding until maching the symmetric part { while ( stk . top () != - 1 ) { acculmulate_score += stk . top (); stk . pop (); } stk . pop (); //pop the symmetrically matched left parenthesis acculmulate_score *= 2 ; stk . push ( acculmulate_score ); } } } //accumulate the rest if not finished while ( stk . size ()) { total_score += stk . top (); stk . pop (); } return total_score ; } };","title":"WC94"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#leetcode_oj-wc94","text":"Contest time: Jul 22, 2018","title":"leetcode_OJ WC94 \u89e3\u984c\u5fc3\u5f97 + \u304a\u307e\u3051"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#pa-leaf-similar-trees","text":"\u984c\u610f\uff1a\u5f9e\u5de6\u5230\u53f3\u8449\u5b50\u9806\u5e8f\u4e00\u6a23\u7684\u6a39 \u601d\u8def\uff1aDFS\u4e00\u904d\uff0c\u653e\u5165\u8449\u5b50\u5373\u53ef \u5206\u6790\uff1aTime complexity O(N), Space complexity O(N), (auxiliary vector to store the leaf data) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #define pb push_back class Solution { public : vector int l1 ; vector int l2 ; bool leafSimilar ( TreeNode * root1 , TreeNode * root2 ) { get_leaf ( root1 , l1 ); get_leaf ( root2 , l2 ); return l1 == l2 ; } void get_leaf ( TreeNode * root , vector int lv ) { if ( root == NULL ) { return ; } else if ( root - left == NULL root - right == NULL ) { lv . pb ( root - val ); } if ( root - left ) { get_leaf ( root - left , lv ); } if ( root - right ) { get_leaf ( root - right , lv ); } } };","title":"PA. Leaf-similar Trees \u6a39\u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#pb-874-walking-robot-simulation","text":"\u984c\u610f\uff1a\u6a21\u64ec\u6a5f\u5668\u4eba\u8d70\u8def\uff0c\u9047\u5230\u969c\u7919\u7269\u5ea7\u6a19\u5247\u6703\u505c\u5728\u4ed6 \u524d\u4e00\u500b\u4f4d\u7f6e \uff08\u4f8b\u5982\u969c\u7919\u7269\u7684X=6\uff0c\u5247\u9047\u5230\u969c\u7919\u7269\u81f3\u591a\u884c\u8d70\u5230X=5)","title":"PB. 874. Walking Robot Simulation \u81ea\u5df1\u6bd4\u8f03\u5f31\u7684\u6a21\u64ec\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#_1","text":"\u601d\u8def\uff1a\u7528\u6578\u5b78\u786c\u5e79\uff0c\u78ba\u8a8d\u56db\u500b\u65b9\u5411\u770b\u5f80\u54ea\u8d70\uff0c\u4f8b\u5982\u671d\u5411+y\u7684\u65b9\u5411(\u5411\u5317)\uff0c\u5247\u4ee5\u4e0b\u689d\u4ef6\u6210\u7acb\u4ee3\u8868\u649e\u4e0a\u969c\u7919\u7269 posx == obstacles[j][0] posy obstacles[j][1] posy + commands[i] = obstacles[j][1] \u8868\u793aX\u8ef8\u4e00\u81f4\uff0c\u5f80\u5317\u8d70\u525b\u597d\u649e\u4e0a\uff0c\u518d\u628aY\u8ef8\u8a2d\u70ba\u969c\u7919\u7269\u524d\u4e00\u500b\u5373\u53ef\u3002 \u5206\u6790\uff1aTime complexity O(N + K)where N, K = # of commands and obstacles respectively. Space complexity O(1) class Solution { public : int robotSim ( vector int commands , vector vector int obstacles ) { int posx = 0 , posy = 0 , dir = 0 , ans = 0 ; //0 north 1 east 2 south 3 west int cango = 1 ; for ( int i = 0 ; i commands . size (); i ++ ) { if ( commands [ i ] == - 1 ) { dir = ( dir + 1 ) % 4 ; } else if ( commands [ i ] == - 2 ) { if ( dir == 0 ) { dir = 3 ; } else { dir -- ; dir %= 4 ; } } else { cango = 1 ; for ( int j = 0 ; j obstacles . size (); j ++ ) { switch ( dir ) { case 0 : { if ( posx == obstacles [ j ][ 0 ]) { if ( posy obstacles [ j ][ 1 ] posy + commands [ i ] = obstacles [ j ][ 1 ]) { posy = obstacles [ j ][ 1 ] - 1 ; cango = 0 ; } } break ; } case 1 : { if ( posy == obstacles [ j ][ 1 ]) { if ( posx obstacles [ j ][ 0 ] posx + commands [ i ] = obstacles [ j ][ 0 ]) { posx = obstacles [ j ][ 0 ] - 1 ; cango = 0 ; } } break ; } case 2 : { if ( posx == obstacles [ j ][ 0 ]) { if ( posy obstacles [ j ][ 1 ] posy - commands [ i ] = obstacles [ j ][ 1 ]) { posy = obstacles [ j ][ 1 ] + 1 ; cango = 0 ; } } break ; } case 3 : { if ( posy == obstacles [ j ][ 1 ]) { if ( posx obstacles [ j ][ 0 ] posx - commands [ i ] = obstacles [ j ][ 0 ]) { posx = obstacles [ j ][ 0 ] + 1 ; cango = 0 ; } } break ; } cout endl ; default : break ; } if ( cango == 0 ) { break ; } } if ( cango ) { switch ( dir ) { case 0 : { posy += commands [ i ]; break ; } case 1 : { posx += commands [ i ]; break ; } case 2 : { posy -= commands [ i ]; break ; } case 3 : { posx -= commands [ i ]; break ; } default : break ; } } } ans = max ( ans , posx * posx + posy * posy ); } return ans ; } };","title":"\u89e3\u6cd5\u4e00"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#_2","text":"\u601d\u8def\uff1a\u7528set\u5b58\u969c\u7919\u7269\uff0c\u6a21\u64ec\u56db\u65b9\u4f4d\uff0cdx dy\uff0c\u5317\u6771\u5357\u897f\uff0c\u7528dir\u8b8a\u6578\u642d\u914dmod4\u4f86\u505a\u8f49\u5411\u7684\u52d5\u4f5c\uff0c\u6bcf\u6b21\u5411\u6307\u5b9a\u7684\u79fb\u52d5\u65b9\u5411\u8d70\u4e00\u55ae\u4f4d\uff0c\u4e26\u4e14\u6aa2\u67e5\u7576\u524d\u4f4d\u7f6e\u662f\u5426\u5b58\u5728\u65bc\u969c\u7919\u7269\u7684set\u4e2d\uff0c\u4fbf\u6703\u81ea\u7136\u800c\u7136\u8d70\u5230\u969c\u7919\u7269\u524d\u505c\u4e0b\u3002 \u5206\u6790\uff1aTime complexity O(N + K)where N, K = # of commands and obstacles respectively. Space complexity O(K), use a set to store the positions of obstacles. class Solution { public : int dx [ 4 ] = { 0 , 1 , 0 , - 1 }; int dy [ 4 ] = { 1 , 0 , - 1 , 0 }; int robotSim ( vector int commands , vector vector int obstacles ) { int posx = 0 , posy = 0 , dir = 0 , ans = 0 , tmpx = 0 , tmpy = 0 ; //0 north 1 east 2 south 3 west int cango = 1 ; set pair int , int obst_set ; for ( auto it : obstacles ) { obst_set . insert ( make_pair ( it [ 0 ], it [ 1 ])); } for ( int i = 0 ; i commands . size (); i ++ ) { if ( commands [ i ] == - 1 ) { dir = ( dir + 1 ) % 4 ; } else if ( commands [ i ] == - 2 ) { if ( dir == 0 ) { dir = 3 ; } else { dir -- ; dir %= 4 ; } } else { for ( int j = 0 ; j commands [ i ] ; j ++ ) //move grid one by one { tmpx = posx + dx [ dir ]; tmpy = posy + dy [ dir ]; if ( obst_set . find ( make_pair ( tmpx , tmpy )) != obst_set . end ()) { break ; } else { posx = tmpx ; posy = tmpy ; } } } ans = max ( ans , posx * posx + posy * posy ); } return ans ; } };","title":"\u89e3\u6cd5\u4e8c"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#pc-875-koko-eating-bananas","text":"\u984c\u610f\uff1a\u7334\u5b50\u5403\u9999\u8549\uff0c\u4e00\u5c0f\u6642\u5403K\u500b\uff0c\u9664\u4e0d\u76e1\u4e5f\u7b97\u4e00\u5c0f\u6642\uff0c\u6709\u6578\u5806\u9999\u8549\uff0c\u5f9e\u7b2c\u4e00\u5806\u958b\u59cb\u98df\u7528\uff0c\u8b66\u885b\u6703\u5728H\u6642\u9593\u5f8c\u56de\u4f86\uff0c\u5426\u5247\u7334\u5b50\u6703\u88ab\u6293\u5305\uff0c\u554f\u6700\u5c0f\u7684K\u70ba\u4f55\u3002 TLE\u601d\u8def\uff1a \u8b66\u885b\u53ef\u80fd\u5f88\u4e45\u624d\u56de\u4f86(H\u5927\uff0cK\u52e2\u5fc5\u5c31\u53ef\u4ee5\u5f88\u5c0f)\u6216\u76f8\u53cd\uff0c\u56e0\u6b64 \u6c7a\u5b9a\u5f9e\u6700\u5927\u7684\u6642\u9593\uff081e9\uff09\u964d\u4e0b\uff0c\u4ee5\u53ca\u5f9e0\u4e0a\u5347\uff0c\u540c\u6642\u770b\u9019\u5169\u7a2e\u98df\u7528\u901f\u5ea6\u662f\u5426\u903e\u6642 mxm\u5f9e1e9\u964d\u4e0b(\u4e00\u5b9a\u5403\u5f97\u5b8c\uff0c\u6642\u9593\u903e\u6642\u5c07flg\u8a2d1\u4ee3\u8868\u627e\u5230\u80fd\u98df\u7528\u901f\u5ea6K\u7684\u4e0a\u754c)/zr\u5f9e\u96f6\u958b\u59cb\u7b97\uff0c\u7576\u4e0d\u6703\u903e\u6642(\u56e0\u70ba\u5f9e\u96f6\u958b\u59cb\u7b97\uff0c\u4e0d\u6703\u903e\u6642\u4ee3\u8868\u627e\u5230\u6700\u5c11)\uff0c\u4ee3\u8868\u627e\u5230K\u7684\u4e0b\u754c\u3002 \u7f3a\u5931\u5206\u6790\uff1a\u82e5\u98df\u7528\u901f\u5ea6\u8da8\u65bc1e9\u7684\u4e2d\u9593\uff0c\u5247\u5f9e\u982d\u5c3e\u8d70\u8981\u76f8\u7576\u4e45\uff0c\u5373\u4fbf\u4e00\u6b21\u8d70\u96d9\u5411\uff0c\u662f\u6545\u61c9\u8a72\u7528\u4e8c\u5206\u641c\u5c0b\uff0c\u6bcf\u6b21\u5207\u534a\u770b\u6642\u9593\u4e0a\u4e0b\u754c\u7dda\u4e2d\u4f4d\u6578\u662f\u5426\u8d95\u5f97\u53ca\u98df\u7528\u5b8c\u7562\u3002 \u5206\u6790\uff1aTime complexity O(N^2), Space complexity O(1) \u4ee5\u4e0b\u70baTLE\u7684\u7a0b\u5f0f\u78bc class Solution { public : int minEatingSpeed ( vector int pls , int hr ) { int mxm = 1e9 , minn = 0 ; int zr = 1 ; int tmp_time = 0 ; int flg = 0 , flg2 = 0 ; while ( 1 ) { //cnt down from max tmp_time = 0 ; if ( ! flg ) { for ( auto j : pls ) { tmp_time += ceil (( float ) (( float ) j / ( float ) mxm )); } mxm -- ; } if ( tmp_time hr ) { flg = 1 ; } //cnt up from min tmp_time = 0 ; if ( ! flg2 ) { for ( auto j : pls ) { tmp_time += ceil (( float ) (( float ) j / ( float ) zr )); } zr ++ ; } if ( tmp_time hr ) { flg2 = 1 ; } if ( flg flg2 ) { break ; } if ( zr = mxm ) { break ; } } return zr mxm ? mxm + 2 : zr + 2 ; } }; \u6539\u9032\u601d\u8def\uff1a\u4e8c\u5206\u641c\u5c0b \u5206\u6790\uff1aTime complexity O(N log K) where N is the number of piles and K is the maximum size of a pile(binary search according to pile size to determine the eating speed and each round in testing we have to run through the whole pile to sum up the time = sum(pile[i] / current eating speed)) Space complexity O(1) //binary search class Solution { public : int minEatingSpeed ( vector int pls , int hr ) { int mxm = 1e9 , minn = 1 , mid = 0 , ans = 1e9 ; while ( minn mxm ) { int tmp_time = 0 ; //count the time for current eating speed K mid = ( mxm + minn ) / 2 ; for ( auto j : pls ) { tmp_time += ceil ((( float ) j / ( float ) mid )); } if ( tmp_time hr ) //cannot finish before guard back, should eat faster { minn = mid + 1 ; } else //can finish before guard back, may eat slower { mxm = mid ; ans = min ( ans , mid ); } } return ans ; } };","title":"PC. 875. Koko Eating Bananas \u4e8c\u5206\u641c"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#pd873-length-of-longest-fibonacci-subsequence-lis","text":"\u984c\u610f\uff1a\u4e00\u6a23\u7d66\u4e00\u500b\u56b4\u683c\u589e\u7684\u5e8f\u5217\uff0c\u554f\u6700\u9577\u56b4\u683c\u589e\u7684\u8cbb\u6ce2\u90a3\u5951\u5b50\u5e8f\u5217 TLE\u601d\u8def\uff1a \u7a0d\u5fae\u512a\u5316\u7684\u66b4\u529b\u89e3\uff0c\u9996\u5148\u5c07\u8cbb\u6c0f\u6578\u5217\u4e09\u9805\u5b9a\u597d\u3002 \u63a5\u8457\u770b\u73fe\u5728\u4e00(i) \u4e8c(j) \u9805\u76ee\u52a0\u7e3d\u662f\u5426\u80fd\u5927\u65bc\u7b49\u65bcj + 1(\u56e0\u70ba\u56b4\u683c\u589e\uff0c\u5c0f\u65bc\u5c31\u6c92\u6a5f\u6703\u5f9e\u6b64\u9ede\u51fa\u767c\u5f62\u6210\u8cbb\u6c0f\u6578\u5217\uff0c\u4f8b\u59821 2 5 9 14 .... \u4fbf\u4e0d\u53ef\u80fd\u5f9e1\u70ba\u8d77\u9ede\uff0c\u56e0\u70ba1 + 2 5) \u82e5\u5927\u65bc j + 1\uff0c\u5247\u6301\u7e8c\u641c\u7d22j + 1\u4e4b\u5f8c\u7684\u5e8f\u5217\uff0c\u4e26\u4e14 \u4e09\u500b\u6578\u5b57\u4e00\u7d44\u79fb\u52d5 \uff0c\u5217\u51fa\u7b2c\u4e09\u9805\u9810\u671f\u6578\u503c thr_expected \uff0c\u7b26\u5408 arr[k] \u5c31\u6301\u7e8c\u5f80\u5f8c\u8d70\u4e26\u4e14\u905e\u589e(\u4e09\u9805\u4e26\u4e0d\u4e00\u5b9a\u8981\u6bd7\u9130\uff0c\u56e0\u6b64thr_expected\u7b26\u5408\u7684\u6642\u5019\uff0c\u53ea\u8981\u5411\u5f8c\u79fb\u52d5\u5373\u53ef) \u4f8b\u5982 1 2 3 4 5 6 8 10 14 \u5f9e 1(fir) 2(sec) 3(thr_expected) - (4\u88ab\u8df3\u6389\uff0c\u56e0\u70ba arr[3] != thr_expected) 2(fir) 3(sec) 5(thr_expected) - 3(fir) 5(sec) 8(thr_expected)... \u6700\u5f8c\u770b\u9577\u5ea6\u662f\u5426\u5927\u65bc\u4e8c\u78ba\u8a8d\u6709\u8cbb\u6c0f\u5b50\u5e8f\u5217\uff0c\u7121\u5247\u56de\u50b30 \u7f3a\u5931\u5206\u6790\uff1aO(N^3)\u592a\u66b4\u529b\uff0c\u5728\u67e5\u627e thr_expected \u5be6\u969b\u4e0a\u53ef\u4ee5\u7528unordered_set\u52a0\u901f(\u5132\u5b58\u6574\u4efdarray)\uff0c\u5c07\u5e73\u5747\u7dda\u6027\u7684\u6642\u9593\u512a\u5316\u70ba\u5e38\u6578(unordered_set worst = linear, average = constant) \u5206\u6790\uff1aTime complexity O(N^3), Space complexity O(1) class Solution { public : int lenLongestFibSubseq ( vector int arr ) { int fir = arr [ 0 ], sec = arr [ 1 ], thr_expected = 0 , res = 0 , cur_len ; for ( int i = 0 ; i arr . size () - 2 ; i ++ ) { for ( int j = i + 1 ; j arr . size () - 1 ; j ++ ) { if ( arr [ i ] + arr [ j ] = arr [ j + 1 ]) { fir = arr [ i ]; sec = arr [ j ]; thr_expected = arr [ i ] + arr [ j ]; cur_len = 2 ; for ( int k = j + 1 ; k arr . size (); k ++ ) { if ( thr_expected == arr [ k ]) { fir = sec ; sec = thr_expected ; thr_expected = fir + sec ; cur_len ++ ; res = max ( cur_len , res ); } } } } } return res == 2 ? 0 : res ; } }; \u6539\u9032\u601d\u8def\uff1a\u5c07\u67e5\u8a62\u7684\u7d50\u69cb\u512a\u5316\u70baunordered_map(\u5be6\u969b\u4e0amap\u4e5f\u884c\uff0c\u4f46\u6211\u5011\u4e0d\u5728\u610f\u9806\u5e8f\uff0c\u6c92\u5dee) \u5206\u6790\uff1aTime complexity O(N^2), Space complexity O(N) class Solution { public : int lenLongestFibSubseq ( vector int arr ) { int fir = arr [ 0 ], sec = arr [ 1 ], thr_expected = 0 , res = 0 , cur_len ; unordered_set int myset ( arr . begin (), arr . end ()); for ( int i = 0 ; i arr . size () - 2 ; i ++ ) { for ( int j = i + 1 ; j arr . size () - 1 ; j ++ ) { if ( arr [ i ] + arr [ j ] = arr [ j + 1 ]) { fir = arr [ i ]; sec = arr [ j ]; thr_expected = arr [ i ] + arr [ j ]; cur_len = 2 ; while ( myset . find ( thr_expected ) != myset . end ()) //keep going the rest in the array { fir = sec ; sec = thr_expected ; thr_expected = fir + sec ; cur_len ++ ; res = max ( cur_len , res ); } } } } return res == 2 ? 0 : res ; } }; ---","title":"PD.873. Length of Longest Fibonacci Subsequence LIS \u7684\u8cbb\u6ce2\u90a3\u5951\u7248\u672c"},{"location":"programming_practice/leetcode_OJ_WC/WC94/#856-score-of-parentheses-stack","text":"\u984c\u610f\uff1a\u7d66\u4e00\u5806\u5e73\u8861\u597d\u7684\u62ec\u865f\uff0c () = 1, (()) = 2, ()() = 2, (()(()) = 2 * ( 1 + 2 ) = 6 \u601d\u8def\uff1a\u7528stack \u8a18\u9304\u5de6\u62ec\u865f\u4f4d\u7f6e\u4ee5\u53ca\u7576\u524d\u5206\u6578\uff0c\u9047\u5230\u53f3\u62ec\u865f\uff0c \u68e7\u9802\u7aef\u662f-1\u5247\u4ee3\u8868\uff0c\u5c0d\u7a31\u5f62\u5f0f\u7684\u62ec\u865f\u5df2\u7d93\u914d\u5c0d\uff0c\u5c07\u5206\u6578\u4e00\u5206\u63a8\u5165\u68e7\uff1b\u53cd\u4e4b\u82e5\u4e0d\u662f\u4ee3\u8868\u9084\u6c92\u6709-1\u5c31\u4e00\u8defpop\u88e1\u9762\u7684\u5143\u7d20\u76f4\u5230-1\u53c8\u51fa\u73fe(\u4ee3\u8868\u6b64\u53c8\u522e\u597d\u5df2\u7d93\u4e00\u8def\u5c07\u5167\u90e8\u7684\u5206\u6578\u52a0\u7e3d\uff0c\u56de\u6eaf\u5230\u4ed6\u81ea\u5df1\u5c0d\u61c9\u5c0d\u7a31\u7684\u5de6\u62ec\u865f)\uff0c \u4f8b\u5982 (()(())) (\u53ef\u4ee5\u5c07\u7a0b\u5f0f\u78bc\u81ea\u5df1stdout\u68e7\u7684\u5167\u5bb9\u6703\u6bd4\u8f03\u597d\u61c2\u5537 :D) ( stack top [-1] back (( stack top [-1,-1] back (() stack top is -1, pop -1 out, push -1 in (source code line 17), now stack top [1,-1] back (()( stack top [-1,1,-1] back (()(( stack top [-1,-1,1,-1] back (()(() pop -1 out, push -1 in stack top [1,-1,1,-1] back (()(()) stack top is not -1, keep popping until -1 and x2 the pushed score in, pop -1 out, now stack top [2,1,-1] back (()(())) stack top is not -1, keep popping until -1 and x2 the pushed score in, pop -1 out now stack top [6] back \u6700\u5f8c\u7684while loop \u5c07\u6c92\u6709\u52a0\u7e3d\u5b8c\u6210\u7684\u5206\u6578\u5168\u6578\u52a0\u7e3d \u5206\u6790\uff1aSpace complexity O(N), Time complexity O(N) class Solution { public : int scoreOfParentheses ( string str ) { stack int stk ; unsigned int total_score = 0 ; for ( int i = 0 ; i str . size (); i ++ ) { int acculmulate_score = 0 ; if ( str [ i ] == ( ) { stk . push ( - 1 ); } else { if ( stk . top () == - 1 ) { stk . pop (); stk . push ( 1 ); } else //keep adding until maching the symmetric part { while ( stk . top () != - 1 ) { acculmulate_score += stk . top (); stk . pop (); } stk . pop (); //pop the symmetrically matched left parenthesis acculmulate_score *= 2 ; stk . push ( acculmulate_score ); } } } //accumulate the rest if not finished while ( stk . size ()) { total_score += stk . top (); stk . pop (); } return total_score ; } };","title":"\u304a\u307e\u3051 856. Score of Parentheses stack\u61c9\u7528"},{"location":"programming_practice/leetcode_OJ_WC/WC95/","text":"leetcode_OJ WC95 \u89e3\u984c\u5fc3\u5f97 Contest time: Jul 29, 2018 876. Middle of the Linked List Linked list \u4e2d\u9593\u9ede \u984c\u610f\uff1a\u5982\u984c \u601d\u8def\uff1a\u6c34\u984c\uff0c\u8a08\u7b97\u9577\u5ea6\u627e\u5230\u4e2d\u9ede\uff0c\u76f4\u63a5\u89e3\u5373\u53ef \u5206\u6790\uff1aTime complexity O(N), Space complexity O(1) /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : ListNode * middleNode ( ListNode * head ) { ListNode * h2 = head ; int cnt = 0 ; while ( head != NULL ) { cnt ++ ; head = head - next ; } cnt /= 2 ; while ( cnt -- ) { h2 = h2 - next ; } return h2 ; } }; 877. Stone Game \u7c21\u55ae\u7248Nim game + \u4e00\u9ede\u6578\u5b78 \u984c\u610f\uff1a\u6709\u9ede\u985e\u4f3c\u7c21\u55ae\u7248\u7684nim game\uff0c\u6709\u5076\u6578\u5806\u77f3\u982d(\u77f3\u982d\u6578\u52a0\u7e3d\u70ba\u5947\u6578\uff0c\u56e0\u6b64\u6c92\u6709\u5e73\u624b)\uff0c\u73a9\u5bb6\u96d9\u65b9\uff08\u4e00\u5c0d\u4e00\u55ae\u6311\uff09\u6bcf\u6b21\u62ff\u53d6 \u982d\u6216\u662f\u5c3e\u7aef\u7684\u5806\uff0c\u4e00\u6b21\u62ff\u5149 \uff0c\u6bcf\u500b\u4eba\u90fd\u6709\u6700\u512a\u601d\u8def\uff0c\u554f\u5148\u8005\u662f\u5426\u53ef\u5728\u7576\u524d\u76e4\u9762\u6709\u5fc5\u52dd\u89e3\u3002 \u601d\u8def\uff1a\u82e5\u6211\u662f\u5148\u8005\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5947\u6578index \u6216\u662f\u5076\u6578index\u52a0\u7e3d\u8f03\u5927\uff0c\u56e0\u800c\u6709\u5fc5\u52dd\u6cd5\u5247\uff08\u5148\u8005\u5fc5\u52dd)\uff0c\u56e0\u6b64\u6046\u5e38true) \u8209\u4f8b\u4f86\u8aaa [3,7,9,4] \u5148\u8005\u53ef\u4ee5\u89c0\u5bdf\u52303 + 9 7 + 4\uff0c\u56e0\u6b64\u5148\u8005\u5c073\u53d6\u8d70(\u5f8c\u8005\u5c31\u53ea\u80fd\u53d64 or 7) \u6700\u5f8c\u5148\u8005\u53d6\u5f979\u7372\u52dd\u3002 \u5fc3\u5f97\u8207\u6ce8\u610f\u4e8b\u9805\uff1a\u525b\u958b\u59cb\u4ee5\u70ba\u6700\u512a\u601d\u8def\u662f greedy algorithm \uff0c\u4f46\u9019\u6a23\u53ea\u6709 \u7576\u524d\u6700\u4f73\u89e3 \uff0c\u5f88 \u53ef\u80fd\u56e0\u70ba\u62ff\u4e86\u7576\u524d\u7684\u6700\u4f73\u89e3\uff0c\u5c0e\u81f4\u5f8c\u9762\u7684\u4eba\u62ff\u6bd4\u6211\u9019\u500b\u66f4\u597d\u7684 \uff0c\u56e0\u800c\u8f38\u6389(\u4f8b\u5982\u4e0a\u9762\u7684[3,9,7,4])\u3002 \u5206\u6790\uff1aTime complexity O(1), Space complexity O(1) class Solution { public : bool stoneGame ( vector int piles ) { return true ; } }; 878. Nth Magical Numbe \u6392\u5bb9+\u4e8c\u5206\u641c \u984c\u610f\uff1a\u82e5\u4e00\u500b\u6574\u6578 K def as K % A == 0 K % B == 0 \u8a62\u554f\u7b2c N \u500b\u9019\u6a23\u7684\u6578\u5b57\u591a\u5c11 \u601d\u8def\uff1a\u66b4\u529b\u89e3\u6cd5\u986f\u7136\u5fc5TLE\uff0c\u56e0\u6b64\u8981\u512a\u5316\u6210Binary Search\u627e\u5230\u4e0a\u4e0b\u754c\u7dda WA\u89e3\u6cd5 class Solution { public : int nthMagicalNumber ( int N , int A , int B ) { unsigned long long int low_bound = min ( A , B ), up_bound = 1e18 ; unsigned long long int mid = 0 , lcm = ( A * B ) / gcd ( A , B ); while ( low_bound = up_bound ) { mid = low_bound + ( up_bound - low_bound ) / 2 ; if ( mid / A + mid / B - mid / lcm N ) //less than N, increase the lower bound { low_bound = mid + 1 ; } else if ( mid / A + mid / B - mid / lcm N ) { up_bound = mid - 1 ; } else /*(\u932f\u5728\u9019\u88e1)*/ { break ; } } return ( mid ) % ( unsigned long long int )( pow ( 10 , 9 ) + 7 ); } unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a b ) { return gcd ( a - b , b ); } return gcd ( a , b - a ); } }; \u7f3a\u5931\u5206\u6790\uff1a else break \u689d\u4ef6\u8a2d\u932f\uff0c\u56e0\u70ba\u5373\u4fbf\u662f\u6578\u91cf\u525b\u597dN\uff0c\u4e8c\u5206\u641c\u5c0b\u7684\u4e0a\u4e0b\u754c\u4e5f\u4e0d\u4e00\u5b9a\u5305\u593e\u3001\u6536\u6582\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u9084\u5f97\u7e7c\u7e8c\u67e5\u627e \u53ef\u4ee5\u53c3\u898b\u8a0e\u8ad6\u5340\u5225\u4eba\u5c0d\u6211\u7684\u56de\u8986 AC\u89e3\u6cd5 class Solution { public : int nthMagicalNumber ( int N , int A , int B ) { unsigned long long int low_bound = min ( A , B ), up_bound = 1e18 ; unsigned long long int mid = 0 , lcm = ( A * B ) / gcd ( A , B ); while ( low_bound up_bound ) { mid = ( low_bound + up_bound ) / 2 ; if ( mid / A + mid / B - mid / lcm N ) //less than N, increase the lower bound { low_bound = mid + 1 ; } else { up_bound = mid ; } } return low_bound % ( unsigned long long int )( pow ( 10 , 9 ) + 7 ); // } unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) { // Everything divides 0 if ( a == 0 || b == 0 ) { return 0 ; } // base case if ( a == b ) { return a ; } // a is greater if ( a b ) { return gcd ( a - b , b ); } return gcd ( a , b - a ); } }; \u5206\u6790\uff1aTime complexity: O(log (1e18)), Space complexity O(1) \u5f8c\u7e8c\u8a0e\u8ad6\u7591\u554f\uff1a\u5982\u679c\u628a up_bound = mid \u6539\u70ba up_bound = mid - 1 \u6709\u6642\u7b54\u6848\u6703\u5dee\u4e00\uff0c\u6709\u4eba\u77e5\u9053\u70ba\u4ec0\u9ebc\u55ce\uff0c\u9084\u8acb\u7a0b\u5f0f\u9ad8\u624b\u8cdc\u6559\uff0c\u611f\u8b1d:) 879. Profitable Schemes \u80cc\u5305DP/\u52d5\u614b\u898f\u5283/\u81ea\u5df1\u4e0d\u719f\u6089\u7684\u984c\u578b \u984c\u610f\uff1a\u7d66\u5b9a\u4eba\u6578N\u3001\u7372\u5229\u76ee\u6a19P\u3001\u6bcf\u4ef6\u4efb\u52d9(\u7e3d\u5171G\u4ef6)\u6240\u9700\u6c42\u4eba\u6578\u8207\u5c0d\u61c9\u5229\u6f64\uff0c\u554f\u6709\u5e7e\u7a2e\u7d44\u5408\u53ef\u4ee5\u7372\u5229\u9054\u6a19? \u601d\u8def\uff1a\u770b\u4e86\u4e00\u4e0b\u6559\u5b78\u624d\u5beb\u51fa\uff0c\u662f0-1\u80cc\u5305\u554f\u984c(\u8acb \u9ede\u6b64\u9023\u7d50\u5230\u6f14\u7b97\u6cd5\u7b46\u8a18 ) \u9996\u5148\u5efa\u7acb\u4e00\u5f35\u52d5\u614b\u898f\u5283\u7528\u8868\u683c [\u5de5\u4f5c][\u7576\u524d\u5229\u6f64][\u4eba\u6578]\u7684\u4e09\u7dad\u8868\u683c\uff0c\u8868\u793a\u505a\u5b8c\u7576\u524di\u500b\u5de5\u4f5c\u8cfaj\u5143\u82b1\u8cbbk\u4eba\u6578\u7684\u53ef\u80fd\u6578\u3002 \u8d70\u8a2a\u8868\u683c\uff0ci j k \u958b\u59cb\u8d70\u8a2a\u9032\u884c\u72c0\u614b\u8f49\u79fb\uff0c\u6bcf\u7a2e\u4efb\u52d9\u90fd\u53ef\u4ee5\u505a\u8207\u4e0d\u505a \u82e5\u7576\u524d\u53ef\u7528\u4eba\u6578\u6e1b\u53bb\u6b64\u4efb\u52d9\u9700\u6c42\u4eba\u6578 0 \u5247\u6b64\u4efb\u52d9\u4e0d\u53ef\u505a\uff0c\u662f\u6545\u6703\u8ddf\u4e0a\u4e00\u500b\u4efb\u52d9\u4e00\u6a23\u7684\u7d44\u5408\u60c5\u5f62\uff0c\u4ea6\u5373 if(k - cur_k 0){dp[i][j][k] = dp[i - 1][j][k] % MOD; //currrent mission cannot be done, use the last mission} \u82e5\u7576\u524d\u76ee\u6a19\u5229\u6f64\u6e1b\u53bb\u7576\u524d\u4efb\u52d9\u6240\u63d0\u4f9b\u7684\u5229\u6f64 0\uff0c\u4ee3\u8868\u8a72\u4efb\u52d9\u5229\u6f64\u6975\u5927\uff0c\u5247\u662f\u4e0d\u505a\u52a0\u4e0a\u505a\uff0c\u800c\u505a\u4e86\u8981\u67e5\u8a620\u5229\u6f64\u7684\u5148\u524d\u5efa\u8868\uff0c\u9632\u6b62\u8d8a\u754c\u3002 else if(j - cur_p 0){dp[i][j][k] = (dp[i - 1][j][k] + dp[i - 1][0][k - cur_k]) % MOD;} \u7b2c\u4e8c\u6b65\u9a5f\u89e3\u91cb\u4e0d\u592a\u5230\u4f4d\uff0c\u4e5f\u662f\u9019\u984c\u6bd4\u8f03\u96e3\u60f3\u7684\u5730\u65b9\uff0c\u9084\u671b\u5404\u4f4d\u5237\u63d0\u9ad8\u624b\u8cdc\u6559\u66f4\u597d\u7684\u89e3\u91cb\uff0c\u611f\u6fc0 \u5269\u4e0b\u5c31\u4e0d\u505a\u9019\u4e00\u6b21\uff0b\u505a\u4e86\u4e4b\u5f8c\u7684\u7e3d\u548c\uff0c\u505a\u4e86\u5c31\u53bb\u67e5\u8a62\u5148\u524d\u7684\u7d50\u679c else{dp[i][j][k] = (dp[i - 1][j][k] + dp[i - 1][j - cur_p][k - cur_k]) % MOD;} \u6700\u5f8c\u5c07 dp[size of tasks(\u505a\u5b8c\u5168\u90e8)][P(\u76ee\u6a19\u5229\u6f64)][people from 0 to G]\u52a0\u7e3d\u53d6mod\u5c31\u662f\u7b54\u6848 \u5206\u6790\uff1aTime complexity O(NGP), Space complexity O(NGP) \u5fc3\u5f97\uff1a\u52d5\u614b\u898f\u5283\u4e00\u76f4\u662f\u81ea\u5df1\u7684\u5f31\u9805\uff0c\u5373\u4fbf\u5beb\u5b8chard\u9019\u984c\uff0c\u4e5f\u662f\u770b\u8457\u5f71\u7247\u60f3\u7684\uff0c\u7e3d\u89ba\u5f97\u6709\u9ede\u4e0d\u8e0f\u5be6\uff0c\u4e4b\u5f8c\u518d\u7e7c\u7e8c\u7df4\u66f4\u591a\u7684\u984c\u578b\u88dc\u5f37\u56c9:) #define LL long long class Solution { public : const int MOD = 1e9 + 7 ; int profitableSchemes ( int G , int P , vector int group , vector int profit ) { int sz = group . size (); LL dp [ sz + 1 ][ P + 1 ][ G + 1 ]; //use profit for DP, 1 or padding memset ( dp , 0 , sizeof ( dp )); dp [ 0 ][ 0 ][ 0 ] = 1 ; //doing nothing is 1 LL cur_k , cur_p ; for ( LL i = 1 ; i = sz ; i ++ ) { cur_k = group [ i - 1 ]; cur_p = profit [ i - 1 ]; for ( LL j = 0 ; j P + 1 ; j ++ ) { for ( LL k = 0 ; k G + 1 ; k ++ ) { if ( k - cur_k 0 ) { dp [ i ][ j ][ k ] = dp [ i - 1 ][ j ][ k ] % MOD ; //currrent mission cannot be done, use the last mission } else if ( j - cur_p 0 ) { dp [ i ][ j ][ k ] = ( dp [ i - 1 ][ j ][ k ] + dp [ i - 1 ][ 0 ][ k - cur_k ]) % MOD ; } else { dp [ i ][ j ][ k ] = ( dp [ i - 1 ][ j ][ k ] + dp [ i - 1 ][ j - cur_p ][ k - cur_k ]) % MOD ; } } } } LL ans = 0 ; for ( int k = 0 ; k G + 1 ; k ++ ) { ans += dp [ sz ][ P ][ k ]; } return ans % MOD ; } };","title":"WC95"},{"location":"programming_practice/leetcode_OJ_WC/WC95/#leetcode_oj-wc95","text":"Contest time: Jul 29, 2018","title":"leetcode_OJ WC95 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC95/#876-middle-of-the-linked-list-linked-list","text":"\u984c\u610f\uff1a\u5982\u984c \u601d\u8def\uff1a\u6c34\u984c\uff0c\u8a08\u7b97\u9577\u5ea6\u627e\u5230\u4e2d\u9ede\uff0c\u76f4\u63a5\u89e3\u5373\u53ef \u5206\u6790\uff1aTime complexity O(N), Space complexity O(1) /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : ListNode * middleNode ( ListNode * head ) { ListNode * h2 = head ; int cnt = 0 ; while ( head != NULL ) { cnt ++ ; head = head - next ; } cnt /= 2 ; while ( cnt -- ) { h2 = h2 - next ; } return h2 ; } };","title":"876. Middle of the Linked List Linked list \u4e2d\u9593\u9ede"},{"location":"programming_practice/leetcode_OJ_WC/WC95/#877-stone-gamenim-game","text":"\u984c\u610f\uff1a\u6709\u9ede\u985e\u4f3c\u7c21\u55ae\u7248\u7684nim game\uff0c\u6709\u5076\u6578\u5806\u77f3\u982d(\u77f3\u982d\u6578\u52a0\u7e3d\u70ba\u5947\u6578\uff0c\u56e0\u6b64\u6c92\u6709\u5e73\u624b)\uff0c\u73a9\u5bb6\u96d9\u65b9\uff08\u4e00\u5c0d\u4e00\u55ae\u6311\uff09\u6bcf\u6b21\u62ff\u53d6 \u982d\u6216\u662f\u5c3e\u7aef\u7684\u5806\uff0c\u4e00\u6b21\u62ff\u5149 \uff0c\u6bcf\u500b\u4eba\u90fd\u6709\u6700\u512a\u601d\u8def\uff0c\u554f\u5148\u8005\u662f\u5426\u53ef\u5728\u7576\u524d\u76e4\u9762\u6709\u5fc5\u52dd\u89e3\u3002 \u601d\u8def\uff1a\u82e5\u6211\u662f\u5148\u8005\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5947\u6578index \u6216\u662f\u5076\u6578index\u52a0\u7e3d\u8f03\u5927\uff0c\u56e0\u800c\u6709\u5fc5\u52dd\u6cd5\u5247\uff08\u5148\u8005\u5fc5\u52dd)\uff0c\u56e0\u6b64\u6046\u5e38true) \u8209\u4f8b\u4f86\u8aaa [3,7,9,4] \u5148\u8005\u53ef\u4ee5\u89c0\u5bdf\u52303 + 9 7 + 4\uff0c\u56e0\u6b64\u5148\u8005\u5c073\u53d6\u8d70(\u5f8c\u8005\u5c31\u53ea\u80fd\u53d64 or 7) \u6700\u5f8c\u5148\u8005\u53d6\u5f979\u7372\u52dd\u3002 \u5fc3\u5f97\u8207\u6ce8\u610f\u4e8b\u9805\uff1a\u525b\u958b\u59cb\u4ee5\u70ba\u6700\u512a\u601d\u8def\u662f greedy algorithm \uff0c\u4f46\u9019\u6a23\u53ea\u6709 \u7576\u524d\u6700\u4f73\u89e3 \uff0c\u5f88 \u53ef\u80fd\u56e0\u70ba\u62ff\u4e86\u7576\u524d\u7684\u6700\u4f73\u89e3\uff0c\u5c0e\u81f4\u5f8c\u9762\u7684\u4eba\u62ff\u6bd4\u6211\u9019\u500b\u66f4\u597d\u7684 \uff0c\u56e0\u800c\u8f38\u6389(\u4f8b\u5982\u4e0a\u9762\u7684[3,9,7,4])\u3002 \u5206\u6790\uff1aTime complexity O(1), Space complexity O(1) class Solution { public : bool stoneGame ( vector int piles ) { return true ; } };","title":"877. Stone Game\u7c21\u55ae\u7248Nim game + \u4e00\u9ede\u6578\u5b78"},{"location":"programming_practice/leetcode_OJ_WC/WC95/#878-nth-magical-numbe","text":"\u984c\u610f\uff1a\u82e5\u4e00\u500b\u6574\u6578 K def as K % A == 0 K % B == 0 \u8a62\u554f\u7b2c N \u500b\u9019\u6a23\u7684\u6578\u5b57\u591a\u5c11 \u601d\u8def\uff1a\u66b4\u529b\u89e3\u6cd5\u986f\u7136\u5fc5TLE\uff0c\u56e0\u6b64\u8981\u512a\u5316\u6210Binary Search\u627e\u5230\u4e0a\u4e0b\u754c\u7dda WA\u89e3\u6cd5 class Solution { public : int nthMagicalNumber ( int N , int A , int B ) { unsigned long long int low_bound = min ( A , B ), up_bound = 1e18 ; unsigned long long int mid = 0 , lcm = ( A * B ) / gcd ( A , B ); while ( low_bound = up_bound ) { mid = low_bound + ( up_bound - low_bound ) / 2 ; if ( mid / A + mid / B - mid / lcm N ) //less than N, increase the lower bound { low_bound = mid + 1 ; } else if ( mid / A + mid / B - mid / lcm N ) { up_bound = mid - 1 ; } else /*(\u932f\u5728\u9019\u88e1)*/ { break ; } } return ( mid ) % ( unsigned long long int )( pow ( 10 , 9 ) + 7 ); } unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a b ) { return gcd ( a - b , b ); } return gcd ( a , b - a ); } }; \u7f3a\u5931\u5206\u6790\uff1a else break \u689d\u4ef6\u8a2d\u932f\uff0c\u56e0\u70ba\u5373\u4fbf\u662f\u6578\u91cf\u525b\u597dN\uff0c\u4e8c\u5206\u641c\u5c0b\u7684\u4e0a\u4e0b\u754c\u4e5f\u4e0d\u4e00\u5b9a\u5305\u593e\u3001\u6536\u6582\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u9084\u5f97\u7e7c\u7e8c\u67e5\u627e \u53ef\u4ee5\u53c3\u898b\u8a0e\u8ad6\u5340\u5225\u4eba\u5c0d\u6211\u7684\u56de\u8986 AC\u89e3\u6cd5 class Solution { public : int nthMagicalNumber ( int N , int A , int B ) { unsigned long long int low_bound = min ( A , B ), up_bound = 1e18 ; unsigned long long int mid = 0 , lcm = ( A * B ) / gcd ( A , B ); while ( low_bound up_bound ) { mid = ( low_bound + up_bound ) / 2 ; if ( mid / A + mid / B - mid / lcm N ) //less than N, increase the lower bound { low_bound = mid + 1 ; } else { up_bound = mid ; } } return low_bound % ( unsigned long long int )( pow ( 10 , 9 ) + 7 ); // } unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) { // Everything divides 0 if ( a == 0 || b == 0 ) { return 0 ; } // base case if ( a == b ) { return a ; } // a is greater if ( a b ) { return gcd ( a - b , b ); } return gcd ( a , b - a ); } }; \u5206\u6790\uff1aTime complexity: O(log (1e18)), Space complexity O(1) \u5f8c\u7e8c\u8a0e\u8ad6\u7591\u554f\uff1a\u5982\u679c\u628a up_bound = mid \u6539\u70ba up_bound = mid - 1 \u6709\u6642\u7b54\u6848\u6703\u5dee\u4e00\uff0c\u6709\u4eba\u77e5\u9053\u70ba\u4ec0\u9ebc\u55ce\uff0c\u9084\u8acb\u7a0b\u5f0f\u9ad8\u624b\u8cdc\u6559\uff0c\u611f\u8b1d:)","title":"878. Nth Magical Numbe \u6392\u5bb9+\u4e8c\u5206\u641c"},{"location":"programming_practice/leetcode_OJ_WC/WC95/#879-profitable-schemes-dp","text":"\u984c\u610f\uff1a\u7d66\u5b9a\u4eba\u6578N\u3001\u7372\u5229\u76ee\u6a19P\u3001\u6bcf\u4ef6\u4efb\u52d9(\u7e3d\u5171G\u4ef6)\u6240\u9700\u6c42\u4eba\u6578\u8207\u5c0d\u61c9\u5229\u6f64\uff0c\u554f\u6709\u5e7e\u7a2e\u7d44\u5408\u53ef\u4ee5\u7372\u5229\u9054\u6a19? \u601d\u8def\uff1a\u770b\u4e86\u4e00\u4e0b\u6559\u5b78\u624d\u5beb\u51fa\uff0c\u662f0-1\u80cc\u5305\u554f\u984c(\u8acb \u9ede\u6b64\u9023\u7d50\u5230\u6f14\u7b97\u6cd5\u7b46\u8a18 ) \u9996\u5148\u5efa\u7acb\u4e00\u5f35\u52d5\u614b\u898f\u5283\u7528\u8868\u683c [\u5de5\u4f5c][\u7576\u524d\u5229\u6f64][\u4eba\u6578]\u7684\u4e09\u7dad\u8868\u683c\uff0c\u8868\u793a\u505a\u5b8c\u7576\u524di\u500b\u5de5\u4f5c\u8cfaj\u5143\u82b1\u8cbbk\u4eba\u6578\u7684\u53ef\u80fd\u6578\u3002 \u8d70\u8a2a\u8868\u683c\uff0ci j k \u958b\u59cb\u8d70\u8a2a\u9032\u884c\u72c0\u614b\u8f49\u79fb\uff0c\u6bcf\u7a2e\u4efb\u52d9\u90fd\u53ef\u4ee5\u505a\u8207\u4e0d\u505a \u82e5\u7576\u524d\u53ef\u7528\u4eba\u6578\u6e1b\u53bb\u6b64\u4efb\u52d9\u9700\u6c42\u4eba\u6578 0 \u5247\u6b64\u4efb\u52d9\u4e0d\u53ef\u505a\uff0c\u662f\u6545\u6703\u8ddf\u4e0a\u4e00\u500b\u4efb\u52d9\u4e00\u6a23\u7684\u7d44\u5408\u60c5\u5f62\uff0c\u4ea6\u5373 if(k - cur_k 0){dp[i][j][k] = dp[i - 1][j][k] % MOD; //currrent mission cannot be done, use the last mission} \u82e5\u7576\u524d\u76ee\u6a19\u5229\u6f64\u6e1b\u53bb\u7576\u524d\u4efb\u52d9\u6240\u63d0\u4f9b\u7684\u5229\u6f64 0\uff0c\u4ee3\u8868\u8a72\u4efb\u52d9\u5229\u6f64\u6975\u5927\uff0c\u5247\u662f\u4e0d\u505a\u52a0\u4e0a\u505a\uff0c\u800c\u505a\u4e86\u8981\u67e5\u8a620\u5229\u6f64\u7684\u5148\u524d\u5efa\u8868\uff0c\u9632\u6b62\u8d8a\u754c\u3002 else if(j - cur_p 0){dp[i][j][k] = (dp[i - 1][j][k] + dp[i - 1][0][k - cur_k]) % MOD;} \u7b2c\u4e8c\u6b65\u9a5f\u89e3\u91cb\u4e0d\u592a\u5230\u4f4d\uff0c\u4e5f\u662f\u9019\u984c\u6bd4\u8f03\u96e3\u60f3\u7684\u5730\u65b9\uff0c\u9084\u671b\u5404\u4f4d\u5237\u63d0\u9ad8\u624b\u8cdc\u6559\u66f4\u597d\u7684\u89e3\u91cb\uff0c\u611f\u6fc0 \u5269\u4e0b\u5c31\u4e0d\u505a\u9019\u4e00\u6b21\uff0b\u505a\u4e86\u4e4b\u5f8c\u7684\u7e3d\u548c\uff0c\u505a\u4e86\u5c31\u53bb\u67e5\u8a62\u5148\u524d\u7684\u7d50\u679c else{dp[i][j][k] = (dp[i - 1][j][k] + dp[i - 1][j - cur_p][k - cur_k]) % MOD;} \u6700\u5f8c\u5c07 dp[size of tasks(\u505a\u5b8c\u5168\u90e8)][P(\u76ee\u6a19\u5229\u6f64)][people from 0 to G]\u52a0\u7e3d\u53d6mod\u5c31\u662f\u7b54\u6848 \u5206\u6790\uff1aTime complexity O(NGP), Space complexity O(NGP) \u5fc3\u5f97\uff1a\u52d5\u614b\u898f\u5283\u4e00\u76f4\u662f\u81ea\u5df1\u7684\u5f31\u9805\uff0c\u5373\u4fbf\u5beb\u5b8chard\u9019\u984c\uff0c\u4e5f\u662f\u770b\u8457\u5f71\u7247\u60f3\u7684\uff0c\u7e3d\u89ba\u5f97\u6709\u9ede\u4e0d\u8e0f\u5be6\uff0c\u4e4b\u5f8c\u518d\u7e7c\u7e8c\u7df4\u66f4\u591a\u7684\u984c\u578b\u88dc\u5f37\u56c9:) #define LL long long class Solution { public : const int MOD = 1e9 + 7 ; int profitableSchemes ( int G , int P , vector int group , vector int profit ) { int sz = group . size (); LL dp [ sz + 1 ][ P + 1 ][ G + 1 ]; //use profit for DP, 1 or padding memset ( dp , 0 , sizeof ( dp )); dp [ 0 ][ 0 ][ 0 ] = 1 ; //doing nothing is 1 LL cur_k , cur_p ; for ( LL i = 1 ; i = sz ; i ++ ) { cur_k = group [ i - 1 ]; cur_p = profit [ i - 1 ]; for ( LL j = 0 ; j P + 1 ; j ++ ) { for ( LL k = 0 ; k G + 1 ; k ++ ) { if ( k - cur_k 0 ) { dp [ i ][ j ][ k ] = dp [ i - 1 ][ j ][ k ] % MOD ; //currrent mission cannot be done, use the last mission } else if ( j - cur_p 0 ) { dp [ i ][ j ][ k ] = ( dp [ i - 1 ][ j ][ k ] + dp [ i - 1 ][ 0 ][ k - cur_k ]) % MOD ; } else { dp [ i ][ j ][ k ] = ( dp [ i - 1 ][ j ][ k ] + dp [ i - 1 ][ j - cur_p ][ k - cur_k ]) % MOD ; } } } } LL ans = 0 ; for ( int k = 0 ; k G + 1 ; k ++ ) { ans += dp [ sz ][ P ][ k ]; } return ans % MOD ; } };","title":"879. Profitable Schemes \u80cc\u5305DP/\u52d5\u614b\u898f\u5283/\u81ea\u5df1\u4e0d\u719f\u6089\u7684\u984c\u578b"},{"location":"programming_practice/leetcode_OJ_WC/WC97/","text":"leetcode_OJ WC97 \u89e3\u984c\u5fc3\u5f97 Contest time: Aug 12, 2018 888. Uncommon Words from Two Sentences Map\u7684\u904b\u7528 \u984c\u610f\uff1a\u627e\u53ea\u5728\u81ea\u5df1\u7684\u53e5\u5b50\u4e2d\u51fa\u73fe\u904e\u4e00\u6b21\u800c\u5c0d\u65b9\u672a\u51fa\u73fe\u7684\u8a5e\u5f59 \u601d\u8def\uff1a\u6c34\u984c\uff0cmap\u8a08\u6578\u8dd1\u5169\u6b21\u5373\u53ef\u3002 \u5206\u6790\uff1aTime complexity O(N), Space complexity O(N) class Solution { public : vector string uncommonFromSentences ( string A , string B ) { map string , int mymap ; map string , int mymap2 ; stringstream ss ( A ); stringstream ss2 ( B ); vector string stra ; vector string strb ; vector string res ; string tmp ; while ( ss tmp ) { stra . push_back ( tmp ); } while ( ss2 tmp ) { strb . push_back ( tmp ); } for ( int i = 0 ; i stra . size (); i ++ ) { mymap [ stra [ i ]] ++ ; } for ( int i = 0 ; i strb . size (); i ++ ) { mymap2 [ strb [ i ]] ++ ; } for ( map string , int :: iterator it = mymap . begin (); it != mymap . end (); it ++ ) { if ( it - second == 1 ) { if ( mymap2 [ it - first ] == 0 ) { res . push_back ( it - first ); } } } for ( map string , int :: iterator it = mymap2 . begin (); it != mymap2 . end (); it ++ ) { if ( it - second == 1 ) { if ( mymap [ it - first ] == 0 ) { res . push_back ( it - first ); } } } return res ; } }; 889. Spiral Matrix III \u6a21\u64ec \u984c\u610f\uff1a\u77e9\u9663\u4e2d\u9006\u6642\u91dd\u65cb\u8f49\uff0c\u554f\u754c\u5167\u7684\u5ea7\u6a19\u6709\u54ea\u4e9b \u601d\u8def\uff1a\u6a21\u64ec\uff0c\u5148\u5f9e\u984c\u76ee\u7d66\u7684\u5716\u7247\u53ef\u770b\u51fa\u884c\u8d70\u7684\u8ddd\u96e2\u662f\u4e00\u500b1 1 2 2 3 3 4 4 5 5 6 6\u6bcf\u5169\u7d44\u905e\u589e\u4e00\u6b21\u4e00\uff0c\u4e00\u6a23\u7528 for loop + dx dy (\u6216\u8aaadrow dcolumn)\u4ee3\u8868\u8981\u8d70\u7684\u65b9\u5411 \uff0c\u6bcf\u6b21\u8d70\u4e00\u9ede\u770b\u770b\u662f\u5426\u5728\u754c\u5167\u5373\u53ef\u3002 \u4e0d\u7528\u60f3\u592a\u96e3\uff0c\u60f3\u8aaa\u9084\u8981\u81ea\u5df1\u5efa\u4e00\u500bgrid\u5728\u770b\u662f\u5426\u754c\u5167\uff0c\u9019\u6a23\u592a\u9ebb\u7169\uff0c\u53ea\u8981\u60f3\u50cf\u6210\u6709 \u7121\u9650\u5927\u7684\u5730\u5716\u6301\u7e8c\u8d70\u8a2a\uff0c\u770b\u770b\u662f\u5426\u5728\u908a\u754c\u5373\u53ef \u5206\u6790\uff1aTime complexity O(max(ROW, COL) ^ 2), Space complexity O(ROW * COL) class Solution { public : vector vector int spiralMatrixIII ( int R , int C , int r0 , int c0 ) { //1 1 2 2 3 3 4 4 5 5 6 6 //0 1 2 3 4 5 6 8 7 8 9 10* increase if it is in the odd number int rpos = r0 , cpos = c0 , dir = 0 , go = 1 ; int cnt = 0 , ans_cnt = 0 ; int dr [ 4 ] = { 0 , 1 , 0 , - 1 }; int dc [ 4 ] = { 1 , 0 , - 1 , 0 }; vector vector int res ; //push back the start position res . push_back ({ rpos , cpos }); ans_cnt ++ ; while ( ans_cnt R * C ) { for ( int i = 1 ; i = go ; i ++ ) { rpos += dr [ dir ]; cpos += dc [ dir ]; if ( rpos = 0 rpos R cpos = 0 cpos C ) //push back th eanswer if it is in the grid { res . push_back ({ rpos , cpos }); ans_cnt ++ ; } } if ( cnt 1 ) //to make 1 1 2 2 3 3 4 4 5 5 sequence { go ++ ; } cnt ++ ; dir ++ ; dir %= 4 ; //change direction } return res ; } }; 890. Possible Bipartition \u4e8c\u5206\u5716\u6aa2\u6e2c \u984c\u610f\uff1a\u6bcf\u4e00\u500b\u4eba\u90fd\u8a0e\u53ad\u81ea\u5df1\u4ee5\u5916\u7684\u67d0\u4eba(edge)\uff0c\u554f\u5982\u4f55\u5206\u6210\u5169\u7d44(bipartie graph)\u4f7f\u6bcf\u4e00\u7d44\u88e1\u9762\u7684\u6240\u6709\u4eba\u4e0d\u6703\u4e92\u76f8\u8a0e\u53ad \u601d\u8def\uff1a\u984c\u610f\u5982\u540c\u4e8c\u5206\u5716\u6aa2\u6e2c\u554f\u984c\uff0c\u89e3\u984c\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\u521d\u59cb\u5316\u4e00\u4e9b\u5fc5\u8981\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u4f8b\u5982 visited[N + 1]\u9019\u500barray\u7528\u4ee5\u7d00\u9304\u8d70\u8a2a\u904e\u7684\u9ede\u907f\u514d\u91cd\u8907\u8d70\u8a2a \uff0c\u5176\u4e2ddislikes\u5c31\u662fadjecent list\u4e2d\u7684edges\u3002 DFS\uff0c\u6c92\u8d70\u904e\u7684\u9ede\u6a19\u8a18\u70ba-1\uff0c \u8d70\u904e\u7684\u9ede\u5206\u5169\u7a2e\uff0c\u4e00\u7a2e\u653e0\u8272\u3001\u53e6\u4e00\u7a2e1\u8272 \uff0c\u67e5\u627eadjacent list\u770b\u63a5\u4e0b\u4f86\u8981\u8d70\u8a2a\u9ede\uff0c\u4e26\u4e14\u4f9d\u64da\u7576\u524d\u984f\u8272\u9078\u64c7\u53e6\u4e00\u500b\u984f\u8272\u70ba\u76f8\u9130\u9802\u9ede\u4e0a\u8272(\u7570\u8272)\u3002 \u67e5\u627e\u7684\u9014\u4e2d\u767c\u73fe\u76f8\u9130\u9ede\u5df2\u7d93\u4e0a\u904e\u8272\u4e26\u4e14\u662f\u76f8\u540c\u8272\uff0c\u4ee3\u8868\u7121\u6cd5\u5207\u5272\u6210\u4e8c\u5206\u5716\uff0c\u5c07\u7d50\u679c\u6a19\u793a\u70bafalse \u5206\u6790\uff1aTime complexity O(V + E)(vector of dislikes acts as an adjacent list method for graph), Space complexity O(V + E) (adjacent list plus the visited array to mark the traversed vertices) \u60f3\u77e5\u9053\u4f7f\u7528\u76f8\u9130list \u6642\u9593\u8907\u96dc\u5ea6\u5206\u6790\u5f8c\u662fO(V + E)\u800c\u975eO(V*E)\u53ef\u4ee5\u770b\u9019\u7bc7 \u5fc3\u5f97\uff0c\u672c\u4ee5\u70ba\u5f88\u96e3\uff0c\u60f3\u5230\u662f\u4e8c\u5206\u5716\u6aa2\u6e2c\u5c45\u7136\u4e00\u6b21\u904e\u4e86\uff0c\u5b8c\u5168\u51fa\u4e4e\u610f\u6599\u5462:D\uff0c\u4ee5\u524d\u5716\u8ad6\u554f\u984c\u9817\u5361\uff0c\u7b97\u662f\u7f69\u9580\uff0c\u5149\u662f\u4e00\u500b\u6df1\u5ea6\u512a\u5148\u641c\u7d22\u5beb\u4e86\u534a\u5929\u9084\u662f\u7121\u7aae\u905e\u8ff4\u89e3\u4e0d\u4e0b\u53bb\uff0c\u7b97\u662f\u70ba\u81ea\u5df1\u7684\u5716\u8ad6\u7b97\u6cd5\u6253\u4e0b\u4fe1\u5fc3\u56c9 :D class Solution { public : bool is_bipartie ; bool possibleBipartition ( int N , vector vector int dislikes ) //dislike act as adjacent matrix { int visited [ N + 1 ] , visit_cnt ; //visited matrix. -1 as unvisited, 0 as color1, 1 as color2 memset ( visited , - 1 , sizeof ( visited )); is_bipartie = true ; dfs ( 1 , 0 , visited , dislikes ); return is_bipartie ; } void dfs ( int cur_vertex , int cur_color , int * visited , vector vector int dislikes ) { visited [ cur_vertex ] = cur_color ; for ( int i = 0 ; i dislikes . size (); i ++ ) { if ( dislikes [ i ][ 0 ] == cur_vertex ) //check if unvisited and is the path of current vertex { if ( visited [ dislikes [ i ][ 1 ]] == - 1 ) //unvisited { dfs ( dislikes [ i ][ 1 ], cur_color == 1 ? 0 : 1 /*change the color for adjacent vertices*/ , visited , dislikes ); } else if ( visited [ dislikes [ i ][ 1 ]] == cur_color ) //visited, same color, not bipartie graph { is_bipartie = false ; } } } } }; 891. Super Egg Drop DP\u96e3\u984c\uff0c\u5c1a\u672a\u5b8c\u6210\uff0c\u4e4b\u5f8c\u6709\u7a7a\u5beb\uff0c\u9084\u671b\u5305\u6db5","title":"WC97"},{"location":"programming_practice/leetcode_OJ_WC/WC97/#leetcode_oj-wc97","text":"Contest time: Aug 12, 2018","title":"leetcode_OJ WC97 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC97/#888-uncommon-words-from-two-sentences-map","text":"\u984c\u610f\uff1a\u627e\u53ea\u5728\u81ea\u5df1\u7684\u53e5\u5b50\u4e2d\u51fa\u73fe\u904e\u4e00\u6b21\u800c\u5c0d\u65b9\u672a\u51fa\u73fe\u7684\u8a5e\u5f59 \u601d\u8def\uff1a\u6c34\u984c\uff0cmap\u8a08\u6578\u8dd1\u5169\u6b21\u5373\u53ef\u3002 \u5206\u6790\uff1aTime complexity O(N), Space complexity O(N) class Solution { public : vector string uncommonFromSentences ( string A , string B ) { map string , int mymap ; map string , int mymap2 ; stringstream ss ( A ); stringstream ss2 ( B ); vector string stra ; vector string strb ; vector string res ; string tmp ; while ( ss tmp ) { stra . push_back ( tmp ); } while ( ss2 tmp ) { strb . push_back ( tmp ); } for ( int i = 0 ; i stra . size (); i ++ ) { mymap [ stra [ i ]] ++ ; } for ( int i = 0 ; i strb . size (); i ++ ) { mymap2 [ strb [ i ]] ++ ; } for ( map string , int :: iterator it = mymap . begin (); it != mymap . end (); it ++ ) { if ( it - second == 1 ) { if ( mymap2 [ it - first ] == 0 ) { res . push_back ( it - first ); } } } for ( map string , int :: iterator it = mymap2 . begin (); it != mymap2 . end (); it ++ ) { if ( it - second == 1 ) { if ( mymap [ it - first ] == 0 ) { res . push_back ( it - first ); } } } return res ; } };","title":"888. Uncommon Words from Two Sentences Map\u7684\u904b\u7528"},{"location":"programming_practice/leetcode_OJ_WC/WC97/#889-spiral-matrix-iii","text":"\u984c\u610f\uff1a\u77e9\u9663\u4e2d\u9006\u6642\u91dd\u65cb\u8f49\uff0c\u554f\u754c\u5167\u7684\u5ea7\u6a19\u6709\u54ea\u4e9b \u601d\u8def\uff1a\u6a21\u64ec\uff0c\u5148\u5f9e\u984c\u76ee\u7d66\u7684\u5716\u7247\u53ef\u770b\u51fa\u884c\u8d70\u7684\u8ddd\u96e2\u662f\u4e00\u500b1 1 2 2 3 3 4 4 5 5 6 6\u6bcf\u5169\u7d44\u905e\u589e\u4e00\u6b21\u4e00\uff0c\u4e00\u6a23\u7528 for loop + dx dy (\u6216\u8aaadrow dcolumn)\u4ee3\u8868\u8981\u8d70\u7684\u65b9\u5411 \uff0c\u6bcf\u6b21\u8d70\u4e00\u9ede\u770b\u770b\u662f\u5426\u5728\u754c\u5167\u5373\u53ef\u3002 \u4e0d\u7528\u60f3\u592a\u96e3\uff0c\u60f3\u8aaa\u9084\u8981\u81ea\u5df1\u5efa\u4e00\u500bgrid\u5728\u770b\u662f\u5426\u754c\u5167\uff0c\u9019\u6a23\u592a\u9ebb\u7169\uff0c\u53ea\u8981\u60f3\u50cf\u6210\u6709 \u7121\u9650\u5927\u7684\u5730\u5716\u6301\u7e8c\u8d70\u8a2a\uff0c\u770b\u770b\u662f\u5426\u5728\u908a\u754c\u5373\u53ef \u5206\u6790\uff1aTime complexity O(max(ROW, COL) ^ 2), Space complexity O(ROW * COL) class Solution { public : vector vector int spiralMatrixIII ( int R , int C , int r0 , int c0 ) { //1 1 2 2 3 3 4 4 5 5 6 6 //0 1 2 3 4 5 6 8 7 8 9 10* increase if it is in the odd number int rpos = r0 , cpos = c0 , dir = 0 , go = 1 ; int cnt = 0 , ans_cnt = 0 ; int dr [ 4 ] = { 0 , 1 , 0 , - 1 }; int dc [ 4 ] = { 1 , 0 , - 1 , 0 }; vector vector int res ; //push back the start position res . push_back ({ rpos , cpos }); ans_cnt ++ ; while ( ans_cnt R * C ) { for ( int i = 1 ; i = go ; i ++ ) { rpos += dr [ dir ]; cpos += dc [ dir ]; if ( rpos = 0 rpos R cpos = 0 cpos C ) //push back th eanswer if it is in the grid { res . push_back ({ rpos , cpos }); ans_cnt ++ ; } } if ( cnt 1 ) //to make 1 1 2 2 3 3 4 4 5 5 sequence { go ++ ; } cnt ++ ; dir ++ ; dir %= 4 ; //change direction } return res ; } };","title":"889. Spiral Matrix III \u6a21\u64ec"},{"location":"programming_practice/leetcode_OJ_WC/WC97/#890-possible-bipartition","text":"\u984c\u610f\uff1a\u6bcf\u4e00\u500b\u4eba\u90fd\u8a0e\u53ad\u81ea\u5df1\u4ee5\u5916\u7684\u67d0\u4eba(edge)\uff0c\u554f\u5982\u4f55\u5206\u6210\u5169\u7d44(bipartie graph)\u4f7f\u6bcf\u4e00\u7d44\u88e1\u9762\u7684\u6240\u6709\u4eba\u4e0d\u6703\u4e92\u76f8\u8a0e\u53ad \u601d\u8def\uff1a\u984c\u610f\u5982\u540c\u4e8c\u5206\u5716\u6aa2\u6e2c\u554f\u984c\uff0c\u89e3\u984c\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\u521d\u59cb\u5316\u4e00\u4e9b\u5fc5\u8981\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u4f8b\u5982 visited[N + 1]\u9019\u500barray\u7528\u4ee5\u7d00\u9304\u8d70\u8a2a\u904e\u7684\u9ede\u907f\u514d\u91cd\u8907\u8d70\u8a2a \uff0c\u5176\u4e2ddislikes\u5c31\u662fadjecent list\u4e2d\u7684edges\u3002 DFS\uff0c\u6c92\u8d70\u904e\u7684\u9ede\u6a19\u8a18\u70ba-1\uff0c \u8d70\u904e\u7684\u9ede\u5206\u5169\u7a2e\uff0c\u4e00\u7a2e\u653e0\u8272\u3001\u53e6\u4e00\u7a2e1\u8272 \uff0c\u67e5\u627eadjacent list\u770b\u63a5\u4e0b\u4f86\u8981\u8d70\u8a2a\u9ede\uff0c\u4e26\u4e14\u4f9d\u64da\u7576\u524d\u984f\u8272\u9078\u64c7\u53e6\u4e00\u500b\u984f\u8272\u70ba\u76f8\u9130\u9802\u9ede\u4e0a\u8272(\u7570\u8272)\u3002 \u67e5\u627e\u7684\u9014\u4e2d\u767c\u73fe\u76f8\u9130\u9ede\u5df2\u7d93\u4e0a\u904e\u8272\u4e26\u4e14\u662f\u76f8\u540c\u8272\uff0c\u4ee3\u8868\u7121\u6cd5\u5207\u5272\u6210\u4e8c\u5206\u5716\uff0c\u5c07\u7d50\u679c\u6a19\u793a\u70bafalse \u5206\u6790\uff1aTime complexity O(V + E)(vector of dislikes acts as an adjacent list method for graph), Space complexity O(V + E) (adjacent list plus the visited array to mark the traversed vertices) \u60f3\u77e5\u9053\u4f7f\u7528\u76f8\u9130list \u6642\u9593\u8907\u96dc\u5ea6\u5206\u6790\u5f8c\u662fO(V + E)\u800c\u975eO(V*E)\u53ef\u4ee5\u770b\u9019\u7bc7 \u5fc3\u5f97\uff0c\u672c\u4ee5\u70ba\u5f88\u96e3\uff0c\u60f3\u5230\u662f\u4e8c\u5206\u5716\u6aa2\u6e2c\u5c45\u7136\u4e00\u6b21\u904e\u4e86\uff0c\u5b8c\u5168\u51fa\u4e4e\u610f\u6599\u5462:D\uff0c\u4ee5\u524d\u5716\u8ad6\u554f\u984c\u9817\u5361\uff0c\u7b97\u662f\u7f69\u9580\uff0c\u5149\u662f\u4e00\u500b\u6df1\u5ea6\u512a\u5148\u641c\u7d22\u5beb\u4e86\u534a\u5929\u9084\u662f\u7121\u7aae\u905e\u8ff4\u89e3\u4e0d\u4e0b\u53bb\uff0c\u7b97\u662f\u70ba\u81ea\u5df1\u7684\u5716\u8ad6\u7b97\u6cd5\u6253\u4e0b\u4fe1\u5fc3\u56c9 :D class Solution { public : bool is_bipartie ; bool possibleBipartition ( int N , vector vector int dislikes ) //dislike act as adjacent matrix { int visited [ N + 1 ] , visit_cnt ; //visited matrix. -1 as unvisited, 0 as color1, 1 as color2 memset ( visited , - 1 , sizeof ( visited )); is_bipartie = true ; dfs ( 1 , 0 , visited , dislikes ); return is_bipartie ; } void dfs ( int cur_vertex , int cur_color , int * visited , vector vector int dislikes ) { visited [ cur_vertex ] = cur_color ; for ( int i = 0 ; i dislikes . size (); i ++ ) { if ( dislikes [ i ][ 0 ] == cur_vertex ) //check if unvisited and is the path of current vertex { if ( visited [ dislikes [ i ][ 1 ]] == - 1 ) //unvisited { dfs ( dislikes [ i ][ 1 ], cur_color == 1 ? 0 : 1 /*change the color for adjacent vertices*/ , visited , dislikes ); } else if ( visited [ dislikes [ i ][ 1 ]] == cur_color ) //visited, same color, not bipartie graph { is_bipartie = false ; } } } } };","title":"890. Possible Bipartition \u4e8c\u5206\u5716\u6aa2\u6e2c"},{"location":"programming_practice/leetcode_OJ_WC/WC97/#891-super-egg-drop-dp","text":"","title":"891. Super Egg Drop DP\u96e3\u984c\uff0c\u5c1a\u672a\u5b8c\u6210\uff0c\u4e4b\u5f8c\u6709\u7a7a\u5beb\uff0c\u9084\u671b\u5305\u6db5"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/","text":"leetcode_OJ WC98 99 \u89e3\u984c\u5fc3\u5f97 \u6691\u5047\u6700\u5f8c\u56e0\u5be6\u7fd2\u9032\u5ea6\u4ea4\u63a5\uff0c\u6709\u9ede\u7d2f\uff0c\u6253\u4e86weekly contest\u7d50\u679c\u61f6\u5f97\u66f4\u65b0\uff0c\u9019\u6b21\u4e00\u6b21\u66f4\u65b0\u5427 Contest time WC98: Aug 19, 2018 (\u984c\u89e3\u5b8c\u6210) Contest time WC99: Aug 26, 2018 (\u984c\u89e3\u5b8c\u6210) WC98 PA. 888. Fair Candy Swap \u6c34\u984c \u984c\u610f:\u5169\u4eba\u5404\u6301\u6709\u6578\u5806\u7cd6\u679c\uff0c\u6bcf\u4e00\u5806\u6709n\u500b\u7cd6\u679c\uff0c\u554f\u5404\u81ea\u4ea4\u63db\u54ea\u4e00\u5806\u53ef\u4ee5\u8b93\u4ed6\u5011\u5169\u500b\u7684\u7cd6\u679c\u6578\u91cf\u4e00\u6a23 \u601d\u8def:\u76f4\u63a5\u505a\uff0c\u5169\u500b\u4eba\u4e00\u6a23\u53d6\u5e73\u5747\uff0c\u66b4\u529b\u627e\u5373\u53ef\u3002 \u5206\u6790:Time complexity: O(N^2), Space complexity O(N) class Solution { public : vector int fairCandySwap ( vector int A , vector int B ) { int suma , sumb , flg ; suma = sumb = 0 ; flg = 0 ; vector int res ; for ( int i = 0 ; i A . size (); i ++ ) { suma += A [ i ]; } for ( int i = 0 ; i B . size (); i ++ ) { sumb += B [ i ]; } int fair = ( suma + sumb ) / 2 ; for ( int i = 0 ; i A . size (); i ++ ) { for ( int j = 0 ; j B . size (); j ++ ) { if ( suma - A [ i ] + B [ j ] == sumb - B [ j ] + A [ i ]) { res . push_back ( A [ i ]); res . push_back ( B [ j ]); flg = 1 ; break ; } } if ( flg ) { break ; } } return res ; } bool check ( vector int A , vector int B ) { int suma , sumb ; suma = sumb = 0 ; for ( int i = 0 ; i A . size (); i ++ ) { suma += A [ i ]; } for ( int i = 0 ; i B . size (); i ++ ) { sumb += B [ i ]; } return ( suma == sumb ) ( suma ) ( sumb ); //should be more than zero } }; PB. 890. Find and Replace Pattern string + map \u984c\u610f:\u627e\u51fa\u8da8\u52e2\u4e00\u6a23\u7684\u55ae\u5b57\uff0c\u5728\u6b64\u8da8\u52e2\u4e00\u6a23\u662f\u6307\u82f1\u6587\u5b57\u51fa\u5148\u7684\u300e\u983b\u7387\u3001\u65b9\u5f0f\u300f\u4e00\u81f4\uff0c\u4f8b\u5982 aabb = ccbb = jjkk , apple = knnrx \u7b49 WA\u601d\u8def:\u8da8\u52e2\u4e00\u6a23\u4ee3\u8868\u8aaa\uff0c\u6211\u4e0b\u4e00\u500b\u662f\u4e0d\u4e00\u6a23\u7684\u5b57\u6bcd\uff0c\u5247\u4f60\u4e5f\u662f;\u6211\u5982\u679c\u662f\u4e00\u6a23\u7684\u5247\u4f60\u4e5f\u8981\u4e00\u6a23\uff0c\u9019\u6a23\u76f4\u63a5\u505a\u5373\u53ef\uff08\u4f46\u662f\u63a5\u4e0b\u4f86\u6703\u9047\u5230\u4e00\u500b\u554f\u984c\uff0c\u7a0d\u5f8c\u4e0b\u65b9\u300e\u7f3a\u5931\u5206\u6790\u300f\u6703\u63d0\u53ca\uff09 class Solution { public : vector string findAndReplacePattern ( vector string words , string pattern ) { vector string res ; for ( auto it : words ) { if ( check ( it , pattern )) { res . push_back ( it ); } } return res ; } bool check ( string to_chk , string pat ) { if ( to_chk . size () != pat . size ()) { return false ; } for ( int i = 0 ; i to_chk . size () - 1 ; i ++ ) { if ( to_chk [ i ] == to_chk [ i + 1 ]) //\u8da8\u52e2\u8981\u4e00\u81f4 { if ( pat [ i ] != pat [ i + 1 ]) { return false ; } } else { if ( pat [ i ] == pat [ i + 1 ]) //\u8da8\u52e2\u8981\u4e00\u81f4 { return false ; } } } return true ; } }; \u7f3a\u5931\u5206\u6790:WA\u7684\u539f\u56e0\u5728\u65bc\uff0c\u9019\u6a23\u6703\u628aaba = xyx = abc \u4f46\u5be6\u969b\u4e0a\u9019\u984c\u8981\u6c42\u9023 \u6bcf\u4e00\u500b\u5b57\u6bcd\u51fa\u73fe\u983b\u7387\u4e5f\u8981\u4e00\u6a23 \uff0c\u56e0\u6b64\u6700\u5f8ca b c\u5404\u81ea\u53ea\u6709\u4e00\u500b\u4e26\u4e0d\u5c6c\u65bc\u540c\u4e00\u985e \u6539\u9032\u601d\u8def:\u591a\u4e00\u500bmap\u4f86\u7d71\u8a08\uff0c\u4e26\u4e14\u5c0d\u7167\u7d44\u7684map\u5167\u5bb9\u8981\u548cpattern\u4e00\u6a23\uff0c\u5728\u82f1\u6587\u5b57\u6bcd\u4e00\u6a23\u7684\u6642\u5019\u4e0d\u7528\u7ba1\uff0c\u4e0d\u4e00\u6a23\u6642\u8981\u770b\u5404\u81eamap\u5167\u5bb9\u7269\u662f\u5426\u76f8\u7b49\uff0c\u5426\u5247\u8fd4\u56defalse class Solution { public : vector string findAndReplacePattern ( vector string words , string pattern ) { vector string res ; for ( auto it : words ) { if ( check ( it , pattern )) { res . push_back ( it ); } } return res ; } bool check ( string to_chk , string pat ) { if ( to_chk . size () != pat . size ()) { return false ; } /*check the mapping correspondence*/ map char , int chkmap ; map char , int patmap ; for ( auto it : to_chk ) { chkmap [ it ] ++ ; } for ( auto it : pat ) { patmap [ it ] ++ ; } /*check the changing trend*/ for ( int i = 0 ; i to_chk . size () - 1 ; i ++ ) { if ( to_chk [ i ] == to_chk [ i + 1 ]) { if ( pat [ i ] != pat [ i + 1 ]) { return false ; } } else { if ( pat [ i ] == pat [ i + 1 ]) { return false ; } else if ( patmap [ pat [ i ]] != chkmap [ to_chk [ i ]] || patmap [ pat [ i + 1 ]] != chkmap [ to_chk [ i + 1 ]]) /*such as abc and aba should not be the same, if no this part, will get wrong answer*/ { return false ; } } } return true ; } }; \u5206\u6790(\u6b63\u89e3\u6574\u9ad4):Time complexity: O(N * K), where N is # of words, and K is the length of word, Space complexity O(N * K), each time for each pattern and word, we use a map to assist. PC. 889. Construct Binary Tree from Preorder and Postorder Traversal \u91cd\u5efa\u6a39 \u984c\u610f:\u7531\u5148\u5e8f\u548c\u5f8c\u5e8f\u5efa\u7acb\u4e00\u9846\u4e8c\u5143\u6a39 \u601d\u8def: https://imgur.com/a/s9kTWbG (Picture source credit to: https://www.youtube.com/watch?v=53aOi0Drp9I ) \u9996\u5148preorder = {root left right}, post order = {left right root}\uff0c\u5229\u7528\u4e0a\u65b9\u7684\u5716\u7247\u53ef\u4ee5\u770b\u5230\uff0c\u8209\u4f8b\u4f86\u8aaa pre = [1,2,4,5,3,6,7]. post = [4,5,2,6,7,3,1]\uff0cpre = 1 245 367, post = 452 673 1\uff0cpre[1]\u5fc5\u70ba\u5de6\u5b50\u6a39\u6839\uff0c\u6b63\u597d\u5c0d\u61c9\u5230post[2] (\u4f46\u4e0d\u76e1\u7136\u6bcf\u6b21\u90fd\u662fpost[2])\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528code\u4e2d\u627e\u51faileft subtree\u7684root\u4f4d\u7f6e\uff0c\u6700\u5f8c\u4fbf\u80fd\u7528\u4ee5\u4e0b\u56db\u500b(\u5de6\u53f3\u5b50\u6578\u5404\u81ea\u5c0d\u61c9\u4e4bpre post traversal) while ( pre [ 1 ] != post [ left_subtree_root_pos ]) //find the equal for the right subtree { left_subtree_root_pos ++ ; } post traversal of left subtree = post[0:left_subtree_root_pos] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593 []\u800c\u975e()) post traversal of right subtree = post[left_subtree_root_pos + 1:-2] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593) pre traversal of left subtree = pre[1:left_subtree_root_pos + 1] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593) pre traversal of right subtree = pre[left_subtree_root_pos + 2:-1] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593) \u63a5\u8457\u5229\u7528root- left = recursively_construct(left_subtree_pre_traverse, left_subtree_post_traverse) \u518d\u5229\u7528root- right = recursively_construct(right_subtree_pre_traverse, right_subtree_post_traverse) \u5206\u6790:Time complexity O(N^2), Space complexity O(N^2) where N is the # of nodes, since each time for every node(N), we have to go through the array of traversed node again(N), which in total is O(N^2) \u5099\u8a3b:\u53ef\u4ee5\u7528\u7a0b\u5f0f\u78bc\u9644\u7684print_subtree_dbg \u4f86\u770b\u770b\u5b50\u6a39\u5230\u5e95\u5305\u4e86\u54ea\u4e9b\u6771\u897f\u5594\uff0c\u6bd4\u8f03\u597d\u77ad\u89e3\uff0c\u4ee5\u53ca\u4e00\u4e9bstdio /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : TreeNode * constructFromPrePost ( vector int pre , vector int post ) { return construct ( pre , post ); } TreeNode * construct ( vector int pre , vector int post ) { if ( pre . size () == 1 post . size () == 1 ) // the base case with leaf { //printf( base case presize %d postsize %d\\n , pre.size(), post.size()); TreeNode * newnode = new TreeNode ( pre [ 0 ]); return newnode ; } else if ( pre . size () == 0 post . size () == 0 ) //the null { return NULL ; } vector int left_subtree_pre ; vector int left_subtree_pos ; vector int right_subtree_pre ; vector int right_subtree_pos ; int left_subtree_root_pos = 0 ; while ( pre [ 1 ] != post [ left_subtree_root_pos ]) //find the equal for the right subtree { left_subtree_root_pos ++ ; } // printf( \\nleft pos %d with root %d\\n , left_subtree_root_pos, pre[0]); for ( int i = 0 ; i = left_subtree_root_pos ; i ++ ) //construct the post traverse of left subtree { left_subtree_pos . push_back ( post [ i ]); } for ( int i = left_subtree_root_pos + 1 ; i post . size () - 1 ; i ++ ) //construct the post traverse of right subtree { right_subtree_pos . push_back ( post [ i ]); } for ( int i = 1 ; i = left_subtree_root_pos + 1 ; i ++ ) //construct the pre traverse of left subtree { left_subtree_pre . push_back ( pre [ i ]); } for ( int i = left_subtree_root_pos + 2 ; i = post . size () - 1 ; i ++ ) //construct the pre traverse of right subtree { right_subtree_pre . push_back ( pre [ i ]); } // print_subtree_dbg( left pos ,left_subtree_pos); // print_subtree_dbg( right pos ,right_subtree_pos); // print_subtree_dbg( left pre ,left_subtree_pre); // print_subtree_dbg( right pre ,right_subtree_pre); newnode - left = construct ( left_subtree_pre , left_subtree_pos ); TreeNode * newnode = new TreeNode ( pre [ 0 ]); //or post[-1] newnode - right = construct ( right_subtree_pre , right_subtree_pos ); return newnode ; //after construct, return it } void print_subtree_dbg ( string cond , vector int vec ) { cout cond : ; for ( int i = 0 ; i vec . size (); i ++ ) { printf ( %d , vec [ i ]); } printf ( \\n ); } }; PD. 891. Sum of Subsequence Widths \u6578\u5b78\u984c\uff0c\u8f03\u96e3 \u984c\u610f: \u627e\u51fa\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5bec\u5ea6\uff0c\u5bec\u5ea6\u5b9a\u7fa9\u70ba\uff0c\u5b50\u5e8f\u5217\u6700\u5927\u5143\u7d20\u6263\u9664\u5b50\u5e8f\u5217\u6700\u5c0f\u5143\u7d20\u3002 \u601d\u8def: \u66b4\u529b\u89e3\u986f\u7136\u884c\u4e0d\u901a\uff0c\u4f46\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e00\u500b\u5143\u7d20\u90fd\u6703\u88ab\u7576\u4f5c\u8a72\u96c6\u5408\u7684\u6700\u5927\u8207\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u5982\u5716\u4e2d\u7684\u6982\u5ff5 \uff0c\u8209\u4f8b\u4f86\u8aaa(\u56e0\u70balinux\u4e0a\u4e2d\u82f1\u6587\u540c\u6642\u6253\u6709\u9ede\u9ebb\u7169\uff0c\u6545\u4ee5\u4e0b\u8209\u4f8b\u4ee5\u82f1\u6587\u8868\u793a) From the given example as [1, 2, 4] (Note that the correct answer should be 9), we have the following subseq with non zero width(i.e. element more than 1):[1, 2] [1, 4] [2, 4] [1, 2, 4] 1 as min: [1, 2], [1, 4], [1, 2, 4] / as max: none / total = (a[1] - a[0]) + (a[2] - a[0]) + (a[2] - a[0]) 2 as min: [2, 4] / as max: [1, 2] (a[1] - a[0]) / total = (a[2] - a[1]) 4 as min: none / as max: [1, 4], [2, 4]. [1, 2, 4] (all duplicated) after clanup we can found that this is equal to (a[2] + a[2] + a[2]) (max 4 for 3 times) + (a[1] - a[1]) (2 max for 1 times and so do min) + (-a[0] - a[0] - a[0]) (1 min for 3 times) \u5206\u6790: Time complexity: O(N log N) due to sorting, Space complexity O(1)) \u4ee5\u4e0b\u7a0b\u5f0f\u78bcTLE\uff0c\u539f\u56e0\u5728\u65bc\u6bcf\u4e00\u6b21\u7684\u76f8\u52a0\u90fd\u8981\u547c\u53ebpow_mod\uff0c\u8a08\u7b97\u91cf\u9ad8\uff0c\u76f8\u7576\u8cbb\u6642 #define ll long long const ll MOD = 1e9 + 7 ; class Solution { public : int sumSubseqWidths ( vector int A ) { ll res = 0 , sz = A . size (); sort ( A . begin (), A . end ()); for ( int i = 0 ; i sz ; i ++ ) { ll delta = A [ i ] * pow_mod ( 2 , i ) - A [ i ] * pow_mod ( 2 , sz - i - 1 ); res += delta ; res %= MOD ; } return res ; } ll pow_mod ( ll base , int pow ) { ll res = 1 ; for ( int i = 0 ; i pow ; i ++ ) { res = 1 ; res %= MOD ; } return res - 1 ; //exclude the null set \u7531\u65bc\u9663\u5217\u5143\u7d20\u6700\u591a\u523020000\uff0c\u6545\u5229\u7528 for ( int i = 1 ; i sz ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] % MOD * 2 ) % MOD ; } \u5148\u5c07\u7d50\u679ccache\u8d77\u4f86\u518d\u8a08\u7b97 #define ll long long const ll MOD = 1e9 + 7 ; class Solution { public : int sumSubseqWidths ( vector int A ) { ll res = 0 , sz = A . size (); sort ( A . begin (), A . end ()); ll dp [ 20001 ] = { 0 }; dp [ 0 ] = 1 ; for ( int i = 1 ; i sz ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] % MOD * 2 ) % MOD ; } for ( int i = 0 ; i sz ; i ++ ) { res += A [ i ] * ( dp [ i ] - dp [ sz - i - 1 ]); res %= MOD ; } return res ; } }; WC99 PA. 892. Surface Area of 3D Shapes \u6c42\u8868\u9762\u7a4d\uff0c\u6c34\u984c \u984c\u610f: \u6709 2d grid(2dvector \u69cb\u6210), size is grid.size() * grid.size()\uff0c\u5728grid[i][j]\u6709\u9ad8\u5ea6\u70bav\u7684\u7acb\u65b9\u9ad4\u5806\u7a4d\uff08\u53ef\u4ee5\u60f3\u50cf\u4e00\u4e0b\u4ee5\u524d\u7684\u5c0f\u767d\u65b9\u584a\uff09\uff0c\u6c42\u6700\u5f8c\u6574\u9ad4\u7684\u8868\u9762\u7a4d\uff0c \u6ce8\u610f\uff0c[[1,1]] [[1,2]] \u7684\u7b54\u6848\u90fd\u662f6\uff0c\u56e0\u70ba\u5728grid\u4ee5\u5916\u7684\u65b9\u584a\u4e0d\u63a1\u8a08\uff0c\u88ab\u9019\u500b\u63d0\u8b70\u6c92\u8aaa\u6e05\u695a\u64fa\u4e86\u4e00\u9053... \u601d\u8def: \u76f4\u63a5\u7b97\uff0c\u6263\u6389\u91cd\u5408\u90e8\u4efd\u5373\u53ef(\u4e5f\u5c31\u662f\u6bcf\u6b21\u770bi - 1, j - 1\u4e4b\u65bc\u81ea\u5df1\u7684\u91cd\u5408\u90e8\u4efd) \u5206\u6790: Time complexity: O(N^2), Space complexity O(1) class Solution { public : int surfaceArea ( vector vector int grid ) { int res = 0 , border = grid . size (); for ( int i = 0 ; i grid . size (); i ++ ) { for ( int j = 0 ; j grid [ i ]. size (); j ++ ) { if ( j border - 1 || i border - 1 ) { continue ; } else { if ( grid [ i ][ j ]) { res += grid [ i ][ j ] * 4 + 2 ; } if ( j 0 ) //adjacent sticked area { res -= 2 * min ( grid [ i ][ j ], grid [ i ][ j - 1 ]); } if ( i 0 ) //adjacent sticked area { res -= 2 * min ( grid [ i ][ j ], grid [ i - 1 ][ j ]); } } } } return res ; } }; PB. 893. Groups of Special-Equivalent Strings \u7c21\u55ae\u5b57\u4e32\u984c \u984c\u610f: \u554f str1, str2 \u5404\u81ea\u4e2d\uff0c\u5947\u6578\u6216\u5076\u6578\u4f4d\u7f6e\u5b57\u5143\u5c0d\u8abf\uff0c\u53ef\u5426\u6210\u70ba\u53e6\u4e00\u500b ex: abc = cba, abcd = cdab = adcb = cbad \u601d\u8def: \u7528map\u5148\u5c07\u4e00\u65b9\u7684odd even\u4ee5char- count\u4ee3\u8868\u57fa\u6578\u6216\u5076\u6578\u4e2dchar\u5404\u81ea\u5c0d\u61c9\u591a\u5c11\u500b\uff0c\u5728\u8dd1\u7b2c\u4e8c\u500bword\uff0c\u8dd1\u5f97\u904e\u7a0b\u82e5\u51fa\u73fe0\u4ee3\u8868\u5148\u524d\u6c92\u51fa\u73fe\u904e(\u4f8b\u5982 abc, dbc \u8dd1\u7b2c\u4e8c\u500bd\u6620\u5c04\u904e\u53bb\u6703\u662f0(\u7576\u521dabc\u6c92\u6709d\u56e0\u6b64\u4e0d\u5c6c\u65bc\u540c\u4e00\u985e\u578b))\uff0c\u76f4\u63a5\u8fd4\u56defalse\uff0c\u5168\u90e8\u8dd1\u7562\u624d\u8fd4\u56detrue()) \u5206\u6790: Time complexity = O(N^2), Space complexity = O(N * K) where N is the size of input vector and K is the length of word since for each word we construct the map \u53cd\u601d: \u89ba\u5f97\u6709\u9ede\u592a\u5197\u9577\uff0c\u6b61\u8fce\u63d0\u4f9b\u66f4\u597d\u4f5c\u6cd5 class Solution { public : int len , sz , cnt ; int numSpecialEquivGroups ( vector string A ) { vector bool visit ( A . size (), 0 ); vector vector string res ; vector string tmp ; len = A [ 0 ]. size (); sz = A . size (); cnt = 0 ; for ( int i = 0 ; i sz - 1 ; i ++ ) { if ( visit [ i ]) { continue ; } else { tmp . clear (); tmp . push_back ( A [ i ]); //push itself visit [ i ] = true ; for ( int j = i + 1 ; j sz ; j ++ ) { if ( eqv ( A [ i ], A [ j ])) { tmp . push_back ( A [ j ]); visit [ j ] = true ; } } cnt ++ ; res . push_back ( tmp ); } } if ( ! visit [ sz - 1 ]) { cnt ++ ; } return cnt ; } bool eqv ( string s1 , string s2 ) { map char , int odd ; map char , int even ; for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { odd [ s1 [ i ]] ++ ; } else { even [ s1 [ i ]] ++ ; } } for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { if ( odd [ s2 [ i ]] == 0 ) { return false ; } } else { if ( even [ s2 [ i ]] == 0 ) { return false ; } } } //reverse odd . clear (); even . clear (); for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { odd [ s2 [ i ]] ++ ; } else { even [ s2 [ i ]] ++ ; } } for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { if ( odd [ s1 [ i ]] == 0 ) { return false ; } } else { if ( even [ s1 [ i ]] == 0 ) { return false ; } } } return true ; } }; PC. 894. All Possible Full Binary Trees \u6240\u6709\u53ef\u80fd\u7684\u4e8c\u5143\u6a39 \u984c\u610f: \u5c31\u662f\u6240\u6709\u7684\u4e8c\u5143\u6a39\u53ef\u80fd\uff0c\u5efa\u51fa\u5f8c\u628aroot\u653e\u5230vector\u8fd4\u56de \u601d\u8def: \u905e\u8ff4\u6c42\u89e3\uff0c\u56e0\u70ba\u5b8c\u6574\u4e8c\u5143\u6a39\u5fc5\u5b9a\u6709\u5947\u6578\u500b\u7bc0\u9ede\uff0c\u56e0\u6b64\u82e5\u9032\u5165\u7684N\u4e0d\u662f\u5947\u6578\u76f4\u63a5\u8fd4\u56de\u7a7avector\uff0c\u63a5\u8457\u9010\u6b65\u5efa\u7acb\uff0c\u5207\u5272\u70bai\u500b\u7bc0\u9ede\u7684left subtree\u548cn - i - 1(\u5305\u542b\u6839\u90e8)\u7684right subtree\u905e\u8ff4\u4e0b\u53bb\u89e3\uff0c\u518d\u63a5\u8d77\u4f86\u5982\u4e0b\u7a0b\u5f0f\u78bc for ( int left = 1 ; left N ; left += 2 /*(since no even number)*/ ) //left subtree node count { vector TreeNode * left_subtree = allPossibleFBT ( left ); vector TreeNode * right_subtree = allPossibleFBT ( N - left - 1 ); \u5de6\u53f3\u90fd\u6703\u662fFBT\uff0c\u56e0\u6b64 += 2\u7684\u8ff4\u5708\u80fd\u907f\u958b\u5076\u6578\u60c5\u5f62\uff0c\u6700\u5f8c\u5947\u6578+\u5947\u6578+1\u6b63\u597d\u4e5f\u662f\u5947\u6578\uff0c\u6c92\u6709\u554f\u984c \u5206\u6790: Time Conplexity O(2^N), Space complexity O(2^N) (\u5361\u5854\u862d\u6578) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : vector TreeNode * allPossibleFBT ( int N ) { printf ( N = %d \\n , N ); TreeNode * root = new TreeNode ( 0 ); root - left = root - right = NULL ; vector TreeNode * res ; if ( ! ( N 1 )) { return {}; } else if ( N == 1 ) { res . push_back ( root ); return res ; } for ( int left = 1 ; left N ; left += 2 /*(since no even number)*/ ) //left subtree node count { vector TreeNode * left_subtree = allPossibleFBT ( left ); vector TreeNode * right_subtree = allPossibleFBT ( N - left - 1 ); //minus left subtree and the root for ( auto it : left_subtree ) { for ( auto it2 : right_subtree ) //all conbinations of left X right subtree (cartesian product) { TreeNode * new_node = new TreeNode ( 0 ); //connect two subtree with the root new_node - left = it ; new_node - right = it2 ; res . push_back ( new_node ); } } } return res ; } }; PD. 895. Maximum Frequency Stack \u6700\u5927\u983b\u7387\u68e7\uff0c\u96d9map\u61c9\u7528 \u984c\u610f: \u8a2d\u8a08\u4e00\u500b\u68e7\uff0c\u4f7f\u5f97\u5f48\u51fa\u6642\u80fd\u8fd4\u56de\u6700\u5927\u983b\u7387\u7684\u5143\u7d20\uff0c\u82e5\u6709\u8907\u6578\u500b\u5143\u7d20\u983b\u7387\u76f8\u7b49\uff0c\u5247\u8fd4\u56de\u6700\u63a5\u8fd1\u68e7\u9802\u7684 \u601d\u8def: \u7528\u4e00\u500bmap \u5b58\u653e\u6578\u5b57\u8207\u81ea\u5df1\u5c0d\u61c9\u7684\u983b\u7387 \uff0c\u518d\u7528map \u5b58\u653e\u983b\u7387\u8207\u5404\u983b\u7387\u51fa\u73fe\u904e\u5f97\u6578\u5b57\uff0c\u4f8b\u5982push 8\u6b21 1 \u5247\u983b\u73871 ~ 8 \u7684\u68e7(stack)\u9802\u7aef\u5747\u6703\u662f1\uff0c\u4ee5\u6b64\u985e\u63a8\u3002 \u518d\u8005\uff0c\u7531\u65bc\u5f8c\u9032\u5148\u51fa\uff0c\u525b\u597d\u53ef\u4ee5\u5728\u540c\u4e00\u983b\u7387\u7684\u6578\u5b57\u7fa4\u88e1\u9762\uff0c\u9078\u64c7\u6700\u665a\u9032\u5165\u7684\u6578\u5b57\u5f48\u51fa\uff0c\u5982\u5716 \u5206\u6790: Time complexity O(1), since using unordered_map for inserting data, which is actually the hash, takes O(N) time, and we use stack.top(), pop() to implement \"frequency pop\" which is also O(1). Space complexity O(N) if N 10001. \u53e6\u898b: \u7cbe\u7c21\u524d\u7684code \uff0c\u591a\u4f7f\u7528\u4e86\u4e00\u500b map stack\u4f86\u5b58\u653e\u5143\u7d20\u5c0d\u61c9\u7684\u4f4d\u7f6e\uff08\u5be6\u969b\u4e0a\u76f4\u63a5\u5b58\u5143\u7d20\u5373\u53ef\uff0c\u53e6\u5916\u958b\u4e00\u500bstack\u7d00\u9304\u6700\u5927\u503c\u8b8a\u5316\u7565\u986f\u591a\u6b64\u4e00\u8209) #define MAXN 10001 class FreqStack { public : unordered_map int , int num_freq ; //hash of num to its occurances // stack int freq_stk[MAXN]; -- this cause MLE since static memory size is too big(use the upper limit from problem) unordered_map int , stack int freq_stk ; //data structure of freq stack, record the occurance of number to certain freq, ex push 2 push 3 push 2 push 4, we have freq[1] = [3, 4](top), freq[2] = [2] int maxfreq ; FreqStack () { maxfreq = 0 ; } void push ( int x ) { if ( ++ num_freq [ x ] maxfreq ) { maxfreq = num_freq [ x ]; } freq_stk [ num_freq [ x ]]. push ( x ); // printf( push %d, maxfreq now %d \\n , x, maxfreq); } int pop () { if ( freq_stk [ maxfreq ]. size () == 0 ) { maxfreq -- ; //means all the numbers corresponding to that freq has been used out } int res = freq_stk [ maxfreq ]. top (); freq_stk [ maxfreq ]. pop (); // printf( pop val %d maxfreq %d\\n , res, maxfreq); num_freq [ res ] -- ; return res ; } }; /** * Your FreqStack object will be instantiated and called as such: * FreqStack obj = new FreqStack(); * obj.push(x); * int param_2 = obj.pop(); */ `","title":"WC98+99"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#leetcode_oj-wc98-99","text":"\u6691\u5047\u6700\u5f8c\u56e0\u5be6\u7fd2\u9032\u5ea6\u4ea4\u63a5\uff0c\u6709\u9ede\u7d2f\uff0c\u6253\u4e86weekly contest\u7d50\u679c\u61f6\u5f97\u66f4\u65b0\uff0c\u9019\u6b21\u4e00\u6b21\u66f4\u65b0\u5427 Contest time WC98: Aug 19, 2018 (\u984c\u89e3\u5b8c\u6210) Contest time WC99: Aug 26, 2018 (\u984c\u89e3\u5b8c\u6210)","title":"leetcode_OJ WC98 99 \u89e3\u984c\u5fc3\u5f97"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#wc98","text":"","title":"WC98"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pa-888-fair-candy-swap","text":"\u984c\u610f:\u5169\u4eba\u5404\u6301\u6709\u6578\u5806\u7cd6\u679c\uff0c\u6bcf\u4e00\u5806\u6709n\u500b\u7cd6\u679c\uff0c\u554f\u5404\u81ea\u4ea4\u63db\u54ea\u4e00\u5806\u53ef\u4ee5\u8b93\u4ed6\u5011\u5169\u500b\u7684\u7cd6\u679c\u6578\u91cf\u4e00\u6a23 \u601d\u8def:\u76f4\u63a5\u505a\uff0c\u5169\u500b\u4eba\u4e00\u6a23\u53d6\u5e73\u5747\uff0c\u66b4\u529b\u627e\u5373\u53ef\u3002 \u5206\u6790:Time complexity: O(N^2), Space complexity O(N) class Solution { public : vector int fairCandySwap ( vector int A , vector int B ) { int suma , sumb , flg ; suma = sumb = 0 ; flg = 0 ; vector int res ; for ( int i = 0 ; i A . size (); i ++ ) { suma += A [ i ]; } for ( int i = 0 ; i B . size (); i ++ ) { sumb += B [ i ]; } int fair = ( suma + sumb ) / 2 ; for ( int i = 0 ; i A . size (); i ++ ) { for ( int j = 0 ; j B . size (); j ++ ) { if ( suma - A [ i ] + B [ j ] == sumb - B [ j ] + A [ i ]) { res . push_back ( A [ i ]); res . push_back ( B [ j ]); flg = 1 ; break ; } } if ( flg ) { break ; } } return res ; } bool check ( vector int A , vector int B ) { int suma , sumb ; suma = sumb = 0 ; for ( int i = 0 ; i A . size (); i ++ ) { suma += A [ i ]; } for ( int i = 0 ; i B . size (); i ++ ) { sumb += B [ i ]; } return ( suma == sumb ) ( suma ) ( sumb ); //should be more than zero } };","title":"PA. 888. Fair Candy Swap \u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pb-890-find-and-replace-pattern-string-map","text":"\u984c\u610f:\u627e\u51fa\u8da8\u52e2\u4e00\u6a23\u7684\u55ae\u5b57\uff0c\u5728\u6b64\u8da8\u52e2\u4e00\u6a23\u662f\u6307\u82f1\u6587\u5b57\u51fa\u5148\u7684\u300e\u983b\u7387\u3001\u65b9\u5f0f\u300f\u4e00\u81f4\uff0c\u4f8b\u5982 aabb = ccbb = jjkk , apple = knnrx \u7b49 WA\u601d\u8def:\u8da8\u52e2\u4e00\u6a23\u4ee3\u8868\u8aaa\uff0c\u6211\u4e0b\u4e00\u500b\u662f\u4e0d\u4e00\u6a23\u7684\u5b57\u6bcd\uff0c\u5247\u4f60\u4e5f\u662f;\u6211\u5982\u679c\u662f\u4e00\u6a23\u7684\u5247\u4f60\u4e5f\u8981\u4e00\u6a23\uff0c\u9019\u6a23\u76f4\u63a5\u505a\u5373\u53ef\uff08\u4f46\u662f\u63a5\u4e0b\u4f86\u6703\u9047\u5230\u4e00\u500b\u554f\u984c\uff0c\u7a0d\u5f8c\u4e0b\u65b9\u300e\u7f3a\u5931\u5206\u6790\u300f\u6703\u63d0\u53ca\uff09 class Solution { public : vector string findAndReplacePattern ( vector string words , string pattern ) { vector string res ; for ( auto it : words ) { if ( check ( it , pattern )) { res . push_back ( it ); } } return res ; } bool check ( string to_chk , string pat ) { if ( to_chk . size () != pat . size ()) { return false ; } for ( int i = 0 ; i to_chk . size () - 1 ; i ++ ) { if ( to_chk [ i ] == to_chk [ i + 1 ]) //\u8da8\u52e2\u8981\u4e00\u81f4 { if ( pat [ i ] != pat [ i + 1 ]) { return false ; } } else { if ( pat [ i ] == pat [ i + 1 ]) //\u8da8\u52e2\u8981\u4e00\u81f4 { return false ; } } } return true ; } }; \u7f3a\u5931\u5206\u6790:WA\u7684\u539f\u56e0\u5728\u65bc\uff0c\u9019\u6a23\u6703\u628aaba = xyx = abc \u4f46\u5be6\u969b\u4e0a\u9019\u984c\u8981\u6c42\u9023 \u6bcf\u4e00\u500b\u5b57\u6bcd\u51fa\u73fe\u983b\u7387\u4e5f\u8981\u4e00\u6a23 \uff0c\u56e0\u6b64\u6700\u5f8ca b c\u5404\u81ea\u53ea\u6709\u4e00\u500b\u4e26\u4e0d\u5c6c\u65bc\u540c\u4e00\u985e \u6539\u9032\u601d\u8def:\u591a\u4e00\u500bmap\u4f86\u7d71\u8a08\uff0c\u4e26\u4e14\u5c0d\u7167\u7d44\u7684map\u5167\u5bb9\u8981\u548cpattern\u4e00\u6a23\uff0c\u5728\u82f1\u6587\u5b57\u6bcd\u4e00\u6a23\u7684\u6642\u5019\u4e0d\u7528\u7ba1\uff0c\u4e0d\u4e00\u6a23\u6642\u8981\u770b\u5404\u81eamap\u5167\u5bb9\u7269\u662f\u5426\u76f8\u7b49\uff0c\u5426\u5247\u8fd4\u56defalse class Solution { public : vector string findAndReplacePattern ( vector string words , string pattern ) { vector string res ; for ( auto it : words ) { if ( check ( it , pattern )) { res . push_back ( it ); } } return res ; } bool check ( string to_chk , string pat ) { if ( to_chk . size () != pat . size ()) { return false ; } /*check the mapping correspondence*/ map char , int chkmap ; map char , int patmap ; for ( auto it : to_chk ) { chkmap [ it ] ++ ; } for ( auto it : pat ) { patmap [ it ] ++ ; } /*check the changing trend*/ for ( int i = 0 ; i to_chk . size () - 1 ; i ++ ) { if ( to_chk [ i ] == to_chk [ i + 1 ]) { if ( pat [ i ] != pat [ i + 1 ]) { return false ; } } else { if ( pat [ i ] == pat [ i + 1 ]) { return false ; } else if ( patmap [ pat [ i ]] != chkmap [ to_chk [ i ]] || patmap [ pat [ i + 1 ]] != chkmap [ to_chk [ i + 1 ]]) /*such as abc and aba should not be the same, if no this part, will get wrong answer*/ { return false ; } } } return true ; } }; \u5206\u6790(\u6b63\u89e3\u6574\u9ad4):Time complexity: O(N * K), where N is # of words, and K is the length of word, Space complexity O(N * K), each time for each pattern and word, we use a map to assist.","title":"PB. 890. Find and Replace Pattern string + map"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pc-889-construct-binary-tree-from-preorder-and-postorder-traversal","text":"\u984c\u610f:\u7531\u5148\u5e8f\u548c\u5f8c\u5e8f\u5efa\u7acb\u4e00\u9846\u4e8c\u5143\u6a39 \u601d\u8def: https://imgur.com/a/s9kTWbG (Picture source credit to: https://www.youtube.com/watch?v=53aOi0Drp9I ) \u9996\u5148preorder = {root left right}, post order = {left right root}\uff0c\u5229\u7528\u4e0a\u65b9\u7684\u5716\u7247\u53ef\u4ee5\u770b\u5230\uff0c\u8209\u4f8b\u4f86\u8aaa pre = [1,2,4,5,3,6,7]. post = [4,5,2,6,7,3,1]\uff0cpre = 1 245 367, post = 452 673 1\uff0cpre[1]\u5fc5\u70ba\u5de6\u5b50\u6a39\u6839\uff0c\u6b63\u597d\u5c0d\u61c9\u5230post[2] (\u4f46\u4e0d\u76e1\u7136\u6bcf\u6b21\u90fd\u662fpost[2])\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528code\u4e2d\u627e\u51faileft subtree\u7684root\u4f4d\u7f6e\uff0c\u6700\u5f8c\u4fbf\u80fd\u7528\u4ee5\u4e0b\u56db\u500b(\u5de6\u53f3\u5b50\u6578\u5404\u81ea\u5c0d\u61c9\u4e4bpre post traversal) while ( pre [ 1 ] != post [ left_subtree_root_pos ]) //find the equal for the right subtree { left_subtree_root_pos ++ ; } post traversal of left subtree = post[0:left_subtree_root_pos] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593 []\u800c\u975e()) post traversal of right subtree = post[left_subtree_root_pos + 1:-2] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593) pre traversal of left subtree = pre[1:left_subtree_root_pos + 1] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593) pre traversal of right subtree = pre[left_subtree_root_pos + 2:-1] (\u96d9\u7aef\u7686\u70ba\u5c01\u9589\u5340\u9593) \u63a5\u8457\u5229\u7528root- left = recursively_construct(left_subtree_pre_traverse, left_subtree_post_traverse) \u518d\u5229\u7528root- right = recursively_construct(right_subtree_pre_traverse, right_subtree_post_traverse) \u5206\u6790:Time complexity O(N^2), Space complexity O(N^2) where N is the # of nodes, since each time for every node(N), we have to go through the array of traversed node again(N), which in total is O(N^2) \u5099\u8a3b:\u53ef\u4ee5\u7528\u7a0b\u5f0f\u78bc\u9644\u7684print_subtree_dbg \u4f86\u770b\u770b\u5b50\u6a39\u5230\u5e95\u5305\u4e86\u54ea\u4e9b\u6771\u897f\u5594\uff0c\u6bd4\u8f03\u597d\u77ad\u89e3\uff0c\u4ee5\u53ca\u4e00\u4e9bstdio /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : TreeNode * constructFromPrePost ( vector int pre , vector int post ) { return construct ( pre , post ); } TreeNode * construct ( vector int pre , vector int post ) { if ( pre . size () == 1 post . size () == 1 ) // the base case with leaf { //printf( base case presize %d postsize %d\\n , pre.size(), post.size()); TreeNode * newnode = new TreeNode ( pre [ 0 ]); return newnode ; } else if ( pre . size () == 0 post . size () == 0 ) //the null { return NULL ; } vector int left_subtree_pre ; vector int left_subtree_pos ; vector int right_subtree_pre ; vector int right_subtree_pos ; int left_subtree_root_pos = 0 ; while ( pre [ 1 ] != post [ left_subtree_root_pos ]) //find the equal for the right subtree { left_subtree_root_pos ++ ; } // printf( \\nleft pos %d with root %d\\n , left_subtree_root_pos, pre[0]); for ( int i = 0 ; i = left_subtree_root_pos ; i ++ ) //construct the post traverse of left subtree { left_subtree_pos . push_back ( post [ i ]); } for ( int i = left_subtree_root_pos + 1 ; i post . size () - 1 ; i ++ ) //construct the post traverse of right subtree { right_subtree_pos . push_back ( post [ i ]); } for ( int i = 1 ; i = left_subtree_root_pos + 1 ; i ++ ) //construct the pre traverse of left subtree { left_subtree_pre . push_back ( pre [ i ]); } for ( int i = left_subtree_root_pos + 2 ; i = post . size () - 1 ; i ++ ) //construct the pre traverse of right subtree { right_subtree_pre . push_back ( pre [ i ]); } // print_subtree_dbg( left pos ,left_subtree_pos); // print_subtree_dbg( right pos ,right_subtree_pos); // print_subtree_dbg( left pre ,left_subtree_pre); // print_subtree_dbg( right pre ,right_subtree_pre); newnode - left = construct ( left_subtree_pre , left_subtree_pos ); TreeNode * newnode = new TreeNode ( pre [ 0 ]); //or post[-1] newnode - right = construct ( right_subtree_pre , right_subtree_pos ); return newnode ; //after construct, return it } void print_subtree_dbg ( string cond , vector int vec ) { cout cond : ; for ( int i = 0 ; i vec . size (); i ++ ) { printf ( %d , vec [ i ]); } printf ( \\n ); } };","title":"PC. 889. Construct Binary Tree from Preorder and Postorder Traversal \u91cd\u5efa\u6a39"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pd-891-sum-of-subsequence-widths","text":"\u984c\u610f: \u627e\u51fa\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5bec\u5ea6\uff0c\u5bec\u5ea6\u5b9a\u7fa9\u70ba\uff0c\u5b50\u5e8f\u5217\u6700\u5927\u5143\u7d20\u6263\u9664\u5b50\u5e8f\u5217\u6700\u5c0f\u5143\u7d20\u3002 \u601d\u8def: \u66b4\u529b\u89e3\u986f\u7136\u884c\u4e0d\u901a\uff0c\u4f46\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e00\u500b\u5143\u7d20\u90fd\u6703\u88ab\u7576\u4f5c\u8a72\u96c6\u5408\u7684\u6700\u5927\u8207\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u5982\u5716\u4e2d\u7684\u6982\u5ff5 \uff0c\u8209\u4f8b\u4f86\u8aaa(\u56e0\u70balinux\u4e0a\u4e2d\u82f1\u6587\u540c\u6642\u6253\u6709\u9ede\u9ebb\u7169\uff0c\u6545\u4ee5\u4e0b\u8209\u4f8b\u4ee5\u82f1\u6587\u8868\u793a) From the given example as [1, 2, 4] (Note that the correct answer should be 9), we have the following subseq with non zero width(i.e. element more than 1):[1, 2] [1, 4] [2, 4] [1, 2, 4] 1 as min: [1, 2], [1, 4], [1, 2, 4] / as max: none / total = (a[1] - a[0]) + (a[2] - a[0]) + (a[2] - a[0]) 2 as min: [2, 4] / as max: [1, 2] (a[1] - a[0]) / total = (a[2] - a[1]) 4 as min: none / as max: [1, 4], [2, 4]. [1, 2, 4] (all duplicated) after clanup we can found that this is equal to (a[2] + a[2] + a[2]) (max 4 for 3 times) + (a[1] - a[1]) (2 max for 1 times and so do min) + (-a[0] - a[0] - a[0]) (1 min for 3 times) \u5206\u6790: Time complexity: O(N log N) due to sorting, Space complexity O(1)) \u4ee5\u4e0b\u7a0b\u5f0f\u78bcTLE\uff0c\u539f\u56e0\u5728\u65bc\u6bcf\u4e00\u6b21\u7684\u76f8\u52a0\u90fd\u8981\u547c\u53ebpow_mod\uff0c\u8a08\u7b97\u91cf\u9ad8\uff0c\u76f8\u7576\u8cbb\u6642 #define ll long long const ll MOD = 1e9 + 7 ; class Solution { public : int sumSubseqWidths ( vector int A ) { ll res = 0 , sz = A . size (); sort ( A . begin (), A . end ()); for ( int i = 0 ; i sz ; i ++ ) { ll delta = A [ i ] * pow_mod ( 2 , i ) - A [ i ] * pow_mod ( 2 , sz - i - 1 ); res += delta ; res %= MOD ; } return res ; } ll pow_mod ( ll base , int pow ) { ll res = 1 ; for ( int i = 0 ; i pow ; i ++ ) { res = 1 ; res %= MOD ; } return res - 1 ; //exclude the null set \u7531\u65bc\u9663\u5217\u5143\u7d20\u6700\u591a\u523020000\uff0c\u6545\u5229\u7528 for ( int i = 1 ; i sz ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] % MOD * 2 ) % MOD ; } \u5148\u5c07\u7d50\u679ccache\u8d77\u4f86\u518d\u8a08\u7b97 #define ll long long const ll MOD = 1e9 + 7 ; class Solution { public : int sumSubseqWidths ( vector int A ) { ll res = 0 , sz = A . size (); sort ( A . begin (), A . end ()); ll dp [ 20001 ] = { 0 }; dp [ 0 ] = 1 ; for ( int i = 1 ; i sz ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] % MOD * 2 ) % MOD ; } for ( int i = 0 ; i sz ; i ++ ) { res += A [ i ] * ( dp [ i ] - dp [ sz - i - 1 ]); res %= MOD ; } return res ; } };","title":"PD. 891. Sum of Subsequence Widths \u6578\u5b78\u984c\uff0c\u8f03\u96e3"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#wc99","text":"","title":"WC99"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pa-892-surface-area-of-3d-shapes","text":"\u984c\u610f: \u6709 2d grid(2dvector \u69cb\u6210), size is grid.size() * grid.size()\uff0c\u5728grid[i][j]\u6709\u9ad8\u5ea6\u70bav\u7684\u7acb\u65b9\u9ad4\u5806\u7a4d\uff08\u53ef\u4ee5\u60f3\u50cf\u4e00\u4e0b\u4ee5\u524d\u7684\u5c0f\u767d\u65b9\u584a\uff09\uff0c\u6c42\u6700\u5f8c\u6574\u9ad4\u7684\u8868\u9762\u7a4d\uff0c \u6ce8\u610f\uff0c[[1,1]] [[1,2]] \u7684\u7b54\u6848\u90fd\u662f6\uff0c\u56e0\u70ba\u5728grid\u4ee5\u5916\u7684\u65b9\u584a\u4e0d\u63a1\u8a08\uff0c\u88ab\u9019\u500b\u63d0\u8b70\u6c92\u8aaa\u6e05\u695a\u64fa\u4e86\u4e00\u9053... \u601d\u8def: \u76f4\u63a5\u7b97\uff0c\u6263\u6389\u91cd\u5408\u90e8\u4efd\u5373\u53ef(\u4e5f\u5c31\u662f\u6bcf\u6b21\u770bi - 1, j - 1\u4e4b\u65bc\u81ea\u5df1\u7684\u91cd\u5408\u90e8\u4efd) \u5206\u6790: Time complexity: O(N^2), Space complexity O(1) class Solution { public : int surfaceArea ( vector vector int grid ) { int res = 0 , border = grid . size (); for ( int i = 0 ; i grid . size (); i ++ ) { for ( int j = 0 ; j grid [ i ]. size (); j ++ ) { if ( j border - 1 || i border - 1 ) { continue ; } else { if ( grid [ i ][ j ]) { res += grid [ i ][ j ] * 4 + 2 ; } if ( j 0 ) //adjacent sticked area { res -= 2 * min ( grid [ i ][ j ], grid [ i ][ j - 1 ]); } if ( i 0 ) //adjacent sticked area { res -= 2 * min ( grid [ i ][ j ], grid [ i - 1 ][ j ]); } } } } return res ; } };","title":"PA. 892. Surface Area of 3D Shapes \u6c42\u8868\u9762\u7a4d\uff0c\u6c34\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pb-893-groups-of-special-equivalent-strings","text":"\u984c\u610f: \u554f str1, str2 \u5404\u81ea\u4e2d\uff0c\u5947\u6578\u6216\u5076\u6578\u4f4d\u7f6e\u5b57\u5143\u5c0d\u8abf\uff0c\u53ef\u5426\u6210\u70ba\u53e6\u4e00\u500b ex: abc = cba, abcd = cdab = adcb = cbad \u601d\u8def: \u7528map\u5148\u5c07\u4e00\u65b9\u7684odd even\u4ee5char- count\u4ee3\u8868\u57fa\u6578\u6216\u5076\u6578\u4e2dchar\u5404\u81ea\u5c0d\u61c9\u591a\u5c11\u500b\uff0c\u5728\u8dd1\u7b2c\u4e8c\u500bword\uff0c\u8dd1\u5f97\u904e\u7a0b\u82e5\u51fa\u73fe0\u4ee3\u8868\u5148\u524d\u6c92\u51fa\u73fe\u904e(\u4f8b\u5982 abc, dbc \u8dd1\u7b2c\u4e8c\u500bd\u6620\u5c04\u904e\u53bb\u6703\u662f0(\u7576\u521dabc\u6c92\u6709d\u56e0\u6b64\u4e0d\u5c6c\u65bc\u540c\u4e00\u985e\u578b))\uff0c\u76f4\u63a5\u8fd4\u56defalse\uff0c\u5168\u90e8\u8dd1\u7562\u624d\u8fd4\u56detrue()) \u5206\u6790: Time complexity = O(N^2), Space complexity = O(N * K) where N is the size of input vector and K is the length of word since for each word we construct the map \u53cd\u601d: \u89ba\u5f97\u6709\u9ede\u592a\u5197\u9577\uff0c\u6b61\u8fce\u63d0\u4f9b\u66f4\u597d\u4f5c\u6cd5 class Solution { public : int len , sz , cnt ; int numSpecialEquivGroups ( vector string A ) { vector bool visit ( A . size (), 0 ); vector vector string res ; vector string tmp ; len = A [ 0 ]. size (); sz = A . size (); cnt = 0 ; for ( int i = 0 ; i sz - 1 ; i ++ ) { if ( visit [ i ]) { continue ; } else { tmp . clear (); tmp . push_back ( A [ i ]); //push itself visit [ i ] = true ; for ( int j = i + 1 ; j sz ; j ++ ) { if ( eqv ( A [ i ], A [ j ])) { tmp . push_back ( A [ j ]); visit [ j ] = true ; } } cnt ++ ; res . push_back ( tmp ); } } if ( ! visit [ sz - 1 ]) { cnt ++ ; } return cnt ; } bool eqv ( string s1 , string s2 ) { map char , int odd ; map char , int even ; for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { odd [ s1 [ i ]] ++ ; } else { even [ s1 [ i ]] ++ ; } } for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { if ( odd [ s2 [ i ]] == 0 ) { return false ; } } else { if ( even [ s2 [ i ]] == 0 ) { return false ; } } } //reverse odd . clear (); even . clear (); for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { odd [ s2 [ i ]] ++ ; } else { even [ s2 [ i ]] ++ ; } } for ( int i = 0 ; i len ; i ++ ) { if ( i 1 ) { if ( odd [ s1 [ i ]] == 0 ) { return false ; } } else { if ( even [ s1 [ i ]] == 0 ) { return false ; } } } return true ; } };","title":"PB. 893. Groups of Special-Equivalent Strings \u7c21\u55ae\u5b57\u4e32\u984c"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pc-894-all-possible-full-binary-trees","text":"\u984c\u610f: \u5c31\u662f\u6240\u6709\u7684\u4e8c\u5143\u6a39\u53ef\u80fd\uff0c\u5efa\u51fa\u5f8c\u628aroot\u653e\u5230vector\u8fd4\u56de \u601d\u8def: \u905e\u8ff4\u6c42\u89e3\uff0c\u56e0\u70ba\u5b8c\u6574\u4e8c\u5143\u6a39\u5fc5\u5b9a\u6709\u5947\u6578\u500b\u7bc0\u9ede\uff0c\u56e0\u6b64\u82e5\u9032\u5165\u7684N\u4e0d\u662f\u5947\u6578\u76f4\u63a5\u8fd4\u56de\u7a7avector\uff0c\u63a5\u8457\u9010\u6b65\u5efa\u7acb\uff0c\u5207\u5272\u70bai\u500b\u7bc0\u9ede\u7684left subtree\u548cn - i - 1(\u5305\u542b\u6839\u90e8)\u7684right subtree\u905e\u8ff4\u4e0b\u53bb\u89e3\uff0c\u518d\u63a5\u8d77\u4f86\u5982\u4e0b\u7a0b\u5f0f\u78bc for ( int left = 1 ; left N ; left += 2 /*(since no even number)*/ ) //left subtree node count { vector TreeNode * left_subtree = allPossibleFBT ( left ); vector TreeNode * right_subtree = allPossibleFBT ( N - left - 1 ); \u5de6\u53f3\u90fd\u6703\u662fFBT\uff0c\u56e0\u6b64 += 2\u7684\u8ff4\u5708\u80fd\u907f\u958b\u5076\u6578\u60c5\u5f62\uff0c\u6700\u5f8c\u5947\u6578+\u5947\u6578+1\u6b63\u597d\u4e5f\u662f\u5947\u6578\uff0c\u6c92\u6709\u554f\u984c \u5206\u6790: Time Conplexity O(2^N), Space complexity O(2^N) (\u5361\u5854\u862d\u6578) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public : vector TreeNode * allPossibleFBT ( int N ) { printf ( N = %d \\n , N ); TreeNode * root = new TreeNode ( 0 ); root - left = root - right = NULL ; vector TreeNode * res ; if ( ! ( N 1 )) { return {}; } else if ( N == 1 ) { res . push_back ( root ); return res ; } for ( int left = 1 ; left N ; left += 2 /*(since no even number)*/ ) //left subtree node count { vector TreeNode * left_subtree = allPossibleFBT ( left ); vector TreeNode * right_subtree = allPossibleFBT ( N - left - 1 ); //minus left subtree and the root for ( auto it : left_subtree ) { for ( auto it2 : right_subtree ) //all conbinations of left X right subtree (cartesian product) { TreeNode * new_node = new TreeNode ( 0 ); //connect two subtree with the root new_node - left = it ; new_node - right = it2 ; res . push_back ( new_node ); } } } return res ; } };","title":"PC. 894. All Possible Full Binary Trees \u6240\u6709\u53ef\u80fd\u7684\u4e8c\u5143\u6a39"},{"location":"programming_practice/leetcode_OJ_WC/WC9899/#pd-895-maximum-frequency-stack-map","text":"\u984c\u610f: \u8a2d\u8a08\u4e00\u500b\u68e7\uff0c\u4f7f\u5f97\u5f48\u51fa\u6642\u80fd\u8fd4\u56de\u6700\u5927\u983b\u7387\u7684\u5143\u7d20\uff0c\u82e5\u6709\u8907\u6578\u500b\u5143\u7d20\u983b\u7387\u76f8\u7b49\uff0c\u5247\u8fd4\u56de\u6700\u63a5\u8fd1\u68e7\u9802\u7684 \u601d\u8def: \u7528\u4e00\u500bmap \u5b58\u653e\u6578\u5b57\u8207\u81ea\u5df1\u5c0d\u61c9\u7684\u983b\u7387 \uff0c\u518d\u7528map \u5b58\u653e\u983b\u7387\u8207\u5404\u983b\u7387\u51fa\u73fe\u904e\u5f97\u6578\u5b57\uff0c\u4f8b\u5982push 8\u6b21 1 \u5247\u983b\u73871 ~ 8 \u7684\u68e7(stack)\u9802\u7aef\u5747\u6703\u662f1\uff0c\u4ee5\u6b64\u985e\u63a8\u3002 \u518d\u8005\uff0c\u7531\u65bc\u5f8c\u9032\u5148\u51fa\uff0c\u525b\u597d\u53ef\u4ee5\u5728\u540c\u4e00\u983b\u7387\u7684\u6578\u5b57\u7fa4\u88e1\u9762\uff0c\u9078\u64c7\u6700\u665a\u9032\u5165\u7684\u6578\u5b57\u5f48\u51fa\uff0c\u5982\u5716 \u5206\u6790: Time complexity O(1), since using unordered_map for inserting data, which is actually the hash, takes O(N) time, and we use stack.top(), pop() to implement \"frequency pop\" which is also O(1). Space complexity O(N) if N 10001. \u53e6\u898b: \u7cbe\u7c21\u524d\u7684code \uff0c\u591a\u4f7f\u7528\u4e86\u4e00\u500b map stack\u4f86\u5b58\u653e\u5143\u7d20\u5c0d\u61c9\u7684\u4f4d\u7f6e\uff08\u5be6\u969b\u4e0a\u76f4\u63a5\u5b58\u5143\u7d20\u5373\u53ef\uff0c\u53e6\u5916\u958b\u4e00\u500bstack\u7d00\u9304\u6700\u5927\u503c\u8b8a\u5316\u7565\u986f\u591a\u6b64\u4e00\u8209) #define MAXN 10001 class FreqStack { public : unordered_map int , int num_freq ; //hash of num to its occurances // stack int freq_stk[MAXN]; -- this cause MLE since static memory size is too big(use the upper limit from problem) unordered_map int , stack int freq_stk ; //data structure of freq stack, record the occurance of number to certain freq, ex push 2 push 3 push 2 push 4, we have freq[1] = [3, 4](top), freq[2] = [2] int maxfreq ; FreqStack () { maxfreq = 0 ; } void push ( int x ) { if ( ++ num_freq [ x ] maxfreq ) { maxfreq = num_freq [ x ]; } freq_stk [ num_freq [ x ]]. push ( x ); // printf( push %d, maxfreq now %d \\n , x, maxfreq); } int pop () { if ( freq_stk [ maxfreq ]. size () == 0 ) { maxfreq -- ; //means all the numbers corresponding to that freq has been used out } int res = freq_stk [ maxfreq ]. top (); freq_stk [ maxfreq ]. pop (); // printf( pop val %d maxfreq %d\\n , res, maxfreq); num_freq [ res ] -- ; return res ; } }; /** * Your FreqStack object will be instantiated and called as such: * FreqStack obj = new FreqStack(); * obj.push(x); * int param_2 = obj.pop(); */ `","title":"PD. 895. Maximum Frequency Stack \u6700\u5927\u983b\u7387\u68e7\uff0c\u96d9map\u61c9\u7528"},{"location":"programming_practice/leetcode_OJ_WC/lcojindex/","text":"Index of leetcode_OJ leetcode_OJ(Old blog, from google blogger) WC76 WC70 WC74 WC75 WC76 WC78 WC79 WC91 WC92 WC93 WC94 WC95 WC97","title":"Index of leetcode_OJ"},{"location":"programming_practice/leetcode_OJ_WC/lcojindex/#index-of-leetcode_oj","text":"leetcode_OJ(Old blog, from google blogger) WC76 WC70 WC74 WC75 WC76 WC78 WC79 WC91 WC92 WC93 WC94 WC95 WC97","title":"Index of leetcode_OJ"},{"location":"univ_notes/general/jp_cul/","text":"\u65e5\u672c\u6587\u5316\u8ad6\u8ab2\u5802\u7b46\u8a18 Lec1. Mar 7, 2018 \u7167\u8449\u6a39\u6728\u6797\u6587\u5316:\u7167\u8449\u6a39\u6797\u6587\u5316\uff0c\u662f1970\u5e74\u4ee3\u4ee5\u4f86\u65e5\u672c\u4eba\u985e\u5b78\u5bb6\u63d0\u51fa\u65e5\u672c\u6587\u5316\u6e90\u982d\u7406\u8ad6\u3002\u63d0\u51fa\u559c\u746a\u62c9\u96c5\u5c71\u4ee5\u5357\u81f3\u65e5\u672c\u95dc\u897f\u6709\u4e00\u5e38\u7da0\u95ca\u8449\u6a39\u6797\uff0c\u5176\u4e2d\u4ee5\u96f2\u5357\u70ba\u4e2d\u5fc3\uff0c\u65e5\u672c\u7684\u6c34\u7a3b\u7a2e\u690d\u8207\u6b64\u6587\u5316\u6709\u95dc\u3002 Wikipedia 1.\u7167\u4e0b\u53bb\u6a39\u8449\u6703\u9583\u9583\u767c\u5149 \u65e5\u672c\u7a3b\u7c73\u4e3b\u8981\u662f\u4e2d\u570b\u9577\u6c5f\u6d41\u904e\u53bb\u7684\u8aaa\u6cd5\u6700\u70ba\u666e\u904d\uff0c\u4f46\u662f\u73fe\u5728\u7684\u58fd\u53f8\u7c73\u548c\u5927\u9678\u7684\u4e0d\u592a\u4e00\u6a23\uff0c\u5927\u9678\u7684\u4ee5\u84ec\u840a\u7c73\u70ba\u4e3b\u800c\u65e5\u672c\u662f\u504f\u58fd\u53f8\u7c73\u7684\u9ecf\u7a20 \u6709\u975e\u5e38\u5927\u7684\u53e4\u58b3 \u65e5\u8a9e\u7684\u6587\u5b57\u6587\u6cd5\u8fd1\u4f3c\u65bc\u6771\u570b\u5317\u65b9\u6c11\u65cf \u7167\u8449\u6a39\u6728\u6587\u5316\u53e4\u4ee3\u6709\u54ea\u4e9b\u4e8b\u60c5\u5462 1.\u5973\u6027\u6587\u5316\u70ba\u4e2d\u5fc3\uff0c\u7537\u5973\u60c5\u610f\u76f8\u6295\u5f26\u6b4c\u5c0d\u5531 Lec3. Mar 21 2018 \u7e2e\u5c0f\u6587\u5316\u662f\u65e5\u672c\u5927\u5b78\u6559\u6388\u63d0\u51fa\u7684 \u9b4f\u5fd7\u7aa9\u4eba\u50b3\uff0c\u4e2d\u570b\u4eba\u8a18\u8f09\u4e86\u6700\u65e9\u7684\u65e5\u672c\u4eba\u6d3b\u52d5\u60c5\u5f62\uff0c\u984c\u5230\u4e86\u4e5d\u5dde\u7684 \u90aa\u99ac\u53f0\u570b \u53e4\u58b3\uff1a\u6574\u5ea7\u5c71\u90fd\u662f\u76f4\u7a74\u5f0f \u65e5\u672c\u4eba\u6700\u65e9\u53ef\u4ee5\u662f\uff1a\u7e69\u6587\u4eba\uff08\u6bd4\u5f4c\u751f\u4eba\u77ee\uff09 \u4e2d\u570b\u5ead\u5712\u7684\u7279\u8272\u5728\u65bc\u5efa\u7bc9\u7269\u5c6c\u65bc\u98a8\u666f\u7684\u4e00\u90e8\u5206,\u800c\u4e14\u5176\u6a13\u3001\u4ead\u3001\u53f0\u3001\u69ad\u4e0a\u9762\u90fd\u61f8\u639b\u6abb\u806f,\u9019\u662f\u65e5\u672c\u5ead\u5712\u898b\u4e0d\u5230\u7684\u666f\u8c61\uff0c\u800c\u65e5\u672c\u9664\u4e86\u4e3b\u5efa\u7bc9\u4ee5\u5916\uff0c\u4e43\u662f\u770b\u4e0d\u5230\u4eba\u5de5\u5efa\u7bc9\u7684\uff0c\u6b64\u5916\u9084\u6703\u6709\u92ea\u4e0a\u767d\u6c99\u7684\u67af\u5c71\u6c34\u5ead\u5712\u4ee5\u53ca\u6eff\u4f48\u9752\u82d4\u7684\u5ead\u5712\uff0c\u524d\u8005\u8c61\u5fb5\u4e00\u6bba\u770b\u898b\u4e00\u500b\u5b87\u5b99\uff0c\u5f8c\u8005\u5247\u662f\u5728\u65e5\u672c\u6eab\u6696\u662f\u6f64\u4e2d\u57f9\u80b2\u51fa\u4f86\u9591\u975c\u6c23\u6c1b\u7684\u5ead\u5712\u3002 \u65e5\u672c\u7684\u4e2d\u570b\u7f8e\u8853\u5c08\u5bb6\u6236\u7530\u798e\u4f51\u6559\u6388\u6307\u51fa,\u65e5\u672c\u7e6a\u756b\u4e2d\u51fa\u73fe\u7684\u706b\u7130\u3001\u96f2\u5f69\u3001\u6c34(\u6d6a\u82b1)\u3001\u5149\u7b49\u4e0d\u5b9a\u578b\u7269,\u5728\u73fe\u5b58\u7684\u4e2d\u570b\u7e6a\u756b\u4e2d\u898b\u4e0d\u5230\u3002 \u4ff3\u53e5\u53ef\u4ee5\u4e0d\u7528\u62bc\u97fb \u4f46\u4e00\u5b9a\u89815+7+5 \u4e26\u4e14\u6709\u5b63\u8a9e\uff08\u65e5\u672c\u4eba\u6c11\u5c0d\u65bc\u5e7c\u5c0f\u6642\u4ee3\u6216\u6545\u9109\u4e00\u7a2e\u61f7\u5ff5\u7737\u6200\u4e4b\u60c5\uff09 \u7ef3\u6587\u201d\u4e00\u8bcd\u6765\u6e90\u4e8e\u7f8e\u56fd\u52a8\u7269\u5b66\u5bb6\u6469\u65af\u5173\u4e8e\u5927\u68ee\u8d1d\u51a2\u9676\u5668\u53d1\u6398\u7684\u62a5\u544a\u3002\uff08\u53d6\u81ea\u767e\u5ea6\uff09 \u5f4c\u751f\u6642\u4ee3\u662f\u5317\u6d77\u9053\u4e0e\u7409\u7403\u4ee5\u5916\u7684\u5168\u65e5\u672c\u5217\u5cf6\u7684\u4e00\u500b\u6642\u4ee3\u5283\u5206\uff0c\u8655\u65bc\u897f\u5143\u524d10\u4e16\u7d00\u5230\u897f\u51433\u4e16\u7d00\u4e2d\u671f\u3002 \u5f4c\u751f\u6642\u4ee3\u662f\u5728\u7d93\u6b77\u4e86\u4ee5\u63a1\u96c6\u70ba\u7d93\u6fdf\u4e3b\u9ad4\u7684\u7e69\u6587\u6642\u4ee3\u4e4b\u5f8c\uff0c\u4e00\u500b\u4e3b\u8981\u4f9d\u8cf4\u6c34\u7a3b\u7a2e\u690d\u7684\u751f\u7522\u7d93\u6fdf\u6642\u4ee3\u3002 \uff08\u53d6\u81ea\u7dad\u57fa\u767e\u79d1\uff09 \u65e5\u672c\u795e\u8a71\u4e3b\u8981\u8a18\u8f09\u5728 \u53e4\u4e8b\u8a18\uff0c\u800c\u4e0d\u662f\u592a\u53e4\u8a18 \u65e5\u672c\u7684\u53e4\u58b3\u7684\u5167\u90e8\u69cb\u9020\uff0c\u8d77\u5148\u90fd\u662f\u8c4e\u7a74\u5f0f\u77f3\u5ba4\uff0c\u4e00\u76f4\u5230\u4e94\u4e16\u7d00\u4e2d\u8449\u624d\u51fa\u73fe\u6a6b\u7a74\u5f0f\u77f3\u5ba4\u3002\u800c\u5230\u4e86\u53e4\u58b3\u6642\u4ee3\u7684\u5f8c\u671f\uff0c\u4e5f\u5c31\u662f\u897f\u5143\u516d\u4e03\u4e16\u7d00\u7684\u6642\u5019\uff0c\u6a6b\u7a74\u77f3\u5ba4\u5df2\u7d93\u666e\u53ca\u65bc\u65e5\u672c\u5168\u570b\u3002 Lec4. Mar 28 2018 \u63a8\u8c37\u5929\u7687\u662f\u7b2c\u4e00\u4efb\u5973\u5929\u7687 \u4e2d\u592e\u96c6\u6b0a\uff0c\u5728\u8056\u5fb7\u592a\u5b50\u7684\u6642\u4ee3\uff0c\u9694\u5e74\u9084\u9812\u4f48\u4e86\u5341\u4e03\u689d\u61b2\u6cd5\uff0c\u5728\u516c\u5143604\u5e74 1.\u4ee5\u548c\u70ba\u8cb4 2.\u7be4\u4fe1\u4e09\u5bf6:\u5ba3\u63da\u4f5b\u6559\u70ba\u570b\u6559 \u98db\u9ce5\u6642\u4ee3:\u540c\u6642\u4e2d\u570b\u7684\u968b\u671d\u6642\u671f\uff0c\u6709\u8da3\u968b\u671d\u671d\u8ca2\uff0c\u5728\u5948\u826f\u9644\u8fd1\uff0c\u6b66\u529b\u9817\u70ba\u5f37\u5927 \u5728\u6b64\u6642\u968b\u671d\u60f3\u8981\u9060\u4ea4\u8fd1\u653b\uff0c\u56e0\u70ba\u4ed6\u8981\u6253\u671d\u9bae\u534a\u5cf6\uff0c\u6240\u4ee5\u5148\u6d3e\u96a8\u99db\u5230\u65e5\u672c\uff0c\u5e0c\u671b\u65e5\u672c\u4e0d\u8981\u4f86\u5e72\u6d89\u3002 \u65e5\u672c\u4ee5\u53d7\u6212\u6700\u53e4\u8001\u7684\u6728\u9020\u5efa\u7bc9:\u65e5\u672c\u5948\u826f\u6cd5\u9686\u5bfa \u5927\u5316(\u5e74\u865f\uff0c\u5927\u5316\u4e8c\u5e74\uff0c\u570b\u5bb6\u7684\u6539\u9020\u8a08\u756b)\u9769\u65b0:\u662f\u897f\u5143645\u5e74\u6642\u65e5\u672c\u7684\u4e00\u9023\u4e32\u793e\u6703\u653f\u6cbb\u6539\u9769\u3002 \u5176\u4e3b\u8981\u5167\u5bb9\u662f\u5ee2\u9664\u7576\u6642\u8c6a\u65cf\u5c08\u653f\u7684\u5236\u5ea6\uff0c\u4e26\u6548\u6cd5\u4e2d\u539f\u5510\u671d\u7687\u5e1d\u9ad4\u5236\u6210\u7acb\u4e2d\u592e\u96c6\u6b0a\u570b\u5bb6\uff0c\u5c0d\u65e5\u5f8c\u65e5\u672c\u6b77\u53f2\u767c\u5c55\u5f71\u97ff\u6df1\u9060\u3002 1.\u4e2d\u592e\u96c6\u6b0a\uff0c\u985e\u4f3c\u4e2d\u570b\uff0c\u540c\u6642\u5b78\u7fd2\u4e2d\u570b\u7684\u6587\u5316 2.\u7a05\u5236\u6539\u9769 \u65e5\u672c\u6700\u65e9\u7684\u60c5\u6b4c\u5c0d\u5531: \u4f0a\u5354\u90a3\u5176VS\u4f0a\u5354\u90a3\u7f8e \u5929\u5ca9\u6236\u795e\u8a71 1.\u9285\u93e1 2.\u516b\u6b67\u5927\u86c7OROCUI 3.\u5341\u5168\u528d \u662f\u4e00\u7a2e\u7d50\u69cb\u4e3b\u7fa9 4.\u8001\u592b\u5a66\u5973\u5152\u8b8a\u6210\u4e00\u96bb\u68b3\u5b50 \u5be9\u5224 1.\u770b\u8ab0\u6c59\u7a62\uff0c\u5c31\u662f\u6709\u7f6a \u7528\u7953\u89e3\u9664\u5384\u904b 2.\u5929\u6d25\u7f6a \u7834\u8fb2\u8015\u796d\u7940 3.\u570b\u6d25\u7f6a \u88ab\u96f7\u6253\u5230 \u8fb2\u4f5c\u7269\u88ab\u5403 \u59e6\u6deb\u602a\u76dc \u8a66\u5377\u89e3\u6790 \u7b2c\u4e03\u5377 \u300c\u5fa1\u6210\u6557\u5f0f\u76ee\u300d\u8207\u300c\u8c9e\u6c38\u5f0f\u76ee\u300d\u662f\u4e0d\u540c\u7684\u6cd5\u5178\u3002 \u932f \u540c\u4e00\u500b! \u662f \u938c\u5009\u4f5b\u6559\u7684\u7279\u8272\u6709\u4e09\uff1a\u7b2c\u4e00\u662f\u300c\u6613\u884c\u300d\uff0c\u7b2c\u4e8c\u662f\u300c\u9078\u64c7\u300d\uff0c\u7b2c\u4e09\u662f\u300c\u5c08\u4fee\u300d\u3002 \u662f \u300c\u60e1\u4eba\u6b63\u6a5f\u8aaa\u300d\u662f\u6cd5\u7136\u63d0\u51fa\u7684\u3002 \u662f \u69ae\u897f\u5728\u65e5\u672c\u958b\u5275\u4e86\u66f9\u6d1e\u5b97\u3002 \u932f \u61c9\u8a72\u662f \u9053\u5143\u79aa\u5e2b \u300a\u5f92\u7136\u8349\u300b\u662f\u5409\u7530\u517c\u597d\u6240\u8457\u3002 \u662f \u6771\u5927\u5bfa\u5357\u5927\u9580\u5169\u5074\u7684\u91d1\u525b\u529b\u58eb\u50cf\uff0c\u662f\u4ee5\u904b\u6176\u3001\u5feb\u6176\u3001\u5b9a\u89ba\u3001\u6e5b\u6176\u56db\u4eba\u70ba\u4e3b\u7684\u96d5\u523b\u5e2b\uff0c\u7e3d\u8ca0\u8cac\u4eba\u662f\u904b\u6176\u3002 \u662f \u4e0d\u77e5\u9053 \u61c9\u8a72 \u662f \u5427? \u7531\u5c07\u8ecd\u57f7\u653f\u7684\u653f\u6cbb\u7a31\u70ba\u300c\u9662\u653f\u300d\u3002 \u5426\u3002\u5929\u7687\u8b93\u4f4d\u800c\u81ea\u7a31\u4e0a\u7687\uff0c\u5728\u300c\u9662\u300d\u4e2d\u57f7\u653f\u7684\u653f\u6cbb\u5f62\u614b \u4fdd\u5143\u4e4b\u4e82\u7684\u610f\u7fa9\u662f\uff0c\u5f9e\u6b64\uff0c\u8cb4\u65cf\u8207\u6b66\u58eb\u7684\u5730\u4f4d\u9006\u8f49\uff0c\u65e5\u672c\u6b77\u53f2\u958b\u59cb\u9032\u5165\u4e03\u767e\u591a\u5e74\u7684\u6b66\u58eb\u793e\u6703\u3002 \u662f \u6b66\u58eb\u901a\u904e\u5206\u5c01\u571f\u5730\uff08\u4e5f\u53ef\u4ee5\u8aaa\u662f\u5206\u6563\u7684\u571f\u5730\u7d71\u6cbb\uff09\uff0c\u7de0\u7d50\u300c\u5fa1\u6069\u300d\u8207\u300c\u5949\u516c\u300d\u7684\u4e3b\u5f9e\u95dc\u4fc2\uff0c\u4f86\u7d71\u6cbb\u8fb2\u6c11\u7684\u5236\u5ea6\u7a31\u70ba\u5c01\u5efa\u5236\u5ea6\u3002 \u662f \u7b2c\u516b\u5377 \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c204 \u5012\u6578\u7b2c\u56db\u884c \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c205 \u7b2c\u4e8c\u884c \u662f \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e2d\u6bb5 \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e0b\u6bb5\uff0c\u7522\u696d\u8207\u90fd\u5e02\u7684\u767c\u9054 \u5426\uff0c\u5728\u4eac\u90fd\u9644\u8fd1\u512a\u4e9b\u6751\u843d\u4e0d\u8a2d\u7f6e\u838a\u5712\u7684\u7ba1\u7406\u4eba\uff0c\u800c\u662f\u7531\u53eb\u6709\u529b\u7684\u8fb2\u6c11\u4f86\u4e3b\u5c0e\uff0c\u7531\u6240\u6709\u7684\u8fb2\u6c11\u806f\u5408\u81ea\u6cbb\uff0c\u9019\u7a2e\u806f\u5408\u7684\u81ea\u6cbb\u9ad4\u7a31\u70ba\u300e\u7e3d\u300f\uff08sou\uff09 \u8acb\u67e5\u95b1\u8ab2\u672c207\u4e2d\u6bb5 \u662f","title":"Junior 2nd sem. Japanese Culture"},{"location":"univ_notes/general/jp_cul/#_1","text":"","title":"\u65e5\u672c\u6587\u5316\u8ad6\u8ab2\u5802\u7b46\u8a18"},{"location":"univ_notes/general/jp_cul/#lec1-mar-7-2018","text":"\u7167\u8449\u6a39\u6728\u6797\u6587\u5316:\u7167\u8449\u6a39\u6797\u6587\u5316\uff0c\u662f1970\u5e74\u4ee3\u4ee5\u4f86\u65e5\u672c\u4eba\u985e\u5b78\u5bb6\u63d0\u51fa\u65e5\u672c\u6587\u5316\u6e90\u982d\u7406\u8ad6\u3002\u63d0\u51fa\u559c\u746a\u62c9\u96c5\u5c71\u4ee5\u5357\u81f3\u65e5\u672c\u95dc\u897f\u6709\u4e00\u5e38\u7da0\u95ca\u8449\u6a39\u6797\uff0c\u5176\u4e2d\u4ee5\u96f2\u5357\u70ba\u4e2d\u5fc3\uff0c\u65e5\u672c\u7684\u6c34\u7a3b\u7a2e\u690d\u8207\u6b64\u6587\u5316\u6709\u95dc\u3002 Wikipedia 1.\u7167\u4e0b\u53bb\u6a39\u8449\u6703\u9583\u9583\u767c\u5149 \u65e5\u672c\u7a3b\u7c73\u4e3b\u8981\u662f\u4e2d\u570b\u9577\u6c5f\u6d41\u904e\u53bb\u7684\u8aaa\u6cd5\u6700\u70ba\u666e\u904d\uff0c\u4f46\u662f\u73fe\u5728\u7684\u58fd\u53f8\u7c73\u548c\u5927\u9678\u7684\u4e0d\u592a\u4e00\u6a23\uff0c\u5927\u9678\u7684\u4ee5\u84ec\u840a\u7c73\u70ba\u4e3b\u800c\u65e5\u672c\u662f\u504f\u58fd\u53f8\u7c73\u7684\u9ecf\u7a20 \u6709\u975e\u5e38\u5927\u7684\u53e4\u58b3 \u65e5\u8a9e\u7684\u6587\u5b57\u6587\u6cd5\u8fd1\u4f3c\u65bc\u6771\u570b\u5317\u65b9\u6c11\u65cf \u7167\u8449\u6a39\u6728\u6587\u5316\u53e4\u4ee3\u6709\u54ea\u4e9b\u4e8b\u60c5\u5462 1.\u5973\u6027\u6587\u5316\u70ba\u4e2d\u5fc3\uff0c\u7537\u5973\u60c5\u610f\u76f8\u6295\u5f26\u6b4c\u5c0d\u5531","title":"Lec1. Mar 7, 2018"},{"location":"univ_notes/general/jp_cul/#lec3-mar-21-2018","text":"\u7e2e\u5c0f\u6587\u5316\u662f\u65e5\u672c\u5927\u5b78\u6559\u6388\u63d0\u51fa\u7684 \u9b4f\u5fd7\u7aa9\u4eba\u50b3\uff0c\u4e2d\u570b\u4eba\u8a18\u8f09\u4e86\u6700\u65e9\u7684\u65e5\u672c\u4eba\u6d3b\u52d5\u60c5\u5f62\uff0c\u984c\u5230\u4e86\u4e5d\u5dde\u7684 \u90aa\u99ac\u53f0\u570b \u53e4\u58b3\uff1a\u6574\u5ea7\u5c71\u90fd\u662f\u76f4\u7a74\u5f0f \u65e5\u672c\u4eba\u6700\u65e9\u53ef\u4ee5\u662f\uff1a\u7e69\u6587\u4eba\uff08\u6bd4\u5f4c\u751f\u4eba\u77ee\uff09 \u4e2d\u570b\u5ead\u5712\u7684\u7279\u8272\u5728\u65bc\u5efa\u7bc9\u7269\u5c6c\u65bc\u98a8\u666f\u7684\u4e00\u90e8\u5206,\u800c\u4e14\u5176\u6a13\u3001\u4ead\u3001\u53f0\u3001\u69ad\u4e0a\u9762\u90fd\u61f8\u639b\u6abb\u806f,\u9019\u662f\u65e5\u672c\u5ead\u5712\u898b\u4e0d\u5230\u7684\u666f\u8c61\uff0c\u800c\u65e5\u672c\u9664\u4e86\u4e3b\u5efa\u7bc9\u4ee5\u5916\uff0c\u4e43\u662f\u770b\u4e0d\u5230\u4eba\u5de5\u5efa\u7bc9\u7684\uff0c\u6b64\u5916\u9084\u6703\u6709\u92ea\u4e0a\u767d\u6c99\u7684\u67af\u5c71\u6c34\u5ead\u5712\u4ee5\u53ca\u6eff\u4f48\u9752\u82d4\u7684\u5ead\u5712\uff0c\u524d\u8005\u8c61\u5fb5\u4e00\u6bba\u770b\u898b\u4e00\u500b\u5b87\u5b99\uff0c\u5f8c\u8005\u5247\u662f\u5728\u65e5\u672c\u6eab\u6696\u662f\u6f64\u4e2d\u57f9\u80b2\u51fa\u4f86\u9591\u975c\u6c23\u6c1b\u7684\u5ead\u5712\u3002 \u65e5\u672c\u7684\u4e2d\u570b\u7f8e\u8853\u5c08\u5bb6\u6236\u7530\u798e\u4f51\u6559\u6388\u6307\u51fa,\u65e5\u672c\u7e6a\u756b\u4e2d\u51fa\u73fe\u7684\u706b\u7130\u3001\u96f2\u5f69\u3001\u6c34(\u6d6a\u82b1)\u3001\u5149\u7b49\u4e0d\u5b9a\u578b\u7269,\u5728\u73fe\u5b58\u7684\u4e2d\u570b\u7e6a\u756b\u4e2d\u898b\u4e0d\u5230\u3002 \u4ff3\u53e5\u53ef\u4ee5\u4e0d\u7528\u62bc\u97fb \u4f46\u4e00\u5b9a\u89815+7+5 \u4e26\u4e14\u6709\u5b63\u8a9e\uff08\u65e5\u672c\u4eba\u6c11\u5c0d\u65bc\u5e7c\u5c0f\u6642\u4ee3\u6216\u6545\u9109\u4e00\u7a2e\u61f7\u5ff5\u7737\u6200\u4e4b\u60c5\uff09 \u7ef3\u6587\u201d\u4e00\u8bcd\u6765\u6e90\u4e8e\u7f8e\u56fd\u52a8\u7269\u5b66\u5bb6\u6469\u65af\u5173\u4e8e\u5927\u68ee\u8d1d\u51a2\u9676\u5668\u53d1\u6398\u7684\u62a5\u544a\u3002\uff08\u53d6\u81ea\u767e\u5ea6\uff09 \u5f4c\u751f\u6642\u4ee3\u662f\u5317\u6d77\u9053\u4e0e\u7409\u7403\u4ee5\u5916\u7684\u5168\u65e5\u672c\u5217\u5cf6\u7684\u4e00\u500b\u6642\u4ee3\u5283\u5206\uff0c\u8655\u65bc\u897f\u5143\u524d10\u4e16\u7d00\u5230\u897f\u51433\u4e16\u7d00\u4e2d\u671f\u3002 \u5f4c\u751f\u6642\u4ee3\u662f\u5728\u7d93\u6b77\u4e86\u4ee5\u63a1\u96c6\u70ba\u7d93\u6fdf\u4e3b\u9ad4\u7684\u7e69\u6587\u6642\u4ee3\u4e4b\u5f8c\uff0c\u4e00\u500b\u4e3b\u8981\u4f9d\u8cf4\u6c34\u7a3b\u7a2e\u690d\u7684\u751f\u7522\u7d93\u6fdf\u6642\u4ee3\u3002 \uff08\u53d6\u81ea\u7dad\u57fa\u767e\u79d1\uff09 \u65e5\u672c\u795e\u8a71\u4e3b\u8981\u8a18\u8f09\u5728 \u53e4\u4e8b\u8a18\uff0c\u800c\u4e0d\u662f\u592a\u53e4\u8a18 \u65e5\u672c\u7684\u53e4\u58b3\u7684\u5167\u90e8\u69cb\u9020\uff0c\u8d77\u5148\u90fd\u662f\u8c4e\u7a74\u5f0f\u77f3\u5ba4\uff0c\u4e00\u76f4\u5230\u4e94\u4e16\u7d00\u4e2d\u8449\u624d\u51fa\u73fe\u6a6b\u7a74\u5f0f\u77f3\u5ba4\u3002\u800c\u5230\u4e86\u53e4\u58b3\u6642\u4ee3\u7684\u5f8c\u671f\uff0c\u4e5f\u5c31\u662f\u897f\u5143\u516d\u4e03\u4e16\u7d00\u7684\u6642\u5019\uff0c\u6a6b\u7a74\u77f3\u5ba4\u5df2\u7d93\u666e\u53ca\u65bc\u65e5\u672c\u5168\u570b\u3002","title":"Lec3. Mar 21 2018"},{"location":"univ_notes/general/jp_cul/#lec4-mar-28-2018","text":"\u63a8\u8c37\u5929\u7687\u662f\u7b2c\u4e00\u4efb\u5973\u5929\u7687 \u4e2d\u592e\u96c6\u6b0a\uff0c\u5728\u8056\u5fb7\u592a\u5b50\u7684\u6642\u4ee3\uff0c\u9694\u5e74\u9084\u9812\u4f48\u4e86\u5341\u4e03\u689d\u61b2\u6cd5\uff0c\u5728\u516c\u5143604\u5e74 1.\u4ee5\u548c\u70ba\u8cb4 2.\u7be4\u4fe1\u4e09\u5bf6:\u5ba3\u63da\u4f5b\u6559\u70ba\u570b\u6559 \u98db\u9ce5\u6642\u4ee3:\u540c\u6642\u4e2d\u570b\u7684\u968b\u671d\u6642\u671f\uff0c\u6709\u8da3\u968b\u671d\u671d\u8ca2\uff0c\u5728\u5948\u826f\u9644\u8fd1\uff0c\u6b66\u529b\u9817\u70ba\u5f37\u5927 \u5728\u6b64\u6642\u968b\u671d\u60f3\u8981\u9060\u4ea4\u8fd1\u653b\uff0c\u56e0\u70ba\u4ed6\u8981\u6253\u671d\u9bae\u534a\u5cf6\uff0c\u6240\u4ee5\u5148\u6d3e\u96a8\u99db\u5230\u65e5\u672c\uff0c\u5e0c\u671b\u65e5\u672c\u4e0d\u8981\u4f86\u5e72\u6d89\u3002 \u65e5\u672c\u4ee5\u53d7\u6212\u6700\u53e4\u8001\u7684\u6728\u9020\u5efa\u7bc9:\u65e5\u672c\u5948\u826f\u6cd5\u9686\u5bfa \u5927\u5316(\u5e74\u865f\uff0c\u5927\u5316\u4e8c\u5e74\uff0c\u570b\u5bb6\u7684\u6539\u9020\u8a08\u756b)\u9769\u65b0:\u662f\u897f\u5143645\u5e74\u6642\u65e5\u672c\u7684\u4e00\u9023\u4e32\u793e\u6703\u653f\u6cbb\u6539\u9769\u3002 \u5176\u4e3b\u8981\u5167\u5bb9\u662f\u5ee2\u9664\u7576\u6642\u8c6a\u65cf\u5c08\u653f\u7684\u5236\u5ea6\uff0c\u4e26\u6548\u6cd5\u4e2d\u539f\u5510\u671d\u7687\u5e1d\u9ad4\u5236\u6210\u7acb\u4e2d\u592e\u96c6\u6b0a\u570b\u5bb6\uff0c\u5c0d\u65e5\u5f8c\u65e5\u672c\u6b77\u53f2\u767c\u5c55\u5f71\u97ff\u6df1\u9060\u3002 1.\u4e2d\u592e\u96c6\u6b0a\uff0c\u985e\u4f3c\u4e2d\u570b\uff0c\u540c\u6642\u5b78\u7fd2\u4e2d\u570b\u7684\u6587\u5316 2.\u7a05\u5236\u6539\u9769 \u65e5\u672c\u6700\u65e9\u7684\u60c5\u6b4c\u5c0d\u5531: \u4f0a\u5354\u90a3\u5176VS\u4f0a\u5354\u90a3\u7f8e \u5929\u5ca9\u6236\u795e\u8a71 1.\u9285\u93e1 2.\u516b\u6b67\u5927\u86c7OROCUI 3.\u5341\u5168\u528d \u662f\u4e00\u7a2e\u7d50\u69cb\u4e3b\u7fa9 4.\u8001\u592b\u5a66\u5973\u5152\u8b8a\u6210\u4e00\u96bb\u68b3\u5b50 \u5be9\u5224 1.\u770b\u8ab0\u6c59\u7a62\uff0c\u5c31\u662f\u6709\u7f6a \u7528\u7953\u89e3\u9664\u5384\u904b 2.\u5929\u6d25\u7f6a \u7834\u8fb2\u8015\u796d\u7940 3.\u570b\u6d25\u7f6a \u88ab\u96f7\u6253\u5230 \u8fb2\u4f5c\u7269\u88ab\u5403 \u59e6\u6deb\u602a\u76dc","title":"Lec4. Mar 28 2018"},{"location":"univ_notes/general/jp_cul/#_2","text":"","title":"\u8a66\u5377\u89e3\u6790"},{"location":"univ_notes/general/jp_cul/#_3","text":"\u300c\u5fa1\u6210\u6557\u5f0f\u76ee\u300d\u8207\u300c\u8c9e\u6c38\u5f0f\u76ee\u300d\u662f\u4e0d\u540c\u7684\u6cd5\u5178\u3002 \u932f \u540c\u4e00\u500b! \u662f \u938c\u5009\u4f5b\u6559\u7684\u7279\u8272\u6709\u4e09\uff1a\u7b2c\u4e00\u662f\u300c\u6613\u884c\u300d\uff0c\u7b2c\u4e8c\u662f\u300c\u9078\u64c7\u300d\uff0c\u7b2c\u4e09\u662f\u300c\u5c08\u4fee\u300d\u3002 \u662f \u300c\u60e1\u4eba\u6b63\u6a5f\u8aaa\u300d\u662f\u6cd5\u7136\u63d0\u51fa\u7684\u3002 \u662f \u69ae\u897f\u5728\u65e5\u672c\u958b\u5275\u4e86\u66f9\u6d1e\u5b97\u3002 \u932f \u61c9\u8a72\u662f \u9053\u5143\u79aa\u5e2b \u300a\u5f92\u7136\u8349\u300b\u662f\u5409\u7530\u517c\u597d\u6240\u8457\u3002 \u662f \u6771\u5927\u5bfa\u5357\u5927\u9580\u5169\u5074\u7684\u91d1\u525b\u529b\u58eb\u50cf\uff0c\u662f\u4ee5\u904b\u6176\u3001\u5feb\u6176\u3001\u5b9a\u89ba\u3001\u6e5b\u6176\u56db\u4eba\u70ba\u4e3b\u7684\u96d5\u523b\u5e2b\uff0c\u7e3d\u8ca0\u8cac\u4eba\u662f\u904b\u6176\u3002 \u662f \u4e0d\u77e5\u9053 \u61c9\u8a72 \u662f \u5427? \u7531\u5c07\u8ecd\u57f7\u653f\u7684\u653f\u6cbb\u7a31\u70ba\u300c\u9662\u653f\u300d\u3002 \u5426\u3002\u5929\u7687\u8b93\u4f4d\u800c\u81ea\u7a31\u4e0a\u7687\uff0c\u5728\u300c\u9662\u300d\u4e2d\u57f7\u653f\u7684\u653f\u6cbb\u5f62\u614b \u4fdd\u5143\u4e4b\u4e82\u7684\u610f\u7fa9\u662f\uff0c\u5f9e\u6b64\uff0c\u8cb4\u65cf\u8207\u6b66\u58eb\u7684\u5730\u4f4d\u9006\u8f49\uff0c\u65e5\u672c\u6b77\u53f2\u958b\u59cb\u9032\u5165\u4e03\u767e\u591a\u5e74\u7684\u6b66\u58eb\u793e\u6703\u3002 \u662f \u6b66\u58eb\u901a\u904e\u5206\u5c01\u571f\u5730\uff08\u4e5f\u53ef\u4ee5\u8aaa\u662f\u5206\u6563\u7684\u571f\u5730\u7d71\u6cbb\uff09\uff0c\u7de0\u7d50\u300c\u5fa1\u6069\u300d\u8207\u300c\u5949\u516c\u300d\u7684\u4e3b\u5f9e\u95dc\u4fc2\uff0c\u4f86\u7d71\u6cbb\u8fb2\u6c11\u7684\u5236\u5ea6\u7a31\u70ba\u5c01\u5efa\u5236\u5ea6\u3002 \u662f","title":"\u7b2c\u4e03\u5377"},{"location":"univ_notes/general/jp_cul/#_4","text":"\u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c204 \u5012\u6578\u7b2c\u56db\u884c \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c205 \u7b2c\u4e8c\u884c \u662f \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e2d\u6bb5 \u662f\uff0c\u8acb\u67e5\u95b1\u8ab2\u672c206 \u4e0b\u6bb5\uff0c\u7522\u696d\u8207\u90fd\u5e02\u7684\u767c\u9054 \u5426\uff0c\u5728\u4eac\u90fd\u9644\u8fd1\u512a\u4e9b\u6751\u843d\u4e0d\u8a2d\u7f6e\u838a\u5712\u7684\u7ba1\u7406\u4eba\uff0c\u800c\u662f\u7531\u53eb\u6709\u529b\u7684\u8fb2\u6c11\u4f86\u4e3b\u5c0e\uff0c\u7531\u6240\u6709\u7684\u8fb2\u6c11\u806f\u5408\u81ea\u6cbb\uff0c\u9019\u7a2e\u806f\u5408\u7684\u81ea\u6cbb\u9ad4\u7a31\u70ba\u300e\u7e3d\u300f\uff08sou\uff09 \u8acb\u67e5\u95b1\u8ab2\u672c207\u4e2d\u6bb5 \u662f","title":"\u7b2c\u516b\u5377"},{"location":"univ_notes/general/social_psy/","text":"\u6881\u74ca\u6167\u8001\u5e2b\uff0c\u793e\u6703\u5fc3\u7406\u5b78\u671f\u672b\u7b46\u8a18(Ch4 Thin Slicing \u4e3b\u984c\u5230\u7b2c\u4e03\u7ae0\u5b8c) Ch4 Ch 4.2\u521d\u59cb\u6548\u61c9\u7684\u5f71\u97ff \u6709\u5169\u7a2e Primal effect:\u3000\u5b78\u7fd2\u4e00\u9023\u4e32\u6709\u5e8f\u5217\u95dc\u4fc2\u7684\u9805\u76ee\u6642\uff0c\u6392\u5217\u5728\u6700\u521d\u7684\u5b78\u7fd2\u6750\u6599\u8f03\u5bb9\u6613\u8a18\u61b6\u3002 Belief perseverance: \u6211\u5011\u50be\u5411\u65bc\u5805\u6301\u521d\u59cb\u5224\u65b7\uff0c\u5373\u4fbf\u5f8c\u4f86\u7684\u8cc7\u8a0a\u8b93\u6211\u5011\u91cd\u65b0\u8003\u616e\u3002 \u521d\u59cb\u6548\u61c9(\u7b2c\u4e00\u5370\u8c61)\u7684\u65b9\u6cd5\u8209\u4f8b: * Power posing experiment: \u5c55\u73fe\u9ad8\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u5411\u524d\u50be\uff0c\u800c\u5c55\u73fe\u4f4e\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u8737\u7e2e\u6210\u4e00\u5718\u3002 Ch4.3 \u6c7a\u5b9a\u3001\u601d\u8003\u5225\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a? \u6709\u5169\u7a2e\u7406\u8ad6\u5982\u4e0b \u6b78\u56e0\u7406\u8ad6(Attribution Theory) \u7531\u5fc3\u7406\u5b78\u5bb6 Fritz Heider\u63d0\u51fa\uff0c\u4ee3\u8868\u5982\u4f55\u89e3\u91cb\u81ea\u5df1\u548c\u4ed6\u4eba\u67d0\u4e9b\u884c\u70ba\u7684\u539f\u56e0(\u7c21\u800c\u8a00\u4e4b\u5c31\u662f\u5982\u4f55\u89e3\u91cb\u4e00\u500b\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a\uff0cwhy does he/she do such thing?)\uff0c\u6709\u5206\u5169\u7a2e \u5916\u5728\u6b78\u56e0:\u6307\u5c07\u500b\u9ad4\u884c\u70ba\u89e3\u91cb\u70ba\u60c5\u5883\uff08\u74b0\u5883\uff09\u56e0\u7d20\u4f7f\u7136\u8005\uff0c\u4f8b\u5982\u67d0\u4eba\u5c0d\u6211\u767c\u706b\u4e5f\u8a31\u662f\u56e0\u70ba\u5979\u88ab\u5de5\u4f5c\u641e\u5f97\u5f88\u7169\u8e81\u3002 \u5167\u5728\u6b78\u56e0:\u6307\u500b\u9ad4\u5c07\u884c\u70ba\u4e4b\u767c\u751f\u89e3\u91cb\u70ba\u81ea\u5df1\u6027\u683c\u4f7f\u7136: \u4f8b\u5982\uff0c\u8aaa\u6117\u4eba\u5c0d\u6211\u767c\u706b\u662f\u56e0\u70ba\u4ed6\u7684\u500b\u6027\u6613\u6012\u3002 \u5171\u8b8a\u6a21\u578b(Covariation Model) \u7531\u5fc3\u7406\u5b78\u5bb6 Harold Kelley\u63d0\u51fa\u8aaa \uff0c\u4eba\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u63a1\u5167\u5728\u6b78\u56e0\uff0c\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u5916\u5728\u6b78\u56e0\u3002\u6bd4\u8f03\u5224\u65b7\u4ed6\u4eba\u7684\u884c\u70ba\u5982\u4f55\u96a8\u8457\u6642\u9593\u3001\u5730\u9ede\u3001\u81ea\u8eab\u89d2\u8272\u3001\u53c3\u8207\u8005\u3001\u5176\u4ed6\u60c5\u5883\u56e0\u7d20\u800c\u300c\u4e00\u8d77\u6539\u8b8a\u300d\uff08\u82f1\u8a9e\uff1acovariate\uff09\u3002\u6b64\u969b\u6709\u4e09\u7a2e\u91cd\u8981\u7684\u8cc7\u8a0a\uff0c\u6216\u7a31\u4e09\u500b\u300c\u7dad\u5ea6\u300d\uff08\u9762\u5411\uff09\u7684\u8003\u91cf\u3002 \u4ee5\u4e0a\u63d0\u5230\u7684\u4e09\u500b\u7dad\u5ea6\u5982\u4e0b Consensus \u5171\u8b58 (\u5225\u4eba\u9762\u5c0d\u76f8\u540c\u523a\u6fc0\u8207\u4e3b\u89d2\u6709\u76f8\u540c\u884c\u70ba\u8868\u73fe\u7684\u7a0b\u5ea6) Distinctiveness \u5340\u5225 (\u4e3b\u89d2\u9762\u5c0d\u4e0d\u540c\u523a\u6fc0\u884c\u70ba\u8868\u73fe\u76f8\u540c\u7684\u7a0b\u5ea6) Consistency \u4e00\u81f4 (\u8de8\u60c5\u5883\u548c\u6642\u9593\uff0c\u4e3b\u89d2\u9762\u5c0d\u67d0\u4e00\u523a\u6fc0\u8868\u73fe\u76f8\u540c\u884c\u70ba\u7684\u7a0b\u5ea6) Consensus \u548c Consistency\u7684\u5340\u5225\u5728\u65bc\uff0c\u524d\u8005\u662f\u6709\u6c92\u6709\u4e00\u7fa4\u4eba\u548c\u6211\u505a\u51fa\u4e00\u6a23\u7684\u884c\u70ba\uff0c\u5f8c\u8005\u662f\"\u81ea\u5df1\"\u662f\u5426\u5728\u8de8\u60c5\u5883\u548c\u6642\u9593\u7684\u884c\u70ba\u4e00\u81f4\u3002 \u5167\u90e8\u898f\u56e0\u70ba\u4e3b\u6642\uff0c(L,L,H)\uff0c\u5916\u90e8\u6642\uff0c(H,H,H) \u5f88\u597d\u7406\u89e3\uff0c\u5167\u90e8\u6b78\u56e0\u70ba\u4e3b\uff0c\u56e0\u70ba\u53ea\u53d7\u81ea\u5df1\u7684\u6027\u683c\u5f71\u97ff\uff0c\u56e0\u6b64\u4e00\u81f4\u6027\u6703\u6700\u9ad8\uff0c\u5176\u4ed6\u524d\u5169\u500b\u548c\u5916\u90e8\u6bd4\u8f03\u6709\u95dc\u7684\u56e0\u7d20\u5c31\u4e0d\u95dc \u800c\u7576\u5916\u90e8\u6b78\u56e0\u70ba\u4e3b\u6642\uff0c\u524d\u5169\u500b\u548c\u5916\u90e8\u7684\u81ea\u7136\u662f\u4ee5\u9ad8\u6bd4\u7387\u70ba\u4e3b\uff0c\u800c\u6700\u5f8c\u4e00\u500b\u4e5f\u9ad8\u3002 \u4ee5\u4e0b\u70ba \u7dad\u57fa\u767e\u79d1\u7684\u4f8b\u5b50: \u82e5\uff1a\u5171\u8b58\u6027\u9ad8\uff08\u5927\u5bb6\u90fd\u6703\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u9ad8\uff08\u8001\u95c6\u4e0d\u5e38\u7f75\u5176\u4ed6\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u5e38\u7f75\u6b64\u54e1\u5de5\uff0c\u5e7e\u4e4e\u662f\u4e00\u898b\u5230\u5c31\u7f75\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5916\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u523a\u6fc0\uff08\u54e1\u5de5\uff09\u8eab\u4e0a\u3002 \u82e5\uff1a\u5171\u8b58\u6027\u4f4e\uff08\u9664\u4e86\u8001\u95c6\u4e4b\u5916\uff0c\u5176\u4ed6\u4eba\u4e0d\u600e\u9ebc\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u4f4e\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u8a31\u591a\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u6b64\u54e1\u5de5\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5167\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u884c\u70ba\u4eba\uff08\u8001\u95c6\uff09\u8eab\u4e0a\u3002 \u4e09\u500b\u7dad\u5ea6\u4e0d\u4e00\u5b9a\u90fd\u6703\u540c\u6642\u5b58\u5728\uff0c\u56e0\u6b64Consistency, Distinctiveness \u8f03 Consensus\u5e38\u7528 \u57fa\u672c\u6b78\u56e0\u504f\u8aa4(FAE) \u4eba\u5011\u5728\u8a55\u4f30\u4ed6\u4eba\u7684\u884c\u70ba\u6642\uff0c\u5373\u4f7f\u6709\u5145\u5206\u7684\u8b49\u64da\u652f\u6301\uff0c\u4f46\u4ecd\u7e3d\u662f\u50be\u5411\u65bc\u9ad8\u4f30\u5167\u90e8\u6216\u500b\u4eba\u56e0\u7d20\u7684\u5f71\u97ff\uff08\u4e00\u5b9a\u662f\u4ed6\u6709\u9019\u6a23\u7684\u4eba\u683c\uff0c\u624d\u505a\u51fa\u9019\u6a23\u7684\u884c\u70ba\uff09\uff0c\u800c\u975e\u5916\u5728\u60c5\u5883\u56e0\u7d20\uff08\u4e5f\u8a31\u662f\u60c5\u52e2\u6240\u8feb\uff0c\u6216\u9019\u500b\u5834\u6240\u6709\u7279\u6b8a\u7684\u6f5b\u898f\u5247\uff09\uff0c\u4ea6\u7a31\u4f5c correspondence bias \u5c0d\u61c9\u504f\u8aa4\uff0c\u56e0\u70ba\u6211\u5011\u90fd\u53ea\u95dc\u6ce8\u65bc\u4eba\u672c\u8eab\uff0c\u800c\u6c92\u6709\u6ce8\u610f\u5230\u5468\u570d\u74b0\u5883\u7684\u5f71\u97ff\u3002 \u77e5\u89ba\u986f\u8457\u6027 \u6211\u5011\u770b\u5f97\u6e05\u695a\u6bd4\u8f03\u6e05\u695a\u7684\u4eba\uff0c\u6703\u8a8d\u70ba\u4ed6\u5011\u8aaa\u7684\u8a71\u6bd4\u8f03\u91cd\u8981 \u5169\u6b65\u9a5f\u6b78\u56e0(Two steps attribute) \u9996\u5148\u505a\u4e00\u500b\u5167\u90e8\u6b78\u56e0\uff0c\u9019\u6703\u662f\u5f88\u5feb\u7684\u53cd\u61c9\uff0c\u63a5\u8457\u6309\u7167\u60c5\u5883\u8abf\u6574\u6b78\u56e0\uff0c\u4f46\u8981\u8abf\u6574\u591a\u5c11\u5f88\u5bb9\u6613\u8abf\u6574\u4e0d\u5920\uff0c\u9700\u8981\u52aa\u529b\u8207\u610f\u8b58\u7684\u6ce8\u610f\u3002 \u4ec0\u9ebc\u6642\u5019\u4ee3\u8868\u81ea\u5df1\u9032\u5165\u6162\u901f\u8abf\u6574\u968e\u6bb5\u4e86\u5462? \u59b3\u6709\u610f\u8b58\u5730\u505c\u4e0b\uff0c\u4e26\u4e14\u5728\u5224\u65b7\u524d\u4ed4\u7d30\u5be9\u601d \u59b3\u60f3\u8981\u505a\u51fa\u7cbe\u6e96\u7684\u5224\u65b7 \u59b3\u61f7\u7591\u67d0\u4e9b\u884c\u70ba(\u4f8b\u5982:\u59b3\u61f7\u7591\u67d0\u4eba\u8aaa\u8b0a) \u81ea\u5229\u6b78\u56e0\u504f\u5dee \u5373\u4eba\u5011\u901a\u5e38\u5c07\u81ea\u5df1\u7684\u6210\u529f\u6b78\u56e0\u65bc\u81ea\u5df1\u7684\u6027\u683c\u7279\u8cea\uff0c\u800c\u5c07\u81ea\u5df1\u7684\u5931\u6557\u6b78\u56e0\u65bc\u74b0\u5883\u5f71\u97ff\uff0c\u800c\u5c0d\u4ed6\u4eba\u5247\u6b63\u597d\u76f8\u53cd\u3002 WHY: \u7dad\u6301\u81ea\u5c0a\u3001\u5e0c\u671b\u4ed6\u4eba\u8b9a\u8cde\u3001\u5c0d\u74b0\u5883\u56e0\u7d20\u638c\u63e1\u5ea6\u9ad8 \u4f8b\u5916: \u55ae\u6253\u904b\u52d5\u54e1\uff0c\u96e3\u4ee5\u5c07\u5931\u6557\u505a\u5916\u6b78\u56e0 \u516c\u5e73\u4e16\u754c\u4fe1\u5ff5 \u5047\u8a2d\u4e16\u754c\u662f\u516c\u5e73\u7684\uff0c\u5584\u6709\u5584\u5831\u60e1\u6709\u60e1\u5831 \u512a\u9ede\u662f\u53ef\u4ee5\u76f8\u4fe1\u516c\u6b63\u56e0\u679c\u5831\u61c9 \u7f3a\u9ede\u662f\u5bb9\u6613\u8b74\u8cac\u53d7\u5bb3\u4eba\uff0c\u4f8b\u5982\u8aaa\u88ab\u5f37\u66b4\u7684\u4eba\u5c31\u662f\u7a7f\u5f97\u592a\u66b4\u9732 Bias Blind Spot * \u8a8d\u70ba\u5225\u4eba\u6bd4\u8f03\u6703\u505a\u51fa\u932f\u8aa4\u6c7a\u65b7\uff0c\u800c\u81ea\u5df1\u4e0d\u6703 Ch4.4 \u6587\u5316\u8207\u793e\u6703\u8a8d\u77e5 Holistic vs Analytic Thinking \u6574\u9ad4: \u5c08\u6ce8\u4eba\u3001\u7269\u4e0a\u9762\uff0c\u8f03\u5c11\u5c08\u6ce8\u5728\u5c0d\u8ac7\u6216\u60c5\u5883\u3002 \u5206\u6790: \u5c08\u6ce8\u5728\u4eba\u3001\u7269 \u800c\u4e14 \u9084\u6709\u5468\u570d\u7684\u60c5\u5883 \u5728\u57fa\u672c\u6b78\u56e0\u504f\u8aa4\u4e2d\u7684\u6587\u5316\u5dee\u7570 \u500b\u4eba\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u50be\u5411\u6b78\u56e0(\u504f\u4eba\u683c\u7279\u8cea)\uff0c\u6bd4\u8f03\u50cf\u4eba\u683c\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u7f8e\u570b\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u81ea\u5df1\u7684\u52aa\u529b\u8207\u5929\u8ce6\u3002 \u7fa4\u9ad4\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u60c5\u5883\u6b78\u56e0(\u504f\u5916\u90e8\u56e0\u7d20)\uff0c\u6bd4\u8f03\u50cf\u793e\u6703\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u65e5\u672c\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u662f\u5bb6\u5ead\u8207\u670b\u53cb\u5e2b\u9577\u7684\u529f\u52de\u3002 Ch5 \u81ea\u6211 *[\u81ea\u6211]: self Ch5.1 \u81ea\u6211\u6982\u5ff5\uff0c\u81ea\u6211\u6982\u5ff5\u5982\u4f55\u767c\u5c55 self-concept \u81ea\u6211\u6982\u5ff5\uff0c\u4eba\u5011\u76f8\u4fe1\u81ea\u5df1\u64c1\u6709\u7684\u500b\u4eba\u7279\u8cea The overall set of beliefs that people have about their personal attributes. Origin of the self \u81ea\u6211\u7684\u8d77\u6e90 Child's self-concept \u5c0f\u5b69\u7684\u81ea\u6211\u6982\u5ff5 \u5177\u9ad4\u3001\u53c3\u7167\u7269\u7406\u7279\u5fb5(\u5e74\u9f61\u3001\u6027\u5225\u3001\u9130\u5c45\u3001\u55dc\u597d) Maturing self-concept \u8da8\u6210\u719f\u7684\u81ea\u6211\u6982\u5ff5 \u6bd4\u8f03\u812b\u96e2\u7269\u7406\u7279\u5fb5 \u8f03\u591a\u300c\u5fc3\u7406\u72c0\u614b\u300d\u548c\u300c\u5225\u4eba\u5982\u4f55\u8a55\u65b7\u81ea\u5df1\u300d \u7279\u5fb5\u7684\u8b8a\u5316\u6703\u5f71\u97ff\u4eba\u7684\u81ea\u6211\uff1f \u4eba\u5011\u50be\u5411\u65bc\u89ba\u5f97\u300c\u9053\u5fb7\u300d\u7684\u8b8a\u5316(\u4f8b\u5982\uff1a\u7c97\u9b6f\u3001\u7a2e\u65cf\u6b67\u8996)\u6703\u6bd4\u300c\u77e5\u89ba\u300d\u7684\u8b8a\u5316(\u4f8b\uff1a\u8996\u529b\u5dee\u6234\u773c\u93e1)\u66f4\u5f71\u97ff\u4eba\u7684\u81ea\u6211 \u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570 \u5730\u5340 \u7f8e\u570b \u65e5\u672c \u8afa\u8a9e(proverb) The squeaky wheel gets the grease. \u5431\u5431\u97ff\u7684\u8f2a\u5b50\u6703\u88ab\u52a0\u4e0a\u6cb9 \u6703\u5435\u7684\u5b69\u5b50\u6709\u7cd6\u5403(\u505a\u4e8b\u8981\u5c55\u73fe\u81ea\u6211\u7684\u614b\u5ea6) The nail that stands out gets pounded down. \u68d2\u6253\u51fa\u982d\u9ce5(\u5c55\u73fe\u81ea\u6211\u5c31\u6703\u5403\u8667) \u81ea\u6211\u89c0 (view of the self) \u7368\u7acb(independent) 1. \u7531\u81ea\u5df1\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u4f86\u5b9a\u7fa9\u81ea\u6211 2. \u7368\u7acb\u3001\u7368\u7279\u5f88\u91cd\u8981 \u76f8\u4f9d( inter dependent) 1. \u7531\u548c\u4ed6\u4eba\u7684\u95dc\u4fc2\u4f86\u5b9a\u7fa9\u81ea\u6211 2. \u4ed6\u4eba\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u6703\u5f71\u97ff\u81ea\u6211 3. \u9023\u7d50\u3001\u76f8\u4f9d\u5f88\u91cd\u8981 4. \u6253\u58d3\u7368\u7279\u6027 (unique) \u4f8b\uff1a\u65e5\u672c\u7687\u592a\u5b50\u5983\u653e\u68c4\u9ad8\u5b78\u6b77\u5de5\u4f5c\u9078\u64c7\u626e\u6f14\u50b3\u7d71\u7684\u59bb\u5b50\u89d2\u8272\uff0c\u8a31\u591a\u897f\u65b9\u4eba\u7121\u6cd5\u7406\u89e3\u3002 \u9019\u5c31\u662f\u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570 \u81ea\u6211 \u7684\u529f\u80fd self-knowledge \u81ea\u6211\u8a8d\u77e5 \u6211\u5011\u5982\u4f55\u77e5\u9053\u81ea\u5df1\u662f\u8ab0 self control \u81ea\u6211\u63a7\u5236 \u6211\u5011\u5982\u4f55\u4f5c\u8a08\u756b\u3001\u4e0b\u6c7a\u5b9a impression management \u5370\u8c61\u7ba1\u7406 \u6211\u5011\u5982\u4f55\u5728\u5c0d\u65b9\u9762\u524d\u8868\u73fe\u81ea\u5df1\uff0c\u4e26\u8b93\u5c0d\u65b9\u7528\u770b\u5f85\u81ea\u5df1\u662f\u5982\u81ea\u5df1\u6240\u671f\u671b\u7684 self esteem \u81ea\u5c0a \u6211\u5011\u5982\u4f55\u5c0d\u81ea\u5df1\u4fdd\u6301\u4e00\u500b\u6b63\u9762\u7684\u8a55\u50f9 Ch5.2 \u5167\u7701\uff0c\u5167\u7701\u53ef\u4ee5\u4e86\u89e3\u81ea\u5df1\u5230\u4ec0\u9ebc\u7a0b\u5ea6\uff1f \u5167\u7701(introspection) \u4eba\u5011\u5411\u5167\u5be9\u8996\u81ea\u5df1\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u6a5f\u7684\u904e\u7a0b \u4eba\u5011\u5176\u5be6\u4e0d\u5e38\u4f9d\u8cf4\u5167\u7701\uff0c\u56e0\u70ba\uff1a\u5167\u7701\u6709\u6642\u5019\u4ee4\u4eba\u4e0d\u6109\u5feb\uff0c\u4e14\u6709\u6642\u611f\u53d7\u548c\u884c\u70ba\u7684\u7406\u7531\u53ef\u80fd\u662f\u5916\u5728\u56e0\u7d20\u3002 \u81ea\u6211\u5bdf\u89ba\u8ad6(Self-Awareness Theory) \u4e00\u500b\u4eba\u5011\u5c08\u6ce8\u65bc\u5c07\u81ea\u5df1\u7684\u884c\u70ba\u548c\u5167\u5728\uff0c\u5fc3\u7406\u7684\u57fa\u6e96\u6bd4\u8f03\u7684\u60f3\u6cd5 \u6709\u6642\u4eba\u5011\u6703\u9003\u907f\u81ea\u6211\uff0c\u4e0d\u60f3\u9762\u5c0d\uff0c\u56e0\u70ba\u81ea\u6211\u5be9\u8996\u7684\u6642\u5019\u662f\u4e00\u7a2e\u9817\u70ba\u53ad\u60e1\u7684\u884c\u70ba(aversive)- \u95dc\u6389\u5167\u5728\u805a\u5149\u71c8 \u4e26\u975e\u6240\u6709\u7684\u9003\u907f\u81ea\u6211\u90fd\u4e0d\u597d\uff0c\u6709\u6642\u5019\u4e5f\u662f\u4e00\u7a2e\u5b97\u6559\u8868\u9054\u6216\u662f\u5fc3\u9748\u884c\u70ba\uff0c\u6291\u6216\u662f\u5728\u81ea\u6211\u5be9\u8996\u7684\u904e\u7a0b\u4e2d\u80fd\u8b93\u6211\u5011\u77e5\u9053\u4e8b\u60c5\u7684\u662f\u975e\u5c0d\u932f\u3002 \u5224\u65b7\u6211\u5011\u70ba\u4f55\u611f\u53d7\u3001\u89e3\u91cb\u81ea\u5df1\u7684\u884c\u70ba(Judging Why We Feel the Way We Do) \u96e3\u4ee5\u65b7\u5b9a\uff0c\u4f8b\u5982\uff0c\u59b3\u70ba\u4ec0\u9ebc\u6703\u9677\u5165\u9019\u500b\u60c5\u7dd2\u3002 \u4ee5\u56e0\u679c\u8ad6\u4f86\u89e3\u91cb: \u9020\u6210\u4e00\u500b\u4eba\u60f3\u6cd5\u548c\u884c\u70ba\u7684\u539f\u56e0\uff0c\u901a\u5e38\u6703\u7531\u6587\u5316\u4f86\u5b78\u7fd2\u3002 \u4f46\u6a5f\u6a21\u548c\u7406\u8ad6\u4e26\u975e\u7d55\u5c0d\u6b63\u78ba \u5c0d\u65bc\u539f\u56e0\u7684\u81ea\u7701\u7684\u7d50\u679c(Consequences of Introspecting About Reasons) \u6211\u5011\u53bb\u601d\u8003\u5c0e\u81f4\u6211\u5011\u614b\u5ea6\u7684\u539f\u56e0\uff0c\u5e38\u5e38\u9020\u6210\u6211\u5011\u7684\u614b\u5ea6\u6539\u8b8a\uff0c\u540c\u6642\uff0c\u4eba\u5011\u5047\u5b9a\u4ed6\u5011\u7684\u614b\u5ea6\u8f49\u8b8a\u7684\u539f\u56e0\u662f\u5bb9\u6613\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u3002 \u7f3a\u9ede\u5982\u4e0b \u53ea\u5c08\u6ce8\u65bc\u80fd\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u65b9\u5411 \u4f46\u5c0d\u65bc\u96e3\u4ee5\u8868\u9054\u3001\u89e3\u91cb\u7684\u539f\u56e0\u901a\u5e38\u5c31\u5ffd\u7565\u6389 \u4f46\u4e5f\u5c31\u662f\u90a3\u7a2e\u96e3\u4ee5\u89e3\u91cb\u7684\u539f\u56e0\u624d\u662f\u771f\u6b63\u5f71\u97ff\u9577\u9060\u7684 Ch5.3 \u4eba\u5011\u5982\u4f55\u4ee5\u89c0\u5bdf\u81ea\u5df1\u7684\u884c\u70ba\u4f86\u4e86\u89e3\u81ea\u5df1 \u81ea\u6211\u77e5\u89ba\u8ad6(Self-Perception Theory) \u7576\u6211\u5011\u7684\u4e0d\u78ba\u5b9a\u81ea\u5df1\u7684\u614b\u5ea6\u6642\uff0c\u6211\u5011\u6703\u8457\u91cd\u65bc\u7576\u6642\u767c\u751f\u7684\u60c5\u666f\u548c\u884c\u52d5\u4f86\u63a8\u65b7\u81ea\u6211\u7684\u614b\u5ea6\u3002 \u4e0d\u5b9a\u6642\uff0c\u4e5f\u6703\u5f9e\u884c\u70ba\u4f86\u63a8\u65b7\u5167\u5728\u611f\u53d7\u3002 \u6703\u60f3\u8981\u5224\u65b7\u9019\u4e9b\u884c\u70ba\u662f\u5426\u80fd\u53cd\u6620\u51fa\u5011\u7684\u611f\u53d7\u4ee5\u53ca\u9019\u500b\u60c5\u6cc1\u662f\u5426\u80fd\u53cd\u6620\u51fa\u6211\u70ba\u4f55\u90a3\u9ebc\u505a\u3002 \u5167\u5916\u5728\u52d5\u6a5f(Intrinsic vs Extrinsic Motivation) In: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u81ea\u5df1\u559c\u6b61\uff0c\u500b\u6027\u9a45\u4f7f\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u6211\u771f\u7684\u559c\u6b61\u548c\u4ed6\u4eba\u5408\u4f5c\u3002 Ex: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u6709\u5916\u5728\u5229\u76ca\uff0c\u800c\u975e\u672c\u8eab\u559c\u6b61\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u70ba\u4e86\u8cfa\u53d6\u6d25\u8cbc\u3002 \u4f8b\u5982\u8003\u91cf\u5230\u5916\u5728\u52d5\u6a5f\uff0c\u5bb6\u9577\u53ef\u80fd\u6703\u7528\u91d1\u9322\u3001\u9ede\u6578\u3001\u73a9\u5177\u7b49\u7b49\u734e\u52f5 \u4f46\u53ef\u80fd\u6703\u6709\u53cd\u6548\u679c\uff0c\u8b93\u5c0f\u670b\u53cb\u8b8a\u5f97\u592a\u552f\u5229\u662f\u5716\u3002 \u904e\u5ea6\u8faf\u8b77\u6548\u61c9: \u4eba\u985e\u7684\u884c\u70ba\u4e2d\u5167\u5916\u5728\u52d5\u6a5f\u90fd\u6703\u6709\u6240\u4f5c\u7528\uff0c\u4f46\u662f\u6709\u6642\u5019\u6703\u628a\u5916\u5728\u52d5\u6a5f\u770b\u5f97\u592a\u5f37\u70c8\uff0c\u4ee5\u81f3\u65bc\u4f4e\u4f30\u5167\u5728\u52d5\u6a5f\u5e36\u4f86\u7684\u5f71\u97ff\u3002 \u4ee5\u8868\u73fe\u70ba\u689d\u4ef6\u7684\u734e\u8cde\u8f03\u80fd\u964d\u4f4e\u5167\u5728\u8208\u8da3\u7684\u640d\u5bb3(\u8ddf\u4ee5\u4efb\u52d9\u70ba\u689d\u4ef6\u76f8\u6bd4)\uff0c\u539f\u56e0\u5728\u65bc\uff0c\u8868\u73fe\u7684\u597d\u624d\u80fd\u771f\u6b63\u4ee3\u8868\u4e00\u500b\u4eba\u559c\u6b61\u9019\u500b\u6771\u897f\uff0c\u800c\u4e0d\u662f\u70ba\u4e86\u505a\u800c\u505a\u3002\u5982\u679c\u53ea\u662f\u628a\u4e8b\u60c5\u505a\u5230\u4e86\u800c\u6c92\u6709\u505a\u597d\uff0c\u90a3\u4e26\u4e0d\u80fd\u4ee3\u8868\u4ed6\u771f\u6b63\u559c\u6b61\u9019\u4ef6\u4e8b\u60c5\u3002 \u5fc3\u614b \u56fa\u5b9a: \u6211\u5011\u6709\u4e9b\u80fd\u529b\u7121\u6cd5\u6539\u8b8a\u7684 \u6210\u9577: \u6211\u5011\u7684\u80fd\u529b\u662f\u53ef\u5851\u9020\u7684\uff0c\u96a8\u8457\u6210\u9577\u6539\u8b8a \u56fa\u5b9a\u5fc3\u614b\u5728\u5931\u6557\u5f8c\u5bb9\u6613\u653e\u68c4 \u8981\u7a31\u8b9a\u5c0f\u5b69\u7684\u52aa\u529b\u800c\u975e\u5c0f\u5b69\u7684\u5929\u5206 \u60c5\u7dd2\u4e8c\u56e0\u8ad6(2 Factor Theory of Emotion) \u610f\u8b58\u5230\u81ea\u5df1\u7684\u751f\u7406\u6fc0\u767c\u72c0\u614b(psysiological arousal) \u627e\u5c0b\u5c0d\u65bc\u6fc0\u767c\u904e\u5f8c\u7684\u751f\u7406\u72c0\u614b\u505a\u51fa\u5408\u7406\u7684\u89e3\u91cb\uff0c\u4ea6\u5373\u81ea\u6211\u77e5\u89ba\u7684\u904e\u7a0b \u4f46\u6709\u6642\u5019\u6703\u56e0\u70ba\u932f\u8aa4\u6b78\u56e0\u800c\u5c0e\u81f4\u60c5\u7dd2\u5224\u65b7\u5931\u771f(\u6881\u8001\u5e2b\u63d0\u5230\u7684)\u540a\u6a4b\u5be6\u9a57) \u8aa4\u5224\u7684\u60c5\u6cc1: \u4e8c\u56e0\u8ad6\u7684\u5224\u65b7\u65b9\u6cd5\uff0c\u901a\u5e38\u6703\u5f88\u4e3b\u89c0\uff0c\u4f9d\u8cf4\u65bc\u81ea\u5df1\u7684\u89e3\u91cb(\u4f8b\u5982\u7ad9\u5728\u540a\u6a4b\u81bd\u6230\u5fc3\u9a5a\uff0c\u5973\u751f\u8d70\u904e\u4f86\u6703\u4ee5\u70ba\u81ea\u5df1\u5c31\u662f\u559c\u6b61\u5979) Ch5.4 \u4eba\u5011\u5982\u4f55\u7528\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u5df1 \u81ea\u6211\u6982\u5ff5\u662f\u7531\u5468\u906d\u7684\u4eba\u578b\u5851 \u7d93\u7531\u6bd4\u8f03\u81ea\u5df1\u548c\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u6211 \u4f8b\u5982\u6bd4\u8f03\u80fd\u529b: \u6211\u8cfa\u591a\u5c11\uff0c\u4ed6\u8cfa\u591a\u5c11\uff0c\u4ed6\u591a\u6211\u5c11\uff0c\u6211\u8f03\u4e0d\u597d\u3002 \u793e\u6703\u6bd4\u8f03\u8ad6(Social Comparsion Theory): \u6211\u5011\u7d93\u7531\u8207\u5225\u4eba\u6bd4\u8f03\u4f86\u5c0d\u81ea\u5df1\u7684\u614b\u5ea6\u8207\u80fd\u529b\u6709\u6240\u4e86\u89e3\u3002\u6703\u63a2\u8a0e\u5169\u500b\u91cd\u8981\u7684\u6771\u897f 1.\u4f55\u6642\u9032\u5165\u4e86\u793e\u6703\u6bd4\u8f03\u8ad6: \u7576\u6211\u5011\u4e0d\u78ba\u5b9a\u7684\u6642\u5019(\u5c0d\u65bc\u81ea\u5df1\u7684\u80fd\u529b\u4e0d\u78ba\u5b9a\uff0c\u52e2\u5fc5\u5c31\u5f97\u6bd4\u8f03) 2.\u59b3\u8ddf\u8ab0\u6bd4\u8f03: \u6700\u521d\u6703\u5148\u548c\u8eab\u908a\u7684\u4eba \u5411\u4e0a\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u597d\u7684\u4eba\u6bd4\u8f03\uff0c\u70ba\u4e86\u77e5\u9053\u81ea\u5df1\u7684\u6975\u9650\u4ee5\u53ca\u4e0d\u8db3\u3002 \u5411\u4e0b\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u5dee\u7684\u4eba\u6bd4\u8f03\uff0c\u986f\u5f97\u81ea\u5df1\u8f03\u70ba\u512a\u8d8a\u3002 \u7d93\u7531\u5438\u6536\u4ed6\u4eba(\u5c0d\u6211\u7684)\u89c0\u611f\u4f86\u4e86\u89e3\u81ea\u6211 \u9867\u91cc\u7684\u93e1\u4e2d\u81ea\u6211: \u501f\u4ed6\u4eba\u4e86\u89e3\u81ea\u5df1\u3002 \u793e\u6703\u8abf\u7bc0(Social Tuning): \u4eba\u5011\u63a5\u53d7\u3001\u63a1\u7528\u4ed6\u4eba\u7684\u614b\u5ea6\u3002(\u6709\u6642\u4e0d\u592a\u6e96\u78ba\uff0c\u56e0\u70ba\u4eba\u5011\u50be\u5411\u65bc\u63a5\u53d7\u559c\u6b61\u7684\u4eba\u7684\u614b\u5ea6\u800c\u53cd\u4e4b\u4ea6\u7136) \u7d93\u7531\u5c0d\u4ed6\u4eba\u8aee\u8a62\u4f86\u4e86\u89e3\u81ea\u5df1\u7684\u672a\u4f86 \u60c5\u611f\u9810\u6e2c(Affective Forecasts) \u4eba\u5011\u5c0d\u65bc\u672a\u4f86\u906d\u9047\u5230\u60c5\u7dd2(\u66f4\u7cbe\u78ba\u5730\u8aaa\uff0c\u60c5\u7dd2\u74b0\u5883)\u7684\u4f30\u8a08\u3001\u9810\u6e2c\u3002 * Ch5.5 \u81ea\u6211\u63a7\u5236\uff0c\u8207\u5176\u57f7\u884c\u529f\u80fd\uff0c\u5565\u6642\u6210\u529f\u6291\u6216\u662f\u5931\u6557\u5462 \u81ea\u6211\u63a7\u5236(Self Control): \u70ba\u73fe\u5728\u505a\u6c7a\u5b9a\u3001\u70ba\u672a\u4f86\u505a\u6e96\u5099\u3002 \u6291\u5236\u60f3\u6cd5: \u6703\u60f3\u8981\u4e0d\u53bb\u60f3\u6211\u5011\u60f3\u5fd8\u8a18\u7684\u4e8b\u60c5\uff0c\u4f46\u5176\u5be6\u4e0d\u5bb9\u6613\uff0c\u4e5f\u4e0d\u90a3\u9ebc\u6709\u6548\u3002 \u6d88\u8017\u6548\u61c9(Depleting Effect): \u5728\u4e00\u500b\u65b9\u9762\u4ed8\u51fa\u52aa\u529b\uff0c\u5c31\u6703\u5728\u53e6\u4e00\u65b9\u9762\u6709\u6240\u6d88\u8017(\u4f8b\u5982\u5728\u4e0b\u5348\u7684\u6642\u5019\u4e0b\u8f09\u975e\u6cd5\u6b4c\u66f2\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u70ba\u6b64\u6642\u5c0d\u65bc\u5c0d\u6297\u90aa\u60e1\u80fd\u529b\u6709\u6240\u6d88\u8017) \u5982\u4f55\u589e\u52a0\u81ea\u6211\u63a7\u5236\u7684\u6301\u7e8c\u6642\u9593: 1.\u76f8\u4fe1\u81ea\u5df1\u7684\u63a7\u5236\u80fd\u529b\u6703\u63d0\u5347 2.\u5728\u5931\u63a7\u524d\u5bdf\u89ba 3.\u4fe1\u4ef0 Ch5.6 \u5370\u8c61\u7ba1\u7406(Impression Management) \u53c8\u53eb\u505a \u81ea\u6211\u5448\u73fe(Self Presentation) \u5370\u8c61\u7ba1\u7406(Impression Management):\u3000\u4eba\u5011\u6703\u5982\u4f55\u63cf\u7e6a\u81ea\u5df1\uff0c\u4f7f\u5f97\u5225\u4eba\u770b\u5f85\u81ea\u5df1(\u88ab\u770b)\u662f\u7b26\u671f\u671b\u7684\u3002 \u9022\u8fce(Ingratiation)\u8207\u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping) \u9022\u8fce(Ingratiation): \u62cd\u99ac\u5c41\u3001\u8b9a\u7f8e\uff0c\u8b93\u81ea\u5df1\u662f\u80fd\u88ab\u4ed6\u4eba\u559c\u6b61\u7684(Making ourselves likable to another person)\u901a\u5e38\u662f\u5c0d\u65bc\u5730\u4f4d\u6bd4\u6211\u5011\u9ad8\u7684\u4eba\u9032\u884c\u9022\u8fce\u8ac2\u5a9a\u7684\u884c\u70ba\u3002 \u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping): \u70ba\u81ea\u5df1\u7684\u904e\u932f\u627e\u7406\u7531\uff0c\u4f8b\u5982\u90fd\u5077\u61f6\u4e0d\u53bb\u7df4\u6821\u968a(\u53d6\u81ea\u4e2d\u6b63\u5927\u5b78\u5fc3\u7406\u71df: \u81ea\u6211\u8a2d\u969c\uff08self-handicapping\uff0c\u53c8\u7a31\u81ea\u6211\u8a2d\u9650\uff09\u6211\u5011\u50be\u5411\u5b89\u6392\u4e00\u500b\u60c5\u5883\uff0c\u8b93\u81ea\u5df1\u5728\u5931\u6557\u51fa\u73fe\u4e4b\u5f8c\uff0c\u4e0d\u6703\u8b93\u5225\u4eba\u89ba\u5f97\u662f\u81ea\u5df1\u80fd\u529b\u4e0d\u8db3\u800c\u964d\u4f4e\u81ea\u5df1\u7684\u81ea\u5c0a\uff0c\u4e5f\u5c31\u662f\u7559\u500b\u9000\u8def\u627e\u53f0\u968e\u4e0b\u3002)\uff0c\u5931\u6557\u537b\u8aaa\u4e0d\u662f\u81ea\u5df1\u6c92\u6709\u597d\u597d\u7df4\u7fd2\uff0c\u800c\u662f\u8aaa\u6c92\u6709\u6642\u9593\u7b49\u7b49\u3002\u81ea\u6211\u8a2d\u969c\u53c8\u5206\u70ba\u4ee5\u4e0b\u5169\u7a2e \u884c\u70ba\u81ea\u6211\u8a2d\u969c(Behavioral self-handicapping)\uff0c\u53cd\u5411\u5730\u505a\u4e00\u4e9b\u770b\u4f3c\u6703\u6e1b\u5c11\u6210\u529f\u6a5f\u7387\u7684\u884c\u70ba\uff0c\u56e0\u6b64\u5373\u4fbf\u4ed6\u5011\u5931\u6557\u4e86\u4e5f\u6709\u53f0\u968e\u4e0b\uff0c\u8aaa\u4ec0\u9ebc\u6211\u8003\u524d\u4e00\u5929\u90fd\u5728\u6253\u96fb\u73a9\u624d\u6703\u8003\u4e0d\u597d\uff0c\u800c\u4e0d\u662f\u6211\u4e0a\u8ab2\u4e0d\u8a8d\u771f\u3001\u638c\u63e1\u4e0d\u719f\u3002 \u53e3\u982d\u81ea\u6211\u8a2d\u969c(Reported self-handicapping)\uff0c\u6c92\u6709\u505a\u4e00\u4e9b\u6703\u963b\u64cb\u6210\u529f\u7684\u4e8b\u60c5\uff0c\u4f46\u50be\u5411\u65bc\u627e\u85c9\u53e3\u3002\u4f8b\u5982\u8aaa\u8003\u4e0d\u597d\u662f\u56e0\u70ba\u8003\u8a66\u7684\u6642\u5019\u809a\u5b50\u75db Ch5.7 \u81ea\u5c0a:\u6211\u5011\u5c0d\u81ea\u5df1\u7684\u611f\u53d7 self esteem \u81ea\u5c0a: \u4eba\u5011\u5c0d\u81ea\u5df1\u7684\u6574\u9ad4\u8a55\u50f9(\u6b63\u3001\u8ca0\u9762) \u9ad8\u81ea\u5c0a\u7684\u512a\u9ede: \u5373\u4fbf\u74b0\u5883\u8271\u56f0\u7684\u6642\u5019\u4e5f\u80fd\u5805\u6301\u4f4f\u3002 \u7121\u61fc\u6b7b\u4ea1(? \u4e0d\u61c2\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u500b \u5728ppt p79 \u7b2c\u4e00\u9805) \u9a5a\u6050\u7ba1\u7406\u8ad6:\u4eba\u9762\u81e8\u6b7b\u4ea1\u6642\uff0c\u5c0d\u539f\u672c\u6703\u5f8c\u6094\u7684\u4e8b\u60c5\u90fd\u6bd4\u8f03\u653e\u4e0b\u4e86 \u6b7b\u4ea1\u51f8\u986f\u6027:\u4eba\u5728\u6b7b\u4ea1\u524d\uff0c\u6703\u5f88\u7126\u616e\uff0c\u65bc\u662f\u63a1\u53d6\u4e86\u81ea\u6211\u9632\u885b\u6a5f\u5236\uff0c\u900f\u904e\u81ea\u6211\u80af\u5b9a\u7684\u65b9\u5f0f\uff0c\u544a\u8a34\u81ea\u5df1\u751f\u5728\u4e16\u4e0a\u662f\u6709\u610f\u7fa9\u7684\uff0c\u52a0\u5f37\u81ea\u5c0a\uff0c\u6e1b\u5c11\u907a\u61be \u81ea\u6200\u884c\u70ba(Narcissism) \u7531\u904e\u5ea6\u7684\u81ea\u6211\u6200\u611b\u4ee5\u53ca\u6b20\u7f3a\u5c0d\u4ed6\u4eba\u7684\u540c\u7406\u5fc3\u6240\u5f62\u6210\u3002 \u73fe\u4eca\u7684\u4eba\u66f4\u81ea\u6200\u4e86 Ch6 \u70ba\u81ea\u5df1\u7684\u884c\u52d5\u8faf\u8b77\u7684\u9700\u6c42\uff1a\u6e1b\u8f15\u5931\u8abf\u7684\u4ee3\u50f9\u8207\u597d\u8655 Heaven's Gate Cult Mass suicide 6.1 The Theory of Cognitive Dissonance \u8a8d\u77e5\u5931\u8abf\u8ad6 \u7dad\u6301\u7a69\u5b9a\u3001\u6b63\u9762\u7684\u81ea\u6211\u5f62\u8c61 \u4eba\u4e00\u822c\u6703\u53bb\u76e1\u529b\u7dad\u6301\u81ea\u5df1\u559c\u6b61\u7684\u5f62\u8c61 \u7576\u9047\u5230\u81ea\u5df1\u4e0d\u559c\u6b61\u7684\u5f62\u8c61\u6703\u89ba\u5f97\u4e0d\u8212\u670d \u7576\u8a8d\u77e5\u885d\u7a81\uff1a \u7522\u751f\u8a8d\u77e5\u5931\u8abf\uff08Cognitive Dissonance\uff09 \u7576\u540c\u4e00\u6642\u9593\u6709\u5169\u7a2e\u76f8\u77db\u76fe\u7684\u8a8d\u77e5\uff08E.g., \u4fe1\u4ef0\u3001\u60f3\u6cd5\u3001\u50f9\u503c\u89c0\u3001\u884c\u70ba\u6a21\u5f0f\uff09\u800c\u4f7f\u4eba\u7522\u751f\u4e0d\u8212\u670d\u7684\u72c0\u614b \u6216\u591a\u6216\u5c11\u5c0d\u81ea\u6211\u8a8d\u77e5\u3001\u5f62\u8c61\u9020\u6210\u5a01\u8105(Threat to self-image) \u4e09\u7a2e\u6e1b\u8f15\u5931\u8abf\u7684\u65b9\u6cd5\uff1a \u6539\u8b8a\u884c\u70ba \u900f\u904e\u6539\u8b8a\u5176\u4e2d\u4e00\u7a2e\u8a8d\u77e5(\u61c9\u8aaa\uff0c\u6539\u8b8a\u4e00\u7a2e\u5931\u8abf\u7684\u8a8d\u77e5changing one of the dissonant cognitions)\u4f86\u8faf\u8b77\u81ea\u5df1\u7684\u884c\u70ba \u900f\u904e\u52a0\u5165\u65b0\u7684\u8a8d\u77e5(by adding new cognitions)\u4f86\u8faf\u8b77\u81ea\u5df1\u7684\u884c\u70ba \u8209\u500b\ud83c\udf30\uff1a\u6709\u500b\u8ca0\u8cac\u4efb\u3001\u5feb\u6a02\u3001\u6eff\u8db3\u7684\u4eba\uff0c\u67d0\u5929\u505a\u4e86\u4ef6\u9055\u53cd\u81ea\u5df1\u5f62\u8c61\u7684\u884c\u70ba\uff08\u62bd\u83f8\uff09\uff0c\u63a5\u8457\u6703\u7d93\u6b77\u8a8d\u77e5\u5931\u8abf \u6539\u8b8a\u884c\u70ba\uff1a\u4e0d\u62bd\u83f8\u4e86 \u6539\u8b8a\u8a8d\u77e5\uff1a\u4f8b\u5982\u539f\u672c\u89ba\u5f97\u62bd\u83f8\u4e0d\u597d\u662f\u56e0\u70ba\u53ef\u80fd\u6703\u81f4\u764c\uff0c\u73fe\u5728\u544a\u8a34\u81ea\u5df1\u5176\u5be6\u62bd\u83f8\u4e0d\u6703\u81f4\u764c \u52a0\u5165\u8a8d\u77e5\uff1a\u62bd\u83f8\u9019\u4ef6\u4e8b\u80fd\u8b93\u81ea\u5df1\u653e\u9b06 \u81ea\u6211\u80af\u5b9a\uff08Self Affirmation\uff09 \u52a0\u5f37\u81ea\u6211\u6982\u5ff5\uff08Self-Concpet\uff09 \u900f\u904e\u52a0\u5165 \u5176\u4ed6\u6b63\u9762\u7684\u7279\u8cea \u4f86\u6e1b\u8f15\u5176\u4ed6\u4e8b\u4ef6\u7684\u5931\u8abf \u4f8b\u5982\u67d0\u500b\u8001\u83f8\u69cd\u6212\u83f8\u53c8\u5931\u6557\u4e86\uff1a\u6211\u96d6\u7136\u5f88\u4e0d\u7406\u667a\u7684\u8dd1\u53bb\u62bd\u83f8\u9084\u6212\u4e0d\u6389\uff0c\u4f46\u662f \u6211\u662f\u500b\u53b2\u5bb3\u7684\u6578\u5b78\u5bb6(\u5728\u6b64\u50ac\u7720\u81ea\u5df1\u4f9d\u7136\u662f\u500b\u53b2\u5bb3\u7684\u6578\u5b78\u5bb6\u5c31\u662f\u4e00\u7a2e\u4ee5\u5176\u4ed6\u6b63\u9762\u7279\u8cea\u4f86\u6e1b\u8f15\u5176\u4ed6\u4e8b\u4ef6\u7684\u5931\u8abf\u4e4b\u65b9\u6cd5) \u885d\u64ca\u504f\u8aa4\uff08Impact Bias\uff09 \u9ad8\u4f30\u4e86\u81ea\u5df1\u5c0d\u65bc\u672a\u4f86\u6703\u767c\u751f\u7684\u75db\u82e6\u4e8b\u4ef6\u7684\u60c5\u7dd2\u53cd\u61c9\u7684\u5f37\u5ea6\u8207\u6301\u7e8c\u6642\u9593 \u70ba\u4ec0\u9ebc\u6703\u767c\u751f\uff1f \u4eba\u5bb9\u6613\u6c92\u6709\u610f\u8b58\u5230 Dissonance Reduction \u7684\u529b\u91cf\uff0c\u4e00\u822c\u4f86\u8aaa Dissonance Reduction \u53ef\u4ee5\u5feb\u901f\u5730\u4f7f\u4eba\u632f\u4f5c \u5931\u8abf\u8207\u81ea\u6211\u6982\u5ff5 \u6700\u75db\u82e6\u662f\u5c0d\u65bc\u81ea\u5df1\u7684\u4e86\u89e3\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u6709\u9ad8\u81ea\u5c0a\u5fc3\u7684\u4eba \u5c0d\u81ea\u5c0a\u7684\u6253\u64ca\u53ef\u80fd\u6703\u8b93\u6211\u5011\u505a\u51fa\u96e2\u7d93\u53db\u9053\u7684\u4e8b\u60c5(ppt15\u9801\u7684\u4f5c\u5f0a\u884c\u70ba)\uff0c\u597d\u6bd4\u8003\u8a66\u7a81\u7136\u8003\u5f97\u5f88\u5dee\uff0c\u56e0\u6b64\u60f3\u8981\u53bb\u4f5c\u5f0a\u3002 \u6c7a\u5b9a \u6bcf\u7576\u505a\u6c7a\u5b9a\u6642\uff0c\u90fd\u6703\u7d93\u6b77\u5931\u8abf \u4e0d\u7ba1\u54ea\u500b\u9078\u9805\u90fd\u6703\u6709\u597d\u6709\u58de\uff0c\u9078\u64c7 A \u6703\u6709 A \u7684\u58de\u8655\uff0c\u800c\u5176\u4ed6\u88ab\u6368\u68c4\u7684\u9078\u9805\u6709\u5176\u597d\u8655\uff0c\u9019\u7a2e\u6709\u9078\u5230\u67d0\u4e9b\u58de\u8655\u7136\u5f8c\u6368\u68c4\u67d0\u4e9b\u597d\u8655\u4fbf\u6703\u7522\u751f\u8a8d\u77e5\u5931\u8abf \u4f46\u662f\u4eba\u5f88\u5e38 distort our likes and dislikes \u4eba\u6703\u50be\u5411\u4f4e\u4f30\u4e0b\u5217\u5169\u9805 \u505a\u51fa\u7684\u6c7a\u5b9a\u7684\u58de\u8655 \u88ab\u6368\u68c4\u7684\u6c7a\u5b9a\u7684\u597d\u8655 \u6c7a\u7b56\u5f8c\u7684\u5931\u8abf\uff08Postdecision Dissonance\uff09: \u4ea6\u5373\u6c7a\u7b56\u5f8c\u7522\u751f\u7684\u5931\u8abf(\u5f8c\u6094\u6211\u7684\u9078\u64c7: \u8a8d\u70ba\u6211\u9078\u5f97\u4e0d\u597d\uff0c\u65e9\u77e5\u9053\u6211\u5c31\u9078\u53e6\u4e00\u500b\u9078\u64c7)\uff0c\u53ef\u4ee5\u900f\u904e\u3010\u611b\u4f60\u6240\u64c7\u4ee5\u53ca\u53ad\u4f60\u6240\u4e0d\u64c7(?)\u3011\u4f86\u964d\u4f4e\u5931\u8abf\u611f\u53d7\u3002 \u9078\u64c7\u7684\u6c38\u4e45\u6027\uff08Permanence of The Decision\uff09 \u8d8a\u91cd\u8981\u7684\u6c7a\u5b9a \u2192 \u8d8a\u5f37\u7684\u5931\u8abf \u6c38\u4e45\u6027\u8d8a\u9ad8\u7684\u6c7a\u5b9a \u2192 \u8d8a\u5f37\u7684\u5931\u8abf \u88fd\u9020\u4e0d\u53ef\u53cd\u6094\u7684\u932f\u89ba \u4f4e\u7403\u6cd5 \u5546\u4eba\u5148\u8b93\u4eba\u5047\u88dd\u4e0b\u4fbf\u5b9c\u7684\u5951\u7d04\uff0c\u518d\u4f86\u8aaa\u7f3a\u8ca8\uff0c\u53d6\u800c\u4ee3\u4e4b\u7d66\u4e00\u500b\u8f03\u9ad8\u5229\u6f64\u7684\u5951\u7d04 \u7531\u65bc\u8cb7\u5bb6\u5df2\u7d93\u6c7a\u5b9a\u8cb7\uff0c\u96e3\u4ee5\u6539\u8b8a\u6c7a\u7b56\uff0c\u5c31\u6703\u63a5\u53d7\u8f03\u9ad8\u50f9\u7684\u5951\u7d04 WHY\u594f\u6548? 1.\u81ea\u6211\u627f\u8afe(\u5df2\u6709\u6c7a\u5b9a\u8981\u8cb7\u7684\u611f\u89ba) 2.\u5c0d\u672a\u4f86\u7684\u671f\u5f85(\u8cb7\u5230\u4e4b\u5f8c\u7684\u611f\u89ba) 3. \u50f9\u683c\u6c92\u6709\u5dee\u592a\u591a(\u60f3\u8aaa\uff0c\u6211\u4e5f\u4e0d\u60f3\u5728\u90a3\u88cf\u6d6a\u8cbb\u6642\u9593\u4e86\uff0c\u518d\u6d6a\u8cbb\u53ef\u80fd\u53c8\u6c92\u6709\u4e86\uff0c\u6c92\u5dee\u90a3\u5e7en\u5143) \u4e0d\u9053\u5fb7\u7684\u9078\u64c7 \u505a\u4e86\u4e0d\u9053\u5fb7\u7684\u4e8b\uff0c\u8ddf\u539f\u672c\u7684\u9053\u5fb7\u89c0\u4e0d\u76f8\u7b26- 1.\u8a8d\u77e5\u5931\u8abf\uff0c\u6539\u8b8a\u60f3\u6cd5\uff0c\u4ee5\u5f8c\u6703\u66f4\u4e0d\u9053\u5fb7 2.\u8a8d\u77e5\u5931\u8abf\uff0c\u6539\u8b8a\u884c\u70ba\uff0c\u4ee5\u5f8c\u518d\u4e5f\u4e0d\u505a\uff0c\u4ee5\u5f8c\u66f4\u9053\u5fb7 \u4e0d\u8ad6\u6539\u8b8a\u884c\u70ba\u6216\u662f\u6539\u8b8a\u60f3\u6cd5\u4ee5\u53ca\u662f\u5426\u9053\u5fb7\uff0c\u90fd\u662f\u8981\u8b93\u539f\u672c\u505a\u4e86\u9019\u4ef6\u4e8b\u60c5\u7522\u751f\u7684\u5931\u8abf\u5f71\u97ff\u964d\u4f4e\uff0c\u4f7f\u81ea\u5df1\u76f8\u4fe1\u6211\u9019\u6a23\u505a\u662f\u5c0d\u7684\u3002 \u8209\u500b\u4f8b\u5b50: \u6211\u4e0d\u4f5c\u5f0a\uff0c\u4f46\u6211\u6c92\u8003\u597d - \u7522\u751f\u4e86\u6c7a\u7b56\u5f8c\u7684\u5931\u8abf\uff08Postdecision Dissonance)\uff0c\u8a8d\u70ba\u6211\u4f5c\u5f0a\u53cd\u800c\u53ef\u4ee5\u8003\u6bd4\u8f03\u597d- \u5fc3\u88e1\u6703\u6399\u624e- \u70ba\u4e86\u964d\u4f4e\u5fc3\u88e1\u6399\u624e\u7684\u75db\u82e6\u4e5f\u5c31\u662f\u6e1b\u8f15\u5931\u8abf- \u6539\u8b8a\u614b\u5ea6\u8aaa- \u4f60\u8981\u76f8\u4fe1\u4f5c\u5f0a\u662f\u6bd4\u8003\u4e0d\u597d\u66f4\u90aa\u60e1\uff0c\u66f4\u4e0d\u7b26\u5408\u9053\u5fb7\u7684\u4e00\u7a2e\u884c\u70ba\u3002 \u6587\u5316\u5c0d\u8a8d\u77e5\u5931\u8abf\u7684\u5f71\u97ff \u904e\u7a0b\u4e00\u6a23(\u6700\u7d42\u61c9\u8a72\u90fd\u662f\u6e1b\u7de9\u4e86\u5931\u8abf) \u5167\u5bb9\u6709\u6240\u4e0d\u540c\uff0c\u4f8b\u5982\u70ba\u81ea\u5df1\u589e\u6dfb\u4e86\u4ec0\u9ebc\u60f3\u6cd5\uff0c\u81ea\u6211\u7684\u6539\u8b8a\u662f\u56e0\u6587\u5316\u800c\u6709\u5dee\u3002 Ch6.2 \u65e5\u5e38\u4e2d\u7684\u81ea\u6211\u8faf\u89e3 \u8a8d\u77e5\u5931\u8abf\u662f\u5982\u4f55\u5728\u6211\u5011\u7684\u751f\u6d3b\u904b\u4f5c\uff0c\u53c8\u6709\u4ec0\u9ebc\u65b9\u6cd5\u53ef\u4ee5\u6709\u5efa\u8a2d\u6027\u7684\u964d\u4f4e\u4ed6? \u4ed8\u51fa\u7684\u81ea\u6211\u8faf\u89e3(Justification of an effort) \u4eba\u5011\u50be\u5411\u65bc\u76f8\u4fe1\u3001\u6216\u559c\u6b61\u4ed8\u51fa\u5f88\u591a\u52aa\u529b\u7684\u6c7a\u7b56\u662f\u597d\u7684(\u65e2\u7136\u6211\u5c0d\u67d0\u4e8b\u7269\u591a\uff0c\u90a3\u5b83\u61c9\u8a72\u662f\u597d) \u4f8b\u5b50: Aronson and Mills \u4e00\u958b\u59cb\u4ed8\u51fa\u5f88\u591a\u52aa\u529b\u52a0\u5165\u793e\u5718\u7684\u6210\u54e1\u6703\u5c0d\u793e\u5718\u6709\u8f03\u9ad8\u7684\u5fe0\u8aa0\u5ea6(\u5373\u4fbf\u6211\u5011\u9032\u53bb\u662f\u500b\u5197\u54e1)\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 e.g. \u82b1\u5f88\u5927\u529b\u6c23\u52a0\u5165\u7684\u793e\u5718\uff0c\u53cd\u800c\u5f88\u7cdf\u7cd5\uff0c\u5927\u5931\u6240\u671b \u4f60\u8a72\u5982\u4f55\u964d\u4f4e\u9019\u7a2e\u5931\u8abf\u4ee5\u53ca\u81ea\u8b49\u3001\u81ea\u6211\u8faf\u89e3\u81ea\u5df1\u7684\u884c\u70ba? \u5916\u90e8\u7406\u7531:\u74b0\u5883\u56e0\u7d20 \u5167\u90e8\u7406\u7531:\u81ea\u6211\u614b\u5ea6 \u53cd\u614b\u5ea6\u4e3b\u5f35 \u53eb\u4eba\u505a\u51fa\u8ddf\u5167\u5fc3\u60f3\u6cd5\u4e0d\u4e00\u81f4\u7684\u4e8b- \u8a8d\u77e5\u5931\u8abf e.g. \u8b93\u4eba\u505a\u7121\u804a\u7684\u5de5\u4f5c\uff0c\u7d66\u4ed61 or 20\u5143\uff0c\u4e26\u8981\u4ed6\u8ddf\u4e0b\u4e00\u500b\u4eba\u8aaa\u9019\u5f88\u6709\u8da3(\u53cd\u614b\u5ea6)\uff0c\u6536\u52301\u5143\u7684\u6c92\u6709\u5916\u90e8\u7406\u7531\uff0c\u6240\u4ee5\u8a8d\u77e5\u5931\u8abf\u6703\u8a8d\u70ba\u9019\u5de5\u4f5c\u771f\u7684\u6709\u8da3\uff0c\u6536\u523020\u5143\u7684\u5247\u56e0\u70ba\u89ba\u5f97\u662f\u70ba\u4e86\u9322\u800c\u8aaa\u8b0a(20\u5143\u69cb\u6210\u8db3\u5920\u7684\u5916\u90e8\u7406\u7531\u4f86\u4f7f\u4eba\u8aaa\u8b0a) \u61f2\u7f70\u8207\u81ea\u6211\u8aaa\u670d \u82e5\u7d66\u5c0f\u5b69\u592a\u5927\u734e\u61f2\uff0c\u5247\u5c0f\u5b69\u6b78\u56e0\u65bc\u5916\u90e8\u7406\u7531(\u5916\u90e8\u5229\u76ca\u7f77\u4e86\uff0cExternal Justification)\uff0c\u4e0d\u6703\u5c07\u60f3\u6cd5\u5167\u5316(\u4f8b\u5982\u8b8a\u5f97\u552f\u5229\u662f\u5716\uff0c\u60f3\u8003\u597d\u5c31\u53ea\u662f\u70ba\u4e86\u8d0f\u9322\u800c\u4e0d\u662f\u771f\u7684\u60f3\u8981\u628a\u77e5\u8b58\u5b78\u597d) \u82e5\u7d66\u5c11\u4e00\u9ede\uff0c\u5c0f\u5b69\u6703\u81ea\u6211\u8aaa\u670d\uff0c\u76f8\u4fe1\u9019\u6709\u7528(\u771f\u6b63\u6539\u8b8a\u5167\u5fc3\uff0cInternal Justification)- \u9577\u6548\u6539\u8b8a(\u5faa\u5e8f\u6f38\u9032\u5730\u7d66\u4e88\u7531\u5c0f\u5230\u5927\u7684\u734e\u52f5\uff0c\u9019\u6a23\u5c0f\u5b69\u5c31\u771f\u7684\u6703\u60f3\u628a\u77e5\u8b58\u5b78\u597d) \u81ea\u6211\u8aaa\u670d\u7684\u6301\u7e8c\u6548\u61c9 (The Lasting Effects of Self-Persuasion ) \u5be6\u9a57: \u5c0f\u670b\u53cb\u88ab\u7981\u6b62\u73a9\u6700\u6709\u8da3\u7684\u73a9\u5177\uff0c\u56b4\u683c\u8655\u7f70\u7684\u7fa4\u7d44\u76f8\u8f03\u65bc\u6eab\u548c\u8655\u7f70\u7684\u7fa4\u7d44\u6703\u89ba\u5f97\u73a9\u5177\u88ab\u7981\u6b62\u7684\u73a9\u5177\u662f\u8f03\u70ba\u6709\u8da3\u7684\uff0c\u56e0\u70ba\u5916\u90e8\u7406\u7531\u8f03\u70ba\u5f37\u70c8(\u88ab\u7981\u6b62\u73a9\u73a9\u5177\u7684\u8655\u7f70\u5f88\u5f37\u70c8)\uff0c\u800c\u6eab\u548c\u8655\u7f70\u7684\u90a3\u500b\u7d44\u5225\u5247\u6703\u8a8d\u70ba\u5916\u90e8\u7406\u7531\u4e0d\u5920\u5f37\u70c8\uff0c\u53ef\u4ee5\u900f\u904e\u6539\u8b8a\u5167\u90e8\u7406\u7531(\u4eba\u672c\u8eab\u7684\u614b\u5ea6\u51fa\u767c)\u4f86\u8a8d\u70ba\u90a3\u500b\u73a9\u5177\u4e0d\u597d\u73a9\uff0c\u5c31\u80fd\u907f\u514d\u8655\u7f70\u3002 \u7c21\u55ae\u4f86\u8aaa\uff0c\u5f37\u70c8\u8655\u7f70\u7684\u5c0f\u670b\u53cb\u4e0d\u73a9\u73a9\u5177\u7684\u539f\u56e0\u5728\u65bc\u4ed6\u5011\u662f\u70ba\u4e86\u907f\u514d\u88ab\u8655\u7f70(\u5916\u90e8\u6b78\u56e0)\uff0c\u800c\u6eab\u548c\u8655\u7f70\u7684\u5c0f\u670b\u53cb\u5247\u662f\u900f\u904e\u6539\u8b8a\u5c0d\u73a9\u5177\u7684\u614b\u5ea6(\u8a8d\u70ba\u73a9\u5177\u7121\u804a\uff0c\u4e0d\u5b8c\u4e5f\u7f77)\u4f86\u907f\u514d\u8655\u7f70\u3002 \u9019\u500b\u4e3b\u984c\u4ee3\u8868\u7684\u662f\uff0c\u61f2\u7f70\u5f37\u8207\u5167\u5916\u90e8\u7406\u7531\u95dc\u4fc2\u5ea6\u5c0d\u5fc3\u614b\u7684\u5f71\u97ff\u3002 \u865b\u507d\u8a98\u5c0e \u8b93\u4ed6\u4eba\u5bdf\u89ba\u5230\u81ea\u5df1\u7684\u60f3\u6cd5\u884c\u70ba\u4e0d\u4e00\u81f4(\u884c\u70ba\u3001\u614b\u5ea6\u7b49\u7b49)\uff0c\u4fc3\u4f7f\u6c92\u6709\u5916\u90e8\u7406\u7531\u7684\u8a8d\u77e5\u5931\u8abf(\u6211\u77e5\u9053\u6211\u4f5c\u5f0a\u4e86\uff0c\u56e0\u6b64\u6211\u6703\u505a\u51fa\u53cd\u7701(?)\u4e4b\u985e\u7684\u6289\u64c7\uff0c\u4ee5\u4e0d\u81f3\u65bc\u4f5c\u5f0a\u5f8c\u5f8c\u6094) \u767e\u5ea6\u6587\u5eab Ben Franklin Effect \u7576\u6211\u5011\u8acb\u4e0d\u8a8d\u8b58\u7684\u4eba\u5e6b\u6211\u5011\u505a\u4e8b\uff0c\u6703\u8b93\u4ed6\u5c0d\u6211\u7684\u5370\u8c61\u8b8a\u597d \u56e0\u70ba\u4eba\u4e0d\u8a72\u5e6b\u4e0d\u719f\u7684\u4eba\u505a\u4e8b- \u8a8d\u77e5\u5931\u8abf \u6291\u6216\u662f\u7b2c\u4e8c\u7a2e\u8aaa\u6cd5: \u6b64\u4e43\u4e00\u7a2e\u300c\u5fc3\u7406\u6df7\u6dc6\u300d\u7684\u73fe\u8c61\uff0c\u7576\u6211\u5011\u5e6b\u52a9\u4e86\u4e00\u4f4d\u6211\u5011\u4e0d\u559c\u6b61\u7684\u4eba\uff0c\u6211\u5011\u5fc3\u88e1\u7522\u751f\u4e86\u77db\u76fe\uff1b\u6211\u5011\u6703\u6975\u529b\u8aaa\u670d\u81ea\u5df1\uff0c\u8a8d\u70ba\u6b64\u4eba\u300c\u5176\u5be6\u4e0d\u932f\u300d\uff0c\u6162\u6162\u7684\u5fd8\u4e86\u81ea\u5df1\u4e0d\u559c\u6b61\u4ed6\u9019\u4ef6\u4e8b\u3002\u5c24\u5176\u662f\u5c0d\u65b9\u5f88\u539a\u81c9\u76ae\uff0c\u660e\u660e\u4e00\u76f4\u6b3a\u8ca0\u4f60\uff0c\u537b\u4e00\u526f\u597d\u50cf\u5f88\u300c\u6b23\u8cde\u300d\u4f60\u3001\u300c\u9700\u8981\u300d\u4f60\uff0c\u4f60\u5c31\u6703\u4e00\u76f4\u4e0d\u65b7\u7684\u505a\u4f60\u7684\u300c\u6feb\u597d\u4eba\u300d\u3002 Justifying Cruelty \u6301\u7e8c\u505a\u6b98\u5fcd\u7684\u4e8b\uff0c\u662f\u56e0\u70ba\u5148\u8a8d\u77e5\u5931\u8abf\u5f8c\u8b93\u81ea\u5df1\u63a5\u53d7\u4e86\u3002 \u4f8b\u5982\u8aaa: \u4ed6\u5c31\u662f\u8a0e\u53ad\u90a3\u500b\u53d7\u5bb3\u8005\uff0c\u4ed6\u7f6a\u6709\u61c9\u5f97\u3002 \u514b\u670d\u5931\u8abf(Overcoming Dissonance) \u8a8d\u932f\u8207\u8ca0\u8cac\uff0c\u8aaa\u7684\u6bd4\u505a\u5f97\u5bb9\u6613(\u4e8b\u5be6\u554aXD) \u81ea\u6211\u8faf\u8b77\u7684\u904e\u7a0b\u53ef\u80fd\u662f\u7121\u610f\u8b58\u7684\uff0c\u4f46\u662f\u4e00\u65e6\u6211\u5011\u77e5\u9053\u53ef\u4ee5\u81ea\u6211\u8faf\u8b77\u81ea\u5df1\u7684\u884c\u70ba\uff0c\u6211\u5011\u61c9\u53ef\u4ee5\u76e3\u6e2c\u9019\u500b\u8b8a\u5316 Ch7 \u614b\u5ea6 (~P.52?) 7.1 \u614b\u5ea6\u7684\u672c\u8cea\u548c\u8d77\u6e90 \u614b\u5ea6\uff1a \u5c0d\u4eba\u3001\u7269\u3001\u60f3\u6cd5\u7684\u8a55\u50f9 Evaluations of people, objects, and ideas. \u614b\u5ea6\u7531\u4e09\u7a2e component \u7d44\u6210 affective \u60c5\u611f\u7684 behavioral \u884c\u70ba\u7684 cognitive \u8a8d\u77e5\u7684 \u5916\u986f\u3001\u5167\u96b1 (\u5dee\u5728\u81ea\u5df1\u80fd\u4e0d\u80fd\u610f\u8b58\u5230) cf. \u5916\u986f\u614b\u5ea6 \u5167\u96b1\u614b\u5ea6 \u7279\u6027 \u81ea\u5df1\u6709\u610f\u8b58 \u3001\u80fd\u7c21\u55ae\u8aaa\u660e \u975e\u81ea\u9858\u3001\u7121\u6cd5\u63a7\u5236\u3001 \u6709\u6642\u6c92\u610f\u8b58\u5230 \u8ab2\u672c\u4f8b Robert \u8eab\u70ba\u767d\u4eba\u3001\u76f8\u4fe1\u4eba\u7a2e\u7686\u5e73\u7b49\u3001\u618e\u6068\u7a2e\u65cf\u6b67\u8996 \u4ee5\u4e0a\u662f\u5c0d\u300c\u7a2e\u65cf\u8b70\u984c\u300d\u6709\u610f\u8b58\u7684\u50f9\u503c\u89c0\uff0c\u6703\u5f71\u97ff Robert \u7684\u884c\u70ba Robert \u9577\u5927\u7684\u5730\u65b9\u5c0d\u5c11\u6578\u65cf\u7fa4\u6709\u5f88\u591a\u8ca0\u9762\u523b\u677f\u5370\u8c61\u3002 \u9019\u7a2e\u8ca0\u9762\u60f3\u6cd5\u6703\u5f71\u97ff\u4ed6\u672c\u4eba\uff0c\u4f46\u672c\u4eba\u672a\u5fc5\u6703\u5bdf\u89ba\u3002\u5982\u679c\u4ed6\u9047\u5230\u5c11\u6578\u65cf\u7fa4\uff0c\u5982\u5357\u7f8e\u4eba\uff0c \u81ea\u52d5\u89f8\u767c\u7684\u8ca0\u9762\u5370\u8c61\u3001\u611f\u53d7\uff0c\u5c31\u662f\u5167\u96b1\u614b\u5ea6 \u3002 \u4f8b \u6211\u8a0e\u53ad\u7db2\u901a\u539f \u4f60\u4e0d\u5b64\u7368 \u6709\u4e9b\u4eba\u5c0d\u300c\u80a5\u5b85\u300d\u6709\u8ca0\u9762\u523b\u677f\u5370\u8c61\u3002 \u6709\u9019\u7a2e\u5370\u8c61\u7684\u4eba\u9047\u5230\u4ed6\u5fc3\u4e2d\u300c\u80a5\u5b85\u300d\u5f62\u8c61\u7684\u4eba\u7684\u6642\u5019\uff0c\u6240\u89f8\u767c\u7684\u5370\u8c61\u3001\u611f\u53d7\u5c31\u662f\u5167\u96b1\u614b\u5ea6\u3002 7.2 \u597d\u50cf\u8df3\u5f97\u5f88\u5feb? e3 \u4e0a\u4e5f\u6c92\u7279\u5225\u6a19\u8a3b 7.2 \u5c31\u5148\u8df3\u904e\u4e86 7.3 \u614b\u5ea6\u6539\u8b8a \u614b\u5ea6\u7684\u6539\u8b8a\u5f88\u5e38\u662f\u56e0\u70ba\u793e\u6703(\u6216\u662f\u5468\u906d)\u5f71\u97ff \u6539\u8b8a\u884c\u70ba\u4f86\u6539\u8b8a\u614b\u5ea6\u6703\u9020\u6210\u5931\u8abf \u8aaa\u670d\u4eba\u8b93\u4eba\u614b\u5ea6\u6539\u8b8a Yale Attitude change approach \u8aaa\u670d\u7684\u6709\u6548\u7a0b\u5ea6\u53d6\u6c7a\u65bc who says what to whom who: attractive\u3001credible what:\u81ea\u5df1\u8f03\u4e0d\u6703\u53d7\u5f71\u97ff\u7684\u4e8b whom:\u5206\u5fc3\u7684\u4eba\u3001\u667a\u529b\u4e2d\u7b49\u3001\u5e74\u8f15\u4eba Elaboration Likelihood Model \u63a8\u6572\u53ef\u80fd\u6027\u6a21\u578b routes to persuasion \u8aaa\u670d\u8def\u5f91 \u4e2d\u5fc3\u8def\u5f91\u3001\u5468\u908a\u8def\u5f91 [\u4e2d\u5fc3\u8def\u5f91]: central route [\u5468\u908a\u8def\u5f91]: peripheral route cf. \u4e2d\u5fc3\u8aaa\u670d\u8def\u5f91 \u5468\u908a\u8aaa\u670d\u8def\u5f91 \u5982\u4f55\u8aaa\u670d \u8b93\u807d\u773e\u7406\u89e3\u4f86\u540c\u610f \u807d\u773e\u9700\u9858\u610f\u807d\u3001\u807d\u5f97\u61c2 \u9760\u500b\u4eba\u9b45\u529b\u3001\u6c23\u6c1b \u5c0d\u8c61 \u8a8d\u77e5\u9700\u6c42\u9ad8\u7684\u4eba \u8f03\u5bb9\u6613\u8d70\u4e2d\u5fc3\u8def\u5f91\u88ab\u8aaa\u670d \u8a8d\u77e5\u9700\u6c42\u4f4e\u7684\u4eba \u4e0d\u5b9c\u89e3\u91cb\u592a\u591a\uff0c\u61c9\u8d70\u5468\u908a\u8def\u5f91 \u5c0d\u8c61 \u8207 \u8aaa\u670d\u4e3b\u984c \u7684\u95dc\u806f \u4e3b\u984c\u8ddf\u8aaa\u670d\u5c0d\u8c61\u8d8a\u76f8\u95dc\uff0c \u8d8a\u5bb9\u6613\u5438\u5f15\u5176\u6ce8\u610f\uff0c \u5bb9\u6613\u8d70\u4e2d\u5fc3\u8def\u5f91 \u8f03\u6c92\u6709\u95e1\u8ff0\u4e3b\u984c\uff0c \u8207\u8aaa\u670d\u5c0d\u8c61\u7684\u95dc\u806f\u6027\uff0c \u800c\u662f\u88ab\u5468\u570d\u56e0\u7d20\u5f71\u97ff \u614b\u5ea6\u6539\u8b8a \u5bb9\u6613\u7dad\u6301\u9577\u6642\u9593 \u5bb9\u6613\u662f\u66ab\u6642\u7684 \u8209\u4f8b\u4f86\u8aaa \u6211\u662f\u771f\u7684 \u88ab\u90a3\u500b\u7522\u54c1\u7684\u529f\u80fd\u6240\u5438\u5f15 \u624d\u8cb7\u90a3\u500b\u7522\u54c1 (\u4ee3\u8868\u6211\u662f\u771f\u7684\u559c\u6b61\uff0c\u60f3\u8981\u90a3\u500b\u7522\u54c1\uff0c\u614b\u5ea6\u80fd\u7dad\u6301\u9577\u6642\u9593) \u6211\u662f\u56e0\u70ba \u67d0\u67d0\u5ee3\u544a\u5f88\u6709\u8aaa\u670d\u529b \u6211\u624d\u8cb7\u90a3\u500b\u7522\u54c1\uff0c \u800c\u4e26\u975e\u90a3\u500b\u7522\u54c1\u672c\u8eab\u662f\u6211\u60f3\u8981\u7684 (\u4ee3\u8868\u6211\u53ea\u662f\u56e0\u70ba\u88ab\u8aaa\u670d\u624d\u8cb7\uff0c\u7136\u4e00\u6bb5\u6642\u9593\u5f8c\u53ef\u80fd\u6703\u767c\u73fe\u6211\u6839\u672c\u4e0d\u9700\u8981\u4ed6\uff0c\u614b\u5ea6\u8f49\u8b8a\u5f97\u5f88\u5feb)\u3002 \u5c0d\u8c61 \u8207 \u8aaa\u670d\u4e3b\u984c \u7684\u95dc\u806f people vs. topic \u9ad8\u76f8\u95dc \u4f4e\u76f8\u95dc which matters \u8ad6\u8ff0\u5f37\u5ea6 \u8b1b\u8005\u5c08\u696d\u5ea6 \u8ad6\u8ff0\u5f37\u5ea6 \u8b1b\u8005\u5c08\u696d\u5ea6 which route \u4e2d\u5fc3\u8def\u5f91 \u5468\u908a\u8def\u5f91 Need for Cognition \u8a8d\u77e5\u9700\u6c42 \u4eba\u5011\u5c0d\u65bc\u300c\u8a8d\u77e5\u6d3b\u52d5\u300d\u559c\u6b61\u3001\u53c3\u8207\u7684\u7a0b\u5ea6 \u8a8d\u77e5\u6d3b\u52d5\u5c31\u662f\u300c\u7372\u5f97\u65b0\u77e5\u3001\u5b78\u7fd2\u65b0\u6280\u80fd\u300d\u7b49\u7b49 \u7528 \u5bb3\u6015 \u4f86\u8aaa\u670d\u4eba\uff0c\u5982\u679c\u8aaa\u7684\u592a\u56b4\u91cd\u6703\u4f7f\u5c0d\u8c61\u9003\u907f\uff0c\u4e14\u4e00\u5b9a\u8981\u63d0\u4f9b\u89e3\u6cd5\u3002 \u60c5\u7dd2\u4f5c\u70ba\u6377\u601d\u662f\u4e0d\u53ef\u9760\u7684\uff0c\u53ef\u80fd\u6703\u5c0e\u81f4\u932f\u8aa4\u6b78\u56e0\u3002 - \u70ba\u4f55\u8a0e\u8ad6\u4e8b\u60c5\u8981\u5728\u958b\u5fc3\u7684\u5403\u98ef\u6642\u9593","title":"Junior 2nd sem. Social Psychology"},{"location":"univ_notes/general/social_psy/#ch4-thin-slicing","text":"","title":"\u6881\u74ca\u6167\u8001\u5e2b\uff0c\u793e\u6703\u5fc3\u7406\u5b78\u671f\u672b\u7b46\u8a18(Ch4 Thin Slicing \u4e3b\u984c\u5230\u7b2c\u4e03\u7ae0\u5b8c)"},{"location":"univ_notes/general/social_psy/#ch4","text":"","title":"Ch4"},{"location":"univ_notes/general/social_psy/#ch-42","text":"","title":"Ch 4.2\u521d\u59cb\u6548\u61c9\u7684\u5f71\u97ff"},{"location":"univ_notes/general/social_psy/#_1","text":"Primal effect:\u3000\u5b78\u7fd2\u4e00\u9023\u4e32\u6709\u5e8f\u5217\u95dc\u4fc2\u7684\u9805\u76ee\u6642\uff0c\u6392\u5217\u5728\u6700\u521d\u7684\u5b78\u7fd2\u6750\u6599\u8f03\u5bb9\u6613\u8a18\u61b6\u3002 Belief perseverance: \u6211\u5011\u50be\u5411\u65bc\u5805\u6301\u521d\u59cb\u5224\u65b7\uff0c\u5373\u4fbf\u5f8c\u4f86\u7684\u8cc7\u8a0a\u8b93\u6211\u5011\u91cd\u65b0\u8003\u616e\u3002","title":"\u6709\u5169\u7a2e"},{"location":"univ_notes/general/social_psy/#_2","text":"","title":"\u521d\u59cb\u6548\u61c9(\u7b2c\u4e00\u5370\u8c61)\u7684\u65b9\u6cd5\u8209\u4f8b:"},{"location":"univ_notes/general/social_psy/#power-posing-experiment","text":"","title":"* Power posing experiment: \u5c55\u73fe\u9ad8\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u5411\u524d\u50be\uff0c\u800c\u5c55\u73fe\u4f4e\u59ff\u614b\u7684\u6642\u5019\u8981\u628a\u8eab\u9ad4\u8737\u7e2e\u6210\u4e00\u5718\u3002"},{"location":"univ_notes/general/social_psy/#ch43","text":"\u6709\u5169\u7a2e\u7406\u8ad6\u5982\u4e0b","title":"Ch4.3 \u6c7a\u5b9a\u3001\u601d\u8003\u5225\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a?"},{"location":"univ_notes/general/social_psy/#attribution-theory","text":"\u7531\u5fc3\u7406\u5b78\u5bb6 Fritz Heider\u63d0\u51fa\uff0c\u4ee3\u8868\u5982\u4f55\u89e3\u91cb\u81ea\u5df1\u548c\u4ed6\u4eba\u67d0\u4e9b\u884c\u70ba\u7684\u539f\u56e0(\u7c21\u800c\u8a00\u4e4b\u5c31\u662f\u5982\u4f55\u89e3\u91cb\u4e00\u500b\u4eba\u70ba\u4ec0\u9ebc\u90a3\u6a23\u505a\uff0cwhy does he/she do such thing?)\uff0c\u6709\u5206\u5169\u7a2e \u5916\u5728\u6b78\u56e0:\u6307\u5c07\u500b\u9ad4\u884c\u70ba\u89e3\u91cb\u70ba\u60c5\u5883\uff08\u74b0\u5883\uff09\u56e0\u7d20\u4f7f\u7136\u8005\uff0c\u4f8b\u5982\u67d0\u4eba\u5c0d\u6211\u767c\u706b\u4e5f\u8a31\u662f\u56e0\u70ba\u5979\u88ab\u5de5\u4f5c\u641e\u5f97\u5f88\u7169\u8e81\u3002 \u5167\u5728\u6b78\u56e0:\u6307\u500b\u9ad4\u5c07\u884c\u70ba\u4e4b\u767c\u751f\u89e3\u91cb\u70ba\u81ea\u5df1\u6027\u683c\u4f7f\u7136: \u4f8b\u5982\uff0c\u8aaa\u6117\u4eba\u5c0d\u6211\u767c\u706b\u662f\u56e0\u70ba\u4ed6\u7684\u500b\u6027\u6613\u6012\u3002","title":"\u6b78\u56e0\u7406\u8ad6(Attribution Theory)"},{"location":"univ_notes/general/social_psy/#covariation-model","text":"\u7531\u5fc3\u7406\u5b78\u5bb6 Harold Kelley\u63d0\u51fa\u8aaa \uff0c\u4eba\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u63a1\u5167\u5728\u6b78\u56e0\uff0c\u4ec0\u9ebc\u6642\u5019\u6703\u50be\u5411\u5916\u5728\u6b78\u56e0\u3002\u6bd4\u8f03\u5224\u65b7\u4ed6\u4eba\u7684\u884c\u70ba\u5982\u4f55\u96a8\u8457\u6642\u9593\u3001\u5730\u9ede\u3001\u81ea\u8eab\u89d2\u8272\u3001\u53c3\u8207\u8005\u3001\u5176\u4ed6\u60c5\u5883\u56e0\u7d20\u800c\u300c\u4e00\u8d77\u6539\u8b8a\u300d\uff08\u82f1\u8a9e\uff1acovariate\uff09\u3002\u6b64\u969b\u6709\u4e09\u7a2e\u91cd\u8981\u7684\u8cc7\u8a0a\uff0c\u6216\u7a31\u4e09\u500b\u300c\u7dad\u5ea6\u300d\uff08\u9762\u5411\uff09\u7684\u8003\u91cf\u3002 \u4ee5\u4e0a\u63d0\u5230\u7684\u4e09\u500b\u7dad\u5ea6\u5982\u4e0b Consensus \u5171\u8b58 (\u5225\u4eba\u9762\u5c0d\u76f8\u540c\u523a\u6fc0\u8207\u4e3b\u89d2\u6709\u76f8\u540c\u884c\u70ba\u8868\u73fe\u7684\u7a0b\u5ea6) Distinctiveness \u5340\u5225 (\u4e3b\u89d2\u9762\u5c0d\u4e0d\u540c\u523a\u6fc0\u884c\u70ba\u8868\u73fe\u76f8\u540c\u7684\u7a0b\u5ea6) Consistency \u4e00\u81f4 (\u8de8\u60c5\u5883\u548c\u6642\u9593\uff0c\u4e3b\u89d2\u9762\u5c0d\u67d0\u4e00\u523a\u6fc0\u8868\u73fe\u76f8\u540c\u884c\u70ba\u7684\u7a0b\u5ea6) Consensus \u548c Consistency\u7684\u5340\u5225\u5728\u65bc\uff0c\u524d\u8005\u662f\u6709\u6c92\u6709\u4e00\u7fa4\u4eba\u548c\u6211\u505a\u51fa\u4e00\u6a23\u7684\u884c\u70ba\uff0c\u5f8c\u8005\u662f\"\u81ea\u5df1\"\u662f\u5426\u5728\u8de8\u60c5\u5883\u548c\u6642\u9593\u7684\u884c\u70ba\u4e00\u81f4\u3002 \u5167\u90e8\u898f\u56e0\u70ba\u4e3b\u6642\uff0c(L,L,H)\uff0c\u5916\u90e8\u6642\uff0c(H,H,H) \u5f88\u597d\u7406\u89e3\uff0c\u5167\u90e8\u6b78\u56e0\u70ba\u4e3b\uff0c\u56e0\u70ba\u53ea\u53d7\u81ea\u5df1\u7684\u6027\u683c\u5f71\u97ff\uff0c\u56e0\u6b64\u4e00\u81f4\u6027\u6703\u6700\u9ad8\uff0c\u5176\u4ed6\u524d\u5169\u500b\u548c\u5916\u90e8\u6bd4\u8f03\u6709\u95dc\u7684\u56e0\u7d20\u5c31\u4e0d\u95dc \u800c\u7576\u5916\u90e8\u6b78\u56e0\u70ba\u4e3b\u6642\uff0c\u524d\u5169\u500b\u548c\u5916\u90e8\u7684\u81ea\u7136\u662f\u4ee5\u9ad8\u6bd4\u7387\u70ba\u4e3b\uff0c\u800c\u6700\u5f8c\u4e00\u500b\u4e5f\u9ad8\u3002 \u4ee5\u4e0b\u70ba \u7dad\u57fa\u767e\u79d1\u7684\u4f8b\u5b50: \u82e5\uff1a\u5171\u8b58\u6027\u9ad8\uff08\u5927\u5bb6\u90fd\u6703\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u9ad8\uff08\u8001\u95c6\u4e0d\u5e38\u7f75\u5176\u4ed6\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u5e38\u7f75\u6b64\u54e1\u5de5\uff0c\u5e7e\u4e4e\u662f\u4e00\u898b\u5230\u5c31\u7f75\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5916\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u523a\u6fc0\uff08\u54e1\u5de5\uff09\u8eab\u4e0a\u3002 \u82e5\uff1a\u5171\u8b58\u6027\u4f4e\uff08\u9664\u4e86\u8001\u95c6\u4e4b\u5916\uff0c\u5176\u4ed6\u4eba\u4e0d\u600e\u9ebc\u7f75\u6b64\u54e1\u5de5\uff09\uff0c\u7279\u6b8a\u6027\u4f4e\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u8a31\u591a\u54e1\u5de5\uff09\uff0c\u4e00\u81f4\u6027\u9ad8\uff08\u8001\u95c6\u7d93\u5e38\u7f75\u6b64\u54e1\u5de5\uff09\u2192\u4eba\u5011\u50be\u5411\u65bc\u505a\u5167\u5411\u6b78\u56e0\uff0c\u4ea6\u5373\u554f\u984c\u51fa\u5728\u884c\u70ba\u4eba\uff08\u8001\u95c6\uff09\u8eab\u4e0a\u3002 \u4e09\u500b\u7dad\u5ea6\u4e0d\u4e00\u5b9a\u90fd\u6703\u540c\u6642\u5b58\u5728\uff0c\u56e0\u6b64Consistency, Distinctiveness \u8f03 Consensus\u5e38\u7528","title":"\u5171\u8b8a\u6a21\u578b(Covariation Model)"},{"location":"univ_notes/general/social_psy/#fae","text":"\u4eba\u5011\u5728\u8a55\u4f30\u4ed6\u4eba\u7684\u884c\u70ba\u6642\uff0c\u5373\u4f7f\u6709\u5145\u5206\u7684\u8b49\u64da\u652f\u6301\uff0c\u4f46\u4ecd\u7e3d\u662f\u50be\u5411\u65bc\u9ad8\u4f30\u5167\u90e8\u6216\u500b\u4eba\u56e0\u7d20\u7684\u5f71\u97ff\uff08\u4e00\u5b9a\u662f\u4ed6\u6709\u9019\u6a23\u7684\u4eba\u683c\uff0c\u624d\u505a\u51fa\u9019\u6a23\u7684\u884c\u70ba\uff09\uff0c\u800c\u975e\u5916\u5728\u60c5\u5883\u56e0\u7d20\uff08\u4e5f\u8a31\u662f\u60c5\u52e2\u6240\u8feb\uff0c\u6216\u9019\u500b\u5834\u6240\u6709\u7279\u6b8a\u7684\u6f5b\u898f\u5247\uff09\uff0c\u4ea6\u7a31\u4f5c correspondence bias \u5c0d\u61c9\u504f\u8aa4\uff0c\u56e0\u70ba\u6211\u5011\u90fd\u53ea\u95dc\u6ce8\u65bc\u4eba\u672c\u8eab\uff0c\u800c\u6c92\u6709\u6ce8\u610f\u5230\u5468\u570d\u74b0\u5883\u7684\u5f71\u97ff\u3002","title":"\u57fa\u672c\u6b78\u56e0\u504f\u8aa4(FAE)"},{"location":"univ_notes/general/social_psy/#_3","text":"\u6211\u5011\u770b\u5f97\u6e05\u695a\u6bd4\u8f03\u6e05\u695a\u7684\u4eba\uff0c\u6703\u8a8d\u70ba\u4ed6\u5011\u8aaa\u7684\u8a71\u6bd4\u8f03\u91cd\u8981","title":"\u77e5\u89ba\u986f\u8457\u6027"},{"location":"univ_notes/general/social_psy/#two-steps-attribute","text":"\u9996\u5148\u505a\u4e00\u500b\u5167\u90e8\u6b78\u56e0\uff0c\u9019\u6703\u662f\u5f88\u5feb\u7684\u53cd\u61c9\uff0c\u63a5\u8457\u6309\u7167\u60c5\u5883\u8abf\u6574\u6b78\u56e0\uff0c\u4f46\u8981\u8abf\u6574\u591a\u5c11\u5f88\u5bb9\u6613\u8abf\u6574\u4e0d\u5920\uff0c\u9700\u8981\u52aa\u529b\u8207\u610f\u8b58\u7684\u6ce8\u610f\u3002 \u4ec0\u9ebc\u6642\u5019\u4ee3\u8868\u81ea\u5df1\u9032\u5165\u6162\u901f\u8abf\u6574\u968e\u6bb5\u4e86\u5462? \u59b3\u6709\u610f\u8b58\u5730\u505c\u4e0b\uff0c\u4e26\u4e14\u5728\u5224\u65b7\u524d\u4ed4\u7d30\u5be9\u601d \u59b3\u60f3\u8981\u505a\u51fa\u7cbe\u6e96\u7684\u5224\u65b7 \u59b3\u61f7\u7591\u67d0\u4e9b\u884c\u70ba(\u4f8b\u5982:\u59b3\u61f7\u7591\u67d0\u4eba\u8aaa\u8b0a)","title":"\u5169\u6b65\u9a5f\u6b78\u56e0(Two steps attribute)"},{"location":"univ_notes/general/social_psy/#_4","text":"\u5373\u4eba\u5011\u901a\u5e38\u5c07\u81ea\u5df1\u7684\u6210\u529f\u6b78\u56e0\u65bc\u81ea\u5df1\u7684\u6027\u683c\u7279\u8cea\uff0c\u800c\u5c07\u81ea\u5df1\u7684\u5931\u6557\u6b78\u56e0\u65bc\u74b0\u5883\u5f71\u97ff\uff0c\u800c\u5c0d\u4ed6\u4eba\u5247\u6b63\u597d\u76f8\u53cd\u3002 WHY: \u7dad\u6301\u81ea\u5c0a\u3001\u5e0c\u671b\u4ed6\u4eba\u8b9a\u8cde\u3001\u5c0d\u74b0\u5883\u56e0\u7d20\u638c\u63e1\u5ea6\u9ad8 \u4f8b\u5916: \u55ae\u6253\u904b\u52d5\u54e1\uff0c\u96e3\u4ee5\u5c07\u5931\u6557\u505a\u5916\u6b78\u56e0","title":"\u81ea\u5229\u6b78\u56e0\u504f\u5dee"},{"location":"univ_notes/general/social_psy/#_5","text":"\u5047\u8a2d\u4e16\u754c\u662f\u516c\u5e73\u7684\uff0c\u5584\u6709\u5584\u5831\u60e1\u6709\u60e1\u5831 \u512a\u9ede\u662f\u53ef\u4ee5\u76f8\u4fe1\u516c\u6b63\u56e0\u679c\u5831\u61c9 \u7f3a\u9ede\u662f\u5bb9\u6613\u8b74\u8cac\u53d7\u5bb3\u4eba\uff0c\u4f8b\u5982\u8aaa\u88ab\u5f37\u66b4\u7684\u4eba\u5c31\u662f\u7a7f\u5f97\u592a\u66b4\u9732","title":"\u516c\u5e73\u4e16\u754c\u4fe1\u5ff5"},{"location":"univ_notes/general/social_psy/#bias-blind-spot","text":"","title":"Bias Blind Spot"},{"location":"univ_notes/general/social_psy/#_6","text":"","title":"* \u8a8d\u70ba\u5225\u4eba\u6bd4\u8f03\u6703\u505a\u51fa\u932f\u8aa4\u6c7a\u65b7\uff0c\u800c\u81ea\u5df1\u4e0d\u6703"},{"location":"univ_notes/general/social_psy/#ch44","text":"","title":"Ch4.4 \u6587\u5316\u8207\u793e\u6703\u8a8d\u77e5"},{"location":"univ_notes/general/social_psy/#holistic-vs-analytic-thinking","text":"\u6574\u9ad4: \u5c08\u6ce8\u4eba\u3001\u7269\u4e0a\u9762\uff0c\u8f03\u5c11\u5c08\u6ce8\u5728\u5c0d\u8ac7\u6216\u60c5\u5883\u3002 \u5206\u6790: \u5c08\u6ce8\u5728\u4eba\u3001\u7269 \u800c\u4e14 \u9084\u6709\u5468\u570d\u7684\u60c5\u5883","title":"Holistic vs Analytic Thinking"},{"location":"univ_notes/general/social_psy/#_7","text":"\u500b\u4eba\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u50be\u5411\u6b78\u56e0(\u504f\u4eba\u683c\u7279\u8cea)\uff0c\u6bd4\u8f03\u50cf\u4eba\u683c\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u7f8e\u570b\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u81ea\u5df1\u7684\u52aa\u529b\u8207\u5929\u8ce6\u3002 \u7fa4\u9ad4\u4e3b\u7fa9\u6587\u5316: \u8f03\u5e38\u4f7f\u7528\u60c5\u5883\u6b78\u56e0(\u504f\u5916\u90e8\u56e0\u7d20)\uff0c\u6bd4\u8f03\u50cf\u793e\u6703\u5fc3\u7406\u5b78\u5bb6\u3002\u597d\u6bd4\u5728\u65e5\u672c\u5967\u904b\u91d1\u724c\u5f97\u4e3b\u6703\u5f37\u8abf\u662f\u5bb6\u5ead\u8207\u670b\u53cb\u5e2b\u9577\u7684\u529f\u52de\u3002","title":"\u5728\u57fa\u672c\u6b78\u56e0\u504f\u8aa4\u4e2d\u7684\u6587\u5316\u5dee\u7570"},{"location":"univ_notes/general/social_psy/#ch5","text":"*[\u81ea\u6211]: self","title":"Ch5 \u81ea\u6211"},{"location":"univ_notes/general/social_psy/#ch51","text":"self-concept \u81ea\u6211\u6982\u5ff5\uff0c\u4eba\u5011\u76f8\u4fe1\u81ea\u5df1\u64c1\u6709\u7684\u500b\u4eba\u7279\u8cea The overall set of beliefs that people have about their personal attributes. Origin of the self \u81ea\u6211\u7684\u8d77\u6e90 Child's self-concept \u5c0f\u5b69\u7684\u81ea\u6211\u6982\u5ff5 \u5177\u9ad4\u3001\u53c3\u7167\u7269\u7406\u7279\u5fb5(\u5e74\u9f61\u3001\u6027\u5225\u3001\u9130\u5c45\u3001\u55dc\u597d) Maturing self-concept \u8da8\u6210\u719f\u7684\u81ea\u6211\u6982\u5ff5 \u6bd4\u8f03\u812b\u96e2\u7269\u7406\u7279\u5fb5 \u8f03\u591a\u300c\u5fc3\u7406\u72c0\u614b\u300d\u548c\u300c\u5225\u4eba\u5982\u4f55\u8a55\u65b7\u81ea\u5df1\u300d \u7279\u5fb5\u7684\u8b8a\u5316\u6703\u5f71\u97ff\u4eba\u7684\u81ea\u6211\uff1f \u4eba\u5011\u50be\u5411\u65bc\u89ba\u5f97\u300c\u9053\u5fb7\u300d\u7684\u8b8a\u5316(\u4f8b\u5982\uff1a\u7c97\u9b6f\u3001\u7a2e\u65cf\u6b67\u8996)\u6703\u6bd4\u300c\u77e5\u89ba\u300d\u7684\u8b8a\u5316(\u4f8b\uff1a\u8996\u529b\u5dee\u6234\u773c\u93e1)\u66f4\u5f71\u97ff\u4eba\u7684\u81ea\u6211 \u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570 \u5730\u5340 \u7f8e\u570b \u65e5\u672c \u8afa\u8a9e(proverb) The squeaky wheel gets the grease. \u5431\u5431\u97ff\u7684\u8f2a\u5b50\u6703\u88ab\u52a0\u4e0a\u6cb9 \u6703\u5435\u7684\u5b69\u5b50\u6709\u7cd6\u5403(\u505a\u4e8b\u8981\u5c55\u73fe\u81ea\u6211\u7684\u614b\u5ea6) The nail that stands out gets pounded down. \u68d2\u6253\u51fa\u982d\u9ce5(\u5c55\u73fe\u81ea\u6211\u5c31\u6703\u5403\u8667) \u81ea\u6211\u89c0 (view of the self) \u7368\u7acb(independent) 1. \u7531\u81ea\u5df1\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u4f86\u5b9a\u7fa9\u81ea\u6211 2. \u7368\u7acb\u3001\u7368\u7279\u5f88\u91cd\u8981 \u76f8\u4f9d( inter dependent) 1. \u7531\u548c\u4ed6\u4eba\u7684\u95dc\u4fc2\u4f86\u5b9a\u7fa9\u81ea\u6211 2. \u4ed6\u4eba\u7684\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u4f5c\u6703\u5f71\u97ff\u81ea\u6211 3. \u9023\u7d50\u3001\u76f8\u4f9d\u5f88\u91cd\u8981 4. \u6253\u58d3\u7368\u7279\u6027 (unique) \u4f8b\uff1a\u65e5\u672c\u7687\u592a\u5b50\u5983\u653e\u68c4\u9ad8\u5b78\u6b77\u5de5\u4f5c\u9078\u64c7\u626e\u6f14\u50b3\u7d71\u7684\u59bb\u5b50\u89d2\u8272\uff0c\u8a31\u591a\u897f\u65b9\u4eba\u7121\u6cd5\u7406\u89e3\u3002 \u9019\u5c31\u662f\u81ea\u6211\u6982\u5ff5\u7684\u6587\u5316\u5dee\u7570 \u81ea\u6211 \u7684\u529f\u80fd self-knowledge \u81ea\u6211\u8a8d\u77e5 \u6211\u5011\u5982\u4f55\u77e5\u9053\u81ea\u5df1\u662f\u8ab0 self control \u81ea\u6211\u63a7\u5236 \u6211\u5011\u5982\u4f55\u4f5c\u8a08\u756b\u3001\u4e0b\u6c7a\u5b9a impression management \u5370\u8c61\u7ba1\u7406 \u6211\u5011\u5982\u4f55\u5728\u5c0d\u65b9\u9762\u524d\u8868\u73fe\u81ea\u5df1\uff0c\u4e26\u8b93\u5c0d\u65b9\u7528\u770b\u5f85\u81ea\u5df1\u662f\u5982\u81ea\u5df1\u6240\u671f\u671b\u7684 self esteem \u81ea\u5c0a \u6211\u5011\u5982\u4f55\u5c0d\u81ea\u5df1\u4fdd\u6301\u4e00\u500b\u6b63\u9762\u7684\u8a55\u50f9","title":"Ch5.1 \u81ea\u6211\u6982\u5ff5\uff0c\u81ea\u6211\u6982\u5ff5\u5982\u4f55\u767c\u5c55"},{"location":"univ_notes/general/social_psy/#ch52","text":"","title":"Ch5.2 \u5167\u7701\uff0c\u5167\u7701\u53ef\u4ee5\u4e86\u89e3\u81ea\u5df1\u5230\u4ec0\u9ebc\u7a0b\u5ea6\uff1f"},{"location":"univ_notes/general/social_psy/#introspection","text":"\u4eba\u5011\u5411\u5167\u5be9\u8996\u81ea\u5df1\u60f3\u6cd5\u3001\u611f\u53d7\u3001\u52d5\u6a5f\u7684\u904e\u7a0b \u4eba\u5011\u5176\u5be6\u4e0d\u5e38\u4f9d\u8cf4\u5167\u7701\uff0c\u56e0\u70ba\uff1a\u5167\u7701\u6709\u6642\u5019\u4ee4\u4eba\u4e0d\u6109\u5feb\uff0c\u4e14\u6709\u6642\u611f\u53d7\u548c\u884c\u70ba\u7684\u7406\u7531\u53ef\u80fd\u662f\u5916\u5728\u56e0\u7d20\u3002","title":"\u5167\u7701(introspection)"},{"location":"univ_notes/general/social_psy/#self-awareness-theory","text":"\u4e00\u500b\u4eba\u5011\u5c08\u6ce8\u65bc\u5c07\u81ea\u5df1\u7684\u884c\u70ba\u548c\u5167\u5728\uff0c\u5fc3\u7406\u7684\u57fa\u6e96\u6bd4\u8f03\u7684\u60f3\u6cd5 \u6709\u6642\u4eba\u5011\u6703\u9003\u907f\u81ea\u6211\uff0c\u4e0d\u60f3\u9762\u5c0d\uff0c\u56e0\u70ba\u81ea\u6211\u5be9\u8996\u7684\u6642\u5019\u662f\u4e00\u7a2e\u9817\u70ba\u53ad\u60e1\u7684\u884c\u70ba(aversive)- \u95dc\u6389\u5167\u5728\u805a\u5149\u71c8 \u4e26\u975e\u6240\u6709\u7684\u9003\u907f\u81ea\u6211\u90fd\u4e0d\u597d\uff0c\u6709\u6642\u5019\u4e5f\u662f\u4e00\u7a2e\u5b97\u6559\u8868\u9054\u6216\u662f\u5fc3\u9748\u884c\u70ba\uff0c\u6291\u6216\u662f\u5728\u81ea\u6211\u5be9\u8996\u7684\u904e\u7a0b\u4e2d\u80fd\u8b93\u6211\u5011\u77e5\u9053\u4e8b\u60c5\u7684\u662f\u975e\u5c0d\u932f\u3002","title":"\u81ea\u6211\u5bdf\u89ba\u8ad6(Self-Awareness Theory)"},{"location":"univ_notes/general/social_psy/#judging-why-we-feel-the-way-we-do","text":"\u96e3\u4ee5\u65b7\u5b9a\uff0c\u4f8b\u5982\uff0c\u59b3\u70ba\u4ec0\u9ebc\u6703\u9677\u5165\u9019\u500b\u60c5\u7dd2\u3002 \u4ee5\u56e0\u679c\u8ad6\u4f86\u89e3\u91cb: \u9020\u6210\u4e00\u500b\u4eba\u60f3\u6cd5\u548c\u884c\u70ba\u7684\u539f\u56e0\uff0c\u901a\u5e38\u6703\u7531\u6587\u5316\u4f86\u5b78\u7fd2\u3002 \u4f46\u6a5f\u6a21\u548c\u7406\u8ad6\u4e26\u975e\u7d55\u5c0d\u6b63\u78ba","title":"\u5224\u65b7\u6211\u5011\u70ba\u4f55\u611f\u53d7\u3001\u89e3\u91cb\u81ea\u5df1\u7684\u884c\u70ba(Judging Why We Feel the Way We Do)"},{"location":"univ_notes/general/social_psy/#consequences-of-introspecting-about-reasons","text":"\u6211\u5011\u53bb\u601d\u8003\u5c0e\u81f4\u6211\u5011\u614b\u5ea6\u7684\u539f\u56e0\uff0c\u5e38\u5e38\u9020\u6210\u6211\u5011\u7684\u614b\u5ea6\u6539\u8b8a\uff0c\u540c\u6642\uff0c\u4eba\u5011\u5047\u5b9a\u4ed6\u5011\u7684\u614b\u5ea6\u8f49\u8b8a\u7684\u539f\u56e0\u662f\u5bb9\u6613\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u3002 \u7f3a\u9ede\u5982\u4e0b \u53ea\u5c08\u6ce8\u65bc\u80fd\u4ee5\u8a9e\u8a00\u8868\u9054\u7684\u65b9\u5411 \u4f46\u5c0d\u65bc\u96e3\u4ee5\u8868\u9054\u3001\u89e3\u91cb\u7684\u539f\u56e0\u901a\u5e38\u5c31\u5ffd\u7565\u6389 \u4f46\u4e5f\u5c31\u662f\u90a3\u7a2e\u96e3\u4ee5\u89e3\u91cb\u7684\u539f\u56e0\u624d\u662f\u771f\u6b63\u5f71\u97ff\u9577\u9060\u7684","title":"\u5c0d\u65bc\u539f\u56e0\u7684\u81ea\u7701\u7684\u7d50\u679c(Consequences of Introspecting About Reasons)"},{"location":"univ_notes/general/social_psy/#ch53","text":"","title":"Ch5.3 \u4eba\u5011\u5982\u4f55\u4ee5\u89c0\u5bdf\u81ea\u5df1\u7684\u884c\u70ba\u4f86\u4e86\u89e3\u81ea\u5df1"},{"location":"univ_notes/general/social_psy/#self-perception-theory","text":"\u7576\u6211\u5011\u7684\u4e0d\u78ba\u5b9a\u81ea\u5df1\u7684\u614b\u5ea6\u6642\uff0c\u6211\u5011\u6703\u8457\u91cd\u65bc\u7576\u6642\u767c\u751f\u7684\u60c5\u666f\u548c\u884c\u52d5\u4f86\u63a8\u65b7\u81ea\u6211\u7684\u614b\u5ea6\u3002 \u4e0d\u5b9a\u6642\uff0c\u4e5f\u6703\u5f9e\u884c\u70ba\u4f86\u63a8\u65b7\u5167\u5728\u611f\u53d7\u3002 \u6703\u60f3\u8981\u5224\u65b7\u9019\u4e9b\u884c\u70ba\u662f\u5426\u80fd\u53cd\u6620\u51fa\u5011\u7684\u611f\u53d7\u4ee5\u53ca\u9019\u500b\u60c5\u6cc1\u662f\u5426\u80fd\u53cd\u6620\u51fa\u6211\u70ba\u4f55\u90a3\u9ebc\u505a\u3002","title":"\u81ea\u6211\u77e5\u89ba\u8ad6(Self-Perception Theory)"},{"location":"univ_notes/general/social_psy/#intrinsic-vs-extrinsic-motivation","text":"In: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u81ea\u5df1\u559c\u6b61\uff0c\u500b\u6027\u9a45\u4f7f\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u6211\u771f\u7684\u559c\u6b61\u548c\u4ed6\u4eba\u5408\u4f5c\u3002 Ex: \u6703\u53c3\u52a0\u67d0\u7a2e\u6d3b\u52d5\u662f\u56e0\u70ba\u6709\u5916\u5728\u5229\u76ca\uff0c\u800c\u975e\u672c\u8eab\u559c\u6b61\u3002\u4f8b\u5982\u53c3\u52a0\u71df\u968a\u662f\u70ba\u4e86\u8cfa\u53d6\u6d25\u8cbc\u3002 \u4f8b\u5982\u8003\u91cf\u5230\u5916\u5728\u52d5\u6a5f\uff0c\u5bb6\u9577\u53ef\u80fd\u6703\u7528\u91d1\u9322\u3001\u9ede\u6578\u3001\u73a9\u5177\u7b49\u7b49\u734e\u52f5 \u4f46\u53ef\u80fd\u6703\u6709\u53cd\u6548\u679c\uff0c\u8b93\u5c0f\u670b\u53cb\u8b8a\u5f97\u592a\u552f\u5229\u662f\u5716\u3002 \u904e\u5ea6\u8faf\u8b77\u6548\u61c9: \u4eba\u985e\u7684\u884c\u70ba\u4e2d\u5167\u5916\u5728\u52d5\u6a5f\u90fd\u6703\u6709\u6240\u4f5c\u7528\uff0c\u4f46\u662f\u6709\u6642\u5019\u6703\u628a\u5916\u5728\u52d5\u6a5f\u770b\u5f97\u592a\u5f37\u70c8\uff0c\u4ee5\u81f3\u65bc\u4f4e\u4f30\u5167\u5728\u52d5\u6a5f\u5e36\u4f86\u7684\u5f71\u97ff\u3002 \u4ee5\u8868\u73fe\u70ba\u689d\u4ef6\u7684\u734e\u8cde\u8f03\u80fd\u964d\u4f4e\u5167\u5728\u8208\u8da3\u7684\u640d\u5bb3(\u8ddf\u4ee5\u4efb\u52d9\u70ba\u689d\u4ef6\u76f8\u6bd4)\uff0c\u539f\u56e0\u5728\u65bc\uff0c\u8868\u73fe\u7684\u597d\u624d\u80fd\u771f\u6b63\u4ee3\u8868\u4e00\u500b\u4eba\u559c\u6b61\u9019\u500b\u6771\u897f\uff0c\u800c\u4e0d\u662f\u70ba\u4e86\u505a\u800c\u505a\u3002\u5982\u679c\u53ea\u662f\u628a\u4e8b\u60c5\u505a\u5230\u4e86\u800c\u6c92\u6709\u505a\u597d\uff0c\u90a3\u4e26\u4e0d\u80fd\u4ee3\u8868\u4ed6\u771f\u6b63\u559c\u6b61\u9019\u4ef6\u4e8b\u60c5\u3002","title":"\u5167\u5916\u5728\u52d5\u6a5f(Intrinsic vs Extrinsic Motivation)"},{"location":"univ_notes/general/social_psy/#_8","text":"\u56fa\u5b9a: \u6211\u5011\u6709\u4e9b\u80fd\u529b\u7121\u6cd5\u6539\u8b8a\u7684 \u6210\u9577: \u6211\u5011\u7684\u80fd\u529b\u662f\u53ef\u5851\u9020\u7684\uff0c\u96a8\u8457\u6210\u9577\u6539\u8b8a \u56fa\u5b9a\u5fc3\u614b\u5728\u5931\u6557\u5f8c\u5bb9\u6613\u653e\u68c4 \u8981\u7a31\u8b9a\u5c0f\u5b69\u7684\u52aa\u529b\u800c\u975e\u5c0f\u5b69\u7684\u5929\u5206","title":"\u5fc3\u614b"},{"location":"univ_notes/general/social_psy/#2-factor-theory-of-emotion","text":"\u610f\u8b58\u5230\u81ea\u5df1\u7684\u751f\u7406\u6fc0\u767c\u72c0\u614b(psysiological arousal) \u627e\u5c0b\u5c0d\u65bc\u6fc0\u767c\u904e\u5f8c\u7684\u751f\u7406\u72c0\u614b\u505a\u51fa\u5408\u7406\u7684\u89e3\u91cb\uff0c\u4ea6\u5373\u81ea\u6211\u77e5\u89ba\u7684\u904e\u7a0b \u4f46\u6709\u6642\u5019\u6703\u56e0\u70ba\u932f\u8aa4\u6b78\u56e0\u800c\u5c0e\u81f4\u60c5\u7dd2\u5224\u65b7\u5931\u771f(\u6881\u8001\u5e2b\u63d0\u5230\u7684)\u540a\u6a4b\u5be6\u9a57) \u8aa4\u5224\u7684\u60c5\u6cc1: \u4e8c\u56e0\u8ad6\u7684\u5224\u65b7\u65b9\u6cd5\uff0c\u901a\u5e38\u6703\u5f88\u4e3b\u89c0\uff0c\u4f9d\u8cf4\u65bc\u81ea\u5df1\u7684\u89e3\u91cb(\u4f8b\u5982\u7ad9\u5728\u540a\u6a4b\u81bd\u6230\u5fc3\u9a5a\uff0c\u5973\u751f\u8d70\u904e\u4f86\u6703\u4ee5\u70ba\u81ea\u5df1\u5c31\u662f\u559c\u6b61\u5979)","title":"\u60c5\u7dd2\u4e8c\u56e0\u8ad6(2 Factor Theory of Emotion)"},{"location":"univ_notes/general/social_psy/#ch54","text":"\u81ea\u6211\u6982\u5ff5\u662f\u7531\u5468\u906d\u7684\u4eba\u578b\u5851","title":"Ch5.4 \u4eba\u5011\u5982\u4f55\u7528\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u5df1"},{"location":"univ_notes/general/social_psy/#_9","text":"\u4f8b\u5982\u6bd4\u8f03\u80fd\u529b: \u6211\u8cfa\u591a\u5c11\uff0c\u4ed6\u8cfa\u591a\u5c11\uff0c\u4ed6\u591a\u6211\u5c11\uff0c\u6211\u8f03\u4e0d\u597d\u3002 \u793e\u6703\u6bd4\u8f03\u8ad6(Social Comparsion Theory): \u6211\u5011\u7d93\u7531\u8207\u5225\u4eba\u6bd4\u8f03\u4f86\u5c0d\u81ea\u5df1\u7684\u614b\u5ea6\u8207\u80fd\u529b\u6709\u6240\u4e86\u89e3\u3002\u6703\u63a2\u8a0e\u5169\u500b\u91cd\u8981\u7684\u6771\u897f 1.\u4f55\u6642\u9032\u5165\u4e86\u793e\u6703\u6bd4\u8f03\u8ad6: \u7576\u6211\u5011\u4e0d\u78ba\u5b9a\u7684\u6642\u5019(\u5c0d\u65bc\u81ea\u5df1\u7684\u80fd\u529b\u4e0d\u78ba\u5b9a\uff0c\u52e2\u5fc5\u5c31\u5f97\u6bd4\u8f03) 2.\u59b3\u8ddf\u8ab0\u6bd4\u8f03: \u6700\u521d\u6703\u5148\u548c\u8eab\u908a\u7684\u4eba \u5411\u4e0a\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u597d\u7684\u4eba\u6bd4\u8f03\uff0c\u70ba\u4e86\u77e5\u9053\u81ea\u5df1\u7684\u6975\u9650\u4ee5\u53ca\u4e0d\u8db3\u3002 \u5411\u4e0b\u6bd4\u8f03: \u8207\u80fd\u529b\u6bd4\u81ea\u5df1\u5dee\u7684\u4eba\u6bd4\u8f03\uff0c\u986f\u5f97\u81ea\u5df1\u8f03\u70ba\u512a\u8d8a\u3002","title":"\u7d93\u7531\u6bd4\u8f03\u81ea\u5df1\u548c\u4ed6\u4eba\u4f86\u4e86\u89e3\u81ea\u6211"},{"location":"univ_notes/general/social_psy/#_10","text":"\u9867\u91cc\u7684\u93e1\u4e2d\u81ea\u6211: \u501f\u4ed6\u4eba\u4e86\u89e3\u81ea\u5df1\u3002 \u793e\u6703\u8abf\u7bc0(Social Tuning): \u4eba\u5011\u63a5\u53d7\u3001\u63a1\u7528\u4ed6\u4eba\u7684\u614b\u5ea6\u3002(\u6709\u6642\u4e0d\u592a\u6e96\u78ba\uff0c\u56e0\u70ba\u4eba\u5011\u50be\u5411\u65bc\u63a5\u53d7\u559c\u6b61\u7684\u4eba\u7684\u614b\u5ea6\u800c\u53cd\u4e4b\u4ea6\u7136)","title":"\u7d93\u7531\u5438\u6536\u4ed6\u4eba(\u5c0d\u6211\u7684)\u89c0\u611f\u4f86\u4e86\u89e3\u81ea\u6211"},{"location":"univ_notes/general/social_psy/#_11","text":"\u60c5\u611f\u9810\u6e2c(Affective Forecasts) \u4eba\u5011\u5c0d\u65bc\u672a\u4f86\u906d\u9047\u5230\u60c5\u7dd2(\u66f4\u7cbe\u78ba\u5730\u8aaa\uff0c\u60c5\u7dd2\u74b0\u5883)\u7684\u4f30\u8a08\u3001\u9810\u6e2c\u3002 *","title":"\u7d93\u7531\u5c0d\u4ed6\u4eba\u8aee\u8a62\u4f86\u4e86\u89e3\u81ea\u5df1\u7684\u672a\u4f86"},{"location":"univ_notes/general/social_psy/#ch55","text":"\u81ea\u6211\u63a7\u5236(Self Control): \u70ba\u73fe\u5728\u505a\u6c7a\u5b9a\u3001\u70ba\u672a\u4f86\u505a\u6e96\u5099\u3002 \u6291\u5236\u60f3\u6cd5: \u6703\u60f3\u8981\u4e0d\u53bb\u60f3\u6211\u5011\u60f3\u5fd8\u8a18\u7684\u4e8b\u60c5\uff0c\u4f46\u5176\u5be6\u4e0d\u5bb9\u6613\uff0c\u4e5f\u4e0d\u90a3\u9ebc\u6709\u6548\u3002 \u6d88\u8017\u6548\u61c9(Depleting Effect): \u5728\u4e00\u500b\u65b9\u9762\u4ed8\u51fa\u52aa\u529b\uff0c\u5c31\u6703\u5728\u53e6\u4e00\u65b9\u9762\u6709\u6240\u6d88\u8017(\u4f8b\u5982\u5728\u4e0b\u5348\u7684\u6642\u5019\u4e0b\u8f09\u975e\u6cd5\u6b4c\u66f2\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u70ba\u6b64\u6642\u5c0d\u65bc\u5c0d\u6297\u90aa\u60e1\u80fd\u529b\u6709\u6240\u6d88\u8017) \u5982\u4f55\u589e\u52a0\u81ea\u6211\u63a7\u5236\u7684\u6301\u7e8c\u6642\u9593: 1.\u76f8\u4fe1\u81ea\u5df1\u7684\u63a7\u5236\u80fd\u529b\u6703\u63d0\u5347 2.\u5728\u5931\u63a7\u524d\u5bdf\u89ba 3.\u4fe1\u4ef0","title":"Ch5.5 \u81ea\u6211\u63a7\u5236\uff0c\u8207\u5176\u57f7\u884c\u529f\u80fd\uff0c\u5565\u6642\u6210\u529f\u6291\u6216\u662f\u5931\u6557\u5462"},{"location":"univ_notes/general/social_psy/#ch56-impression-management-self-presentation","text":"\u5370\u8c61\u7ba1\u7406(Impression Management):\u3000\u4eba\u5011\u6703\u5982\u4f55\u63cf\u7e6a\u81ea\u5df1\uff0c\u4f7f\u5f97\u5225\u4eba\u770b\u5f85\u81ea\u5df1(\u88ab\u770b)\u662f\u7b26\u671f\u671b\u7684\u3002","title":"Ch5.6 \u5370\u8c61\u7ba1\u7406(Impression Management) \u53c8\u53eb\u505a \u81ea\u6211\u5448\u73fe(Self Presentation)"},{"location":"univ_notes/general/social_psy/#ingratiationself-handicapping","text":"\u9022\u8fce(Ingratiation): \u62cd\u99ac\u5c41\u3001\u8b9a\u7f8e\uff0c\u8b93\u81ea\u5df1\u662f\u80fd\u88ab\u4ed6\u4eba\u559c\u6b61\u7684(Making ourselves likable to another person)\u901a\u5e38\u662f\u5c0d\u65bc\u5730\u4f4d\u6bd4\u6211\u5011\u9ad8\u7684\u4eba\u9032\u884c\u9022\u8fce\u8ac2\u5a9a\u7684\u884c\u70ba\u3002 \u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping): \u70ba\u81ea\u5df1\u7684\u904e\u932f\u627e\u7406\u7531\uff0c\u4f8b\u5982\u90fd\u5077\u61f6\u4e0d\u53bb\u7df4\u6821\u968a(\u53d6\u81ea\u4e2d\u6b63\u5927\u5b78\u5fc3\u7406\u71df: \u81ea\u6211\u8a2d\u969c\uff08self-handicapping\uff0c\u53c8\u7a31\u81ea\u6211\u8a2d\u9650\uff09\u6211\u5011\u50be\u5411\u5b89\u6392\u4e00\u500b\u60c5\u5883\uff0c\u8b93\u81ea\u5df1\u5728\u5931\u6557\u51fa\u73fe\u4e4b\u5f8c\uff0c\u4e0d\u6703\u8b93\u5225\u4eba\u89ba\u5f97\u662f\u81ea\u5df1\u80fd\u529b\u4e0d\u8db3\u800c\u964d\u4f4e\u81ea\u5df1\u7684\u81ea\u5c0a\uff0c\u4e5f\u5c31\u662f\u7559\u500b\u9000\u8def\u627e\u53f0\u968e\u4e0b\u3002)\uff0c\u5931\u6557\u537b\u8aaa\u4e0d\u662f\u81ea\u5df1\u6c92\u6709\u597d\u597d\u7df4\u7fd2\uff0c\u800c\u662f\u8aaa\u6c92\u6709\u6642\u9593\u7b49\u7b49\u3002\u81ea\u6211\u8a2d\u969c\u53c8\u5206\u70ba\u4ee5\u4e0b\u5169\u7a2e \u884c\u70ba\u81ea\u6211\u8a2d\u969c(Behavioral self-handicapping)\uff0c\u53cd\u5411\u5730\u505a\u4e00\u4e9b\u770b\u4f3c\u6703\u6e1b\u5c11\u6210\u529f\u6a5f\u7387\u7684\u884c\u70ba\uff0c\u56e0\u6b64\u5373\u4fbf\u4ed6\u5011\u5931\u6557\u4e86\u4e5f\u6709\u53f0\u968e\u4e0b\uff0c\u8aaa\u4ec0\u9ebc\u6211\u8003\u524d\u4e00\u5929\u90fd\u5728\u6253\u96fb\u73a9\u624d\u6703\u8003\u4e0d\u597d\uff0c\u800c\u4e0d\u662f\u6211\u4e0a\u8ab2\u4e0d\u8a8d\u771f\u3001\u638c\u63e1\u4e0d\u719f\u3002 \u53e3\u982d\u81ea\u6211\u8a2d\u969c(Reported self-handicapping)\uff0c\u6c92\u6709\u505a\u4e00\u4e9b\u6703\u963b\u64cb\u6210\u529f\u7684\u4e8b\u60c5\uff0c\u4f46\u50be\u5411\u65bc\u627e\u85c9\u53e3\u3002\u4f8b\u5982\u8aaa\u8003\u4e0d\u597d\u662f\u56e0\u70ba\u8003\u8a66\u7684\u6642\u5019\u809a\u5b50\u75db","title":"\u9022\u8fce(Ingratiation)\u8207\u81ea\u6211\u8a2d\u969c\u3001\u8a2d\u9650(Self-Handicapping)"},{"location":"univ_notes/general/social_psy/#ch57","text":"self esteem \u81ea\u5c0a: \u4eba\u5011\u5c0d\u81ea\u5df1\u7684\u6574\u9ad4\u8a55\u50f9(\u6b63\u3001\u8ca0\u9762) \u9ad8\u81ea\u5c0a\u7684\u512a\u9ede: \u5373\u4fbf\u74b0\u5883\u8271\u56f0\u7684\u6642\u5019\u4e5f\u80fd\u5805\u6301\u4f4f\u3002 \u7121\u61fc\u6b7b\u4ea1(? \u4e0d\u61c2\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u500b \u5728ppt p79 \u7b2c\u4e00\u9805) \u9a5a\u6050\u7ba1\u7406\u8ad6:\u4eba\u9762\u81e8\u6b7b\u4ea1\u6642\uff0c\u5c0d\u539f\u672c\u6703\u5f8c\u6094\u7684\u4e8b\u60c5\u90fd\u6bd4\u8f03\u653e\u4e0b\u4e86 \u6b7b\u4ea1\u51f8\u986f\u6027:\u4eba\u5728\u6b7b\u4ea1\u524d\uff0c\u6703\u5f88\u7126\u616e\uff0c\u65bc\u662f\u63a1\u53d6\u4e86\u81ea\u6211\u9632\u885b\u6a5f\u5236\uff0c\u900f\u904e\u81ea\u6211\u80af\u5b9a\u7684\u65b9\u5f0f\uff0c\u544a\u8a34\u81ea\u5df1\u751f\u5728\u4e16\u4e0a\u662f\u6709\u610f\u7fa9\u7684\uff0c\u52a0\u5f37\u81ea\u5c0a\uff0c\u6e1b\u5c11\u907a\u61be \u81ea\u6200\u884c\u70ba(Narcissism) \u7531\u904e\u5ea6\u7684\u81ea\u6211\u6200\u611b\u4ee5\u53ca\u6b20\u7f3a\u5c0d\u4ed6\u4eba\u7684\u540c\u7406\u5fc3\u6240\u5f62\u6210\u3002 \u73fe\u4eca\u7684\u4eba\u66f4\u81ea\u6200\u4e86","title":"Ch5.7 \u81ea\u5c0a:\u6211\u5011\u5c0d\u81ea\u5df1\u7684\u611f\u53d7"},{"location":"univ_notes/general/social_psy/#ch6","text":"","title":"Ch6 \u70ba\u81ea\u5df1\u7684\u884c\u52d5\u8faf\u8b77\u7684\u9700\u6c42\uff1a\u6e1b\u8f15\u5931\u8abf\u7684\u4ee3\u50f9\u8207\u597d\u8655"},{"location":"univ_notes/general/social_psy/#heavens-gate-cult","text":"Mass suicide","title":"Heaven's Gate Cult"},{"location":"univ_notes/general/social_psy/#61-the-theory-of-cognitive-dissonance","text":"","title":"6.1 The Theory of Cognitive Dissonance \u8a8d\u77e5\u5931\u8abf\u8ad6"},{"location":"univ_notes/general/social_psy/#_12","text":"\u4eba\u4e00\u822c\u6703\u53bb\u76e1\u529b\u7dad\u6301\u81ea\u5df1\u559c\u6b61\u7684\u5f62\u8c61 \u7576\u9047\u5230\u81ea\u5df1\u4e0d\u559c\u6b61\u7684\u5f62\u8c61\u6703\u89ba\u5f97\u4e0d\u8212\u670d","title":"\u7dad\u6301\u7a69\u5b9a\u3001\u6b63\u9762\u7684\u81ea\u6211\u5f62\u8c61"},{"location":"univ_notes/general/social_psy/#_13","text":"\u7522\u751f\u8a8d\u77e5\u5931\u8abf\uff08Cognitive Dissonance\uff09 \u7576\u540c\u4e00\u6642\u9593\u6709\u5169\u7a2e\u76f8\u77db\u76fe\u7684\u8a8d\u77e5\uff08E.g., \u4fe1\u4ef0\u3001\u60f3\u6cd5\u3001\u50f9\u503c\u89c0\u3001\u884c\u70ba\u6a21\u5f0f\uff09\u800c\u4f7f\u4eba\u7522\u751f\u4e0d\u8212\u670d\u7684\u72c0\u614b \u6216\u591a\u6216\u5c11\u5c0d\u81ea\u6211\u8a8d\u77e5\u3001\u5f62\u8c61\u9020\u6210\u5a01\u8105(Threat to self-image)","title":"\u7576\u8a8d\u77e5\u885d\u7a81\uff1a"},{"location":"univ_notes/general/social_psy/#_14","text":"\u6539\u8b8a\u884c\u70ba \u900f\u904e\u6539\u8b8a\u5176\u4e2d\u4e00\u7a2e\u8a8d\u77e5(\u61c9\u8aaa\uff0c\u6539\u8b8a\u4e00\u7a2e\u5931\u8abf\u7684\u8a8d\u77e5changing one of the dissonant cognitions)\u4f86\u8faf\u8b77\u81ea\u5df1\u7684\u884c\u70ba \u900f\u904e\u52a0\u5165\u65b0\u7684\u8a8d\u77e5(by adding new cognitions)\u4f86\u8faf\u8b77\u81ea\u5df1\u7684\u884c\u70ba \u8209\u500b\ud83c\udf30\uff1a\u6709\u500b\u8ca0\u8cac\u4efb\u3001\u5feb\u6a02\u3001\u6eff\u8db3\u7684\u4eba\uff0c\u67d0\u5929\u505a\u4e86\u4ef6\u9055\u53cd\u81ea\u5df1\u5f62\u8c61\u7684\u884c\u70ba\uff08\u62bd\u83f8\uff09\uff0c\u63a5\u8457\u6703\u7d93\u6b77\u8a8d\u77e5\u5931\u8abf \u6539\u8b8a\u884c\u70ba\uff1a\u4e0d\u62bd\u83f8\u4e86 \u6539\u8b8a\u8a8d\u77e5\uff1a\u4f8b\u5982\u539f\u672c\u89ba\u5f97\u62bd\u83f8\u4e0d\u597d\u662f\u56e0\u70ba\u53ef\u80fd\u6703\u81f4\u764c\uff0c\u73fe\u5728\u544a\u8a34\u81ea\u5df1\u5176\u5be6\u62bd\u83f8\u4e0d\u6703\u81f4\u764c \u52a0\u5165\u8a8d\u77e5\uff1a\u62bd\u83f8\u9019\u4ef6\u4e8b\u80fd\u8b93\u81ea\u5df1\u653e\u9b06","title":"\u4e09\u7a2e\u6e1b\u8f15\u5931\u8abf\u7684\u65b9\u6cd5\uff1a"},{"location":"univ_notes/general/social_psy/#self-affirmation","text":"\u52a0\u5f37\u81ea\u6211\u6982\u5ff5\uff08Self-Concpet\uff09 \u900f\u904e\u52a0\u5165 \u5176\u4ed6\u6b63\u9762\u7684\u7279\u8cea \u4f86\u6e1b\u8f15\u5176\u4ed6\u4e8b\u4ef6\u7684\u5931\u8abf \u4f8b\u5982\u67d0\u500b\u8001\u83f8\u69cd\u6212\u83f8\u53c8\u5931\u6557\u4e86\uff1a\u6211\u96d6\u7136\u5f88\u4e0d\u7406\u667a\u7684\u8dd1\u53bb\u62bd\u83f8\u9084\u6212\u4e0d\u6389\uff0c\u4f46\u662f \u6211\u662f\u500b\u53b2\u5bb3\u7684\u6578\u5b78\u5bb6(\u5728\u6b64\u50ac\u7720\u81ea\u5df1\u4f9d\u7136\u662f\u500b\u53b2\u5bb3\u7684\u6578\u5b78\u5bb6\u5c31\u662f\u4e00\u7a2e\u4ee5\u5176\u4ed6\u6b63\u9762\u7279\u8cea\u4f86\u6e1b\u8f15\u5176\u4ed6\u4e8b\u4ef6\u7684\u5931\u8abf\u4e4b\u65b9\u6cd5)","title":"\u81ea\u6211\u80af\u5b9a\uff08Self Affirmation\uff09"},{"location":"univ_notes/general/social_psy/#impact-bias","text":"\u9ad8\u4f30\u4e86\u81ea\u5df1\u5c0d\u65bc\u672a\u4f86\u6703\u767c\u751f\u7684\u75db\u82e6\u4e8b\u4ef6\u7684\u60c5\u7dd2\u53cd\u61c9\u7684\u5f37\u5ea6\u8207\u6301\u7e8c\u6642\u9593 \u70ba\u4ec0\u9ebc\u6703\u767c\u751f\uff1f \u4eba\u5bb9\u6613\u6c92\u6709\u610f\u8b58\u5230 Dissonance Reduction \u7684\u529b\u91cf\uff0c\u4e00\u822c\u4f86\u8aaa Dissonance Reduction \u53ef\u4ee5\u5feb\u901f\u5730\u4f7f\u4eba\u632f\u4f5c","title":"\u885d\u64ca\u504f\u8aa4\uff08Impact Bias\uff09"},{"location":"univ_notes/general/social_psy/#_15","text":"\u6700\u75db\u82e6\u662f\u5c0d\u65bc\u81ea\u5df1\u7684\u4e86\u89e3\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u6709\u9ad8\u81ea\u5c0a\u5fc3\u7684\u4eba \u5c0d\u81ea\u5c0a\u7684\u6253\u64ca\u53ef\u80fd\u6703\u8b93\u6211\u5011\u505a\u51fa\u96e2\u7d93\u53db\u9053\u7684\u4e8b\u60c5(ppt15\u9801\u7684\u4f5c\u5f0a\u884c\u70ba)\uff0c\u597d\u6bd4\u8003\u8a66\u7a81\u7136\u8003\u5f97\u5f88\u5dee\uff0c\u56e0\u6b64\u60f3\u8981\u53bb\u4f5c\u5f0a\u3002","title":"\u5931\u8abf\u8207\u81ea\u6211\u6982\u5ff5"},{"location":"univ_notes/general/social_psy/#_16","text":"\u6bcf\u7576\u505a\u6c7a\u5b9a\u6642\uff0c\u90fd\u6703\u7d93\u6b77\u5931\u8abf \u4e0d\u7ba1\u54ea\u500b\u9078\u9805\u90fd\u6703\u6709\u597d\u6709\u58de\uff0c\u9078\u64c7 A \u6703\u6709 A \u7684\u58de\u8655\uff0c\u800c\u5176\u4ed6\u88ab\u6368\u68c4\u7684\u9078\u9805\u6709\u5176\u597d\u8655\uff0c\u9019\u7a2e\u6709\u9078\u5230\u67d0\u4e9b\u58de\u8655\u7136\u5f8c\u6368\u68c4\u67d0\u4e9b\u597d\u8655\u4fbf\u6703\u7522\u751f\u8a8d\u77e5\u5931\u8abf \u4f46\u662f\u4eba\u5f88\u5e38 distort our likes and dislikes \u4eba\u6703\u50be\u5411\u4f4e\u4f30\u4e0b\u5217\u5169\u9805 \u505a\u51fa\u7684\u6c7a\u5b9a\u7684\u58de\u8655 \u88ab\u6368\u68c4\u7684\u6c7a\u5b9a\u7684\u597d\u8655 \u6c7a\u7b56\u5f8c\u7684\u5931\u8abf\uff08Postdecision Dissonance\uff09: \u4ea6\u5373\u6c7a\u7b56\u5f8c\u7522\u751f\u7684\u5931\u8abf(\u5f8c\u6094\u6211\u7684\u9078\u64c7: \u8a8d\u70ba\u6211\u9078\u5f97\u4e0d\u597d\uff0c\u65e9\u77e5\u9053\u6211\u5c31\u9078\u53e6\u4e00\u500b\u9078\u64c7)\uff0c\u53ef\u4ee5\u900f\u904e\u3010\u611b\u4f60\u6240\u64c7\u4ee5\u53ca\u53ad\u4f60\u6240\u4e0d\u64c7(?)\u3011\u4f86\u964d\u4f4e\u5931\u8abf\u611f\u53d7\u3002","title":"\u6c7a\u5b9a"},{"location":"univ_notes/general/social_psy/#permanence-of-the-decision","text":"\u8d8a\u91cd\u8981\u7684\u6c7a\u5b9a \u2192 \u8d8a\u5f37\u7684\u5931\u8abf \u6c38\u4e45\u6027\u8d8a\u9ad8\u7684\u6c7a\u5b9a \u2192 \u8d8a\u5f37\u7684\u5931\u8abf","title":"\u9078\u64c7\u7684\u6c38\u4e45\u6027\uff08Permanence of The Decision\uff09"},{"location":"univ_notes/general/social_psy/#_17","text":"\u4f4e\u7403\u6cd5 \u5546\u4eba\u5148\u8b93\u4eba\u5047\u88dd\u4e0b\u4fbf\u5b9c\u7684\u5951\u7d04\uff0c\u518d\u4f86\u8aaa\u7f3a\u8ca8\uff0c\u53d6\u800c\u4ee3\u4e4b\u7d66\u4e00\u500b\u8f03\u9ad8\u5229\u6f64\u7684\u5951\u7d04 \u7531\u65bc\u8cb7\u5bb6\u5df2\u7d93\u6c7a\u5b9a\u8cb7\uff0c\u96e3\u4ee5\u6539\u8b8a\u6c7a\u7b56\uff0c\u5c31\u6703\u63a5\u53d7\u8f03\u9ad8\u50f9\u7684\u5951\u7d04 WHY\u594f\u6548? 1.\u81ea\u6211\u627f\u8afe(\u5df2\u6709\u6c7a\u5b9a\u8981\u8cb7\u7684\u611f\u89ba) 2.\u5c0d\u672a\u4f86\u7684\u671f\u5f85(\u8cb7\u5230\u4e4b\u5f8c\u7684\u611f\u89ba) 3. \u50f9\u683c\u6c92\u6709\u5dee\u592a\u591a(\u60f3\u8aaa\uff0c\u6211\u4e5f\u4e0d\u60f3\u5728\u90a3\u88cf\u6d6a\u8cbb\u6642\u9593\u4e86\uff0c\u518d\u6d6a\u8cbb\u53ef\u80fd\u53c8\u6c92\u6709\u4e86\uff0c\u6c92\u5dee\u90a3\u5e7en\u5143)","title":"\u88fd\u9020\u4e0d\u53ef\u53cd\u6094\u7684\u932f\u89ba"},{"location":"univ_notes/general/social_psy/#_18","text":"\u505a\u4e86\u4e0d\u9053\u5fb7\u7684\u4e8b\uff0c\u8ddf\u539f\u672c\u7684\u9053\u5fb7\u89c0\u4e0d\u76f8\u7b26- 1.\u8a8d\u77e5\u5931\u8abf\uff0c\u6539\u8b8a\u60f3\u6cd5\uff0c\u4ee5\u5f8c\u6703\u66f4\u4e0d\u9053\u5fb7 2.\u8a8d\u77e5\u5931\u8abf\uff0c\u6539\u8b8a\u884c\u70ba\uff0c\u4ee5\u5f8c\u518d\u4e5f\u4e0d\u505a\uff0c\u4ee5\u5f8c\u66f4\u9053\u5fb7 \u4e0d\u8ad6\u6539\u8b8a\u884c\u70ba\u6216\u662f\u6539\u8b8a\u60f3\u6cd5\u4ee5\u53ca\u662f\u5426\u9053\u5fb7\uff0c\u90fd\u662f\u8981\u8b93\u539f\u672c\u505a\u4e86\u9019\u4ef6\u4e8b\u60c5\u7522\u751f\u7684\u5931\u8abf\u5f71\u97ff\u964d\u4f4e\uff0c\u4f7f\u81ea\u5df1\u76f8\u4fe1\u6211\u9019\u6a23\u505a\u662f\u5c0d\u7684\u3002 \u8209\u500b\u4f8b\u5b50: \u6211\u4e0d\u4f5c\u5f0a\uff0c\u4f46\u6211\u6c92\u8003\u597d - \u7522\u751f\u4e86\u6c7a\u7b56\u5f8c\u7684\u5931\u8abf\uff08Postdecision Dissonance)\uff0c\u8a8d\u70ba\u6211\u4f5c\u5f0a\u53cd\u800c\u53ef\u4ee5\u8003\u6bd4\u8f03\u597d- \u5fc3\u88e1\u6703\u6399\u624e- \u70ba\u4e86\u964d\u4f4e\u5fc3\u88e1\u6399\u624e\u7684\u75db\u82e6\u4e5f\u5c31\u662f\u6e1b\u8f15\u5931\u8abf- \u6539\u8b8a\u614b\u5ea6\u8aaa- \u4f60\u8981\u76f8\u4fe1\u4f5c\u5f0a\u662f\u6bd4\u8003\u4e0d\u597d\u66f4\u90aa\u60e1\uff0c\u66f4\u4e0d\u7b26\u5408\u9053\u5fb7\u7684\u4e00\u7a2e\u884c\u70ba\u3002","title":"\u4e0d\u9053\u5fb7\u7684\u9078\u64c7"},{"location":"univ_notes/general/social_psy/#_19","text":"\u904e\u7a0b\u4e00\u6a23(\u6700\u7d42\u61c9\u8a72\u90fd\u662f\u6e1b\u7de9\u4e86\u5931\u8abf) \u5167\u5bb9\u6709\u6240\u4e0d\u540c\uff0c\u4f8b\u5982\u70ba\u81ea\u5df1\u589e\u6dfb\u4e86\u4ec0\u9ebc\u60f3\u6cd5\uff0c\u81ea\u6211\u7684\u6539\u8b8a\u662f\u56e0\u6587\u5316\u800c\u6709\u5dee\u3002","title":"\u6587\u5316\u5c0d\u8a8d\u77e5\u5931\u8abf\u7684\u5f71\u97ff"},{"location":"univ_notes/general/social_psy/#ch62","text":"\u8a8d\u77e5\u5931\u8abf\u662f\u5982\u4f55\u5728\u6211\u5011\u7684\u751f\u6d3b\u904b\u4f5c\uff0c\u53c8\u6709\u4ec0\u9ebc\u65b9\u6cd5\u53ef\u4ee5\u6709\u5efa\u8a2d\u6027\u7684\u964d\u4f4e\u4ed6?","title":"Ch6.2 \u65e5\u5e38\u4e2d\u7684\u81ea\u6211\u8faf\u89e3"},{"location":"univ_notes/general/social_psy/#justification-of-an-effort","text":"\u4eba\u5011\u50be\u5411\u65bc\u76f8\u4fe1\u3001\u6216\u559c\u6b61\u4ed8\u51fa\u5f88\u591a\u52aa\u529b\u7684\u6c7a\u7b56\u662f\u597d\u7684(\u65e2\u7136\u6211\u5c0d\u67d0\u4e8b\u7269\u591a\uff0c\u90a3\u5b83\u61c9\u8a72\u662f\u597d) \u4f8b\u5b50: Aronson and Mills \u4e00\u958b\u59cb\u4ed8\u51fa\u5f88\u591a\u52aa\u529b\u52a0\u5165\u793e\u5718\u7684\u6210\u54e1\u6703\u5c0d\u793e\u5718\u6709\u8f03\u9ad8\u7684\u5fe0\u8aa0\u5ea6(\u5373\u4fbf\u6211\u5011\u9032\u53bb\u662f\u500b\u5197\u54e1)\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 e.g. \u82b1\u5f88\u5927\u529b\u6c23\u52a0\u5165\u7684\u793e\u5718\uff0c\u53cd\u800c\u5f88\u7cdf\u7cd5\uff0c\u5927\u5931\u6240\u671b \u4f60\u8a72\u5982\u4f55\u964d\u4f4e\u9019\u7a2e\u5931\u8abf\u4ee5\u53ca\u81ea\u8b49\u3001\u81ea\u6211\u8faf\u89e3\u81ea\u5df1\u7684\u884c\u70ba? \u5916\u90e8\u7406\u7531:\u74b0\u5883\u56e0\u7d20 \u5167\u90e8\u7406\u7531:\u81ea\u6211\u614b\u5ea6","title":"\u4ed8\u51fa\u7684\u81ea\u6211\u8faf\u89e3(Justification of an effort)"},{"location":"univ_notes/general/social_psy/#_20","text":"\u53eb\u4eba\u505a\u51fa\u8ddf\u5167\u5fc3\u60f3\u6cd5\u4e0d\u4e00\u81f4\u7684\u4e8b- \u8a8d\u77e5\u5931\u8abf e.g. \u8b93\u4eba\u505a\u7121\u804a\u7684\u5de5\u4f5c\uff0c\u7d66\u4ed61 or 20\u5143\uff0c\u4e26\u8981\u4ed6\u8ddf\u4e0b\u4e00\u500b\u4eba\u8aaa\u9019\u5f88\u6709\u8da3(\u53cd\u614b\u5ea6)\uff0c\u6536\u52301\u5143\u7684\u6c92\u6709\u5916\u90e8\u7406\u7531\uff0c\u6240\u4ee5\u8a8d\u77e5\u5931\u8abf\u6703\u8a8d\u70ba\u9019\u5de5\u4f5c\u771f\u7684\u6709\u8da3\uff0c\u6536\u523020\u5143\u7684\u5247\u56e0\u70ba\u89ba\u5f97\u662f\u70ba\u4e86\u9322\u800c\u8aaa\u8b0a(20\u5143\u69cb\u6210\u8db3\u5920\u7684\u5916\u90e8\u7406\u7531\u4f86\u4f7f\u4eba\u8aaa\u8b0a)","title":"\u53cd\u614b\u5ea6\u4e3b\u5f35"},{"location":"univ_notes/general/social_psy/#_21","text":"\u82e5\u7d66\u5c0f\u5b69\u592a\u5927\u734e\u61f2\uff0c\u5247\u5c0f\u5b69\u6b78\u56e0\u65bc\u5916\u90e8\u7406\u7531(\u5916\u90e8\u5229\u76ca\u7f77\u4e86\uff0cExternal Justification)\uff0c\u4e0d\u6703\u5c07\u60f3\u6cd5\u5167\u5316(\u4f8b\u5982\u8b8a\u5f97\u552f\u5229\u662f\u5716\uff0c\u60f3\u8003\u597d\u5c31\u53ea\u662f\u70ba\u4e86\u8d0f\u9322\u800c\u4e0d\u662f\u771f\u7684\u60f3\u8981\u628a\u77e5\u8b58\u5b78\u597d) \u82e5\u7d66\u5c11\u4e00\u9ede\uff0c\u5c0f\u5b69\u6703\u81ea\u6211\u8aaa\u670d\uff0c\u76f8\u4fe1\u9019\u6709\u7528(\u771f\u6b63\u6539\u8b8a\u5167\u5fc3\uff0cInternal Justification)- \u9577\u6548\u6539\u8b8a(\u5faa\u5e8f\u6f38\u9032\u5730\u7d66\u4e88\u7531\u5c0f\u5230\u5927\u7684\u734e\u52f5\uff0c\u9019\u6a23\u5c0f\u5b69\u5c31\u771f\u7684\u6703\u60f3\u628a\u77e5\u8b58\u5b78\u597d)","title":"\u61f2\u7f70\u8207\u81ea\u6211\u8aaa\u670d"},{"location":"univ_notes/general/social_psy/#the-lasting-effects-of-self-persuasion","text":"\u5be6\u9a57: \u5c0f\u670b\u53cb\u88ab\u7981\u6b62\u73a9\u6700\u6709\u8da3\u7684\u73a9\u5177\uff0c\u56b4\u683c\u8655\u7f70\u7684\u7fa4\u7d44\u76f8\u8f03\u65bc\u6eab\u548c\u8655\u7f70\u7684\u7fa4\u7d44\u6703\u89ba\u5f97\u73a9\u5177\u88ab\u7981\u6b62\u7684\u73a9\u5177\u662f\u8f03\u70ba\u6709\u8da3\u7684\uff0c\u56e0\u70ba\u5916\u90e8\u7406\u7531\u8f03\u70ba\u5f37\u70c8(\u88ab\u7981\u6b62\u73a9\u73a9\u5177\u7684\u8655\u7f70\u5f88\u5f37\u70c8)\uff0c\u800c\u6eab\u548c\u8655\u7f70\u7684\u90a3\u500b\u7d44\u5225\u5247\u6703\u8a8d\u70ba\u5916\u90e8\u7406\u7531\u4e0d\u5920\u5f37\u70c8\uff0c\u53ef\u4ee5\u900f\u904e\u6539\u8b8a\u5167\u90e8\u7406\u7531(\u4eba\u672c\u8eab\u7684\u614b\u5ea6\u51fa\u767c)\u4f86\u8a8d\u70ba\u90a3\u500b\u73a9\u5177\u4e0d\u597d\u73a9\uff0c\u5c31\u80fd\u907f\u514d\u8655\u7f70\u3002 \u7c21\u55ae\u4f86\u8aaa\uff0c\u5f37\u70c8\u8655\u7f70\u7684\u5c0f\u670b\u53cb\u4e0d\u73a9\u73a9\u5177\u7684\u539f\u56e0\u5728\u65bc\u4ed6\u5011\u662f\u70ba\u4e86\u907f\u514d\u88ab\u8655\u7f70(\u5916\u90e8\u6b78\u56e0)\uff0c\u800c\u6eab\u548c\u8655\u7f70\u7684\u5c0f\u670b\u53cb\u5247\u662f\u900f\u904e\u6539\u8b8a\u5c0d\u73a9\u5177\u7684\u614b\u5ea6(\u8a8d\u70ba\u73a9\u5177\u7121\u804a\uff0c\u4e0d\u5b8c\u4e5f\u7f77)\u4f86\u907f\u514d\u8655\u7f70\u3002 \u9019\u500b\u4e3b\u984c\u4ee3\u8868\u7684\u662f\uff0c\u61f2\u7f70\u5f37\u8207\u5167\u5916\u90e8\u7406\u7531\u95dc\u4fc2\u5ea6\u5c0d\u5fc3\u614b\u7684\u5f71\u97ff\u3002","title":"\u81ea\u6211\u8aaa\u670d\u7684\u6301\u7e8c\u6548\u61c9 (The Lasting Effects of Self-Persuasion )"},{"location":"univ_notes/general/social_psy/#_22","text":"\u8b93\u4ed6\u4eba\u5bdf\u89ba\u5230\u81ea\u5df1\u7684\u60f3\u6cd5\u884c\u70ba\u4e0d\u4e00\u81f4(\u884c\u70ba\u3001\u614b\u5ea6\u7b49\u7b49)\uff0c\u4fc3\u4f7f\u6c92\u6709\u5916\u90e8\u7406\u7531\u7684\u8a8d\u77e5\u5931\u8abf(\u6211\u77e5\u9053\u6211\u4f5c\u5f0a\u4e86\uff0c\u56e0\u6b64\u6211\u6703\u505a\u51fa\u53cd\u7701(?)\u4e4b\u985e\u7684\u6289\u64c7\uff0c\u4ee5\u4e0d\u81f3\u65bc\u4f5c\u5f0a\u5f8c\u5f8c\u6094) \u767e\u5ea6\u6587\u5eab","title":"\u865b\u507d\u8a98\u5c0e"},{"location":"univ_notes/general/social_psy/#ben-franklin-effect","text":"\u7576\u6211\u5011\u8acb\u4e0d\u8a8d\u8b58\u7684\u4eba\u5e6b\u6211\u5011\u505a\u4e8b\uff0c\u6703\u8b93\u4ed6\u5c0d\u6211\u7684\u5370\u8c61\u8b8a\u597d \u56e0\u70ba\u4eba\u4e0d\u8a72\u5e6b\u4e0d\u719f\u7684\u4eba\u505a\u4e8b- \u8a8d\u77e5\u5931\u8abf \u6291\u6216\u662f\u7b2c\u4e8c\u7a2e\u8aaa\u6cd5: \u6b64\u4e43\u4e00\u7a2e\u300c\u5fc3\u7406\u6df7\u6dc6\u300d\u7684\u73fe\u8c61\uff0c\u7576\u6211\u5011\u5e6b\u52a9\u4e86\u4e00\u4f4d\u6211\u5011\u4e0d\u559c\u6b61\u7684\u4eba\uff0c\u6211\u5011\u5fc3\u88e1\u7522\u751f\u4e86\u77db\u76fe\uff1b\u6211\u5011\u6703\u6975\u529b\u8aaa\u670d\u81ea\u5df1\uff0c\u8a8d\u70ba\u6b64\u4eba\u300c\u5176\u5be6\u4e0d\u932f\u300d\uff0c\u6162\u6162\u7684\u5fd8\u4e86\u81ea\u5df1\u4e0d\u559c\u6b61\u4ed6\u9019\u4ef6\u4e8b\u3002\u5c24\u5176\u662f\u5c0d\u65b9\u5f88\u539a\u81c9\u76ae\uff0c\u660e\u660e\u4e00\u76f4\u6b3a\u8ca0\u4f60\uff0c\u537b\u4e00\u526f\u597d\u50cf\u5f88\u300c\u6b23\u8cde\u300d\u4f60\u3001\u300c\u9700\u8981\u300d\u4f60\uff0c\u4f60\u5c31\u6703\u4e00\u76f4\u4e0d\u65b7\u7684\u505a\u4f60\u7684\u300c\u6feb\u597d\u4eba\u300d\u3002","title":"Ben Franklin Effect"},{"location":"univ_notes/general/social_psy/#justifying-cruelty","text":"\u6301\u7e8c\u505a\u6b98\u5fcd\u7684\u4e8b\uff0c\u662f\u56e0\u70ba\u5148\u8a8d\u77e5\u5931\u8abf\u5f8c\u8b93\u81ea\u5df1\u63a5\u53d7\u4e86\u3002 \u4f8b\u5982\u8aaa: \u4ed6\u5c31\u662f\u8a0e\u53ad\u90a3\u500b\u53d7\u5bb3\u8005\uff0c\u4ed6\u7f6a\u6709\u61c9\u5f97\u3002","title":"Justifying Cruelty"},{"location":"univ_notes/general/social_psy/#overcoming-dissonance","text":"\u8a8d\u932f\u8207\u8ca0\u8cac\uff0c\u8aaa\u7684\u6bd4\u505a\u5f97\u5bb9\u6613(\u4e8b\u5be6\u554aXD) \u81ea\u6211\u8faf\u8b77\u7684\u904e\u7a0b\u53ef\u80fd\u662f\u7121\u610f\u8b58\u7684\uff0c\u4f46\u662f\u4e00\u65e6\u6211\u5011\u77e5\u9053\u53ef\u4ee5\u81ea\u6211\u8faf\u8b77\u81ea\u5df1\u7684\u884c\u70ba\uff0c\u6211\u5011\u61c9\u53ef\u4ee5\u76e3\u6e2c\u9019\u500b\u8b8a\u5316","title":"\u514b\u670d\u5931\u8abf(Overcoming Dissonance)"},{"location":"univ_notes/general/social_psy/#ch7-p52","text":"","title":"Ch7 \u614b\u5ea6 (~P.52?)"},{"location":"univ_notes/general/social_psy/#71","text":"\u614b\u5ea6\uff1a \u5c0d\u4eba\u3001\u7269\u3001\u60f3\u6cd5\u7684\u8a55\u50f9 Evaluations of people, objects, and ideas. \u614b\u5ea6\u7531\u4e09\u7a2e component \u7d44\u6210 affective \u60c5\u611f\u7684 behavioral \u884c\u70ba\u7684 cognitive \u8a8d\u77e5\u7684 \u5916\u986f\u3001\u5167\u96b1 (\u5dee\u5728\u81ea\u5df1\u80fd\u4e0d\u80fd\u610f\u8b58\u5230) cf. \u5916\u986f\u614b\u5ea6 \u5167\u96b1\u614b\u5ea6 \u7279\u6027 \u81ea\u5df1\u6709\u610f\u8b58 \u3001\u80fd\u7c21\u55ae\u8aaa\u660e \u975e\u81ea\u9858\u3001\u7121\u6cd5\u63a7\u5236\u3001 \u6709\u6642\u6c92\u610f\u8b58\u5230 \u8ab2\u672c\u4f8b Robert \u8eab\u70ba\u767d\u4eba\u3001\u76f8\u4fe1\u4eba\u7a2e\u7686\u5e73\u7b49\u3001\u618e\u6068\u7a2e\u65cf\u6b67\u8996 \u4ee5\u4e0a\u662f\u5c0d\u300c\u7a2e\u65cf\u8b70\u984c\u300d\u6709\u610f\u8b58\u7684\u50f9\u503c\u89c0\uff0c\u6703\u5f71\u97ff Robert \u7684\u884c\u70ba Robert \u9577\u5927\u7684\u5730\u65b9\u5c0d\u5c11\u6578\u65cf\u7fa4\u6709\u5f88\u591a\u8ca0\u9762\u523b\u677f\u5370\u8c61\u3002 \u9019\u7a2e\u8ca0\u9762\u60f3\u6cd5\u6703\u5f71\u97ff\u4ed6\u672c\u4eba\uff0c\u4f46\u672c\u4eba\u672a\u5fc5\u6703\u5bdf\u89ba\u3002\u5982\u679c\u4ed6\u9047\u5230\u5c11\u6578\u65cf\u7fa4\uff0c\u5982\u5357\u7f8e\u4eba\uff0c \u81ea\u52d5\u89f8\u767c\u7684\u8ca0\u9762\u5370\u8c61\u3001\u611f\u53d7\uff0c\u5c31\u662f\u5167\u96b1\u614b\u5ea6 \u3002 \u4f8b \u6211\u8a0e\u53ad\u7db2\u901a\u539f \u4f60\u4e0d\u5b64\u7368 \u6709\u4e9b\u4eba\u5c0d\u300c\u80a5\u5b85\u300d\u6709\u8ca0\u9762\u523b\u677f\u5370\u8c61\u3002 \u6709\u9019\u7a2e\u5370\u8c61\u7684\u4eba\u9047\u5230\u4ed6\u5fc3\u4e2d\u300c\u80a5\u5b85\u300d\u5f62\u8c61\u7684\u4eba\u7684\u6642\u5019\uff0c\u6240\u89f8\u767c\u7684\u5370\u8c61\u3001\u611f\u53d7\u5c31\u662f\u5167\u96b1\u614b\u5ea6\u3002 7.2 \u597d\u50cf\u8df3\u5f97\u5f88\u5feb? e3 \u4e0a\u4e5f\u6c92\u7279\u5225\u6a19\u8a3b 7.2 \u5c31\u5148\u8df3\u904e\u4e86","title":"7.1 \u614b\u5ea6\u7684\u672c\u8cea\u548c\u8d77\u6e90"},{"location":"univ_notes/general/social_psy/#73","text":"\u614b\u5ea6\u7684\u6539\u8b8a\u5f88\u5e38\u662f\u56e0\u70ba\u793e\u6703(\u6216\u662f\u5468\u906d)\u5f71\u97ff \u6539\u8b8a\u884c\u70ba\u4f86\u6539\u8b8a\u614b\u5ea6\u6703\u9020\u6210\u5931\u8abf","title":"7.3 \u614b\u5ea6\u6539\u8b8a"},{"location":"univ_notes/general/social_psy/#_23","text":"Yale Attitude change approach \u8aaa\u670d\u7684\u6709\u6548\u7a0b\u5ea6\u53d6\u6c7a\u65bc who says what to whom who: attractive\u3001credible what:\u81ea\u5df1\u8f03\u4e0d\u6703\u53d7\u5f71\u97ff\u7684\u4e8b whom:\u5206\u5fc3\u7684\u4eba\u3001\u667a\u529b\u4e2d\u7b49\u3001\u5e74\u8f15\u4eba","title":"\u8aaa\u670d\u4eba\u8b93\u4eba\u614b\u5ea6\u6539\u8b8a"},{"location":"univ_notes/general/social_psy/#elaboration-likelihood-model","text":"","title":"Elaboration Likelihood Model \u63a8\u6572\u53ef\u80fd\u6027\u6a21\u578b"},{"location":"univ_notes/general/social_psy/#routes-to-persuasion","text":"\u4e2d\u5fc3\u8def\u5f91\u3001\u5468\u908a\u8def\u5f91 [\u4e2d\u5fc3\u8def\u5f91]: central route [\u5468\u908a\u8def\u5f91]: peripheral route cf. \u4e2d\u5fc3\u8aaa\u670d\u8def\u5f91 \u5468\u908a\u8aaa\u670d\u8def\u5f91 \u5982\u4f55\u8aaa\u670d \u8b93\u807d\u773e\u7406\u89e3\u4f86\u540c\u610f \u807d\u773e\u9700\u9858\u610f\u807d\u3001\u807d\u5f97\u61c2 \u9760\u500b\u4eba\u9b45\u529b\u3001\u6c23\u6c1b \u5c0d\u8c61 \u8a8d\u77e5\u9700\u6c42\u9ad8\u7684\u4eba \u8f03\u5bb9\u6613\u8d70\u4e2d\u5fc3\u8def\u5f91\u88ab\u8aaa\u670d \u8a8d\u77e5\u9700\u6c42\u4f4e\u7684\u4eba \u4e0d\u5b9c\u89e3\u91cb\u592a\u591a\uff0c\u61c9\u8d70\u5468\u908a\u8def\u5f91 \u5c0d\u8c61 \u8207 \u8aaa\u670d\u4e3b\u984c \u7684\u95dc\u806f \u4e3b\u984c\u8ddf\u8aaa\u670d\u5c0d\u8c61\u8d8a\u76f8\u95dc\uff0c \u8d8a\u5bb9\u6613\u5438\u5f15\u5176\u6ce8\u610f\uff0c \u5bb9\u6613\u8d70\u4e2d\u5fc3\u8def\u5f91 \u8f03\u6c92\u6709\u95e1\u8ff0\u4e3b\u984c\uff0c \u8207\u8aaa\u670d\u5c0d\u8c61\u7684\u95dc\u806f\u6027\uff0c \u800c\u662f\u88ab\u5468\u570d\u56e0\u7d20\u5f71\u97ff \u614b\u5ea6\u6539\u8b8a \u5bb9\u6613\u7dad\u6301\u9577\u6642\u9593 \u5bb9\u6613\u662f\u66ab\u6642\u7684 \u8209\u4f8b\u4f86\u8aaa \u6211\u662f\u771f\u7684 \u88ab\u90a3\u500b\u7522\u54c1\u7684\u529f\u80fd\u6240\u5438\u5f15 \u624d\u8cb7\u90a3\u500b\u7522\u54c1 (\u4ee3\u8868\u6211\u662f\u771f\u7684\u559c\u6b61\uff0c\u60f3\u8981\u90a3\u500b\u7522\u54c1\uff0c\u614b\u5ea6\u80fd\u7dad\u6301\u9577\u6642\u9593) \u6211\u662f\u56e0\u70ba \u67d0\u67d0\u5ee3\u544a\u5f88\u6709\u8aaa\u670d\u529b \u6211\u624d\u8cb7\u90a3\u500b\u7522\u54c1\uff0c \u800c\u4e26\u975e\u90a3\u500b\u7522\u54c1\u672c\u8eab\u662f\u6211\u60f3\u8981\u7684 (\u4ee3\u8868\u6211\u53ea\u662f\u56e0\u70ba\u88ab\u8aaa\u670d\u624d\u8cb7\uff0c\u7136\u4e00\u6bb5\u6642\u9593\u5f8c\u53ef\u80fd\u6703\u767c\u73fe\u6211\u6839\u672c\u4e0d\u9700\u8981\u4ed6\uff0c\u614b\u5ea6\u8f49\u8b8a\u5f97\u5f88\u5feb)\u3002 \u5c0d\u8c61 \u8207 \u8aaa\u670d\u4e3b\u984c \u7684\u95dc\u806f people vs. topic \u9ad8\u76f8\u95dc \u4f4e\u76f8\u95dc which matters \u8ad6\u8ff0\u5f37\u5ea6 \u8b1b\u8005\u5c08\u696d\u5ea6 \u8ad6\u8ff0\u5f37\u5ea6 \u8b1b\u8005\u5c08\u696d\u5ea6 which route \u4e2d\u5fc3\u8def\u5f91 \u5468\u908a\u8def\u5f91 Need for Cognition \u8a8d\u77e5\u9700\u6c42 \u4eba\u5011\u5c0d\u65bc\u300c\u8a8d\u77e5\u6d3b\u52d5\u300d\u559c\u6b61\u3001\u53c3\u8207\u7684\u7a0b\u5ea6 \u8a8d\u77e5\u6d3b\u52d5\u5c31\u662f\u300c\u7372\u5f97\u65b0\u77e5\u3001\u5b78\u7fd2\u65b0\u6280\u80fd\u300d\u7b49\u7b49 \u7528 \u5bb3\u6015 \u4f86\u8aaa\u670d\u4eba\uff0c\u5982\u679c\u8aaa\u7684\u592a\u56b4\u91cd\u6703\u4f7f\u5c0d\u8c61\u9003\u907f\uff0c\u4e14\u4e00\u5b9a\u8981\u63d0\u4f9b\u89e3\u6cd5\u3002 \u60c5\u7dd2\u4f5c\u70ba\u6377\u601d\u662f\u4e0d\u53ef\u9760\u7684\uff0c\u53ef\u80fd\u6703\u5c0e\u81f4\u932f\u8aa4\u6b78\u56e0\u3002 - \u70ba\u4f55\u8a0e\u8ad6\u4e8b\u60c5\u8981\u5728\u958b\u5fc3\u7684\u5403\u98ef\u6642\u9593","title":"routes to persuasion \u8aaa\u670d\u8def\u5f91"},{"location":"univ_notes/jlpt/n3/n3/","text":"JLPT N3 \u4e94\u5929\u5408\u683c\u5fc3\u5f97 | How to pass JLPT N3 in 5 days (\u96d9\u8a9e\u7db2\u8a8c / Written in both zh_tw and en) \u524d\u7f6e\u689d\u4ef6 | Prequisites \u81f3\u5c11\u6709\u4fee\u5b8c\u4ea4\u901a\u5927\u5b78\u65e5\u6587\u4e94\u3001\u6216\u540c\u7b49\u7a0b\u5ea6(\u7d04N4\u9ad8\u4e00\u9ede) At least finished level-5 Japanese course in NCTU, or equivalent proficeiency in Japanese (slightly better than N4). \u5728\u8003\u524d\u4e00\u5468\u6709\u4e94\u5929\u7684\u6642\u9593\uff0c\u6bcf\u5929\u80fd\u8b80\u65e5\u6587\u7d04\u4e94\u5c0f\u6642 At least 5 hrs spare time per day to for preparation, 5 days before the JLPT N3 test. \u9069\u7528\u5c0d\u8c61 | For whom is this method targeted? \u5fd9\u788c\u8ab2\u696d\u7684(\u5927)\u5b78\u751f Student busying with their schoolworks and projects. \u60f3\u8981\u77ed\u6642\u9593\u8003\u904eN3\u7684\u4eba Pass N3 ASAP. \u8072\u660e\uff0c\u91cd\u8981 | DISCLAIMER, IMPORTANT! \u9019\u7a2e\u6e96\u5099\u65b9\u5f0f\u6bd4\u8f03\u81e8\u6642\u62b1\u4f5b\u8173\uff0c\u504f\u5411\u6c42\u904e\uff0c\u60f3\u8981\u8e0f\u8e0f\u5be6\u5be6\u8003\u9ad8\u5206\u7684\u4eba\u8acb\u52ff\u4f7f\u7528\u6b64\u65b9\u6cd5 This method is cramming for JLPT N3 , only with an eye to passing it, if you want to really learn something and perfectly comprehend the intermediate-level Japanese grammar, vocabulary...etc, DO NOT USE THIS METHOD!!! \u6211\u6c92\u6709\u80cc\u4efb\u4f55\u7684\u5b57\u5f59\u66f8\uff0c\u76f4\u63a5\u5c31\u4e0a\u5834\uff0c\u56e0\u6b64\u5728\u5b57\u5f59\u7684\u5206\u6578\u5927\u5931\u8840(\u5305\u542b\u807d\u529b\u548c\u95b1\u8b80\u5927\u5931\u8840\uff0c\u9019\u662f\u76f8\u7576\u4e0d\u597d\u7684\u4e8b\u60c5\uff0c\u52d9\u5fc5\u6709\u6211\u7684\u524d\u8eca\u4e4b\u9451\uff0c\u60f3\u8003\u9ad8\u5206\u4e0d\u80fd\u50cf\u6211\u4e00\u6a23\u5b8c\u5168\u4e0d\u80cc\u8aa6\u55ae\u5b57!)\uff0c\u55ae\u5b57\u662f\u5305\u542b\u65e5\u6587\u4ee5\u53ca\u6240\u6709\u8a9e\u8a00\u7684\u57fa\u790e I took the JLPT N3 test directly WITHOUT ANY OF THE VOCABULARY BOOKS. Consequently, lots of the vocabulary-related problem failed poorly, including not only the listening part but also reading part, which is really a painful experience. PLEASE MEMORIZE, RECITE VOCABULARIES IF YOU WANT TO PASS WITH FLYING COLORS, THEY ARE THE FUNDAMENTAL OF EVERY ASPECT IN JAPANESE AND ALL THE LANGUAGES \u4f7f\u7528\u66f8\u672c Books I used \u6e96\u5099\u6642\u7a0b(\u4ee5\u9031\u65e5\u65e5\u6587\u8003\u8a66\u70ba\u4f8b) | Timetable of 5-day preparation (Exam on Sunday) \u5728\u6b64\u7684\u7bc7\u6578\u6307\u4e0a\u5716\u53c3\u8003\u66f8\u7684\u7bc7\u6578 The chapter is according to books that shown above. Day 1 Tuesday \u6587\u6cd5 \u7b2c\u4e00\u7bc7 | Grammar ch1 Day 2 Wednesday \u807d\u529b | Listening ch1 Day 3 Thursday \u6587\u6cd5 \u7b2c\u4e8c\u7bc7 | Grammar ch2 Day 4 Friday \u807d\u529b | Listening ch2 * Day 5 Saturday \u6a21\u64ec\u8003+\u932f\u984c\u8907\u7fd2 \u6e96\u5099\u65b9\u6cd5 | Prepare for grammar \u5fb9\u5fb9\u5e95\u5e95\u7684\u505a\u984c\u76ee\uff0c\u91cd\u9ede\u4e0d\u5728\u5beb\u4e86\u591a\u5c11\uff0c\u800c\u662f\u6bcf\u4e00\u500b\u5beb\u904e\u7684\u90fd\u8981\u5f04\u61c2\uff0c\u9019\u6a23\u5beb\u904e\u7684\u6771\u897f\u53ef\u4ee5\u78ba\u4fdd\u662f\u624e\u5be6\u7684\u7406\u89e3\uff0c\u4e0d\u8ad6\u807d\u529b\u6216\u662f\u6587\u6cd5\u7686\u7136 Go very thoroughly of all the problem, it is not the quantity, but the quality of chapters/problems studied that matters. This ensures and guarantees that what we studied will almost being comprehended. Both of the listening and grammar should be studied very carefully. \u6587\u6cd5\u90e8\u5206\u63a8\u85a6\u4ee5\u4e0b\u7db2\u7ad9 | Suggested sites for grammar \u97f3\u901f\u65e5\u8a9e\u5b78\u7fd2(\u6703\u6309\u7167\u6587\u6cd5\u4e3b\u984c\u5206\u985e) \u6642\u96e8\u4e4b\u753a(\u6703\u6309\u7167\u6587\u6cd5\u96e3\u6613\u5ea6\u5206\u985e) OJAD\u8fad\u66f8(\u67e5\u55ae\u5b57\u4ee5\u53ca\u52d5\u8a5e\u8b8a\u5316\u578b\u842c\u7528) \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8a18\u656c\u8a9e\u3001\u8b19\u8b93\u8a9e\u7b49\u7b49\u6b7b\u8a18\u7684\u7528\u6cd5\uff0c\u9019\u6bcf\u4e00\u6b21\u90fd\u6703\u8003 Honorific speech in Japanese, memorize as much as you can!! They show up every time in JLPT exam. \u4e0d\u8981\u5bb3\u6015\u5728\u7df4\u7fd2\u672c\u4e0a\u932f\u4e00\u5806\u984c\u76ee\uff0c\u56e0\u70ba\u7df4\u7fd2\u672c\u6703\u628a\u76f8\u8fd1\u7684\u6587\u6cd5\u653e\u5728\u4e00\u8d77\uff0c\u672c\u4f86\u5c31\u5bb9\u6613\u6df7\u6dc6\uff0c\u8981\u6709\u4fe1\u5fc3 Do not lose your confidence if you see lots of errors while practicing on the books shown above, that is because the press usually groups the similar topics together, making it hard to discern one grammar from the other. \u8003\u524d\u4e00\u5929\u505a\u6a21\u64ec\u8003\u719f\u6089\u6642\u7a0b\uff0c\u4f46\u4e0d\u8981\u5c0d\u5206\u6578\u6709\u592a\u5927\u7684\u671f\u671b\uff0c\u56e0\u70ba\u6b63\u5f0f\u8003\u8a66\u6703\u504f\u96e3\u4e0d\u5c11(\u5c24\u5176\u662f\u807d\u529b\u6e2c\u9a57) Do the simulation test one day before the test to familiarize yourself with the time course, but don't expect too much from the score, because the real exam will be more difficult(ESPECIALLY LISTENING TEST). \u77ed\u6642\u9593\u5728\u5b78\u6821\u8ab2\u696d\u58d3\u529b\u4e0b\u807d\u529b\u5f9e\u7121\u5e95\u5b50\u523036\u5206 | Prepare for the listening test (from none to 36 / 60) in the extremely busy week with schoolwork. \u807d\u529b\u524d\u9762\u5169\u500b\u7ae0\u7bc0\u4e00\u5b9a\u8981\u5beb\uff0c\u5fb9\u5e95\u5f04\u61c2\uff0c\u90a3\u662f\u4e00\u5207\u554f\u984c\u7684\u958b\u7aef(\u5982\u4e0b\u5716) It is mandatory to write the first 2 chapters of the listening practice book on account for the fundamental of the listening test in JLPT.(Shown below) \u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u5c07\u65e5\u6587\u7df4\u7fd2CD\u8b8a\u6210\u65e5\u5e38\u7684\u80cc\u666f\u97f3\uff0c\u7576\u6210\u97f3\u6a02\u5427 In a nutshell, turn the Japanese-listening practice CD into your BGM, making this your music in the playlist. \u96a8\u6642\u96a8\u5730\u807d\u8457\uff0c\u4e26\u4e14\u5728\u4e0d\u5f71\u97ff\u5b89\u5168\u7684\u60c5\u6cc1\u4e0b\u66f2\u5256\u6790\u6bcf\u4e00\u500b\u53e5\u5b50(\u4f8b\u5982\u4e0d\u8981\u5728\u99ac\u8def\u4e0a\u505a\u9019\u7a2e\u4e8b\uff0c\u4f46\u53ef\u4ee5\u5728\u6d17\u6fa1\u6216\u5403\u98ef\u7684\u6642\u5019\u807d) Listen all the time, and parsing each sentence without getting into dangerous situations such as walking on the road filled with cars and trucks. Suggested conditions will be parsing the sentences will taking the bath to save much of your time or while dining. \u5982\u679c\u4f60\u662f\u6703\u5beb\u7a0b\u5f0f\u78bc\u7684\u5b78\u751f\uff0c\u76f8\u7576\u63a8\u85a6\u5728\u4e00\u908a\u5beb\u7a0b\u5f0f\u78bc\u6642\u4e00\u908a\u807d\u65e5\u6587\uff0c\u6548\u7387\u5176\u5be6\u4e0d\u932f\uff0c\u800c\u4e14\u9084\u80fd\u5229\u7528CD\u9694\u7d55\u5916\u754c\u7684\u566a\u97f3 If you are a student who codes, it is strongly recommend coding and listening to N3 CD at the same time. Not only is such method boosts your programming efficiency but also the sounds will denoise the outer noise. \u8003\u8a66\u7576\u5929 | On the test day \u65e9\u9ede\u51fa\u9580\uff0c\u65e9\u9ede\u5230\u8003\u5834\uff0c\u4fdd\u6301\u8f15\u9b06\u4f46\u8b39\u614e\u7684\u5fc3\u60c5\u61c9\u8003\uff0c\u4e0d\u8981\u5f97\u5931\u5fc3\u592a\u91cd Go out early, go to the examination room early, keep a relaxed but cautious mood, do not worry too much. \u505a\u5c31\u5c0d\u4e86\uff0c\u76f8\u4fe1\u81ea\u5df1 Just do it! \u795d\u798f\u5927\u5bb6\u65e5\u6587\u6aa2\u5b9a\u9806\u5229\u9054\u9663 | Wish everyone a successful JLPT fight!","title":"Pass N3 in 5 days"},{"location":"univ_notes/jlpt/n3/n3/#jlpt-n3-how-to-pass-jlpt-n3-in-5-days-written-in-both-zh_tw-and-en","text":"","title":"JLPT N3 \u4e94\u5929\u5408\u683c\u5fc3\u5f97 | How to pass JLPT N3 in 5 days (\u96d9\u8a9e\u7db2\u8a8c / Written in both zh_tw and en)"},{"location":"univ_notes/jlpt/n3/n3/#prequisites","text":"\u81f3\u5c11\u6709\u4fee\u5b8c\u4ea4\u901a\u5927\u5b78\u65e5\u6587\u4e94\u3001\u6216\u540c\u7b49\u7a0b\u5ea6(\u7d04N4\u9ad8\u4e00\u9ede) At least finished level-5 Japanese course in NCTU, or equivalent proficeiency in Japanese (slightly better than N4). \u5728\u8003\u524d\u4e00\u5468\u6709\u4e94\u5929\u7684\u6642\u9593\uff0c\u6bcf\u5929\u80fd\u8b80\u65e5\u6587\u7d04\u4e94\u5c0f\u6642 At least 5 hrs spare time per day to for preparation, 5 days before the JLPT N3 test.","title":"\u524d\u7f6e\u689d\u4ef6 | Prequisites"},{"location":"univ_notes/jlpt/n3/n3/#for-whom-is-this-method-targeted","text":"\u5fd9\u788c\u8ab2\u696d\u7684(\u5927)\u5b78\u751f Student busying with their schoolworks and projects. \u60f3\u8981\u77ed\u6642\u9593\u8003\u904eN3\u7684\u4eba Pass N3 ASAP.","title":"\u9069\u7528\u5c0d\u8c61 | For whom is this method targeted?"},{"location":"univ_notes/jlpt/n3/n3/#disclaimer-important","text":"\u9019\u7a2e\u6e96\u5099\u65b9\u5f0f\u6bd4\u8f03\u81e8\u6642\u62b1\u4f5b\u8173\uff0c\u504f\u5411\u6c42\u904e\uff0c\u60f3\u8981\u8e0f\u8e0f\u5be6\u5be6\u8003\u9ad8\u5206\u7684\u4eba\u8acb\u52ff\u4f7f\u7528\u6b64\u65b9\u6cd5 This method is cramming for JLPT N3 , only with an eye to passing it, if you want to really learn something and perfectly comprehend the intermediate-level Japanese grammar, vocabulary...etc, DO NOT USE THIS METHOD!!! \u6211\u6c92\u6709\u80cc\u4efb\u4f55\u7684\u5b57\u5f59\u66f8\uff0c\u76f4\u63a5\u5c31\u4e0a\u5834\uff0c\u56e0\u6b64\u5728\u5b57\u5f59\u7684\u5206\u6578\u5927\u5931\u8840(\u5305\u542b\u807d\u529b\u548c\u95b1\u8b80\u5927\u5931\u8840\uff0c\u9019\u662f\u76f8\u7576\u4e0d\u597d\u7684\u4e8b\u60c5\uff0c\u52d9\u5fc5\u6709\u6211\u7684\u524d\u8eca\u4e4b\u9451\uff0c\u60f3\u8003\u9ad8\u5206\u4e0d\u80fd\u50cf\u6211\u4e00\u6a23\u5b8c\u5168\u4e0d\u80cc\u8aa6\u55ae\u5b57!)\uff0c\u55ae\u5b57\u662f\u5305\u542b\u65e5\u6587\u4ee5\u53ca\u6240\u6709\u8a9e\u8a00\u7684\u57fa\u790e I took the JLPT N3 test directly WITHOUT ANY OF THE VOCABULARY BOOKS. Consequently, lots of the vocabulary-related problem failed poorly, including not only the listening part but also reading part, which is really a painful experience. PLEASE MEMORIZE, RECITE VOCABULARIES IF YOU WANT TO PASS WITH FLYING COLORS, THEY ARE THE FUNDAMENTAL OF EVERY ASPECT IN JAPANESE AND ALL THE LANGUAGES","title":"\u8072\u660e\uff0c\u91cd\u8981 | DISCLAIMER, IMPORTANT!"},{"location":"univ_notes/jlpt/n3/n3/#books-i-used","text":"","title":"\u4f7f\u7528\u66f8\u672c Books I used"},{"location":"univ_notes/jlpt/n3/n3/#timetable-of-5-day-preparation-exam-on-sunday","text":"\u5728\u6b64\u7684\u7bc7\u6578\u6307\u4e0a\u5716\u53c3\u8003\u66f8\u7684\u7bc7\u6578 The chapter is according to books that shown above. Day 1 Tuesday \u6587\u6cd5 \u7b2c\u4e00\u7bc7 | Grammar ch1 Day 2 Wednesday \u807d\u529b | Listening ch1 Day 3 Thursday \u6587\u6cd5 \u7b2c\u4e8c\u7bc7 | Grammar ch2 Day 4 Friday \u807d\u529b | Listening ch2 * Day 5 Saturday \u6a21\u64ec\u8003+\u932f\u984c\u8907\u7fd2","title":"\u6e96\u5099\u6642\u7a0b(\u4ee5\u9031\u65e5\u65e5\u6587\u8003\u8a66\u70ba\u4f8b) | Timetable of 5-day preparation (Exam on Sunday)"},{"location":"univ_notes/jlpt/n3/n3/#prepare-for-grammar","text":"\u5fb9\u5fb9\u5e95\u5e95\u7684\u505a\u984c\u76ee\uff0c\u91cd\u9ede\u4e0d\u5728\u5beb\u4e86\u591a\u5c11\uff0c\u800c\u662f\u6bcf\u4e00\u500b\u5beb\u904e\u7684\u90fd\u8981\u5f04\u61c2\uff0c\u9019\u6a23\u5beb\u904e\u7684\u6771\u897f\u53ef\u4ee5\u78ba\u4fdd\u662f\u624e\u5be6\u7684\u7406\u89e3\uff0c\u4e0d\u8ad6\u807d\u529b\u6216\u662f\u6587\u6cd5\u7686\u7136 Go very thoroughly of all the problem, it is not the quantity, but the quality of chapters/problems studied that matters. This ensures and guarantees that what we studied will almost being comprehended. Both of the listening and grammar should be studied very carefully. \u6587\u6cd5\u90e8\u5206\u63a8\u85a6\u4ee5\u4e0b\u7db2\u7ad9 | Suggested sites for grammar \u97f3\u901f\u65e5\u8a9e\u5b78\u7fd2(\u6703\u6309\u7167\u6587\u6cd5\u4e3b\u984c\u5206\u985e) \u6642\u96e8\u4e4b\u753a(\u6703\u6309\u7167\u6587\u6cd5\u96e3\u6613\u5ea6\u5206\u985e) OJAD\u8fad\u66f8(\u67e5\u55ae\u5b57\u4ee5\u53ca\u52d5\u8a5e\u8b8a\u5316\u578b\u842c\u7528) \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8a18\u656c\u8a9e\u3001\u8b19\u8b93\u8a9e\u7b49\u7b49\u6b7b\u8a18\u7684\u7528\u6cd5\uff0c\u9019\u6bcf\u4e00\u6b21\u90fd\u6703\u8003 Honorific speech in Japanese, memorize as much as you can!! They show up every time in JLPT exam. \u4e0d\u8981\u5bb3\u6015\u5728\u7df4\u7fd2\u672c\u4e0a\u932f\u4e00\u5806\u984c\u76ee\uff0c\u56e0\u70ba\u7df4\u7fd2\u672c\u6703\u628a\u76f8\u8fd1\u7684\u6587\u6cd5\u653e\u5728\u4e00\u8d77\uff0c\u672c\u4f86\u5c31\u5bb9\u6613\u6df7\u6dc6\uff0c\u8981\u6709\u4fe1\u5fc3 Do not lose your confidence if you see lots of errors while practicing on the books shown above, that is because the press usually groups the similar topics together, making it hard to discern one grammar from the other. \u8003\u524d\u4e00\u5929\u505a\u6a21\u64ec\u8003\u719f\u6089\u6642\u7a0b\uff0c\u4f46\u4e0d\u8981\u5c0d\u5206\u6578\u6709\u592a\u5927\u7684\u671f\u671b\uff0c\u56e0\u70ba\u6b63\u5f0f\u8003\u8a66\u6703\u504f\u96e3\u4e0d\u5c11(\u5c24\u5176\u662f\u807d\u529b\u6e2c\u9a57) Do the simulation test one day before the test to familiarize yourself with the time course, but don't expect too much from the score, because the real exam will be more difficult(ESPECIALLY LISTENING TEST).","title":"\u6e96\u5099\u65b9\u6cd5 | Prepare for grammar"},{"location":"univ_notes/jlpt/n3/n3/#36-prepare-for-the-listening-test-from-none-to-36-60-in-the-extremely-busy-week-with-schoolwork","text":"\u807d\u529b\u524d\u9762\u5169\u500b\u7ae0\u7bc0\u4e00\u5b9a\u8981\u5beb\uff0c\u5fb9\u5e95\u5f04\u61c2\uff0c\u90a3\u662f\u4e00\u5207\u554f\u984c\u7684\u958b\u7aef(\u5982\u4e0b\u5716) It is mandatory to write the first 2 chapters of the listening practice book on account for the fundamental of the listening test in JLPT.(Shown below) \u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u5c07\u65e5\u6587\u7df4\u7fd2CD\u8b8a\u6210\u65e5\u5e38\u7684\u80cc\u666f\u97f3\uff0c\u7576\u6210\u97f3\u6a02\u5427 In a nutshell, turn the Japanese-listening practice CD into your BGM, making this your music in the playlist. \u96a8\u6642\u96a8\u5730\u807d\u8457\uff0c\u4e26\u4e14\u5728\u4e0d\u5f71\u97ff\u5b89\u5168\u7684\u60c5\u6cc1\u4e0b\u66f2\u5256\u6790\u6bcf\u4e00\u500b\u53e5\u5b50(\u4f8b\u5982\u4e0d\u8981\u5728\u99ac\u8def\u4e0a\u505a\u9019\u7a2e\u4e8b\uff0c\u4f46\u53ef\u4ee5\u5728\u6d17\u6fa1\u6216\u5403\u98ef\u7684\u6642\u5019\u807d) Listen all the time, and parsing each sentence without getting into dangerous situations such as walking on the road filled with cars and trucks. Suggested conditions will be parsing the sentences will taking the bath to save much of your time or while dining. \u5982\u679c\u4f60\u662f\u6703\u5beb\u7a0b\u5f0f\u78bc\u7684\u5b78\u751f\uff0c\u76f8\u7576\u63a8\u85a6\u5728\u4e00\u908a\u5beb\u7a0b\u5f0f\u78bc\u6642\u4e00\u908a\u807d\u65e5\u6587\uff0c\u6548\u7387\u5176\u5be6\u4e0d\u932f\uff0c\u800c\u4e14\u9084\u80fd\u5229\u7528CD\u9694\u7d55\u5916\u754c\u7684\u566a\u97f3 If you are a student who codes, it is strongly recommend coding and listening to N3 CD at the same time. Not only is such method boosts your programming efficiency but also the sounds will denoise the outer noise.","title":"\u77ed\u6642\u9593\u5728\u5b78\u6821\u8ab2\u696d\u58d3\u529b\u4e0b\u807d\u529b\u5f9e\u7121\u5e95\u5b50\u523036\u5206 | Prepare for the listening test (from none to 36 / 60) in the extremely busy week with schoolwork."},{"location":"univ_notes/jlpt/n3/n3/#on-the-test-day","text":"\u65e9\u9ede\u51fa\u9580\uff0c\u65e9\u9ede\u5230\u8003\u5834\uff0c\u4fdd\u6301\u8f15\u9b06\u4f46\u8b39\u614e\u7684\u5fc3\u60c5\u61c9\u8003\uff0c\u4e0d\u8981\u5f97\u5931\u5fc3\u592a\u91cd Go out early, go to the examination room early, keep a relaxed but cautious mood, do not worry too much. \u505a\u5c31\u5c0d\u4e86\uff0c\u76f8\u4fe1\u81ea\u5df1 Just do it!","title":"\u8003\u8a66\u7576\u5929 | On the test day"},{"location":"univ_notes/jlpt/n3/n3/#wish-everyone-a-successful-jlpt-fight","text":"","title":"\u795d\u798f\u5927\u5bb6\u65e5\u6587\u6aa2\u5b9a\u9806\u5229\u9054\u9663 | Wish everyone a successful JLPT fight!"},{"location":"univ_notes/mpslab/mpslab/","text":"Microprocessor Lab Fall 2017 Lecturer: S.L. Tsao @CS, NCTU Taiwan Microprocessor Lab Final Project Course Introduction This course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester. Goal of this course To briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own. Embedded board spec: 1.Nucleo STM32L476RG ARM Microarchitecture 2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided) 3.GPIO Available Detailed specs IDE for this course Eclipse AC6 System Workbench for STM32 where JRE7 is required in your system 1.Download from Here for Linux version Lab project and final project There are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are typically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language. About my final project Project name: The RGB Ambient light. Features: 1.Fully-customizable RGB proportion control. 2.Color cycle speed controller (faster- original) 3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings GitHub repo for this final project Project demo video Part0. Origin of this idea and preparation Origin of this idea I once have the fully-customizable dynamic RGB LED backlit keyboard SteelSeries APEXM 650 On account of having not much time in the end of semester(machine learning final project + compiler design final project.) My teammate and I decided to do it. Preparation of materials and tools for this project 1.A STM32L476RG Embedded board 2.Breadboard 3.4pin RGB LED*5 Click here 4.R1000 Resistor 5.Some Dupont cables Part1. Circuit connection 1.Parallel connection of 5 RGB LEDs on the breadboard. 2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output. 3.Connect the keypad to the STM32. 4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter). 5.The GPIO Connection is like. 6.Overall GPIO port configuration. GPIOB - ASCR |= 0 b1 ; //turn on the analog controller in PB0 void keypad_init () //keypad along with GPIO Init together { RCC - AHB2ENR |= 0 b00000000000000000000000000000111 ; //open port A,B,C //10987654321098765432109876543210 GPIOC - MODER = 0 b11111111111111111111111100000000 ; //pc 3 2 1 0 as input of keypad GPIOC - MODER |= 0 b00000000000000000000000001010101 ; GPIOC - PUPDR = 0 b11111111111111111111111100000000 ; GPIOC - PUPDR |= 0 b00000000000000000000000001010101 ; GPIOC - OSPEEDR = 0 b11111111111111111111111100000000 ; GPIOC - OSPEEDR |= 0 b00000000000000000000000001010101 ; GPIOC - ODR |= 0 b00000000000000000000000000001111 ; //10987654321098765432109876543210 GPIOB - MODER = 0 b11111111111111110000000011111111 ; //pb 7 6 5 4 as output of keypad GPIOB - PUPDR = 0 b11111111111111110000000011111111 ; GPIOB - PUPDR |= 0 b00000000000000001010101000000000 ; } void GPIO_init_AF () //GPIO Alternate Function Init { /***************pin and alternate function*************** * PB3 + AF1 which is corresponding to TIM2_CH2 RED * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE ********************************************************/ //10987654321098765432109876543210 GPIOA - MODER = 0 b11111111111111111100111111110011 ; GPIOA - MODER |= 0 b00000000000000000010000000001000 ; //PortA Pin //10987654321098765432109876543210 GPIOA - AFR [ 0 ] = 0 b00000010000100000000000000100000 ; //PB3 TIM2_CH2 GPIOB - AFR [ 0 ] = ~ GPIO_AFRL_AFSEL3 ; //AFR[0] LOW GPIOB - AFR [ 0 ] |= ( 0 b0001 GPIO_AFRL_AFSEL3_Pos ); //PB3 Alternate function mode } Part2. Key idea of this project The PWM(Pulse Width Modulation) Wiki PWM cycle (HV/ALL) = The proportion where light lights, the longer HV lasts, the brighter of the certain part of RGB(either one) will do. The Pulse Width can be used to simulate the analog output like this. PWM Video The same is true of other 3 colors, configuring with the following code and expanations. Basic logic for this project Initialize system - PWM and timer configuration - Presskey - Color changing scheme along with ADC light intensity detection for power saving. int keypad_value [ 4 ][ 4 ] = {{ 0 , 1 , 2 , 3 }, { 4 , 5 , 6 , 7 }, { 8 , 9 , 10 , 11 }, { 12 , 13 , 14 , 15 }}; keypad explanation 0 red+ 1 green+ 2 blue+ 3 cycle_speed+ 4 red- 5 green- 6 blue- 7 customize mode(0 1 2 4 5 6 applicable) 8 only red 9 only green 10 only blue 11 light ADC mode 12 red+greren 13 green+blue 14 red+blue 15 off system, remember the last state, s.t. user configuration is not lost after shut down Setup the PWM channel Refer to this pdf for PWM channel-GPIO port configuration, each port has its corresponding PWM channel and built-in system clock, be sure to make it right! More understanding and details are written in comments of the following source code. Please refer to p.1006-1039 of this pdf to see how to config the PWM cycle with certain registers in timer. void Timer_init () //Use 3 { // PA3 + AF1 which is corresponding to TIM2_CH1 // PA1 + AF2 which is corresponding to TIM5_CH2 // PA6 + AF2 which is corresponding to TIM3_CH1 RCC - APB1ENR1 |= RCC_APB1ENR1_TIM2EN ; RCC - APB1ENR1 |= RCC_APB1ENR1_TIM3EN ; RCC - APB1ENR1 |= RCC_APB1ENR1_TIM5EN ; //setting for timer 2 TIM2 - CR1 = 0x0000 ; //p1027 Turned on the counter as the count up mode TIM2 - ARR = ( uint32_t ) SECOND_SLICE ; //Reload value TIM2 - PSC = ( uint32_t ) COUNT_UP ; //Prescaler TIM2 - EGR = TIM_EGR_UG ; //update the counter again p1035 //setting for timer 3 TIM3 - CR1 = 0x0000 ; //p1027 Turned on the counter as the count up mode TIM3 - ARR = ( uint32_t ) SECOND_SLICE ; //Reload value TIM3 - PSC = ( uint32_t ) COUNT_UP ; //Prescaler TIM3 - EGR = TIM_EGR_UG ; //Reinitialize the counter //setting for timer 5 TIM5 - CR1 = 0x0000 ; //p1027 Turned on the counter as the count up mode TIM5 - ARR = ( uint32_t ) SECOND_SLICE ; //Reload value TIM5 - PSC = ( uint32_t ) COUNT_UP ; //Prescaler TIM5 - EGR = TIM_EGR_UG ; //Reinitialize the counter } void PWM_channel_init () { /***********************setting for the TIM2_CH2 RED**************************/ // PB3 + AF1 which is corresponding to TIM2_CH2 RED //Output compare 2 mode TIM2 - CCMR1 = ~ TIM_CCMR1_OC2M ; //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive TIM2 - CCMR1 |= ( 0 b0110 TIM_CCMR1_OC2M_Pos ); //Output Compare 2 Preload Enable TIM2 - CCMR1 = ~ TIM_CCMR1_OC2PE ; //OCxPE //1: enable TIMx_CCR1 Preload TIM2 - CCMR1 |= ( 0 b1 TIM_CCMR1_OC2PE_Pos ); //enable auto reload pre-load TIM2 - CR1 |= TIM_CR1_ARPE ; //duty cycle initial 50 (CCR2/ARR) //TIM2- CCR2 = duty_cycle_R; //enable output compare TIM2 - CCER |= TIM_CCER_CC2E ; /***********************setting for the TIM5_CH2 GREEN**************************/ // PA1 + AF2 which is corresponding to TIM5_CH2 GREEN //Output compare 2 mode TIM5 - CCMR1 = ~ TIM_CCMR1_OC2M ; //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive TIM5 - CCMR1 |= ( 0 b0110 TIM_CCMR1_OC2M_Pos ); //Output Compare 2 Preload Enable TIM5 - CCMR1 = ~ TIM_CCMR1_OC2PE ; //OCxPE //1: enable TIMx_CCR1 Preload TIM5 - CCMR1 |= ( 0 b1 TIM_CCMR1_OC2PE_Pos ); //enable auto reload pre-load TIM5 - CR1 |= TIM_CR1_ARPE ; //duty cycle initial 50 (CCR2/ARR) //TIM5- CCR2 = duty_cycle_G; //enable output compare TIM5 - CCER |= TIM_CCER_CC2E ; /***********************setting for the TIM3_CH1 BLUE**************************/ // PA6 + AF2 which is corresponding to TIM3_CH1 BLUE //Output compare 2 mode TIM3 - CCMR1 = ~ TIM_CCMR1_OC1M ; //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive TIM3 - CCMR1 |= ( 0 b0110 TIM_CCMR1_OC1M_Pos ); //Output Compare 2 Preload Enable TIM3 - CCMR1 = ~ TIM_CCMR1_OC1PE ; //OCxPE //1: enable TIMx_CCR1 Preload TIM3 - CCMR1 |= ( 0 b1 TIM_CCMR1_OC1PE_Pos ); //enable auto reload pre-load TIM3 - CR1 |= TIM_CR1_ARPE ; //duty cycle initial 50 (CCR2/ARR) //TIM3- CCR1 = duty_cycle_B; //enable output compare TIM3 - CCER |= TIM_CCER_CC1E ; } * Part3. It's time to change the color. Initialize to different duty cycle. Each color has its own PWM cycle, by setting the PWM cycle differently, we will be able to interleave 3 colors and mixing them together since there pulse waves have \"time shifting (or say phase shifting)\" to each other. #define RED_START 10 #define GREEN_START 91 #define BLUE_START 172 duty_cycle_R = RED_START ; duty_cycle_G = GREEN_START ; duty_cycle_B = BLUE_START ; int main () { //use the time delay mode to make the interleaving and the color changing scheme fpu_enable (); keypad_init (); GPIO_init_AF (); Timer_init (); configureADC (); startADC (); duty_cycle_R = RED_START ; duty_cycle_G = GREEN_START ; duty_cycle_B = BLUE_START ; cur_state = CYCLE_MODE ; while ( 1 ) { PWM_channel_init (); chromatic_scheme ( keypad_scan ()); } return 0 ; } Increase, decrease and cycle. state_color is the state indicating whether to increase the pulse cycle or decrease, with an view to simulating the sin-wave-like phase wave. void cycle_mode ( int delay_time ){ PWM_channel_init (); if ( state_R ){ if ( duty_cycle_R SECOND_SLICE ){ state_R = 0 ; } else { duty_cycle_R += 20 ; } } else { if ( duty_cycle_R 20 ){ state_R = 1 ; } else { duty_cycle_R -= 20 ; } } if ( state_G ){ if ( duty_cycle_G SECOND_SLICE ){ state_G = 0 ; } else { duty_cycle_G += 40 ; } } else { if ( duty_cycle_G 40 ){ state_G = 1 ; } else { duty_cycle_G -= 40 ; } } if ( state_B ){ if ( duty_cycle_B SECOND_SLICE ){ state_B = 0 ; } else { duty_cycle_B += 50 ; } } else { if ( duty_cycle_B 50 ){ state_B = 1 ; } else { duty_cycle_B -= 50 ; } } set_timer (); start_timer (); delay_ms ( delay_time ); } Customizable mode If it is in the customize mode, we are able to increase the proportion of color, to achieve that, just increase/decrease the duty cycle of that color. DELTA_VALUE is used to adjust the amount of duty cycle applied in PWM mode. case 4 : { if ( duty_cycle_R DELTA_VALUE ) duty_cycle_R -= DELTA_VALUE ; ( or add the DELTA_VALUE ) else duty_cycle_R = 0 ; break ; } Part4. More idea: the ADC of light-sensitive resistor The Earth is now facing the serve global warming, it is vital for us to construct a power saving model, consequently Alice and I came out the idea of using the ADC to detect the light intensity. Concept of ADC configuration credit to my classmate's hackMD (Add later) The stronger the intensity, the dimmer the light to be to saving the energy since this module is aimed for atmosphere night light. ADC Code is here case 11 : { // light ADC mode for keypad key11 cur_state = LIGHT_MODE ; break ; } if ( cur_state == LIGHT_MODE ) { get_light_resistor (); light = 255 - (( resistor_value - REF_LIGHT ) / 10 ); duty_cycle_R = light ; duty_cycle_G = light ; duty_cycle_B = light ; set_timer (); start_timer (); } Part5. Done all. Really thanks to my teammate chialice123 who helps me alot during the semester and in the final project making the project score over 90 and overall semester score to be 95 (93 original and +2 adjust), and vava24680 for teaching me some concepts of ADC configuration. Project demo video","title":"Junior 1st sem. STM32 Microprocessor Embedded Lab"},{"location":"univ_notes/mpslab/mpslab/#microprocessor-lab","text":"Fall 2017 Lecturer: S.L. Tsao @CS, NCTU Taiwan","title":"Microprocessor Lab"},{"location":"univ_notes/mpslab/mpslab/#microprocessor-lab-final-project","text":"Course Introduction This course mainly focus on the embedded system understanding, and we use the ARM microarchitecture in this semester. Goal of this course To briefly understand the ARM Assembly, how to write C code in the embedded developing board and make a small project from it by your own. Embedded board spec: 1.Nucleo STM32L476RG ARM Microarchitecture 2.Built-in 400MHz CPU (customizable frequency with internal clock settings provided) 3.GPIO Available Detailed specs IDE for this course Eclipse AC6 System Workbench for STM32 where JRE7 is required in your system 1.Download from Here for Linux version Lab project and final project There are 10 labs in this semester on a weekly basis, the first five focus on basic operation of ARM Assembly, namely the lab assignments are typically written in the ARM Assembly, while the last five labs are written in C language, but a embedded-like C language.","title":"Microprocessor Lab Final Project"},{"location":"univ_notes/mpslab/mpslab/#about-my-final-project","text":"Project name: The RGB Ambient light. Features: 1.Fully-customizable RGB proportion control. 2.Color cycle speed controller (faster- original) 3.Light-sensitive resistor ADC ,detecting the background light for light quantity settings GitHub repo for this final project Project demo video","title":"About my final project"},{"location":"univ_notes/mpslab/mpslab/#part0-origin-of-this-idea-and-preparation","text":"Origin of this idea I once have the fully-customizable dynamic RGB LED backlit keyboard SteelSeries APEXM 650 On account of having not much time in the end of semester(machine learning final project + compiler design final project.) My teammate and I decided to do it. Preparation of materials and tools for this project 1.A STM32L476RG Embedded board 2.Breadboard 3.4pin RGB LED*5 Click here 4.R1000 Resistor 5.Some Dupont cables","title":"Part0. Origin of this idea and preparation"},{"location":"univ_notes/mpslab/mpslab/#part1-circuit-connection","text":"1.Parallel connection of 5 RGB LEDs on the breadboard. 2.Connect separately to the GPIO pin on the STM32 providing the capability of PWM output. 3.Connect the keypad to the STM32. 4.Connect the light-sensitive resistor to GPIO with capability of ADC(Analog-Digital Converter). 5.The GPIO Connection is like. 6.Overall GPIO port configuration. GPIOB - ASCR |= 0 b1 ; //turn on the analog controller in PB0 void keypad_init () //keypad along with GPIO Init together { RCC - AHB2ENR |= 0 b00000000000000000000000000000111 ; //open port A,B,C //10987654321098765432109876543210 GPIOC - MODER = 0 b11111111111111111111111100000000 ; //pc 3 2 1 0 as input of keypad GPIOC - MODER |= 0 b00000000000000000000000001010101 ; GPIOC - PUPDR = 0 b11111111111111111111111100000000 ; GPIOC - PUPDR |= 0 b00000000000000000000000001010101 ; GPIOC - OSPEEDR = 0 b11111111111111111111111100000000 ; GPIOC - OSPEEDR |= 0 b00000000000000000000000001010101 ; GPIOC - ODR |= 0 b00000000000000000000000000001111 ; //10987654321098765432109876543210 GPIOB - MODER = 0 b11111111111111110000000011111111 ; //pb 7 6 5 4 as output of keypad GPIOB - PUPDR = 0 b11111111111111110000000011111111 ; GPIOB - PUPDR |= 0 b00000000000000001010101000000000 ; } void GPIO_init_AF () //GPIO Alternate Function Init { /***************pin and alternate function*************** * PB3 + AF1 which is corresponding to TIM2_CH2 RED * PA1 + AF2 which is corresponding to TIM5_CH2 GREEN * PA6 + AF2 which is corresponding to TIM3_CH1 BLUE ********************************************************/ //10987654321098765432109876543210 GPIOA - MODER = 0 b11111111111111111100111111110011 ; GPIOA - MODER |= 0 b00000000000000000010000000001000 ; //PortA Pin //10987654321098765432109876543210 GPIOA - AFR [ 0 ] = 0 b00000010000100000000000000100000 ; //PB3 TIM2_CH2 GPIOB - AFR [ 0 ] = ~ GPIO_AFRL_AFSEL3 ; //AFR[0] LOW GPIOB - AFR [ 0 ] |= ( 0 b0001 GPIO_AFRL_AFSEL3_Pos ); //PB3 Alternate function mode }","title":"Part1. Circuit connection"},{"location":"univ_notes/mpslab/mpslab/#part2-key-idea-of-this-project","text":"The PWM(Pulse Width Modulation) Wiki PWM cycle (HV/ALL) = The proportion where light lights, the longer HV lasts, the brighter of the certain part of RGB(either one) will do. The Pulse Width can be used to simulate the analog output like this. PWM Video The same is true of other 3 colors, configuring with the following code and expanations. Basic logic for this project Initialize system - PWM and timer configuration - Presskey - Color changing scheme along with ADC light intensity detection for power saving. int keypad_value [ 4 ][ 4 ] = {{ 0 , 1 , 2 , 3 }, { 4 , 5 , 6 , 7 }, { 8 , 9 , 10 , 11 }, { 12 , 13 , 14 , 15 }}; keypad explanation 0 red+ 1 green+ 2 blue+ 3 cycle_speed+ 4 red- 5 green- 6 blue- 7 customize mode(0 1 2 4 5 6 applicable) 8 only red 9 only green 10 only blue 11 light ADC mode 12 red+greren 13 green+blue 14 red+blue 15 off system, remember the last state, s.t. user configuration is not lost after shut down Setup the PWM channel Refer to this pdf for PWM channel-GPIO port configuration, each port has its corresponding PWM channel and built-in system clock, be sure to make it right! More understanding and details are written in comments of the following source code. Please refer to p.1006-1039 of this pdf to see how to config the PWM cycle with certain registers in timer. void Timer_init () //Use 3 { // PA3 + AF1 which is corresponding to TIM2_CH1 // PA1 + AF2 which is corresponding to TIM5_CH2 // PA6 + AF2 which is corresponding to TIM3_CH1 RCC - APB1ENR1 |= RCC_APB1ENR1_TIM2EN ; RCC - APB1ENR1 |= RCC_APB1ENR1_TIM3EN ; RCC - APB1ENR1 |= RCC_APB1ENR1_TIM5EN ; //setting for timer 2 TIM2 - CR1 = 0x0000 ; //p1027 Turned on the counter as the count up mode TIM2 - ARR = ( uint32_t ) SECOND_SLICE ; //Reload value TIM2 - PSC = ( uint32_t ) COUNT_UP ; //Prescaler TIM2 - EGR = TIM_EGR_UG ; //update the counter again p1035 //setting for timer 3 TIM3 - CR1 = 0x0000 ; //p1027 Turned on the counter as the count up mode TIM3 - ARR = ( uint32_t ) SECOND_SLICE ; //Reload value TIM3 - PSC = ( uint32_t ) COUNT_UP ; //Prescaler TIM3 - EGR = TIM_EGR_UG ; //Reinitialize the counter //setting for timer 5 TIM5 - CR1 = 0x0000 ; //p1027 Turned on the counter as the count up mode TIM5 - ARR = ( uint32_t ) SECOND_SLICE ; //Reload value TIM5 - PSC = ( uint32_t ) COUNT_UP ; //Prescaler TIM5 - EGR = TIM_EGR_UG ; //Reinitialize the counter } void PWM_channel_init () { /***********************setting for the TIM2_CH2 RED**************************/ // PB3 + AF1 which is corresponding to TIM2_CH2 RED //Output compare 2 mode TIM2 - CCMR1 = ~ TIM_CCMR1_OC2M ; //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive TIM2 - CCMR1 |= ( 0 b0110 TIM_CCMR1_OC2M_Pos ); //Output Compare 2 Preload Enable TIM2 - CCMR1 = ~ TIM_CCMR1_OC2PE ; //OCxPE //1: enable TIMx_CCR1 Preload TIM2 - CCMR1 |= ( 0 b1 TIM_CCMR1_OC2PE_Pos ); //enable auto reload pre-load TIM2 - CR1 |= TIM_CR1_ARPE ; //duty cycle initial 50 (CCR2/ARR) //TIM2- CCR2 = duty_cycle_R; //enable output compare TIM2 - CCER |= TIM_CCER_CC2E ; /***********************setting for the TIM5_CH2 GREEN**************************/ // PA1 + AF2 which is corresponding to TIM5_CH2 GREEN //Output compare 2 mode TIM5 - CCMR1 = ~ TIM_CCMR1_OC2M ; //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive TIM5 - CCMR1 |= ( 0 b0110 TIM_CCMR1_OC2M_Pos ); //Output Compare 2 Preload Enable TIM5 - CCMR1 = ~ TIM_CCMR1_OC2PE ; //OCxPE //1: enable TIMx_CCR1 Preload TIM5 - CCMR1 |= ( 0 b1 TIM_CCMR1_OC2PE_Pos ); //enable auto reload pre-load TIM5 - CR1 |= TIM_CR1_ARPE ; //duty cycle initial 50 (CCR2/ARR) //TIM5- CCR2 = duty_cycle_G; //enable output compare TIM5 - CCER |= TIM_CCER_CC2E ; /***********************setting for the TIM3_CH1 BLUE**************************/ // PA6 + AF2 which is corresponding to TIM3_CH1 BLUE //Output compare 2 mode TIM3 - CCMR1 = ~ TIM_CCMR1_OC1M ; //110: PWM mode 1: TIMx_CNT TIMx_CCR2-- active, or inactive TIM3 - CCMR1 |= ( 0 b0110 TIM_CCMR1_OC1M_Pos ); //Output Compare 2 Preload Enable TIM3 - CCMR1 = ~ TIM_CCMR1_OC1PE ; //OCxPE //1: enable TIMx_CCR1 Preload TIM3 - CCMR1 |= ( 0 b1 TIM_CCMR1_OC1PE_Pos ); //enable auto reload pre-load TIM3 - CR1 |= TIM_CR1_ARPE ; //duty cycle initial 50 (CCR2/ARR) //TIM3- CCR1 = duty_cycle_B; //enable output compare TIM3 - CCER |= TIM_CCER_CC1E ; } *","title":"Part2. Key idea of this project"},{"location":"univ_notes/mpslab/mpslab/#part3-its-time-to-change-the-color","text":"Initialize to different duty cycle. Each color has its own PWM cycle, by setting the PWM cycle differently, we will be able to interleave 3 colors and mixing them together since there pulse waves have \"time shifting (or say phase shifting)\" to each other. #define RED_START 10 #define GREEN_START 91 #define BLUE_START 172 duty_cycle_R = RED_START ; duty_cycle_G = GREEN_START ; duty_cycle_B = BLUE_START ; int main () { //use the time delay mode to make the interleaving and the color changing scheme fpu_enable (); keypad_init (); GPIO_init_AF (); Timer_init (); configureADC (); startADC (); duty_cycle_R = RED_START ; duty_cycle_G = GREEN_START ; duty_cycle_B = BLUE_START ; cur_state = CYCLE_MODE ; while ( 1 ) { PWM_channel_init (); chromatic_scheme ( keypad_scan ()); } return 0 ; } Increase, decrease and cycle. state_color is the state indicating whether to increase the pulse cycle or decrease, with an view to simulating the sin-wave-like phase wave. void cycle_mode ( int delay_time ){ PWM_channel_init (); if ( state_R ){ if ( duty_cycle_R SECOND_SLICE ){ state_R = 0 ; } else { duty_cycle_R += 20 ; } } else { if ( duty_cycle_R 20 ){ state_R = 1 ; } else { duty_cycle_R -= 20 ; } } if ( state_G ){ if ( duty_cycle_G SECOND_SLICE ){ state_G = 0 ; } else { duty_cycle_G += 40 ; } } else { if ( duty_cycle_G 40 ){ state_G = 1 ; } else { duty_cycle_G -= 40 ; } } if ( state_B ){ if ( duty_cycle_B SECOND_SLICE ){ state_B = 0 ; } else { duty_cycle_B += 50 ; } } else { if ( duty_cycle_B 50 ){ state_B = 1 ; } else { duty_cycle_B -= 50 ; } } set_timer (); start_timer (); delay_ms ( delay_time ); } Customizable mode If it is in the customize mode, we are able to increase the proportion of color, to achieve that, just increase/decrease the duty cycle of that color. DELTA_VALUE is used to adjust the amount of duty cycle applied in PWM mode. case 4 : { if ( duty_cycle_R DELTA_VALUE ) duty_cycle_R -= DELTA_VALUE ; ( or add the DELTA_VALUE ) else duty_cycle_R = 0 ; break ; }","title":"Part3. It's time to change the color."},{"location":"univ_notes/mpslab/mpslab/#part4-more-idea-the-adc-of-light-sensitive-resistor","text":"The Earth is now facing the serve global warming, it is vital for us to construct a power saving model, consequently Alice and I came out the idea of using the ADC to detect the light intensity. Concept of ADC configuration credit to my classmate's hackMD (Add later) The stronger the intensity, the dimmer the light to be to saving the energy since this module is aimed for atmosphere night light. ADC Code is here case 11 : { // light ADC mode for keypad key11 cur_state = LIGHT_MODE ; break ; } if ( cur_state == LIGHT_MODE ) { get_light_resistor (); light = 255 - (( resistor_value - REF_LIGHT ) / 10 ); duty_cycle_R = light ; duty_cycle_G = light ; duty_cycle_B = light ; set_timer (); start_timer (); }","title":"Part4. More idea: the ADC of light-sensitive resistor"},{"location":"univ_notes/mpslab/mpslab/#part5-done-all","text":"Really thanks to my teammate chialice123 who helps me alot during the semester and in the final project making the project score over 90 and overall semester score to be 95 (93 original and +2 adjust), and vava24680 for teaching me some concepts of ADC configuration. Project demo video","title":"Part5. Done all."},{"location":"univ_notes/network_security/network_security/","text":"Network Security Spring 2018 Lecturer: Shiuhpyng Shieh @CS, NCTU Taiwan Ch1. Introduction. Ch2. Symmetric Encryption and Message Confidentiality Concept correction here: Assymetric encryption is not necessarily and absolutely better than the symmetric encryption, they can work with each other. Common type of the cryptanalysis Brute force attack On avg, half of the keys have to be tested. Ciphertext only attack Known the encryption algorithm Want to collect all the ciphtertext to find out the plaintext or ultimately, find out what the key is. Known plaintext attack Use the known plaintext and the correspond ciphertext which encrypted by the encryption algorithm and ultimately find out what the key is. Chosen plaintext attack Use the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is. Difference b/w known plaintext and chosen ciphertext See here Chosen ciphertext attack As we've done in the course project 1, we use the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is. Feistel cipher architecture * Model of symmetric encryption Encrypt and decrypt with the same key, the key should be shared through a secure manner. security of symmetric encryption depends on the secrecy of the key, not the secrecy of the algorithm, which means we should keep the secret key as safe as possible. RSA Encryption standard Asymmetric encryption standard. This encryption standard mainly focus on prime factorisation \u66f4\u591a\u8cc7\u8a0a\u53ef\u4ee5\u53c3\u8003 \u5916\u661f\u4eba\u7684\u7b46\u8a18 Course project1. Chosen cipher attack Will post report after the session of this homework ends. DES Encryption standard An encryption algorithm use round, permutation shift and XOR operation to generate the ciphertext. Divide the plaintext into 64-bit-long in size for each if the block, and use the same length key for encryption(actually the key is not in the same length since there are 8 bits used for the parity-checking during the encryption) Image src DES Briefly introduction Prone to brute force attack since the key space is too small to guarantee the safe area, so the safer 3-DES algorithm is used nowadays. 16rounds are needed for the encryption process The encryption and decryption are run under the same algorithm but they are in the reverse order with each other This is a model based on the Fiestel model , namely for the encryption and decryption they use the same function but in the reversed order. From DES to 3DES DES is not so secure since the key is 56bits long, which is quite prone to BF cryptanalysis 3DES lengthens the key of DES (56 * 3 = 168), doing DES 3 times to make the encryption safer. Please feel free to refer to my classmate's note for more information For encryption procedure: P--E(K1)--A--D(K2)--B--E(K3) C C--D(K1)--B--E(K2)--A--D(K3) A Since the Fiestel architecture, the encryption and decryption method are just the reverse of each other. For decryption procedure: AES Encryption standard Make a better encryption of 3DES, namely evolve from 3DES for a stronger and faster encryption algorithm. AES is still the same as the DES in the category of block cipher encryption, but the block size of AES is 128 bits, doubled of the DES encryption. 10 Rounds of encryption again and again is needed. Image source from textbook One grey-coloured box is the one \"round\" of the encryption in AES Each of the round we take the preceding round's output as the input of this round and do the encryption again, with the following 4 tasks to be done 1.The Substitution Bytes is to use the non-linear transform to let the input transformed with a \"Affine transformation\", making the encryption robust and hard to be cracked 2.The Shift Rows(Bit transposition) is shifting the data, to rearrange the text, for row i we shift i-1 times to the left. Image source from wikipedia 3.The Mix Columns is a linear transform under the mod multiplication 4.The Add Round Key is let the input XOR with the Key in the current state. (Rijndael key generator solution,which is a subkey in each round, which we can be seen from the image provided above that Key(16 bytes and expand to match for each round, divided into 10 subkeys for 10 operations in AES encryption)) 5.After the aforementioned four steps are done, go to the next encryption box. The operation is bytewise The truly random number and pseudo random number Applications of the random number 1.RSA pub-key generation and other pub-key algorithms. 2.Session key for encryption in system such as Wi-Fi, e-mail Image source from wikipedia The following 2 criteria are used to validate a sequence is random. 1.Uniform distribution: The each element in the seed of random number must take the same proportion of being taken out. 2.Independence: A sequence cannot be inferred from the other sequence, strictly and absolutely. Block cipher vs Stream cipher Stream cipher Change the encryption key from time to time, and each time the two part(sender-receiver) can generate the same random key s.t. they can encrypt and decrypt the same message. The key of such encryption algorithm should have a extremely large period and as random as possible, o.w. it is crack-prone. In order to guard the BF attack, the longer key is preferred (However there is a trade-off b/w speed and security.) As we can see the sender and receiver generate the same key for encryption and decryption. Image source from textbook RC4 Algorithm 1.An algorithm with changeable key length encryption. 2.SSL TLS WEP WPA use this encryption algorithm 3.Easy to implement in both HW ans SW, but terminated in 2015 due to attack RC4 Encryption procedure 1.Shuffle the key, make it randomised. for i from 0 to 255 S [ i ] := i endfor j : = 0 for ( i = 0 ; i 256 ; i ++ ) j : = ( j + S [ i ] + key [ i mod keylength ]) % 256 //randomly take the new j and swap, make a permutation swap values of S [ i ] and S [ j ] endfor 2.Get even more shuffle data, each time for a input byte, locate the i and j value by take the value in the key, XOR the inputByte with the key (since the reverse of XOR operation is itself, once we insert the ciphertext we'll get plaintext, and converse is true as well.) i : = 0 j : = 0 while GeneratingOutput : i : = ( i + 1 ) mod 256 //a j : = ( j + S [ i ]) mod 256 //b swap values of S [ i ] and S [ j ] //c k : = inputByte ^ S [( S [ i ] + S [ j ]) % 256 ] //XOR operation suit for this case. Reverse operation also works output K endwhile Block cipher Use the same key for the text, and divide the text into blocks, processing ONE BLOCK for each time. Processing procedure including shift position, substitute text to let the plaintext look similar, however, generating the totally different ciphertext for cryptographically secure. The AES(128 bits per block), DES(64 bits per block), 3DES(64 bits per block) are lie in this category. 5 Block modes for the block cipher, defined by NIST USA. Intended to use for the symmetric cipher. . 1.Electronic Code Book where Encryption: ciphertext[i] = code_book[plaintext[i]] just. Need a decryptor to do reversed tasks. 2.Cipher Block Chaining, take the step i's ciphertext XOR with next step's plaintext and encrypt again. If there is a bit error in the ciphertext, it will cause the decryption of plaintext i and plaintext i+1 error since they are chained together from step to step. 3.Cipher FeedBack , only the encryptor is needed, 2 times of encryption is equivalent to decryption (Reason: ). 4.CounTeR , use the counter directly for the key of encryption. Can be processed parallelly since each block can be processed with its counter and independent with other blocks, random access is suitable as well. And use the same key for decryption due to the properties of XOR operation, once the ciphertext XOR key --- plaintext is decrypted. The CTR mode is both HW and SW efficiency (parallelism are able to implemented in both CPU and compiler, OS ...etc). What's more, the preprocessing can be done as well, even without the presence of the plaintext, we can still generate the required key and the next task is just let plaintext XOR key --- ciphertext. 5.Output FeedBack similar too Cipher FeedBack, take the ciphertext from previous round and encrypt again Useful reference site ,MUST READ!!! Ch3. Message Authencation and Public Key Cryptography Message Authencation Code (MAC) Using some hash value of the data and encrypt that value at the end of data for validation (see the image below) Clarify!!: MAC cannot perform the data encryption, it can only be used for data authentication and validation. Such as parity checking is also a kind of message authentication. Image source from wikipedia Secure Hash Functions 1.Collision and preimage-found resistant, making it unable to do the reverse of hash to forge the data. Hash collision, strong vs weak Strong Given an arbitrary x there exists no x' with x' != x so that h(x) = h(x') (\u66f4\u53b2\u5bb3\uff0c\u7121\u6cd5\u627e\u5230\u4efb\u53d6\u5169\u500b\u7522\u751f\u76f8\u540c\u96dc\u6e4a\u6578\u503c) Weak There exist no given x, and will be infeasible to find x' with x != x' so that h(x) = h(x') (\u4e00\u500b\u5df2\u77e5\u627e\u7121\u6cd5\u627e\u5230\u53e6\u4e00\u500b\u7522\u751f\u76f8\u540c\u6578\u503c\u7684\u96dc\u6e4a) SHA Note, NOT AN Encryption standard! Term explanation (waiting for the answer from OAlienO) 1.Message Digest Size: Message digest, MD(same as MD of MD5), of how much data amount we output, such as in the following SHA1 algorithm, we produce 160bits output (hex * 40 = 160). 2.Message Size: Message amount that we can process in one time(Maxium input). 3.Block Size: In block cipher, cut all the message into several blocks, in the block is how much message in a block to be processed 4.Word Size: A size of a given state. The following are the Message digest from the SHA512. Hashing, Why and How? hash youtube Hash aims for reduce the huge amount of data to the small amount. Can be used for verify and prevent the errors in the communication. Evan a small change in the original plaintext (such as only a bit), it will cause the totally different hash value, this result is called Avalanche Effect. It ensures the security of hash algorithm. Hash has to be one-way and pre image, collision-resistant, otherwise , data will be forged. Hash is doomed to be broken or cracked, what matters is that we have to try out best to lengthen the time before being cracked Hash-based message authentication code (HMAC) Watch out the color correspondence for better understanding the procedure HMAC vs CMAC?? so hmac vs cmac * AS we can see from the picture for HMAC (aforementioned) and CMAC, although both of them use the key, but in Message encryption vs Message digestion(hashing), what is the difference? so encryption-vs-digest so how-is-an-md5-or-sha-x-hash-different-from-an-encryption hash ,encryption and more so why-should-i-use-authenticated-encryption-instead-of-just-encryption Encryption: Really make the message secret, hard to be cracked and aims for security. key difference between encryption and hashing is that encrypted strings can be reversed back into their original decrypted form if you have the right key ex. RSA AES DES ... Digestion (hashing): Digest the whole data, may be used for message authentication, producing an ID or FINGERPRINT of the input data. Hashing is great for usage in any instance where you want to compare a value with a stored value, but can't store its plain representation for security reasons . Other use cases could be checking the last few digits of a credit card match up with user input or comparing the hash of a file you have with the hash of it stored in a database to make sure that they're both the same. ex. MD5 SHA ... Furthermore, if the digested data is encrypted, than it can be used for DIGITAL SIGNATURE. 1.For example in SHA family \u80fd\u8a08\u7b97\u51fa\u4e00\u500b\u6578\u4f4d\u8a0a\u606f\u6240\u5c0d\u61c9\u5230\u7684\uff0c\u9577\u5ea6\u56fa\u5b9a\u7684\u5b57\u4e32\uff08\u53c8\u7a31\u8a0a\u606f\u6458\u8981\uff09\u7684\u6f14\u7b97\u6cd5\u3002\u4e14\u82e5\u8f38\u5165\u7684\u8a0a\u606f\u4e0d\u540c\uff0c\u5b83\u5011\u5c0d\u61c9\u5230\u4e0d\u540c\u5b57\u4e32\u7684\u6a5f\u7387\u5f88\u9ad8\u3002 OAlienO : SHA \u4e0d\u662f\u52a0\u5bc6\u56e0\u70ba\u4ed6\u6c92\u8fa6\u6cd5\u89e3\u56de\u539f\u672c\u7684 input Authenticated encryption (HMAC x CMAC x CCM = CMAC + AES block cipher + CTR block mode) A term used to describe encryption systems that simultaneously protect confidentiality and authenticity of communications. Compared with traditional encryption, the authenticated encryption additionally provides authenticity, while plain encryption provides only confidentiality. Usually more complicated than confidentiality-only or authenticity-only schemes. Public key cryptography Encrypt with public key: Want to send someone a message that only they(certain of groups,...etc) will be able to read, encrypt it with that person's public key. Encrypt with private key: Want to publish some information and guarantee that you're the author (Reason is that the only person who encrypt with HIS PRIVATE KEY CAN ONLY BE THE ORGINAL AUTHOR, and everyone can use the public related to that private key to decrypt it) , and that it hasn't been tampered with, then you encrypt it with your private key.(We can as well use the authenticated encryption to ensure the authenticity. Just like the aforementioned Digital signature ) so What is we encrypt with private key?? Private key vs Secret key, what is the difference? Private key: Use in asymmetric encryption. Secret key: Use in symmetric encryption, but it is quite hard for us (or say unsafe) to exchange secret key, so the Diffie Hellman key exchange algorithm is invented. Diffie Hellman key exchange A way to exchange the secret key via an unsafe path Math theory behind this algorithm SSL, TLS, SFTP use it. Like the AES implemetation AES is symmetric encryption and a shared-secret-key exchange is needed for end-to-end data encryption. Both of end to end does not need to know each other (or cant break) his / her private key but share a same secret key to do secret data exchange. In this algorithm, we should choose a very big a, b and p s.t. Bob is unable so solve 'a' of Alice's secret and neither is Alice. o.w. Eve will hack into it and solve the shared secret key. Aside from the RSA, why use Diffie Hellman key exchange? Since the process of RSA is quite burdensome (numbers in it are extremely huge) so if we can back to the traditional symmetric encryption such as AES (just now we need a \"secure pipe\" under the \"insecure pipe\") to perform key exchange. Than the end-to-end encryption can be achieved, what's more, this method is faster in which stream cipher are performed Man in the middle attack (MITM) The MITM forges the key of both side and deceives them, act as both fake Alice and Bob. And the wikipedia analogy ,note: sequence different from the image The core idea about this is still the mathematical expression, for example for the secret key K1, since Darth intercepts the message, then he can forge the key with his secret key XD2 ,due to the following mathematical theory about modulo exponential. So Alice is able to acquire the secret key via her own private key XA due to the upper math theory. BUT SHE DOES NOT KNOW THAT YD2 ACTUALLY COMES FROM DARTH and DARTH now share the same key with Alice, so Alice thinks that Darth is Bob!! and the same is true for Bob!! Originally the shared secret key should be lie on the mathematical expression like this Rather than this Ch.4 Key Distribution and User Authentication Key distribution Used in the symmetric key crypto system to exchange keys from one end point to another. Kerberos and its components User password will not be transmitted but will be used as a shared secret for the authentication Centralised key distribution and authentication service b/w user and server(3 rd party) that relies on symmetric encryption (No public key in it) Generates a symmetric secret key b/w two end points. Distributed system makes computing power better. During the key's lifetime (embedded in the message), the key can be used again and again. Central idea relies on the trustworthy 3RD PARTY SERVER Authencation server (AS) Authenticate the user Ticket granting server (TGS) Grant authenticated user permissions to act with the real server (SS, Service Server) wikipedia for detailed procedure Detailed explanation video Timestamp portocal vs Challenge-Response Portocal Timestamp portocal Record the timestamp of each data transaction. Prone to replay attack(a kind of MITM attack) if the clocks b/w the client and server is not synchronised But how come will this happen?? If the system time is not synchronised, then suppose the end point EA is slower, then the MITM can intercept the message b/w two endpoint and resend the password again to hack and pretend to be the genuine user. What's more, since the time is slower in EA, then as the MITM intercepts data and resend, it does need some time to \"RETRANSMIT\" , but it is the slower time that allows the delay of retransmit time not be discovered if the time difference |T_received - T_send| epsilon is not so strict. Challenge-Response Portocal Reference this video first! The server and the receiver share a certain kind of \"shared secret\" that might be generated as the user registered in the system. Ensures the \"Mutual Authentication\" The procedure as follows: Server sends a unique challenge value sc to the client Client sends a unique challenge value cc to the server Server computes sr = hash(cc + secret) and sends to the client Client computes cr = hash(sc + secret) and sends to the server Server calculates the expected value of cr and ensures the client responded correctly Client calculates the expected value of sr and ensures the server responded correctly where sc is the server generated challenge cc is the client generated challenge cr is the client response sr is the server response Since the secret is shared b/w the server and client, then is is able to verify the genuine of both server and client A good challenge/response system will generate a new challenge for every transaction or session (and make sure that previous challenges are not reused!), so that session transcripts cannot be spliced together to create new fraudulent systems. (Maybe the challenge will be encrypted in both parties) Comparison b/w Kerberos v4 and Kerberos v5 Reference here v4 is prone to MITM attack and v5 is not. Both of them provides mutual authentication What is mutual authentication and why we need it?? \u7591\u554f\uff1aMutual authentication \u76f8\u8f03\u65bc one way \u4ed6\u7684\u597d\u8655\u662f \u53ef\u4ee5\u540c\u6642\u9a57\u8b49 \u4f3a\u670d\u5668\u65b9\u548c\u4f7f\u7528\u8005\u65b9\u561b\uff1f\uff1f \u5c31\u662f\u4f3a\u670d\u5668\u80fd\u78ba\u8a8d\u9019\u500buser \u800c\u4e14\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u78ba\u8a8d\u9019\u500bserver \u4f46\u662f\u539f\u672c\u53ea\u6709usr\u4f86\u78ba\u8a8dserver \u591a\u51fa\u9019\u500bserver\u4f86\u78ba\u8a8dusr \u6703\u6709\u4ec0\u9ebc\u512a\u9ede\u5462\uff1f \u89e3\u7b54\uff1a\u56e0\u70bauser\u548cserver\u90fd\u6709\u53ef\u80fd\u88ab\u4eff\u5192\uff0c\u56e0\u6b64\u9700\u8981\u96d9\u91cd\u8a8d\u8b49\u96d9\u65b9\u3002 Both the server and client may be inpersonated, so we need to verify their real identification. Key distribution with asymmetric encryption (Public key certificate) The well known SSL use this method ,and the X.509 standard is used. Aimed to solve the problem that we want to verify the authentication of some authorities by the trusted certificated authority (CA) Step as follows Verify the signature that generated by CA to ensure the reality. What is the difference b/w the digital signature and public key authentication. From stackoverflow: A digital signature is used to verify a message. It is basically an encrypted hash (encrypted by the private key of the sender) of the message. The recipient can check if the message was tampered with by hashing the received message and comparing this value with the decrypted signature (decrypted the signature with the public key from the sender). To decrypt the signature, the corresponding public key is required. A digital certificate is used to bind public keys to persons or other entities. If there were no certificates, the signature could be easily be forged, as the recipient could not check if the public key belongs to the sender. Original discussion thread Similar reference The \"Chain of Trust\" SSL certificate, root certificate are all related to this topic Actually the public key certification (certification distribution of authorize a genuine key) is the core concept of SSL/TLS portocal Chain of Trust YouTube video Private key of root CA should be absolutely inaccessible. Once the \"Chain of Trust\" is successfully formed, an secure communication path can be formed (TLS using SSL certificate to do such things) So a question comes to my mind, What is the differenct b/w HTTPS,TLS and SSL? Answer as follows: 1.TLS is just the new name (or say acronym) of SSL Namely, SSL protocol got to version 3.0; TLS 1.0 is \"SSL 3.1\". TLS versions currently defined include TLS 1.1 and 1.2. Each new version adds a few features and modifies some internal details. We sometimes say \"SSL/TLS\". 2.HTTPS is the HTTP under the secured transmission protocol, i.e. HTTPS is HTTP-within-SSL/TLS. SSL (TLS) establishes a secured, bidirectional tunnel for arbitrary binary data between two hosts. Why chain of trust?? Even though the asymmetric (Public-key cryptography RSA) can ensure the secret communication, digital signature can ensure the correctness of content , however, we are still not sure about whether the issuer of the digital certificate is the real \"good guy\" or the \"forged guy.\" wikipedia ref PKI, CA, Key...etc great explanation video Here A public key infrastructure (PKI) is a set of roles, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption. When to revoke a user's certification?? The user\u2019s private key is assumed to be compromised(\u5047\u5b9a\u88ab\u6d29\u6f0f\u51fa\u53bb\u4e86) The user is no longer certified by this CA; reasons for this include subject\u2019s name has changed, the certificate is superseded, or the certificate was not issued in conformance with the CA\u2019s policies The CA\u2019s certificate is assumed to be compromised The PKI architecture PKI YouTube video * PKI is a framework that some vendor and use...etc should follow, and PKI associates a public key with a verified person/system. Ch.5 Cloud Security 802.1X, EAP(A framework) Used to control the access of user to the internet. provides a generic transport service for the exchange of authentication information between a client system and an authentication server. The authentication server gives the instruction to the gate / authenticator such that it can give the client the internet resource he wants or not. , auth methods through the EAP layer to reach the data link layer. Procedure as follows 1.EAPOL(OL stands for data encapsulation)-Start, start the eap 2.EAPOL(OL stands for data encapsulation)-EAP(REQ/IDENTITY) auth server wants to know the identity / 3.EAPOL(OL stands for data encapsulation)-EAP(RESPONSE/AUTH) five the clinet response 4.EAPOL(OL stands for data encapsulation)-Logoff end the connection Cloud Couputing Definition: Focus on what service cloud should have rather than a \"how to\" design architecture. a tool for describing, discussing, and developing a system-specific architecture using a common framework of reference. SaaS provides software such as google drive, PaaS manages the computing platform such as the web(middleware components), and IaaS provides the hardware resources such as the network server and hosts...etc Roles in cloud computing. 1.Carrier: Provide the transport b/w cloud services and consumers 2.Auditor(\u7a3d\u67e5\u54e1): Assures that THE CP conforms to a certain cloud standards 3.Broker(\u7d93\u7d00\u4eba):Help the consumer to manage the cloud service when it is too complicated. Data protection in the cloud Multi instance model: Am unique DBMS in each could subscriber(Risk distribution) Multi tenant model: Allows customers to share computing resources in a public or private cloud. Each tenant's data is isolated and remains invisible to other tenants. The rest of cloud computing will be read before the midterm 2 Ch.6 Transport-Level Security SSL Architecture SSL connection: each connection is transient , and associated with one session. SSL session: Association b/w the client and the server wikipedia NetAdmin SSL Record Portocol Confidentiality with Handshake protocol to ensure that no one intercept in the pipeline, encrypt the data with secret key. Message integrity: With a shared secret key to ensure the MAC code such that we may check whether the data has been modified or not. Pre master, master secret, private, shared / session key Pre master key: Allow for the uniform format of the master key.(Aim for the greater consistency) Master key is the agreement of both endpoint, master_secret = PRF(pre_master secret, \"master secret\"(aims for tag of current thing), Client ran + Server ran (or the Alice ran add up with the Bob ran)) Check here Cryptographic Computations TLS, HTTPS = HTTP + SSL/TLS HTTP under a secure transport layer Port 443 will be used since it invokes the SSL The normal HTTP close we just need HTTP close, while the HTTPS we need the TLS which involves the underlying TCP connection. TLS requires the two entity of TCP in both client and server side. TLS should agree and exchange the closure alerts before closing connection. SSH Cryptographic network protocol 3different protocol: User authentication, Connection and Transport Layer Protocol Using the asymmetric encryption for user authentication(identify the private key of the user ti ensure the user is really him). Authentication method Package spec SSH Channel types Including Session (Remotely execute a command such like ssh ), X11 , Forwarded TCPIP(Remote Port Forwarding) Direct(Local PF) Port Forwarding SSHPF Useful features of SSH Insecure TCP - SSH (Change the port from TCP to SSH) SSH force the traffic in the TCP change to the SSH layer. Local vs Remote PF Local vs Remote ?? 1.Local \u81ea\u5df1\u9023\u5411\u66f4\u9060\u7aef\u7684\u4f3a\u670d\u5668\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u81ea\u5df1\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u9060\u7aefremote server\u7684b\u57e0\uff0c\u85c9\u7531remote server\u50b3\u5230\u66f4\u9060\u7aef\u7684faraway host 2.Remote \u7576\u9060\u7aef\u4f3a\u670d\u5668\u60f3\u8981\u9023\u56de\u4f86\u6642\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u9060\u7aef\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u6211\u9019\u7aeflocal server\u7684b\u57e0\uff0c\u85c9\u7531local server\u9023\u5411\u6211\u4e00\u65c1\u7684near host Ch.7 Wireless Security Wireless devices are tend to have higher security risks than others since the following factors: Channel, Mobility, Resources, Accessibility. Common Wireless Network Threats: Accidental association, Malicious association, AD-HOC Networks, Identity theft(MAC Spoofing), MITM attack, DoS, Network injection. Protect against wireless eavesdropping Signal hiding(not so practical) and encryption(kind of practical). Protect the access point Main threat is the unauthorized access to the network. The 802.1X standard. provides the authentication for device wishing connecting to the LAN/WLAN. Mobile device security Major security issues are: Lack of physical security controls Use of untrusted mobile devices Use of untrusted networks Use of untrusted content Use of applications created by unknownparties Interaction with other systems Use of location services 802.11i Wireless protocol Controlled ports:PDU exchange within LAN b/w supplicant and other systems only if supplicant authorizes such an exchange Uncontrolled ports: Allows PDU exchange b/w supplicant and other RS regardless the authentication state. BSS, ESS? Here WEP, WPA, RSN WEP: Use RC4 for encryption, the level of security is unrelated with len of WEP key, \u56e0\u70baRC4\u662fstream cipher\u7684\u4e00\u7a2e\uff0c\u540c\u4e00\u500b\u9470\u5319\u7d55\u4e0d\u80fd\u4f7f\u7528\u4e8c\u6b21\uff0c\u6240\u4ee5\u4f7f\u7528\uff08\u96d6\u7136\u662f\u7528\u660e\u6587\u50b3\u9001\u7684\uff09IV\u7684\u76ee\u7684\u5c31\u662f\u8981\u907f\u514d\u91cd\u8907\uff1b\u7136\u800c24\u4f4d\u5143\u7684IV\u4e26\u6c92\u6709\u9577\u5230\u8db3\u4ee5\u64d4\u4fdd\u5728\u5fd9\u788c\u7684\u7db2\u8def\u4e0a\u4e0d\u6703\u91cd\u8907\uff0c\u800c\u4e14IV\u7684\u4f7f\u7528\u65b9\u5f0f\u4e5f\u4f7f\u5176\u53ef\u80fd\u906d\u53d7\u5230\u95dc\u9023\u5f0f\u9470\u5319\u653b\u64ca, so change to WPA or WPA2 is the safer method\u3002 WPA: Fixed the vulnerability of WEP. 802.11i Fourway handshake auth. Here MIC is the message integrity code to ensure the integrity of the message. What is the purpose of ANonce and SNonce? As we can see from the 2017mid2 , they are used to generated the PTK for both the STA and AP, also the back SNonce serves like a challenge-response protocol to ensure the freshness and the alive of STA that there is no MITM attack and the same is true for AP. The GTK is used for decrypting the data of multicast and broadcast traffic, all of the STAs share the same GTK. GTK is distributed after the pairwise keys that already established (Use PK generated before to enctypt the GTK key ) GTK Changed every time as device leaves network(yes TRANSIENT KEY!) TK with TKIP or CCMP are used for traffic key(encryption for data transfer phase) provides message integrity and data confidentiality. HMAC-SHA1 are used to generated nonce, expand pairwise keys and to generate GTK, PTK(transient key) Ch8. EMAIL Security (Pretty Good Privacy) Provides a confidentiality and authentication service that can be used for electronic mail and file storage applications PGP also provides the message authentication and the message integrity. Services 1.Digital signature: DSS, RSA , SHA 2.Message encryption: CAST, IDEA, 3DES 3.Compression: zip 4.email compatibility: Base64 encryption PGP Authencation RSA ensures that only the mail sender signed with the digital sender, encrypt w his/her private key, can be decrypted with his/her public key, thus ensures the identity. SHA ensures that no one can generated the message with the same hash code PGP Confidentiality and Authentication 64bits CFB is used, using the block cipher , symmetric encryption. In PGP, each symmetric key is used only once.(The session key is bound with the message and transmitted.) Encrypt the sesion key with the receiver's public key. PGP Compression PGP compresses the msg after signature but before encryption. If sign after the compression, then the version of compression will be constrained since different compression leads to different encoding thus different hash result even with the same source data. PGP E-mail Compatibility Radix64(B64) encoding to convert them into printable ASCII chars. Append the CRC to protect the transmission error. S/MIME Security enhancement for the MIME Another standard besides PGP MIME MIME improve from SMTP 5 Headers are defined, to fully describe the email, MIME-ver, content type, content-transfer encoding, content-ID, content description. S/MIME Functionality Enveloped data: encrypted content of any type and encrypted content encryption keys for one or more recipients. Signed data, message digest of content and digital signature with the private key of the signer. Recipient without S/MIME compatibility are unable to view the data Clear-signed data: Only the digital signature is encoded using base64 recipients without S/MIME capability can view the message content, although they cannot verify the signature Cryptographic algorithms used in S/MIME Smime secures the MIME with a signature ,encryption, or both Clear signing does not involve transforming the message to be signed. S/MIME Certificate Processing Managers and/or users must configure each client with a list of trusted keys and with certificate revocation lists. Local wil maintaining the certs needed to verify incoming signatures and to encrypt outgoing messages.(MACV\u4eba\u7684\u8b49\u66f8\u4f86\u6aa2\u9a57\u5225\u4eba\u7684\u6578\u4f4d\u7c3d\u6709\u4ee5\u53ca\u8981\u7528\u81ea\u5df1\u7684\u8b49\u66f8\u4f86\u70ba \u81ea\u5df1\u7684\u8a0a\u606f\u52a0\u5bc6\uff0c\u4ee5\u53ca\u7c3d\u7f72\u3002) DKIM cryptographically signing e-mail messages, permitting a signing domain t()o claim responsibility for a message in the mail stream YouTube 2 nd midterm note 2014mid2 \u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X \u5728\u6bcf\u4e00\u500bSSL session\u548ccinnection\u4e2d \u4ed6\u5011\u7684\u53c3\u6578\u6703\u5f7c\u6b64\u4e92\u76f8\u5206\u4eab\uff0c\u4f8b\u5982\u52a0\u5bc6\u65b9\u6cd5\u8207\u79d8\u9470\u5319\u9577\u5ea6\uff0csession \u548cconenction\u4ed6\u5011\u7684\u5dee\u5225\u5728\u65bc:SSL session\u8207SSL connection\u662f\u4e0d\u540c\u7684\u6982\u5ff5\u3002 SSL session\u6307\u7684\u662f\u901a\u904e\u63e1\u624b\u800c\u7522\u751f\u7684\u4e00\u4e9b\u53c3\u6578\u548c\u52a0\u5bc6\u79d8\u9470\u7684\u96c6\u5408\uff1b\u7136\u800cSSL connection\u662f\u6307\u5229\u7528\u67d0\u500bsession\u5efa\u7acb\u8d77\u4f86\u7684\u6d3b\u52d5\u7684\u6703\u8a71\u3002\u63db\u53e5\u8a71\u4f86\u8aaa\uff0cconnection\u662f\u6703\u8a71\u7684\u9032\u7a0b\uff0c\u800csession\u662f\u5efa\u7acb\u9019\u500b\u6703\u8a71\u6240\u9700\u8981\u7684\u4e00\u4e9b\u53c3\u6578\u3002 (\u4fee\u6b63\u904e!)SSL\u4e2d \u52a0\u5bc6\u3001MAC\u3001\u58d3\u7e2e\u53ef\u80fd\u7684\u9806\u5e8f\u6709\u516d\u7a2e\uff0c\u4f46\u5176\u4e2d\u5408\u7406\u7684\u53ef\u80fd \u53ea\u6709\u52a0\u5bc6\u5728\u58d3\u7e2e\u4e4b\u5f8c!(\u58d3\u7e2e\u524d\u5c31\u52a0\u5bc6\uff0c\u56e0\u70ba\u8cc7\u6599\u5df2\u7d93\u8b8a\u6210\u7955\u6587\uff0c\u6709\u53ef\u80fd\u58d3\u7e2e\u6703ERROR) WEP\u7684\u7f3a\u9ede\u5c31\u662f \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587\uff0c\u52a0\u4e0aRC4\u662f\u4e00\u7a2estream cipher\u6a21\u5f0f\uff0c\u9700\u8981\u5920\u9577\u7684key\uff0c\u4f46WEP\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907) PMK PTK(\u66ab\u614b) KCK(EAP confirmation\uff0c\u7528\u4f86\u4fdd\u969c\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u5354\u5b9a\u9470\u5319\u4ea4\u63db\u7684\u5b8c\u6574\u6027)+KEK(EAP encryption, \u7528\u4f86\u4fdd\u8b49\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u4e2dGTK\u3001RSN IE \u7684\u6a5f\u5bc6\u6027\uff0c\u5c31\u662f\u78ba\u4fdd\u9019\u500b\u9470\u5319\u4e0d\u4e0d\u6703\u88ab\u76dc\u7528)+TK(traffic encryption, user traffic \u7684\u6a5f\u5bc6\u6027\u8207\u5b8c\u6574\u6027\uff0c\u5728\u7528\u6236\u548c\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u8cc7\u6599\u52a0\u5bc6) WPA\u52a0\u5bc6\u76844\u8def\u4ea4\u4e92\u5354\u5b9a\uff0c\u56e0\u70ba\u6709 SNonce \u548c ANonce \u7528\u4f86\u7d44\u6210TK\uff0c\u6545\u80fd\u78ba\u4fddfreshness \u66f4\u8a73\u7d30\u8acb\u9ede\u6b64 2014\u6700\u5f8c\u4e00\u984c\uff0c\u5982\u679c\u662f\u7528\u90f5\u4ef6\u7684\u672c\u8eab\u5167\u5bb9\u4f86\u52a0\u5bc6\uff0c\u800c\u4e26\u975e\u90f5\u4ef6\u7684\u96dc\u6e4a\u6578\u503c\u52a0\u5bc6\u4f9d\u7136\u53ef\u7a31\u4f5c\u7c3d\u7ae0\uff0c\u4f46\u662f\u6548\u679c\u76f8\u7576\u5dee\uff0c\u56e0\u70ba\u662f\u6574\u4efd\u90f5\u4ef6\uff0c\u8a08\u7b97\u91cf\u592a\u5927\u4e86\uff0c\u52a0\u4e0a\u56e0\u70ba\u662f\u7528\u5bc4\u4ef6\u4eba\u7684\u79c1\u9470\u52a0\u5bc6\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u7528\u5bc4\u4ef6\u4eba\u7684\u516c\u9470\u6253\u958b\uff0c\u518d\u52a0\u4e0a\u96a8\u4fbf\u4e82\u8aaa\u89e3\u5bc6\u524d\u7684\u6771\u897f\u5c31\u662f\u7c3d\u7ae0\u4fbf\u6703\u9020\u6210\u98a8\u96aa 2015mid2 EAP\u652f\u6301\u7684\u65b9\u6cd5\u6709EAP-TLS, MD5, POTP, PSK , PWD, TTLS, IKEV2, FAST, SIM, AKA, GTC EKE \u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u539f\u56e0\u5728\u65bcuncontrolled\u7684\u7aef\u672b\u53ef\u8b93AS\u548cSTATION\u6e9d\u901a\uff0c\u4e0d\u8ad6\u72c0\u614b\uff0c\u4f46\u662fcontrolled\u9700\u8981\u8a8d\u8b49\u904e\u5f8c\u624d\u884c\uff0c\u56e0\u6b64\u5728\u4e00\u525b\u958b\u59cb\u7684\u6642\u5019\u4e26\u4e0d\u9069\u7528(\u4e00\u525b\u958b\u59cb\u4e00\u5b9a\u662f\u9084\u6c92\u6709\u8a8d\u8b49\u904e\u7684\u72c0\u614b)\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X WEP by RC4, WPA by RC4 and TKIP, RSN by AES CCM CCMP ch8 12\u7684\u5716\u8981\u591a\u770b! 2016mid2 WEP WPA TKIP all use RC4 \u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee 11 A(O)SNonce ANonce B(X)\u61c9\u8a72\u662fTK(?) C(O)\u7528Nonce D(O) E(X)\u61c9\u70baAP TA: B: (O) \u662f\u5229\u7528 PMK \u4f86\u52a0\u5bc6\u3002 (\u61c9\u8a72\u9084\u662fTK \u52a9\u6559\u53ef\u80fd\u7d66\u932f) handshake \u4e26\u6c92\u6709\u63d0\u4f9b authentication \u7684\u529f\u80fd\uff0c\u6240\u4ee5 D\u3001E \u61c9\u8a72\u90fd\u662f\u932f\u7684\u3002\u4f60\u7684\u5176\u4ed6\u7b54\u6848\u90fd\u662f\u5c0d\u7684\u3002 12 A:\u5c0d\uff0c\u56e0\u70ba\u6709Nonce\u7d44\u6210TK\uff0c B:\u61c9\u8a72\u5c0d\uff0c\u5427? \u4f46\u662fGROUP KEY\u63d0\u5230\u5982\u679c\u6709\u4e00\u500b\u88dd\u7f6e\u96e2\u958b\u4e86\uff0c\u5c31\u6703\u8b8a\u66f4\uff0c C:\u6c92\u6709\uff0c\u5427? \u56e0\u70ba\u4ed6\u662f\u63a1\u7528RC4stream cipher\uff0cKEY\u6703\u4e00\u76f4\u8b8a D: TKIP\u4e5f\u662f\u63a1\u7528RC4\u7684stream cipher \u6240\u4ee5KEY\u6703\u4e00\u76f4\u8b8a TA: WEP key \u90fd\u662f\u56fa\u5b9a\uff0cIV \u624d\u6703\u4e00\u76f4\u6539\u8b8a\u3002 A: No. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab B: Yes. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab C: No. data packet \u662f\u7528 RC4(IV,WEP key) \u7522\u751f\u7684 key \u52a0\u5bc6\uff0cIV\u6703\u4e00\u76f4\u6539\u8b8a\u56e0\u6b64\u7522\u751f\u7684 key \u4e5f\u6703\u4e00\u76f4\u8b8a\u3002 D: No. \u7406\u7531\u540c\u4e0a\u3002 13 A: a--noncea b b--nonceb a one way 2times, 2 way four times?? C: both\u5427?, replay attack\u6c92\u6709\u7528\u56e0\u70ba\u6703\u6709nonce\u78ba\u4fdd\u4fe1\u606f\u662f\u6700\u65b0\u7684 TA: A: one way 2 times, two way 3 times C: both 2017mid2 \u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee 5 \u5168\u90e8 TA: \u4f60\u662f\u5c0d\u7684 6 a,b,c,d,e,f,g,h TA: \u4f60\u662f\u5c0d\u7684 7 (i) \u7528\u4f86\u7522\u751fPTK (ii)\u56e0\u70ba\u9031\u671f\u6027\u7684\u8a2d\u5b9a\u70ba0\uff0c\u90a3\u9ebc\u540c\u6a23\u70ba0\u7684\u5169\u500bnonce\u6709\u53ef\u80fd\u4ee3\u8868\u4e0d\u540c\u7684\u6642\u9593\u9ede\uff0c\u6240\u4ee5\u5bb9\u6613\u906d\u53d7replay attack TA: \u4f60\u662f\u5c0d\u7684 8 (i) WEP key\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907) (ii) \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587 TA: (i) \u6b63\u78ba\u4f86\u8aaa WEP key \u662f\u56fa\u5b9a\u7684\uff0cIV \u662f 24bits \u4e26\u4e14\u6703\u96a8\u6642\u6539\u8b8a\u3002\u5f31\u9ede\u7684\u78ba\u662f\u5bb9\u6613\u91cd\u8907\u3002 (ii) \u56e0\u6b64\u7576\u627e\u5230 IV \u91cd\u8907\u7684\u60c5\u6cc1\u6642\uff0c\u5169\u500b\u52a0\u5bc6\u7684\u5c01\u5305(C1,C2)\u6703\u9020\u6210 = C1 xor C2 = P1 xor P2, \u4e4b\u5f8c\u4fbf\u53ef\u7528frequency analysis \u7834\u89e3\u51fa\u660e\u6587\u3002 Ch9. IP Security \u6982\u5ff5 \u5728\u7db2\u8def\u5c64(OSI \u7b2c\u4e09\u5c64\uff0c\u4ecb\u65bcDATA LINK\u5c64\u548c\u50b3\u8f38\u5c64\u4e4b\u9593)\u7684\u5b89\u5168\u6a5f\u5236 \u9700\u8981\u80fd\u78ba\u4fdd\u5169\u4ef6\u4e8b \u7db2\u8def\u88dd\u7f6e\u80fd\u9060\u96e2\u672a\u6388\u6b0a\u7684\u88dd\u7f6e\u8207\u63a7\u5236\u7db2\u8def\u6d41\u91cf end to end user \u6d41\u91cf\u8ffd\u8e64\u5c07\u4f7f\u7528\u8a8d\u8b49\u8207\u52a0\u5bc6\u6a5f\u5236\u4f86\u78ba\u4fdd\u5b89\u5168 IPSEC\u7684\u61c9\u7528 \u78ba\u4fdd\u5728LAN\uff0c\u516c\u53f8\u5b89\u5168 \u5728\u7db2\u8def\u4e0a\u9060\u7aef\u9023\u7d50\u7684\u5b89\u5168 \u5efa\u7acb\u8207\u5925\u4f34\u7684\u5167\u5916\u7db2\u9023\u7d50\u6a5f\u5236 \u5efa\u7acb\u96fb\u5b50\u5546\u52d9\u76f8\u95dc\u7684\u5b89\u5168\u6a5f\u5236 \u80fd\u78ba\u4fdd\u5728IP\u5c64\u7684\u6d41\u91cf\u5b89\u5168\uff0c\u53ca\u8a8d\u8b49( can encrypt and/or authenticate all traffic at the IP level) \u597d\u8655: \u5982\u679c\u5c07IPSEC\u653e\u5728\u9632\u706b\u7246\uff0c\u90a3\u9ebc\u6240\u6709\u6d41\u904e\u4ed6\u7684\u6d41\u91cf\u90fd\u53ef\u4ee5\u88ab\u5b89\u5168\u7684\u4fdd\u8b77\uff0c\u4e14\u516c\u53f8\u6216\u5de5\u4f5c\u7fa4\u7d44\u5167\u7684\u6d41\u91cf\u4e5f\u4e0d\u6703\u56e0\u6b64\u800c\u7522\u751f\u8ca0\u64d4 \u5982\u679c\u6240\u6709\u7684\u5916\u4f86\u8a0a\u606f\u90fd\u5fc5\u9808\u4f7f\u7528IP\uff0c\u800c\u9632\u706b\u7246\u662f\u7db2\u969b\u7db2\u8def\u9032\u5165\u5167\u90e8\u7684\u552f\u4e00\u7ba1\u9053\u6642\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\u6703\u6709\u7e5e\u904e\u9632\u706b\u7246IPSec\u7684\u9014\u5f91(IPSec\u4e00\u5b9a\u6703\u64cb\u4e0b\u4f86) IPSEC\u5c0d\u65bc\u4e0a\u5c64\u662f\u770b\u4e0d\u5230\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u8005\u4e0d\u9700\u8981\u91cd\u65b0\u8abf\u6574\u8a2d\u5b9a\u3002 \u53ef\u4ee5\u63d0\u4f9b\u7d66\u500b\u4eba\u5b89\u5168\uff0c\u6216\u662f\u7279\u5b9a\u4f7f\u7528\u8005(\u56e0\u70ba\u4f7f\u7528\u8005\u6703\u6709\u81ea\u5df1\u7684IP\uff0c\u56e0\u6b64\u6211\u5011\u80fd\u900f\u904e\u5206\u914d\u7279\u5b9a\u7684IP\u5230\u7279\u5b9a\u7684IPSEC\u7d66\u4ed6\u5b89\u5168\u6a5f\u5236) \u4f8b\u5982\u6709\u500b\u4eba\u7684\u865b\u64ec\u7db2\u8def\u6216\u662f\u5728\u5927\u4f01\u696d\u5e95\u4e0b\u7684\u5b50\u7db2\u8def\u5c31\u80fd\u6d3e\u4e0a\u7528\u5834\u3002 \u8def\u7531\u65b9\u9762\u7684\u61c9\u7528 IPSEC \u80fd\u78ba\u4fdd\u4ee5\u4e0b\u56db\u9805 \u8def\u7531\u5ee3\u64ad\u4f86\u81ea\u6388\u6b0a\u904e\u7684\u8def\u7531\u5668(from authorized router) A router seeking to establish or maintain a neighbor relationship with a router in another routing domain is an authorized router(\u4fdd\u8b49\u76f8\u9130\u7684\u8def\u7531\u5668\u4e5f\u662f\u7d93\u904e\u6388\u6b0a\u7684) \u80fd\u627e\u5230\u6700\u521d\u59cb\u767cIP\u5c01\u5305\u7684router (A redirect message comes from the router to which the initial IP packet was sent ) \u8def\u7531\u66f4\u65b0(routing update)\u4e0d\u6703\u88ab\u507d\u9020 IPSEC\u4e2d\u7684\u8cc7\u6599 \u592a\u591a\u4e86 \u81ea\u5df1\u770b IPSEC\u6240\u63d0\u4f9b\u7684\u670d\u52d9 \u8981\u80fd\u78ba\u4fdd\u4ee5\u4e0b\u529f\u80fd\u53ef\u4ee5\u88ab\u5be6\u65bd\uff0c\u8b6c\u5982 \u5b58\u53d6\u63a7\u5236(Access Control) \u7121\u9023\u7dda\u5b8c\u6574\u6027(Connection-LESS integrity) \u8cc7\u6599\u4f86\u6e90\u8a8d\u8b49(Data origin authentication)\uff0c\u8a8d\u8b49IP\u5c01\u5305\uff0c\u78ba\u4fdd\u771f\u7684\u662f\u7531\u4ed6\u50b3\u904e\u4f86\u7684\uff0c\u4ee5\u53ca\u662f\u5426\u88ab\u4fee\u6539\u904e \u62d2\u7d55\u91cd\u64ad\u653b\u64ca(\u53ef\u4ee5\u7528sequenct number\u4f86\u9810\u9632 \u4e4b\u5f8c\u6703\u63d0\u5230) \u9650\u5236\u6d41\u91cf\u7684\u6a5f\u5bc6\u6027(Limited traffic flow confidentiality) \u5169\u7a2e\u6a21\u5f0f transport mode \u6216\u662f tunnel mode \u5176\u5dee\u5225\u5728\u65bc\u8cc7\u6599\u5c01\u88dd\u7684\u4e0d\u540c(\u5c01\u88dd\u6a5f\u5236\u7684\u4e0d\u540c) \u5dee\u7570\u9805\u76ee transport mode tunnel mode \u4fdd\u8b77\u9805\u76ee upper layer protocols entier IP packet \u4fdd\u8b77\u5c0d\u8c61 host-to-host encapsulation(Encryption), authentication(Auth Header) gateway-to-gateway(or host) \u6a5f\u5236 \u5728\u539f\u6709\u7684IP\u982d\u4e2d\u63d2\u5165\u9069\u7576\u7684IPSEC Header\uff0c\u8cc7\u6599\u64f4\u5145\u91cf\u8f03\u70ba\u5c11\uff0c\u4f46\u662f\u6bcf\u4e00\u500b\u4e3b\u6a5f\u90fd\u8981\u6642\u505aIPSEC\u624d\u53ef\u4ee5\uff0c\u6bd4\u8f03\u5c0d\u65bc\u7528\u6236\u4e0d\u65b9\u4fbf \u76f4\u63a5\u5728\u5916\u5305\u4e00\u500b\u65b0\u7684IP\u982d(src \u81ea\u5df1\u3001dst \u9060\u7aef\uff0c\u8b02\u4e4bnew ip header)\u4ee5\u53ca\u7aef\u53e3\uff0c\u4f46\u5728\u500b\u4eba\u96fb\u8166\u8edf\u9ad4\u4e0d\u9700\u8981\u65b0\u7a31\u6642\u505aIPSEC\uff0c\u53ea\u8981\u5728\u8def\u7531\u5668\u4e0a\u9762\u6709\u5373\u53ef\uff0c\u4f7f\u4e0d\u540c\u7684\u5340\u57df\u7db2\u8def\u9023\u7dda\u9593\u7528IPSEC\uff0c\u5373\u6709\u5b89\u5168\u7684VPN\u9023\u7dda \u5b89\u5168\u95dc\u806f(Security Association) def: \u5728\u5169\u500b\u7db2\u8def\u5be6\u9ad4\u4e4b\u9593\uff0c\u6240\u5efa\u7acb\u8d77\u7684\u5171\u4eab\u7db2\u8def\u5b89\u5168\u5c6c\u6027\u3002(\u4ecb\u65bc\u767c\u9001\u8005\u8207\u63a5\u6536\u8005\u4e4b\u9593\u7684\u55ae\u5411\u95dc\u4fc2) ex: \u5728IP\u5c01\u5305\u4e2d\uff0c\u4ee5\u9418\u9ede\u5730\u5740\u7684IPV4 V6\u5c01\u5305\u4e2d\u7684SPI\u8cc7\u8a0a\u4f5c\u70ba\u5b89\u5168\u95dc\u806f\u7684\u5b9a\u7fa9(SPI \u5b89\u5168\u53c3\u6578 in the enclosed extension header) \u5169\u500b\u91cd\u8981\u7684\u6771\u897f\u4f86\u78ba\u4fdd\u5b89\u5168\u95dc\u806f\u7684\u904b\u4f5c \u5b89\u5168\u95dc\u806f\u8cc7\u6599\u5eab(SAD): \u5b9a\u7fa9\u6bcf\u4e00\u500bSA\u7684\u53c3\u6578(\u4ea6\u5373IPSEC\u6a19\u982d(AH\u6216\u662fESP)\u4e2dSPI\u7684\u6578\u503c)\uff0c\u8209\u51e1\u53c3\u6578\u865f\uff0c\u5e8f\u865f(seq number counter \u9632\u6b62\u91cd\u653e\u653b\u64ca), \u5e8f\u865f\u6ea2\u51fa\u6a19\u793a(seq number counter overflow), \u9632\u91cd\u653e\u653b\u64ca\u8996\u7a97(anti replay window), AH\u3001ESP information, \u6709\u6548\u6642\u9593(SA lifetime), \u5354\u8b70\u6a21\u5f0f(IPSEC protocol mode), \u9019\u689d\u8def\u4e0a\u6700\u5927\u50b3\u8f38\u55ae\u5143(path MTU) \u5b89\u5168\u653f\u7b56\u8cc7\u6599\u5eab(SPD): \u5b58\u653eIPSEC\u7684\u898f\u5247\uff0c\u7528\u4f86\u5b9a\u7fa9\u54ea\u500b\u6d41\u91cf\u8981\u8d70\u54ea\u4e00\u500bIPSEC\uff08a table\uff09 Ipsec \u7684SPD\u548cSAD\u8be6\u89e3 - CSDN\u535a\u5ba2 \u8207\u642d\u914d\u8ab2\u672c\u7684\u5716\u8868\u4e00\u8d77\u770b\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u5728SPD\u4e2d\u67e5\u5230\u6709\u76f8\u7b26\u7684\u4f86\u6e90\u8207\u76ee\u7684\u4ee5\u53ca\u7aef\u53e3\u5f8c\uff0c\u5c31\u53ef\u4ee5\u5957\u7528\u5176\u4e2dSPD\u7684\u898f\u5247\uff0c\u4e5f\u5c31\u662f\u7db2\u5740\u4e2d\u7684\u57f7\u884c\u5354\u8b70\u6216\u662fpdf\u4e2d\u7684action\u3002 \u82f1\u6587\u55ae\u5b57: outbound: \u9001\u53bb\u5916\u9762\u3001\u5411\u5916\u767c\u9001\u7684\uff1binbound: \u9001\u53bb\u88e1\u9762\uff0c\u5411\u5167\u9001\u7684 \u4ee5\u4e0b\u70ba\u6d41\u7a0b\u5716\u5169\u5f35 ESP\u8a73\u7d30\u89e3\u91cb \u5728tunnel mode\u4e2d\u6703\u6709\u4e00\u500b\u65b0\u7684ip header(new ip header) \u9632\u6b62\u91cd\u653e\u653b\u64ca \u5229\u7528\u8996\u7a97\u7684\u6a5f\u5236\uff0c\u5c31\u50cf\u5728\u8a08\u7b97\u6a5f\u7db2\u8def\u6982\u8ad6\u6240\u5b78\u5230\u7684\uff0c\u7576\u6536\u5230\u4e00\u500b\u5c01\u5305\u5f8c\u5c31\u5c07\u8996\u7a97\u5411\u524d\u79fb\uff0c\u7528bool\u8868\u793a\u6709\u6c92\u6709\u6536\u5230\uff0c\u6536\u5230\u524d\u4e00\u5f8c\u525b\u624d\u7684\u5730\u65b9\u5c31\u4e0d\u80fd\u518d\u5ea6\u63a5\u6536\u4e86(\u56e0\u70ba\u8996\u7a97\u5df2\u7d93\u96e2\u958b\u4e86\u90a3\u500b\u7bc4\u570d) \u56e0\u6b64\u80fd\u9632\u6b62\u91cd\u653e\u653b\u64ca \u7d50\u5408\u6578\u500bSA \u55ae\u4e00\u7684SA\u53ea\u80fdAH\u6216\u662fESP\u4f46\u4e0d\u80fd\u540c\u6642\u6709\u6578\u7a2e \u540d\u8a5e\u89e3\u91cb: security assocation bundle(SA\u6346\u5305(?))\uff0c\u4e00\u9023\u4e32\u7684SA\u4f7f\u6d41\u91cf\u901a\u904e\u4f86\u9054\u6210\u60f3\u8981\u7684IPSEC\u670d\u52d9\u3002 \u4e0d\u540c\u7684SA\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u7aef\u9ede\u7d50\u675f\uff0c\u4e5f\u53ef\u4ee5\u5728\u540c\u500b\u3002 \u6709\u5169\u7a2e\u65b9\u6cd5 \u50b3\u8f38\u76f8\u9130(transport adjacency) : \u4ee5\u4e0d\u7528\u5230\u96a7\u9053\u7684\u65b9\u5f0f(?)\u4f86\u5be6\u4f5c\u6bd4\u4e00\u5c64\u6a5f\u5236\u9084\u591a\u7684\u4fdd\u8b77\u5c64\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u5c64\u7684\u5b89\u5168\u6a5f\u5236\u7684\u7d50\u5408(allow only for one level of combination)\u3002 \u8fed\u4ee3\u96a7\u9053(iterated tunneling) : \u4f7f\u7528\u96a7\u9053\u4f86\u6642\u505a\u591a\u5c64\u4fdd\u8b77\u6a5f\u5236\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u53ef\u4ee5\u6709\u5de2\u72c0\u7684\u5b89\u5168\u6a5f\u5236\u7d50\u5408\u3002 ESP wiht authentication\u5728\u5169\u7a2e\u6a21\u5f0f\u4e0b\u7684\u60c5\u6cc1 transport mode: \u8a8d\u8b49\u5728\u6574\u500bIP payload(\u6307IP\u5c01\u5305\u50b3\u8f38\u771f\u6b63\u7684\u5167\u5bb9\u3001\u8cc7\u6599\u672c\u8eab)\uff0c\u4f46\u662fIP\u7684\u982d\u4e26\u6c92\u6709\u88ab\u4fdd\u8b77\u3002 tunnel mode: auth\u5728\u76ee\u7684\u5730\u624d\u6709\uff0c\u6574\u500bIP\u5c01\u5305\u90fd\u88ab\u4fdd\u8b77 \u5169\u500b\u6a21\u5f0f\u90fd\u662f\u5c0d\u7955\u6587\u8a8d\u8b49\uff0c\u4e26\u975e\u660e\u6587 \u50b3\u8f38\u76f8\u9130(transport adjacency) def: \u5167ESP SA\u5916AH SA\u7684\u8907\u5408\u578b\u8a8d\u8b49\u6a5f\u5236\u3002 \u6b64\u8655\u7684ESP\u6c92\u6709\u8a8d\u8b49 \u52a0\u5bc6IP\u7684\u8cc7\u6599(payload) AH\u5247\u662f\u7528\u5728\u50b3\u8f38\u6a21\u5f0f(transport mode)\uff0c (\u53ef\u80fd\u8003):\u512a\u02c7\u9ede\u5c31\u662f\uff0c\u8a8d\u8b49\u8f03\u591a\u7684field\uff1b\u7f3a\u9ede\u5c31\u662f\uff0c\u6709\u5169\u500bSA\u53ef\u80fdoverhead\u591a\u4e86\u4e9b\uff0c\u6548\u80fd\u964d\u4f4e\uff0c\u9019\u4e5f\u662f\u4e00\u500btrade off \u5148\u52a0\u5bc6(\u5167ESP)\u518d\u8a8d\u8b49(\u5916AH)(\u4e0b\u9762\u90a3\u500b\u4e8b\u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u539f\u56e0\u4e4b\u5f8c\u8a73\u8ff0) \u50b3\u8f38\u8207\u96a7\u9053\u8907\u5408(transport-tunnel bundle) def: \u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u63a1\u7528\u5167AH transport SA, \u5916ESP tunnel SA\uff0c\u6709\u4e9b\u539f\u56e0\u5982\u4e0b \u7ac4\u6539\u8cc7\u6599\u7d93\u7531\u9a57\u8b49\u4e00\u5b9a\u6703\u767c\u73fe\uff0c\u6545\u4e0d\u53ef\u80fd\uff0c\u6240\u4ee5\u4e5f\u4e0d\u9700\u8981\u5148\u52a0\u5bc6\uff0c\u5148\u8a8d\u8b49\u5c31\u597d\u4e86(\u5982\u679c\u6709\u4eba\u6514\u622a\u4e26\u4fee\u6539\u9a57\u8b49\u7684\u8cc7\u6599\u4e00\u5b9a\u6703\u88ab\u767c\u73fe) \u5148\u8a8d\u8b49\u5f8c\u5c31\u53ef\u4ee5\u628a\u8a8d\u8b49\u8cc7\u8a0a\u5b58\u5728\u76ee\u7684\u7aef(destination)\uff0c\u63d0\u4f9b\u5c07\u4f86\u8b58\u5225\u7528 C * \u7d50\u679c\u5c31\u662f\u6574\u500b\u8a8d\u8b49\u7684inner packet\u90fd\u88ab\u52a0\u5bc6\u4e86\uff0c\u800c\u4e14\u9084\u9644\u4e0a\u4e86\u65b0\u7684ItP\u982d C \u7db2\u8def\u9470\u5319\u4ea4\u63db(internet key exchange, IKE) \u6709IPSEC SA\u4e5f\u6709 IKE SA \u5169\u500b\u662f\u4e0d\u4e00\u6a23\u7684\u6771\u897f\uff0c\u5169\u968e\u6bb5\u5354\u5546\uff0c\u5148\u5354\u5546\u51fa\u4e00\u500bIKESA \u63a5\u8457\u518d\u524d\u5f80IPSEC SA \u95dc\u9375\u7684\u5169\u500b\u8981\u7d20: \u9470\u5319\u6c7a\u8b70(key determination) \u548c \u9470\u5319\u5206\u767c(key distribution)\u901a\u5e38 \u56db\u500b\u9470\u5319\u5728\u5169\u500b\u61c9\u7528\u7a0b\u5f0f\u7684\u6e9d\u901a\u9593 \u5354\u5546\u5167\u5bb9 \u52a0\u5bc6\u7b97\u6cd5 hash\u7b97\u6cd5 \u8a8d\u8b49\u65b9\u5f0f PRF\u7b97\u6cd5(\u7528\u4ee5\u7522\u751f\u52a0\u89e3\u5bc6\u5bc6\u8981) DH \u9470\u5319\u4ea4\u63db\u7b97\u6cd5\u6848\u53c3\u6578 \u9470\u5319\u9577\u5ea6 \u5169\u7a2e\u9470\u5319\u7ba1\u7406\u8fa6\u6cd5 \u624b\u52d5: \u624b\u52d5\u5c07\u9470\u5319\u914d\u7f6e\uff0c\u9069\u7528\u65bc\u5c0f\u578b\u4e14\u8b8a\u63db\u8f03\u5c11(small and static)\u7684\u74b0\u5883(\u56e0\u70ba\u5982\u679c\u8b8a\u5316\u5f88\u5927\u8981\u4e00\u76f4\u624b\u52d5\u91cd\u65b0\u914d\u7f6e\u76f8\u7576\u9ebb\u7169) \u81ea\u52d5: \u53ca\u6642\u4f9b\u61c9\u9700\u6c42(on-demand)\u7684\u9470\u5319\u5efa\u7acb(\u9700\u8981\u7684\u6642\u5019\u624d\u62ff) ISAKMP/OAKLEY IPSEC\u7684\u9810\u8a2d\u9470\u5319\u7ba1\u7406\u6a5f\u5236 ISAKMP: \u63d0\u4f9b\u4e00\u500b\u67b6\u69cb(framework)\u4f86\u5efa\u7acb\u5b89\u5168\u95dc\u806f(SA)\u548c\u52a0\u5bc6\u91d1\u9470 OAKLEY: \u4f7fDH\u9470\u5319\u4ea4\u63db\u540c\u6642\u53c8\u80fd\u4fdd\u969c\u5b89\u5168(Oakley\u53ef\u8996\u70ba\u662fDiffie-Hellman\u91d1\u9470\u4ea4\u63db\u6cd5\u7684\u52a0\u5f37\u7248\uff0c\u539f\u7406\u76f8\u540c\u4f46\u63d0\u4f9b\u8f03\u9ad8\u7684\u5b89\u5168\u6027\u3002)\uff0c\u4e5f\u4e0d\u9650\u5236\u7279\u5b9a\u683c\u5f0f( does not dictate specific formats)\uff0c\u63d0\u4f9bprotocal, format\u4f86\u5546\u91cf(negotiate)\u5b89\u5168\u5c6c\u6027(security attribute)\uff0c\u5305\u542b\u4e00\u4e9b\u80fd\u6709\u5404\u5f0f\u5404\u6a23\u7684key exchange algo\u7684\u8a0a\u606f\u96c6\u5408(message set) \u5728\u9019\u4e9b\u6a5f\u5236\u4e2d\u6703\u6709Nonce\u4f86\u78ba\u4fdd\u91cd\u653e\u653b\u64ca All the pics , images credits to the original author, I only use it for the education purpose, please DO NOT distribute Ch.10 Malicious Software \u7c97\u7565\u5206\u985e \u5148\u4ee5\u5982\u4f55\u50b3\u64ad\u5206\u985e\uff0c\u518d\u4ee5\u50b3\u64ad\u5230\u76ee\u6a19\u5f8c\u505a\u4ec0\u9ebc\u4f86\u5206\u985e \u6216\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5206\u985e \u9700\u4e0d\u9700\u8981\u5bc4\u751f\u65bchost program(\u5bbf\u4e3b)\uff0c\u4f8b\u5982\u75c5\u6bd2\uff1b\u6216\u662f\u53ef\u4ee5\u81ea\u7531\u884c\u52d5\u7684\u5982\u7279\u6d1b\u4f0a\u6728\u99ac\u6216bot\u7a0b\u5f0f \u4e0d\u6703\u81ea\u6211\u8907\u88fd\uff0c\u4f8b\u5982\u6728\u99ac\u548c\u5783\u573e\u90f5\u4ef6\uff1b\u6703\u81ea\u6211\u5fa9\u81ea\u4f8b\u5982\u8815\u87f2\u548c\u75c5\u6bd2 \u62b5\u9054\u653b\u64ca\u76ee\u6a19\u505a\u4ec0\u9ebc \u70b8\u6389\u7cfb\u7d71 \u63a7\u5236\u6a5f\u5668\u4f7f\u5176\u6210\u70ba\u6bad\u5c4d\u96fb\u8166 \u7aca\u53d6\u8cc7\u6599 \u92b7\u8072\u533f\u8de1\uff0c\u4ee5\u514d\u88ab\u8ffd\u8e64\u767c\u73fe \u8907\u5408\u653b\u64ca\u6a21\u5f0f \u767c\u5c55\u53f2 \u4ee5\u524d\u958b\u767c\u60e1\u610f\u8edf\u9ad4\u7684\u96e3\u5ea6\u9817\u9ad8\uff0c\u4f46\u96a8\u8457\u958b\u767c\u5957\u4ef6\u7684\u666e\u53ca\uff0c\u73fe\u4eca\u5bb9\u6613\u591a\u4e86\uff0c\u5c31\u9023\u4e00\u822c\u7684\u78bc\u8fb2\u4e5f\u90fd\u505a\u5f97\u5230 \u8fd1\u5e74\u4f86\u99ed\u5ba2\u5f9e\u500b\u4eba\u8b8a\u6210\u7d44\u7e54\u7b49\u7d1a\u72af\u7f6a \u96fb\u8166\u75c5\u6bd2 \u4ecb\u7d39 \u4e00\u7a2e\u5bc4\u751f\u6027(parasitic)\u7684\u7a0b\u5f0f\uff0c\u81ea\u6211\u57f7\u884c \u53ef\u4ee5\u611f\u67d3\u5176\u4ed6\u7a0b\u5f0f\u3001\u57f7\u884c\u6a94\u7b49\u7b49\uff0c\u4e26\u4e14\u6709\u53ef\u80fd\u7ac4\u6539\u4ed6 \u67b6\u69cb \u611f\u67d3\u6a5f\u5236: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u611f\u67d3\u3001\u50b3\u64ad\uff0c\u6709\u6642\u4e5f\u53eb\u505ainfction vector \u89f8\u767c: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u88ab\u6253\u958b\uff0c\u6709\u6642\u4e5f\u53eb\u505alogic bomb payload: \u75c5\u6bd2\u505a\u4e86\u4ec0\u9ebc \u968e\u6bb5 \u4f11\u7720(dormant): idle\u4e2d\uff0c \u4e0d\u662f\u6240\u6709\u75c5\u6bd2\u90fd\u6709\u9019\u500b\u968e\u6bb5 \u50b3\u64ad(propagation): \u8907\u88fd\u5230\u5176\u4ed6\u7a0b\u5f0f\u3001\u78c1\u5340\u4e2d \u6fc0\u767c(triggering): \u75c5\u6bd2\u88ab\u555f\u52d5\u4e86 \u57f7\u884c(execution): \u505a\u58de\u4e8b \u58d3\u7e2e\u75c5\u6bd2(compression virus): \u5c07\u81ea\u5df1\u89e3\u58d3\u7e2e\u9644\u52a0(prepend)\u5230\u5176\u4ed6\u57f7\u884c\u6a94\u4e4b\u4e2d\uff0c\u53ef\u4ee5\u7528\u4f86\u898f\u907fsize checking\u7684\u6383\u6bd2\u65b9\u5f0f \u4ee5\u653b\u64ca\u7684\u76ee\u6a19\u5206\u985e\u75c5\u6bd2 \u611f\u67d3\u958b\u6a5f\u78c1\u5340: \u4f8b\u5982MBR \u611f\u67d3\u6a94\u6848: \u611f\u67d3OS\u3001shell\u7b49\u91cd\u8981\u6a94\u6848 \u5de8\u96c6: \u611f\u67d3\u61c9\u7528\u7a0b\u5f0f\u9700\u8981\u7684macro\uff0c\u5f71\u97ff\u6587\u4ef6\u7684\u4f7f\u7528 \u591a\u89d2\u5ea6: \u591a\u7a2e\u611f\u67d3\u6a21\u5f0f \u4ee5\u75c5\u6bd2\u5982\u4f55\u898f\u907f\u5075\u6e2c\u4f86\u5206\u985e \u52a0\u5bc6(encryption): \u75c5\u6bd2\u7684\u67d0\u90e8\u5206\u7522\u751f\u52a0\u5bc6\u7684\u9470\u5319\uff0c\u4e26\u52a0\u5bc6\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u800c\u7576\u611f\u67d3\u6210\u529f\u8981\u57f7\u884c\u7684\u6642\u5019\u5c31\u6703\u4f7f\u7528\u7576\u521d\u7684\u9470\u5319\u4f86\u89e3\u5bc6\u75c5\u6bd2\u4e26\u4e14\u57f7\u884c\u4ed6\uff0c\u6b64\u5916\u6bcf\u7576 \u75c5\u6bd2\u7e41\u6b96\u7684\u6642\u5019\u9019\u500b\u52a0\u5bc6\u7684\u9470\u5319\u5c31\u6703\u6539\u8b8a\uff0c\u662f\u6545\u52a0\u5bc6\u7684\u7d50\u679c\u4e5f\u6703\u4e0d\u4e00\u6a23\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u75c5\u6bd2\u7279\u5075\u78bc\u6aa2\u6e2c(no constant bit pattern value) \u96b1\u533f(stealth): \u4f7f\u9632\u6bd2\u8edf\u9ad4\u7121\u6cd5\u5075\u6e2c\uff0c\u6574\u500b\u505a\u7684\u4e8b\u60c5(payload)\u4ee5\u53ca\u75c5\u6bd2\u672c\u8eab\u90fd\u96b1\u85cf\u3002 \u591a\u578b\u614b(polymorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u56e0\u6b64\u96e3\u4ee5\u7528\u75c5\u6bd2\u7279\u5fb5\u78bc\u4f86\u6aa2\u67e5\u3002 \u7a81\u8b8a(metamorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u6709\u53ef\u80fd\u5c07\u81ea\u5df1\u5168\u90e8\u91cd\u65b0\u6539\u5beb\uff0c\u5305\u542b\u884c\u70ba\u4ee5\u53ca\u6a23\u8c8c\uff0c\u4f7f\u5f97\u96e3\u4ee5\u5075\u6e2c\u3002 \u5de8\u96c6\u4ee5\u53ca\u8173\u672c\u75c5\u6bd2 \u5de8\u96c6\u75c5\u6bd2\u53ef\u4ee5 \u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\u7a0b\u5f0f\u78bc \u56b4\u91cd\u5371\u5bb3\u7684\u539f\u56e0 \u5e73\u53f0\u7121\u95dc\u6027(platform- INDEPENDENT )(\u75c5\u6bd2\u53ef\u4ee5\u8de8\u5e73\u53f0) \u611f\u67d3\u6587\u4ef6(\u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\uff0c\u4f7f\u6587\u4ef6\u7121\u6cd5\u9806\u5229\u904b\u884c)\uff0c\u800c\u975e\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc \u9019\u4e9b\u6587\u4ef6\u90fd\u5f88\u5e38\u898b\uff0c\u4f8b\u5982word(\u593e\u5e36\u65bc\u5176\u4e2d)\uff0c\u4f7f\u5176\u6563\u64ad\u5bb9\u6613 \u56e0\u70ba\u662f\u611f\u67d3\u6587\u4ef6\u800c\u975e\u7cfb\u7d71\uff0c\u56e0\u6b64\u8f03\u96e3\u4ee5\u963b\u6b62\u6563\u64ad \u96fb\u8166\u8815\u87f2 \u4e00\u500b\u6703\u81ea\u5df1\u627e\u6a5f\u5668\u4f86\u611f\u67d3\u7684\u7a0b\u5f0f \u70ba\u4e86\u8907\u88fd\uff0c\u53ef\u80fd\u6703\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4f86\u63a5\u5230\u9060\u7aef\u6a5f\u5668 \u96fb\u90f5\u3001\u6a94\u6848\u50b3\u8f38 \u9060\u7aef\u57f7\u884c \u9060\u7aef\u6a94\u6848\u63a5\u89f8(remote file access) \u9060\u7aef\u767b\u5165(remote login) \u8815\u87f2\u7684\u904b\u4f5c\u968e\u6bb5\u548c\u75c5\u6bd2\u4e00\u6a23\uff0c\u770b\u4e0a\u65b9\u63d0\u904e\u7684\u5373\u53ef \u8207\u96fb\u8166\u75c5\u6bd2\u4e0d\u540c\u7684\u662f\uff0c\u96fb\u8166\u8815\u87f2\u4e0d\u9700\u8981\u9644\u5728\u5225\u7684\u7a0b\u5f0f\u5167\uff0c\u53ef\u80fd\u4e0d\u7528\u4f7f\u7528\u8005\u4ecb\u5165\u64cd\u4f5c\u4e5f\u80fd\u81ea\u6211\u8907\u88fd\u6216\u57f7\u884c \u8815\u87f2\u5982\u4f55\u767c\u73fe\u76ee\u6a19 \u96a8\u6a5f: \u96a8\u6a5f\u611f\u67d3\u4e0d\u540cIP\uff0c\u6703\u9020\u6210\u5f88\u5927\u7684\u7db2\u8def\u6d41\u91cf\uff0c\u5c31\u7b97\u5728\u653b\u64ca\u5c55\u958b\u524d(\u56e0\u70ba\u8981\u4e00\u76f4\u96a8\u6a5f\u627e\u76ee\u6a19\uff0c\u8f03\u70ba\u6df7\u4e82\uff0c\u9817\u5403\u7db2\u8def\u6d41\u91cf\u8cc7\u6e90)\uff0c\u4e5f\u53ef\u4ee5\u6aa2\u6e2c\u51fa \u76ee\u6a19\u5217\u8868(hit list): \u653b\u64ca\u8005\u5df2\u7d93\u6709\u653b\u64ca\u5217\u8868\uff0c\u63a5\u8457\u6309\u8868\u64cd\u8ab2\uff0c\u56e0\u70ba\u5df2\u7d93\u5148\u5efa\u597d\u653b\u64ca\u5217\u8868\uff0c\u5728scan\u6a5f\u5668\u7684\u6642\u5019\u5c31\u5f88\u5feb\uff0c\u5f88\u96e3\u6293\u51fa\u611f\u67d3\u7279\u5fb5 \u62d3\u6a38\u7684(topological): \u7528\u5df2\u7d93\u611f\u67d3\u7684\u6a5f\u5668\u4f86\u627e\u51fa\u5176\u4ed6\u53ef\u653b\u64ca\u76ee\u6a19 \u5340\u57df\u5b50\u7db2(local subnet):\u5982\u679chost\u662f\u5728\u9632\u706b\u7246\u5f8c\u88ab\u611f\u67d3\u7684\uff0c\u8815\u87f2\u6703\u5229\u7528\u5b50\u7db2\u8def\u7684\u67b6\u69cb\u627e\u4ed6\u7684\u5b50\u7db2\u8def\u7576\u76ee\u6a19 \u8815\u87f2\u7684\u6280\u8853(worm technology) \u8de8\u5e73\u53f0 \u591a\u653b\u64ca(multi-exploit): \u4ee5\u591a\u7a2e\u7ba1\u9053\u6ef2\u5165\u7cfb\u7d71 \u5feb\u901f\u50b3\u64ad(ultrafast spreading): \u5229\u7528\u5404\u7a2e\u65b9\u6cd5\u52a0\u5feb\u50b3\u64ad\u901f\u5ea6\uff0c\u4f86\u611f\u67d3\u6108\u591a\u4e3b\u6a5f\u6108\u597d \u591a\u5f62: \u70ba\u4e86\u898f\u907f\u76e3\u6e2c\uff0c\u6bcf\u4e00\u500b\u8907\u88fd\u904e\u7684\u8815\u87f2\u90fd\u6703\u6709\u529f\u80fd\u4e00\u81f4\u4f46\u662f\u65b0\u7684\u7a0b\u5f0f\u78bc\u5167\u5bb9 \u7a81\u8b8a: \u6539\u8b8a\u5916\u89c0\uff0c\u6216\u662f\u5728\u751f\u614b\u968e\u6bb5\u6709\u4e0d\u540c\u7684\u7279\u5fb5 \u4ea4\u901a\u5de5\u5177(transport vehicle): \u56e0\u70ba\u8815\u87f2\u5bb9\u6613\u5927\u91cf\u611f\u67d3\u6a5f\u5668\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f5c\u70ba\u60e1\u610fpayload\u7684\u6563\u4f48\u5de5\u5177 \u884c\u52d5\u7684\u7a0b\u5f0f\u78bc(mobile code) def: (QQ \u597d\u96e3\u7ffb\u8b6f\uff0c\u76f4\u63a5\u786c\u80cc\u5b9a\u7fa9\u5427): Refers to programs that can be shipped unchanged to a heterogeneous collection of platforms and execute with identical semantics\uff0c\u8de8\u5e73\u53f0\u4f46\u662f\u529f\u80fd\u76f8\u540c\u3002(\u8b93\u7a0b\u5f0f\u53ef\u4ee5\u88dd\u8f09\u5230\u5404\u7a2e\u4e0d\u540c\u7684\u5e73\u53f0\u800c\u4e14\u57f7\u884c\u7684\u76ee\u7684\u901a\u80fd\u76f8\u540c) \u53ef\u4f5c\u70ba\u6728\u99ac\u3001\u8815\u87f2\u3001\u75c5\u6bd2\u7684\u50b3\u64ad\u6a5f\u5236 \u5e38\u898b\u7684\u653b\u64ca\u624b\u6cd5 cross-site scripting: \u5229\u7528\u7db2\u9801\u7684\u5b89\u5168\u6f0f\u6d1e\u5c07\u60e1\u610f\u8173\u672c\u6ce8\u5165\u5230\u7db2\u9801\u4e2d\u3002 \u4e92\u52d5\u5f0f\u7db2\u9801(interactive, dynamic web) email \u9644\u4ef6 \u5f9e\u5947\u602a\u7684\u5730\u65b9\u4e0b\u5947\u602a\u7684\u6587\u4ef6(\u4f8b\u5982\u91d1\u5c71\u6bd2X\uff0c36X\u9632\u6bd2) \u4e0b\u8f09\u611f\u67d3(driven-by-downloads) \u653b\u64ca\u8005\u5229\u7528\u7db2\u9801\u7684\u6f0f\u6d1e\uff0c\u8b93\u4f7f\u7528\u8005\u700f\u89bd\u53d7\u63a7\u5236\u7684\u7db2\u9801\u5f8c\uff0c\u4fbf\u53ef\u4ee5\u5e6b\u4f7f\u7528\u8005\u5b89\u88dd\u60e1\u610f\u8edf\u9ad4(\u4f8b\u5982\u90a3\u7a2e\u4e00\u6253\u958b\u5c31\u8df3\u51fa\u6771\u897f\u5e6b\u4f60\u5b89\u88ddhao123\u7684\u7db2\u7ad9) \u5783\u573e\u90f5\u4ef6 \u6700\u8fd1\u7684\u5783\u573e\u96fb\u90f5\u5e38\u5e38\u7531\u6bad\u5c4d\u7db2\u8def\u767c\u9001 \u5783\u573e\u90f5\u7c21\u4e5f\u9069\u5408\u4e58\u8f09\u60e1\u610f\u8edf\u9ad4 \u4e5f\u53ef\u4ee5\u91e3\u9b5a\uff0c\u7db2\u8def\u91e3\u9b5a \u6728\u78bc\u8edf\u9ad4 def(wikipedia): \u7279\u5fb5\u8207\u7279\u6d1b\u4f0a\u6728\u99ac\u4e00\u6a23\u5177\u6709\u507d\u88dd\u6027\uff0c\u8868\u9762\u4e0a\u6c92\u6709\u5371\u5bb3\u3001\u751a\u81f3\u9084\u9644\u6709\u4f7f\u7528\u8005\u9700\u8981\u7684\u529f\u80fd\uff0c\u537b\u6703\u5728\u4f7f\u7528\u8005\u4e0d\u7d93\u610f\u9593\uff0c\u5c0d\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u7522\u751f\u7834\u58de\u6216\u7aca\u53d6\u8cc7\u6599\uff0c\u7279\u5225\u662f\u4f7f\u7528\u8005\u7684\u5404\u7a2e\u5e33\u6236\u53ca\u53e3\u4ee4\u7b49\u91cd\u8981\u4e14\u9700\u8981\u4fdd\u5bc6\u7684\u8cc7\u8a0a\uff0c\u751a\u81f3\u63a7\u5236\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u3002 \u85cf\u6709 \u6211\u96b1\u85cf\u7684\u653b\u64ca\u7a0b\u5f0f\u78bc(\u5c31\u50cf\u6728\u99ac\u88e1\u9762\u7684\u58eb\u5175) \u7121\u6cd5\u81ea\u52d5\u64cd\u8f1f\uff0c\u8981\u6709\u9060\u7aefserver\u4f86\u57f7\u884c \u53ef\u4ee5\u9593\u63a5\u5730\u9054\u6210\u653b\u64ca(\u5c31\u50cf\u8981\u7d93\u7531\u6728\u99ac\u9032\u5230\u7279\u6d1b\u4f0a\u57ce) \u600e\u9ebc\u500b\u9593\u63a5?? \u7dad\u57fa\u767e\u79d1\u7684\u8aaa\u660e: \u904b\u884c\u4e86\u6728\u99ac\u7a0b\u5f0f\u7684\u670d\u52d9\u7aef\u4ee5\u5f8c\uff0c\u6703\u7522\u751f\u4e00\u500b\u6709\u8457\u5bb9\u6613\u8ff7\u60d1\u7528\u6236\u7684\u540d\u7a31\u7684\u9032\u7a0b\uff0c\u6697\u4e2d\u6253\u958b\u57e0\uff0c\u5411\u6307\u5b9a\u5730\u9ede\u767c\u9001\u8cc7\u6599\uff08\u5982\u7db2\u8def\u904a\u6232\u7684\u5bc6\u78bc\uff0c\u5373\u6642\u901a\u8a0a\u8edf\u9ad4\u5bc6\u78bc\u548c\u7528\u6236\u4e0a\u7db2\u5bc6\u78bc\u7b49\uff09\uff0c\u99ed\u5ba2\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u9019\u4e9b\u6253\u958b\u7684\u57e0\u9032\u5165\u96fb\u8166\u7cfb\u7d71\u3002 \u6709\u4ee5\u4e0b\u4e09\u7a2e\u6a21\u5f0f: \u8b93\u539f\u6709\u7684\u7a0b\u5f0f\u7e7c\u7e8c\u6b63\u5e38\u57f7\u884c\uff0c\u4f46\u662f\u4e5f \u984d\u5916\u5730 \u57f7\u884c\u60e1\u610f\u653b\u64ca \u57f7\u884c\u539f\u6709\u7684\u7a0b\u5f0f\uff0c\u4f46\u537b\u4fee\u6539\u4ed6 \u7528\u4f86\u6b3a\u9a19\u7cfb\u7d71 (\u507d\u88dd\u5728\u6b63\u5e38\u7684\u7a0b\u5f0f\u4e4b\u4e0b) \u76f4\u63a5\u53d6\u4ee3\u6389\u539f\u6709\u7684\u7a0b\u5f0f\u641e\u7834\u58de \u60e1\u610f\u8edf\u9ad4\u6703\u505a\u7684\u50b7\u5bb3(payload) system corruption: (\u81ea\u5df1\u770bXD) attack agent: \u60e1\u610f\u7a0b\u5f0f\u4f54\u64da(\u597d\u50cf\u53db\u8ecd\u4e00\u6a23)\u4e86\u7db2\u9801\u6216\u662f\u670d\u52d9\uff0c\u5728\u7528\u88ab\u5360\u64da\u7684\u7db2\u9801\u6216\u662f\u670d\u52d9\u4f86\u767c\u52d5\u653b\u64ca\uff0c\u56e0\u70ba\u662f\u4f54\u64da\u4ed6\u4eba\u7684\u5730\u76e4\u6240\u4ee5\u96e3\u4ee5\u6eaf\u6e90 attack agent ex: zombie, botnet information theft:\u7aca\u53d6\u500b\u8cc7\uff0c\u4f8b\u5982 \u7db2\u8def\u91e3\u9b5a(phishing): \u5167\u5bb9\u4ee5\u5047\u4e82\u771f\u4f7f\u53d7\u5bb3\u8005\u4e0a\u7576 \u9b5a\u53c9\u91e3\u9b5a(spear-phishing) wiki \uff0c\u901a\u5e38\u6536\u96c6\u7684\u8cc7\u6599\u6703\u6bd4\u4e00\u822c\u8cc7\u6599\u66f4\u654f\u611f\u6a5f\u5bc6\u3002 \u9375\u76e4\u5074\u9304: \u6d41\u51fa\u8cc7\u6599 \u9593\u8adc\u8edf\u9ad4(spyware): \u5077\u5077\u76e3\u63a7 \u5077\u5077\u9032\u5165\u7cfb\u7d71(stealthing) \u5f8c\u9580 def : \u9867\u540d\u601d\u7fa9\uff0c\u8d70\u5f8c\u9580\uff0c\u5c31\u662f\u53ef\u4ee5\u4e0d\u7528\u904e\u8edf\u9ad4\u5e38\u898f\u7684\u5b89\u5168\u6027\u6a5f\u5236\u4f86\u53d6\u5f97\u7cfb\u7d71\u63a7\u5236\u3002 \u900f\u904e\u4e00\u4e9b\u975e\u6a19\u6e96\u7684\u7aef\u53e3(nonstandard port)\u4f86\u7aca\u807d\u4ee5\u53ca\u6f5b\u5165\u3002 (rootkit) def : \u4e00\u5957\u8edf\u4ef6\u5de5\u5177\uff0c\u4f7f\u672a\u7d93\u6388\u6b0a\u7684\u7528\u6236\u80fd\u5920\u5728\u672a\u88ab\u6aa2\u6e2c\u5230\u7684\u60c5\u6cc1\u4e0b\u7372\u5f97\u8a08\u7b97\u6a5f\u7cfb\u7d71\u7684\u63a7\u5236\u6b0a\u3002 \u5077\u5077\u5730(in a stealthy way)\u7834\u58de\u6216\u4fee\u6539\u4f7f\u7528\u8005\u7684\u6b63\u5e38\u529f\u80fd \u653b\u64ca\u8005\u80fd\u53d6\u5f97\u96fb\u8166\u7684\u63a7\u5236\u6b0a: \u5305\u542b\u76e3\u63a7\u7e69\u7e8c\u3001\u6539\u8b8a\u7a0b\u5f0f\u6216\u6a94\u6848\u3001\u6536\u767c\u7db2\u8def\u6d41\u91cf\u3001\u53d6\u5f8c\u9580\u7a0b\u5f0f\u63a7\u5236\u6b0a\u3002 \u5206\u70ba\u4ee5\u4e0b\u5e7e\u7a2e \u4e00\u81f4\u7684(persistent) \u53ea\u5b58\u5728\u8a18\u61b6\u9ad4(memory based): \u958b\u6a5f\u5f8c\u5c31\u6c92\u7528\u4e86 \u4f7f\u7528\u8005\u6a21\u5f0f(user mode): \u53ef\u4ee5\u547c\u53ebAPI\u4e26\u4e14\u4fee\u6539\u4ed6\u7684\u7d50\u679c \u6838\u5fc3\u6a21\u5f0f(kernal mode): \u53ef\u4ee5\u963b\u65b7\u547c\u53ebOS API \u865b\u64ec\u6a5f\u70ba\u4e3b(virtual machine based): \u81ea\u884c\u5b89\u88dd\u4e00\u500bVM\u518d\u628a\u4f7f\u7528\u8005\u7684OS\u5305\u5728\u88e1\u9762\u6aa2\u6e2c\u3002 \u5916\u90e8\u6a21\u5f0f(external mode): \u5b58\u53d6\u6216\u7ac4\u6539\u786c\u9ad4\u8cc7\u6e90(\u5982BIOS) \u6bad\u5c4d\u7db2\u8def\u7684\u4f7f\u7528(use of bots) DDoS(\u63a7\u5236\u591a\u53f0\u4e00\u8d77\u6d88\u8017\u6d41\u91cf\uff0c\u767c\u52d5\u653b\u64ca) spamming \u7aba\u63a2\u6d41\u91cf(sniffing traffic) \u9375\u76e4\u5074\u9304(key logging) \u88dd\u7db2\u9801\u63d2\u4ef6(hao123) \u653b\u64caIRC\u7db2\u8def \u64cd\u5f04\u7db2\u9801\u904a\u6232\u6216\u6295\u7968 \u5c0d\u65bc\u60e1\u610f\u8edf\u9ad4\u7684\u5c0d\u7b56 \u78ba\u4fdd\u96fb\u8166\u7cfb\u7d71\u662f\u6700\u65b0\u7684\uff0c\u56e0\u70ba\u53ef\u80fd\u6703\u6709\u5f88\u591a\u66f4\u65b0\u6703\u88dc\u8db3\u6f0f\u6d1e \u78ba\u8a8d\u6a94\u6848\u7684\u5b58\u53d6\u6b0a\u9650\uff0c\u4ee5\u63a7\u5236\u5728\u88e1\u9762\u7684\u8cc7\u6599\uff0c\u5426\u5247\u4efb\u610f\u4eba\u90fd\u53ef\u4ee5\u5f97\u5230\u8cc7\u6599\u7684\u8a71\u592a\u5371\u96aa \u6383\u6bd2\u8edf\u9ad4\u7684\u6f14\u9032 host-based scanner \u4ee5\u4e3b\u6a5f\u70ba\u4e3b\u7684 \u7b2c\u4e00\u4ee3: \u6700\u7c21\u55ae\u7684\u6383\u63cf\u65b9\u5f0f\uff0c\u9700\u8981\u75c5\u6bd2\u7c3d\u540d(\u7279\u5fb5) \u7b2c\u4e8c\u4ee3: \u555f\u767c\u5f0f(heuristic)\uff0c\u627e\u5c0b\u53ef\u80fd\u7684\u60e1\u610f\u8edf\u9ad4\uff0cintegrity checking \u7b2c\u4e09\u4ee3: \u6aa2\u67e5\u6d3b\u52d5\uff0c\u4ee5\u6d3b\u52d5\u4f86\u5075\u6e2c\u60e1\u610f\u8edf\u9ad4\u800c\u975e\u4ee5\u7d50\u69cb(\u56e0\u70ba\u4ed6\u5011\u53ef\u80fd\u7a81\u8b8a\uff0c\u7d50\u69cb\u592a\u4e94\u82b1\u516b\u9580\u4e86) \u7b2c\u56db\u4ee3: \u5168\u9762\u9632\u79a6(XD??) host-based + behavor-blocking def : \u548cOS\u7d50\u5408\uff0c\u5373\u6642\u6aa2\u6e2c \u627e\u51fa\u6f5b\u5728\u7684\u60e1\u610f\u8edf\u9ad4\uff0c\u5728\u767c\u4f5c\u524d\u5c31\u5148\u64cb\u4e0b(\u9632\u60a3\u672a\u7136) \u9650\u5236: (\u53ef\u80fd\u8003) \u56e0\u70ba\u60e1\u610f\u7a0b\u5f0f\u78bc\u5fc5\u9808\u8981\u76ee\u6a19\u6a5f\u5668\u57f7\u884c(\u81f3\u5c11\u8981\u6709\u57f7\u884c) \u6700\u4f4e\u9650\u5ea6\u4e00\u5b9a\u8981\u4e00\u9ede\u9ede\u5148\u8dd1\u904e\uff0c\u56e0\u6b64\u5728\u88ab\u6aa2\u6e2c\u51fa\u4f86\u7684\u6642\u5019\u53ef\u80fd\u5df2\u7d93\u9020\u6210\u4e86\u90e8\u5206\u640d\u5bb3 perimeter-scanning \u901a\u5e38\u6703\u5728\u9632\u706b\u7246\u4e0a\u57f7\u884c\uff0c\u4f8b\u5982\u5728email web proxy\u4e0a \u5169\u7a2e\u76e3\u6e2c\u65b9\u5f0f \u5165\u53e3\u76e3\u6e2c(ingress): \u5728\u4f01\u696d\u7db2\u8def\u8207\u5916\u7db2\u7684\u4ea4\u754c\uff0c\u4f8b\u5982border router\u3001external firewall\u7684\u4e00\u90e8\u5206 \u51fa\u53e3\u76e3\u6e2c(egress): \u4e5f\u662f\u5728\u4ea4\u754c\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u6aa2\u6e2c\u51fa\u767c\u7684\u6d41\u91cf\uff0c\u770b\u770b\u6709\u6c92\u6709\u7570\u5e38 \u53ef\u4ee5\u627e\u5230\u653b\u64ca\u7684\u4f86\u6e90 \u5c0d\u6297\u8815\u87f2 A\u7b49\u7d1a: \u7279\u5fb5\u70ba\u4e3b(signature-based) B\u7b49\u7d1a: \u904e\u6ffe\u70ba\u4e3b(filter-based): \u548cA\u985e\u4f3c\u4f46\u662f\u9760\u8815\u87f2\u7684\u5167\u5bb9\u800c\u975esignature C\u7b49\u7d1a: \u6709\u6548 \u8f09\u8377 \u70ba\u4e3b(payload): \u770b\u770b\u767c\u51fa\u7684 \u5c01\u5305 \u662f\u5426\u6709worm D\u7b49\u7d1a: threshold random walk(TRW): \u96a8\u6a5f\u6307\u5b9a\u76e3\u6e2c\uff0c\u96a8\u6a5f\u6307\u5b9a\u67d0\u500b\u9023\u7dda\u4f86\u6aa2\u67e5\u5979 E\u7b49\u7d1a: \u983b\u7387\u9650\u5236(rate limiting): \u56e0\u70ba\u8815\u87f2\u8981\u6383\u63cf\u76ee\u6a19\uff0c\u6240\u4ee5\u53ef\u4ee5\u9650\u5236scan\u985e\u578b(scan like)(\u6216\u662f\u5230\u67d0\u6a5f\u5668)\u7684\u6d41\u91cf\u4f86\u907f\u514d\u8815\u87f2\u7e7c\u7e8c\u64f4\u6563 F\u7b49\u7d1a: \u983b\u7387\u505c\u6b62(rate halting): \u7576\u8d85\u904e\u67d0\u4e00\u500b\u80fd\u5224\u65b7\u5230\u8815\u87f2\u7279\u5fb5\u7684\u95be\u503c\uff0c\u76f4\u63a5\u5207\u65b7\u6d41\u91cf DDoS def: \u4ea6\u7a31\u6d2a\u6c34\u653b\u64ca\uff0c\u662f\u4e00\u7a2e\u7db2\u8def\u653b\u64ca\u624b\u6cd5\uff0c\u5176\u76ee\u7684\u5728\u65bc\u4f7f\u76ee\u6a19\u96fb\u8166\u7684\u7db2\u8def\u6216\u7cfb\u7d71\u8cc7\u6e90\u8017\u76e1\uff0c\u4f7f\u670d\u52d9\u66ab\u6642\u4e2d\u65b7\u6216\u505c\u6b62\uff0c\u5c0e\u81f4\u5176\u6b63\u5e38\u7528\u6236\u7121\u6cd5\u5b58\u53d6\u3002 \u53ef\u4ee5\u7531\u8cc7\u6e90\u7684\u7528\u91cf\u770b\u51fa(\u56e0\u70baDDoS\u672c\u8eab\u5c31\u6703\u7528\u5f88\u591a\u7684\u8cc7\u6e90) \u5206\u70ba\u5169\u7a2e \u983b\u5bec\u6d88\u8017\u653b\u64ca: \u70ba\u4e86\u7528\u7f44\u53d7\u5bb3\u8005\u983b\u5bec\uff1b\u5835\u4f4f\u4ed6\uff0c\u4f8b\u5982ICMP\u6d2a\u6c34\u653b\u64ca\uff0c\u901a\u904e\u5411\u672a\u826f\u597d\u8a2d\u5b9a\u7684\u8def\u7531\u5668\u50b3\u9001\u5ee3\u64ad\u8cc7\u8a0a\u5360\u7528\u7cfb\u7d71\u8cc7\u6e90\u7684\u505a\u6cd5(\u4e00\u76f4\u671d\u4e3b\u6a5f\u767c\u9001\u8acb\u6c42\uff0c\u8b93\u4e00\u822c\u4eba\u7121\u6cd5\u767c\u9001\u8acb\u6c42)\u3002 \u8cc7\u6e90\u6d88\u8017\u653b\u64ca: \u7528\u7f44\u53d7\u5bb3\u8005\u7684\u8cc7\u6e90\uff0c\u4f8b\u5982TCP\u4e2d\u7684SYN\u653b\u64ca\uff0c\u653b\u64ca\u8005\u4e00\u76f4\u767c\u9001SYN\u4f86\u8acb\u6c42\uff0c\u4f46\u662f\u5b8c\u5168\u4e0d\u56de\u61c9\u4f3a\u670d\u5668\u50b3\u4f86\u7684SYN/ACK(\u7167\u7406\u4f86\u8aaa\u6211\u6536\u5230\u4f3a\u670d\u5668\u7684\u8cc7\u6599\u6211\u8981\u8aaaACK\uff0c\u4ee5\u78ba\u8a8d3way handshaking)\uff0c\u4f3a\u670d\u5668\u5c31\u6703\u4ee5\u70ba\u6211\u6c92\u6536\u5230\uff0c\u518d\u5ea6\u9001\u8cc7\u6599\u4f86\uff0c\u5c31\u9019\u6a23\u9023\u7e8c\u767c\u5c01\u5305\u7d66server\u4f46\u4e0d\u56de\u61c9\u4ed6\uff0cserver\u8cc7\u6e90\u5c31\u88ab\u7528\u7f44 wiki: SYN flood SYN flood\u597d\u61c2\u7684\u5f71\u7247 \u5c0d\u7b56(\u61c9\u8a72\u5f88\u597d\u61c2)\u5c31\u4e0d\u8aaa\u4e86 \u4e8b\u767c\u524d: \u8b93\u4ed6\u5011\u7684buffer\u80fd\u5927\u4e00\u9ede\uff0c\u5373\u4f7f\u88abDDoS\u4e5f\u6490\u5f97\u4f4f \u4e8b\u767c\u7576\u4e0b: \u5229\u78bc\u5075\u6e2c\uff0c\u6e1b\u5c11\u640d\u5931 \u4e8b\u767c\u5f8c: \u6eaf\u6e90\uff0c\u627e\u8ab0\u653b\u64ca\u7684(\u4e0d\u592a\u5be6\u969b) Ch11. Intruder thee classes of intruder Masquerader : \u672a\u7d93\u6388\u6b0a\u7684\u4f7f\u7528\u8005\u4fb5\u5165 Misfeasor : \u8a2a\u554f\u672a\u7372\u6388\u6b0a\u8a2a\u554f\u7684\u6578\u64da\uff0c\u7a0b\u5e8f\u6216\u8cc7\u6e90\u7684\u5408\u6cd5\u7528\u6236 Clandestine user : \u4e00\u500b\u4eba\u5c0d\u7cfb\u7d71\u9032\u884c\u76e3\u7763\u63a7\u5236\uff0c\u4e26\u4f7f\u7528\u6b64\u63a7\u5236\u8ff4\u907fauditing control\u548caccess control\uff0c\u6216\u8005\u58d3\u5236audit collection (\u596a\u53d6\u7cfb\u7d71\u7ba1\u7406\u54e1\u63a7\u5236\u6b0a\u9650\u7684\u4eba) \u5c0d\u6297hackers\u7684\u7cfb\u7d71 \u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71(IDS) \u5165\u4fb5\u9810\u9632\u7cfb\u7d71(IPS) Computer emergency response team(CERT) : expert group that handles computer security incidents. insider attack most difficult to detect and prevent \u5c0d\u61c9\u653f\u7b56: \u4f7f\u7528\u8005\u9700\u8981\u591a\u5c11\u8cc7\u6e90\u8b93\u4ed6\u5011\u505a\u4e8b\u5c31\u6388\u6b0a\u591a\u5c11(\u4e0d\u7528\u4e00\u6b21\u7d66\u5168\u90e8\u7684\u6b0a\u9650) \u7528log\u7d00\u9304\u54ea\u4e9buser\u9032\u4f86\u4e86\u4e26\u4f7f\u7528\u4e86\u54ea\u4e9b\u6307\u4ee4 \u7528\u6bd4\u8f03\u6709\u4fdd\u8b77\u6027\u7684\u6388\u6b0a\u65b9\u5f0f\u4fdd\u8b77\u91cd\u8981\u8cc7\u6e90 \u4f7f\u7528\u7d50\u675f\u5f8c\u522a\u9664\u4f7f\u7528\u8005\u96fb\u8166\u8207\u7db2\u8def\u7684\u806f\u7e6b \u4f7f\u7528\u7d50\u675f\u5f8c\u4fdd\u7559\u5099\u4efd(\u4f5c\u70ba\u6c92\u4e82\u7528\u6b0a\u9650\u7684\u8b49\u64da) way to protect password file one-way function: \u53ea\u5132\u5b58\u5bc6\u78bc\u7d93\u904e\u55ae\u5411\u51fd\u6578\u904b\u7b97\u5f8c\u7684\u8cc7\u6599(\u4f8b\u5982\u96dc\u6e4a\u6578\u503c\uff0c\u800c\u975e\u5bc6\u78bc\u672c\u8eab)(The system stores only the value of a function based on the user\u2019s password) access control: \u9650\u5b9a\u53ea\u6709\u4e00\u500b\u6216\u5c11\u6578\u5e7e\u500b\u5e33\u6236\u53ef\u4ee5\u5b58\u53d6\u5bc6\u78bc\u6a94(Access to the password file is limited to one or a very few accounts) intrusion detection \u7cfb\u7d71\u7684\u7b2c\u4e8c\u9053\u9632\u7dda(system\u2019s second line of defense )\uff0c\u56e0\u70ba\u5df2\u7d93\u6709\u4eba\u7a81\u7834\u67f5\u6b04\u9032\u4f86\u4e86\uff0c\u73fe\u5728\u5c31\u662f\u8981\u76e3\u6e2c\u90a3\u500b\u9032\u4f86\u7684\u4eba\u3002 Profiles of Behavior of Intruders and Authorized Users(\u90a3\u5f35\u5716)\u8aaa\u660e : the nature of the task confronting the designer of an intrusion detection system. Although the typical behavior of an intruder differs from the typical behavior of an authorized user, there is an overlap in these behaviors. Thus, a loose interpretation of intruder behavior, which will catch more intruders, will also lead to a number of \"false positives,\" or authorized users identified as intruders. On the other hand, an attempt to limit false positives by a tight interpretation of intruder behavior will lead to an increase in false negatives, or intruders not identified as intruders. Thus, there is an element of compromise and art in the practice of intrusion detection. audit record Fundamental tool for intrusion detection \u5229\u7528\u7279\u5b9a\u7684\u7d00\u9304\u7b46\u4f86\u5206\u6790\u70ba\u6b04\u4f4d\u4f7f\u7528\u7684\u60c5\u5f62\uff0c\u4f7f\u7528\u6307\u4ee4\u5075\u6e2c\u7cfb\u7d71\u5c07\u78b0\u649e\u627e\u51fa Threshold detection : \u8a08\u7b97\u67d0\u4e00\u4e8b\u4ef6\u767c\u751f\u7684\u6b21\u6578\uff0c\u5982\u679c\u6b21\u6578\u8d85\u904e\u4e00\u500b\u7279\u5b9a\u6578\u5b57\u5c31\u4ee3\u8868\u6709\u53ef\u80fd\u906d\u53d7\u5165\u4fb5(\u7c21\u964b\u4e14\u6c92\u6548\u7387\u7684\u65b9\u6cd5) Profile-based : \u4ee5\u904e\u53bb\u7684\u884c\u70ba\u548c\u73fe\u5728\u7684\u6bd4\u8f03\u5f8c\uff0c\u5982\u679c\u6709\u91cd\u5927\u504f\u5dee(detecting significant deviations)\u4ee3\u8868\u53ef\u80fd\u906d\u53d7\u653b\u64ca Rule-Based Intrusion Dectection : \u5617\u8a66\u8a02\u5b9a\u4e00\u4e9b\u898f\u5247\u898f\u77e9\uff0c\u5c08\u9580\u7528\u4f86\u6aa2\u67e5\u51fa\u7cfb\u7d71\u662f\u5426\u6709\u4e0d\u7576\u7684\u5165\u4fb5\u7684\u65b9\u6cd5 Rule-based anomaly detection Rule-based penetration identification USTAT \u5206\u6563\u5f0f\u5165\u4fb5\u8005\u6aa2\u6e2c(distributed intrusion detection) def: \u5c0d\u65bc\u4e00\u6574\u500b\u7d44\u7e54\u9700\u8981\u61c9\u4ed8\u5c0d\u65bc\u6574\u500b\u7db2\u8def\u62d3\u6a38\u652f\u6490\u8d77\u4f86\u7684\u4e3b\u6a5f\u67b6\u69cb\uff0c\u5e0c\u671b\u80fd\u5c07\u6578\u500b\u4e3b\u6a5f\u7684\u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71\u806f\u5408\u8d77\u4f86\u7528 \u4f46\u53ef\u80fd\u6703\u6709\u4ee5\u4e0b\u56f0\u5883: \u4e0d\u540c\u4e3b\u6a5f\u7684audit record\u53ef\u80fd\u4e0d\u4e00\u6a23\uff0c\u9700\u8981\u8655\u7406\u683c\u5f0f\u554f\u984c honeypot \u662f\u4e00\u500b\u96fb\u8166\u8853\u8a9e\uff0c\u5c08\u6307\u7528\u4f86\u5075\u6e2c\u6216\u62b5\u79a6\u672a\u7d93\u6388\u6b0a\u64cd\u4f5c\u6216\u8005\u662f\u99ed\u5ba2\u653b\u64ca\u7684\u9677\u9631 \u8a73\u7d30def: \u871c\u7f50\u901a\u5e38\u507d\u88dd\u6210\u770b\u4f3c\u6709\u5229\u7528\u50f9\u503c\u7684\u7db2\u8def\u3001\u8cc7\u6599\u3001\u96fb\u8166\u7cfb\u7d71\uff0c\u4e26\u6545\u610f\u8a2d\u7f6e\u4e86bug\uff0c\u7528\u4f86\u5438\u5f15\u99ed\u5ba2\u653b\u64ca\u3002\u7531\u65bc\u871c\u7f50\u4e8b\u5be6\u4e0a\u4e26\u672a\u5c0d\u7db2\u8def\u63d0\u4f9b\u4efb\u4f55\u6709\u50f9\u503c\u7684\u670d\u52d9\uff0c\u6240\u4ee5\u4efb\u4f55\u5c0d\u871c\u7f50\u7684\u5617\u8a66\u90fd\u662f\u53ef\u7591\u7684\u3002\u871c\u7f50\u4e2d\u9084\u53ef\u80fd\u88dd\u6709\u76e3\u63a7\u8edf\u9ad4\uff0c\u7528\u4ee5\u76e3\u8996\u99ed\u5ba2\u5165\u4fb5\u5f8c\u7684\u8209\u52d5\u3002 \u53ef\u4ee5\u5c07\u99ed\u5ba2\u5f9e\u771f\u6b63\u91cd\u8981\u7684\u7cfb\u7d71\u5f15\u958b\u5230\u871c\u7f50(\u871c\u7f50\u505a\u70ba\u8a98\u990c)\uff0c\u871c\u7f50\u548c\u771f\u5be6\u7cfb\u7d71\u662fisolated\u7684 \u4e5f\u80fd\u5229\u7528\u871c\u7f50\u4f86\u85c9\u6a5f\u8490\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u8a0a(\u871c\u7f50\u662f\u88abmonitored\u7684) pdf p29 30(\u8003\u524d\u4e00\u5929\u770b\uff0c\u5167\u5bb9\u504f\u6b7b\u8a18) password management Front line of defense against intruders implementation Crypt(3) : \u721b \u7528\u4f86\u5687\u963b\u5bc6\u78bc\u731c\u6e2c\u653b\u64ca \u4f46\u662f\u56e0\u70ba\u6700\u65e9\u4f7f\u7528\uff0c\u6240\u4ee5\u76f8\u5bb9\u6027\u8f03\u597d\u3002\u800c\u4eca\u4ecd\u7136\u88ab\u5ee3\u6cdb\u4f7f\u7528 MD5 secure hash algorithm : \u4e2d \u529f\u80fd\u597d\uff0c\u4f46\u662f\u6bd4Crypt(3)\u6162(trade off) Bcrypt : \u597d UNIX\u7cfb\u7d71\u4e2d\u6700\u5b89\u5168\u7684\u52a0\u9e7d+\u96dc\u6e4a\u65b9\u6cd5 \u529f\u80fd\u66f4\u597d\uff0c\u4f46\u662f\u53c8\u66f4\u6162\u4e86(trade off) Ch12. Firewalls Firewall characteristics \u57fa\u672c\u4e0a\uff0c\u9632\u706b\u7246\u7684\u7528\u9014\u5c31\u662f\u9694\u96e2\u7db2\u8def(\u9694\u96e2\u6210\u6578\u500bZONE)\u3002 design goals for a firewall all traffic inside to outside, and vice versa, must pass through the firewall (\u6240\u6709\u5167\u5230\u5916\u6216\u662f\u5916\u5230\u5167\u7684\u6d41\u91cf\u90fd\u5fc5\u9808\u8981\u7d93\u904e\u9632\u706b\u7246) only authorized traffic will be allowd to pass (\u53ea\u6709\u7d93\u904e\u6388\u6b0a\u7684\u6d41\u91cf\u624d\u53ef\u4ee5\u88ab\u5141\u8a31\u901a\u904e EX. \u5340\u57df\u5b89\u5168\u653f\u7b56\u7684\u8a2d\u5b9a) the firewall is immune to penetration (\u9632\u706b\u7246\u672c\u8eab\u5c0d\u4fb5\u5165\u5177\u6709\u514d\u75ab\u529b) techniques that firewalls use to control access and enforce the site's security policy service control \u6c7a\u5b9a\u4f55\u7a2e\u5167\u90e8\u6216\u5916\u90e8\u7684\u670d\u52d9\u53ef\u4ee5\u88ab\u4f7f\u7528 direction control \u5c0d\u65bc\u7279\u5b9a\u670d\u52d9\u53ef\u4ee5\u6c7a\u5b9a\u54ea\u500b\u65b9\u5411\u7684\u6d41\u91cf\u53ef\u4ee5\u88ab\u901a\u904e user control \u6839\u64da\u4f7f\u7528\u8005\u6c7a\u5b9a\u662f\u5426\u80fd\u8b93\u4ed6\u6709\u5b58\u53d6\u6b0a(\u4f7f\u7528\u6b0a) behavior control \u76e3\u63a7\u7279\u5b9a\u670d\u52d9\u7684\u4f7f\u7528\u60c5\u6cc1 firewall expectations \u662f\u4e00\u500bcheck point\uff0c\u53ef\u4ee5\u628a\u672a\u6388\u6b0a\u7684user\u64cb\u5728\u53d7\u4fdd\u8b77\u7684\u7db2\u8def\u5916\u3001\u53ef\u4ee5\u7981\u6b62\u6709\u6f5b\u5728\u5371\u96aa\u7684\u670d\u52d9\u3001\u53ef\u4ee5\u9632\u6b62IP spoofing(IP\u5047\u9020)\u53carouting attack \u662f\u4e00\u500b\u76e3\u6e2c\u8ddf\u5b89\u5168\u6709\u95dc\u7684\u4e8b\u4ef6\u7684\u5e73\u53f0 \u53ef\u4ee5\u662f\u63d0\u4f9b\u4e00\u4e9b\u8ddf\u5b89\u5168\u7121\u95dc\u7684Internet functions\u7684\u5e73\u53f0 (ex. NAT) \u53ef\u4ee5\u662f\u63d0\u4f9bIPsec\u7684\u5e73\u53f0 firewall limitations \u7121\u6cd5\u62b5\u64cb\u7e5e\u904e\u9632\u706b\u7246\u7684\u653b\u64ca(\u4f8b\u5982\u7b46\u96fb\u5728\u5916\u88ab\u611f\u67d3\uff0c\u7136\u5f8c\u5e36\u56de\u516c\u53f8\u5167\u7db2\u8b93\u5927\u5bb6\u90fd\u611f\u67d3) \u7121\u6cd5\u9632\u7bc4\u5728\u9632\u706b\u7246\u5167\u7684wireless communication between local systems (\u56e0\u70ba\u6839\u672c\u6c92\u6709reach\u5230\u9632\u706b\u7246) \u5c0d\u65bcinternal threat\u7121\u6cd5\u9632\u7bc4 Types of Firewalls Packet filtering firewall (\u8a2d\u5b9a\u898f\u5247\u6aa2\u67e5IP\u5c01\u5305) \u53ef\u4ee5\u8a2d\u5b9a\u4e00\u9023\u4e32\u7684rules\u4f86\u6c7a\u5b9a\u6b64packet\u53ef\u4e0d\u53ef\u4ee5\u901a\u904e \u7f3a\u9ede \u56e0\u70ba\u4e0d\u6703\u6aa2\u67e5upper layer data\uff0c\u6240\u4ee5\u7121\u6cd5\u9632\u6b62\u7279\u5b9a\u61c9\u7528\u7a0b\u5f0f\u7684\u6f0f\u6d1e\u653b\u64ca(\u4ed6\u8dd1\u5728\u50b3\u8f38\u5c64) \u56e0\u70ba\u6b64\u985e\u9632\u706b\u7246\u53ef\u4ee5\u5b58\u53d6\u7684\u8cc7\u6e90\u6709\u9650\uff0c\u6240\u4ee5\u529f\u80fd\u4e5f\u883b\u6709\u9650\u7684 \u4e0d\u652f\u63f4\u9032\u968e\u7684\u4f7f\u7528\u8005\u8a8d\u8b49(advanced user auth) \u5229\u7528TCP/IP protocol\u7684\u554f\u984c\u80fd\u653b\u64ca\u6b64\u985e\u578b\u7684\u9632\u706b\u7246(\u56e0\u70ba\u9019\u500b\u9632\u706b\u7246\u67b6\u8a2d\u5728\u50b3\u8f38\u5c64) \u56e0\u70ba\u6c7a\u5b9aaccess control\u7684\u8b8a\u6578\u4e0d\u591a\uff0c\u82e5\u4e00\u4e0d\u5c0f\u5fc3\u932f\u8aa4\u8a2d\u5b9a\u67d0\u4e9b\u8b8a\u6578\uff0c\u5247\u5f88\u6709\u53ef\u80fd\u8b93\u4e0d\u5b89\u5168\u7684\u5c01\u5305\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u901a\u904e\u4e86 \u512a\u9ede \u5f88\u7c21\u55ae \u5c0duser\u4f86\u8aaa\u5f88\u5bb9\u6613\u61c2\u3001\u800c\u4e14\u5f88\u5feb\u901f \u7f3a\u9ede \u2013 \u96e3\u4ee5\u8a2d\u8a08\u51fa\u4e00\u7d44\u9577\u671f\u6709\u6548\u53c8\u6b63\u78ba\u7684\u7121\u8aa4\u904e\u6ffe\u898f\u5247\u3002 \u2013 \u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\uff0c\u6240\u4ee5\u5c0d\u65bc\u5c01\u5305\u8cc7\u6599\u6bb5\u6216\u7279\u5b9a\u61c9\u7528\u670d\u52d9\u5f31\u9ede\u7684\u653b\u64ca\u65b9\u5f0f\u7121\u80fd\u70ba\u529b\u3002 \u2013 \u7f3a\u4e4f\u9a57\u8b49\u80fd\u529b\u3002 \u2013 \u5b89\u5168\u6027\u8f03\u5dee\u3002 Attacks And Countermeasures IP address spoofing(\u507d\u9020IP\u4f4d\u5740) hacker\u628a\u5916\u90e8pkt\u7684source IP address\u8a2d\u6210\u5167\u90e8\u67d0\u4e00IP address\uff0c\u7136\u5f8c\u8a66\u5716\u5f9e\u5916\u9762\u50b3\u5230\u5167\u90e8(\u8b93\u4eba\u8aa4\u4ee5\u70ba\u662f\u5167\u90e8\u7684\u800c\u6389\u4ee5\u8f15\u5fc3) solution : \u4e1f\u68c4\u6389\u5f9e\u5916\u90e8\u9032\u4f86\u4f46\u662fsource IP address\u662f\u5167\u90e8\u4f4d\u5740\u7684pkt Source routing attacks(\u4f86\u6e90\u8def\u7531\u653b\u64ca) the source station specifies route that a pkt should take, and it hopes that it will bypass the security measures that do not analyze the source routing information(\u4f86\u6e90\u7aef\u53ef\u4ee5\u6307\u5b9a\u5c01\u5305\u884c\u7d93\u7db2\u969b\u7db2\u8def\u7684\u8def\u7531\uff0c\u5e0c\u671b\u7528\u9019\u500b\u8cc7\u8a0a\u4f86\u8eb2\u907f\u53ef\u80fd\u6709\u5e7e\u500b\u6c92\u6709\u505a\u5b89\u5168\u6aa2\u67e5\u7684\u8def\u7531\u5668) solution : \u4e1f\u68c4\u6389\u6240\u6709\u542b\u6709routing information\u7684pkt Tiny fragment attacks(\u6975\u5c0f\u5c01\u5305\u653b\u64ca) \u5165\u4fb5\u8005\u5c07pkt\u5206\u5272\u6210\u591a\u500bfragment\uff0c\u4f7f\u5f97TCP header\u8cc7\u8a0a\u88ab\u5206\u6563\u5230\u5f88\u591a\u500bfragment(\u800c\u4e14\u8981\u7528pattern\u4f86\u770b\u7684\u8a71\u4e5f\u4e0d\u5bb9\u6613\u770b\uff0c\u56e0\u70bapattern\u4e5f\u6703\u88ab\u5207\u5272\uff0c \u8da8\u52e2\u79d1\u6280\u8aaa: \u5c0f\u578b\u7247\u6bb5\u5c01\u5305\u53ef\u80fd\u88ab\u7528\u65bc\u963b\u7d55\u670d\u52d9\u7a0b\u5f0f\u653b\u64ca\uff0c\u6216\u7528\u65bc\u898f\u907f\u5b89\u5168\u6a5f\u5236\u6216\u5075\u6e2c\u3002 ) solution : enforce a rule that the first fragment of a pkt must contain a predefined minimum amount of the transport header(\u524d\u9762\u4e00\u5b9a\u8981\u6709\u5b8c\u6574\u7684\u5c01\u5305\u6a19\u982dheader\uff0c\u4ee5\u78ba\u4fdd\u8cc7\u6599\u7684\u5b8c\u6574\u6027\u78ba\u8a8d\u8cc7\u6599\u662f\u4e0d\u88ab\u5207\u5272\u7684) Stateful inspection firewall stateful: \u512a\u9ede: \u53ef\u4ee5\u5206\u8fa8\u4e0d\u540c\u7684\u9023\u7dda\u72c0\u614b(\u56e0\u70ba\u9023\u7dda\u72c0\u614b\u53ef\u4ee5\u7531srcIP dstIP UDP\u3001TCP port\u5224\u65b7)\uff0c\u53ef\u4ee5\u5224\u65b7\u5c01\u5305\u662f\u5426\u5c6c\u65bc\u73fe\u5b58\u7684\u9023\u7dda\uff0c\u662f\u4e14\u5141\u8a31\u7684\u8a71\u5c31\u8b93\u5979\u5feb\u901f\u901a\u904e\uff0c\u4e0d\u662f\u5c31\u984d\u5916\u8655\u7406 \u7f3a\u9ede: \u9700\u8981\u984d\u5916\u786c\u9ad4(trade off)\uff0c\u6548\u80fd\u8f03\u5c01\u5305\u904e\u6ffe\u5dee\u3001\u4e5f\u6c92\u8fa6\u6cd5\u8655\u7406\u4e0a\u5c64\u7684\u5354\u5b9a\uff0c\u56e0\u70ba\uff0c\u5982\u5716\uff0c\u4ed6\u5efa\u7acb\u5728\u50b3\u8f38\u5c64\u800c\u8ddf\u4e0a\u5c64\u7684\u61c9\u7528\u5c64\u7121\u95dc\u3002 stateless: \u512a\u9ede: \u7c21\u55ae\u4f9d\u64da\u73fe\u6709\u7684\u5c01\u5305\u8cc7\u8a0a\u904e\u6ffe\u3001\u4e0d\u9808\u984d\u5916\u786c\u9ad4 \u7f3a\u9ede: \u53ef\u80fd\u8f03\u5bb9\u6613\u53d7\u653b\u64ca\uff0c\u4f8b\u5982IP Spoofing\u53ef\u4ee5\u507d\u9020IP\u8b93\u9632\u706b\u7246\u4ee5\u70ba\u53ef\u4ee5\uff0c(\u7528stateful\u56e0\u70ba\u8b58\u5225\u7684\u6a19\u7c64\u5f88\u591a\uff0c\u53ef\u4ee5\u5340\u5206\u507d\u9020IP\u7684\u5c01\u5305\u548c\u5be6\u969bIP\u7684\u5c01\u5305(\u56e0\u70ba\u4e5f\u8a31\u53ef\u4ee5\u7528\u5176\u4ed6header\u78ba\u8a8d\uff0c\u4f86\u8aaa\u662f\u4e0d\u662f\u8ddf\u73fe\u6709\u5141\u8a31\u7684\u4e00\u6a23)\uff0c\u4f46\u662fstateless\u5c31\u6c92\u6709\u9019\u500b\u529f\u80fd) PROXY \u6982\u5ff5 def: \u5f37\u8abf\u7528\u6236\u7aef\u7a0b\u5f0f\u5fc5\u9700\u8207\u4ee3\u7406\u4f3a\u670d\u5668\u63a5\u6d3d\uff0c\u518d\u900f\u904e\u5b83\u4f86\u8207\u76ee\u7684\u6a5f\u5668\u9023\u901a\uff0c\u800c\u975e\u76f4\u63a5\u8b93\u7528\u6236\u7aef\u9023\u63a5\u771f\u6b63\u7684\u76ee\u7684\u5730\u3002 Application proxy firewall \u82e5gateway\u6c92\u6709\u70ba\u7279\u5b9a\u61c9\u7528(\u56e0\u70ba\u73fe\u5728\u5728\u61c9\u7528\u5c64)\u505aproxy\u5247\u8a72\u985e\u7684\u670d\u52d9\u5c31\u4e0d\u88ab\u652f\u63f4\uff0c\u56e0\u6b64\u4e5f\u4e0d\u80fd\u901a\u904e\u9632\u706b\u7246 gateway\u4e5f\u53ef\u4ee5\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u3001\u63a5\u53d7\u67d0\u4e9b\u7279\u5b9a\u7684feature\uff0c\u4f7f\u5f97\u8a72\u670d\u52d9\u53ef\u4ee5\u88ab\u63a5\u53d7\uff0c\u800c\u62d2\u7d55\u5176\u4ed6\u670d\u52d9\u7684\u8981\u6c42 \u512a\u9ede: \u6bd4packet filtering firewall\u66f4\u5b89\u5168(\u56e0\u70ba\u76f4\u63a5\u904e\u6ffe\u4e86\u5c01\u5305\u5167\u5bb9(pkt contents)\u8207\u547d\u4ee4\uff0c\u4ee5\u78ba\u4fdd\u67d0\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u5167\u5bb9\u5b89\u5168(\u4f8b HTTP, FTP, EMAIL) \u7f3a\u9ede: additional processing overhead on each connection(\u8981\u984d\u5916\u8655\u7406\u6bcf\u500b\u9023\u7dda - \u9020\u6210\u8ca0\u64d4)\uff0c\u9084\u8981\u91dd\u5c0d\u4e0d\u540c\u61c9\u7528\u7a0b\u5f0f\u985e\u71df\u5beb\u4e0d\u540c\u7684\u4ee3\u7406\u65b9\u6cd5\uff0c\u6210\u672c\u9ad8\u3002 Circuit-level proxy firewall not permit end-to-end TCP connections = \u800c\u662f\u5efa\u7acb\u5169\u689dTCP connections \u6703\u5efa\u7acb\u4e8c\u500bTCP\u9023\u7dda\u8655\u7406\uff0c \u4e00\u689d\u662f\u5167\u90e8\u8207circuit-level proxy\u3001\u53e6\u5916\u4e00\u689d\u662fcircuit-level proxy\u8207\u5916\u90e8 (\u900f\u904eproxy firewall\u505a\u70ba\u4e2d\u7e7c\u7ad9\uff0c\u4e5f\u5c31\u662f \u5167\u90e8--proxy--\u5916\u90e8\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u96b1\u85cf\u5167\u90e8IP\u4f4d\u5740\u3002) security function consists of determining which connections will be allowed \u3001\u76f4\u63a5\u7528\u9023\u7dda\u7b49\u7d1a\u7684\u65b9\u5f0f\u5b9a\u7fa9\u8aaa\u54ea\u5e7e\u689d\u9023\u7dda\u662f\u5141\u8a31\u7684\u3002 \u512a\u9ede: \u8f03\u61c9\u7528\u5c64\u4ee3\u7406\u5feb\u901f\u3001\u4e00\u822c\u76ee\u7684\u5171\u7528\u4ee3\u7406\u670d\u52d9\uff0c\u53ef\u652f\u63f4\u8a31\u591a\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u4ee3\u7406\u5b58\u53d6\u529f\u80fd\u3002 \u7f3a\u9ede: \u9700\u8981\u4fee\u6539\u7528\u6236\u7aef\u61c9\u7528\u7a0b\u5f0f\u6216TCP/IP\u5354\u5b9a\u5806\u758a\uff0c\u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\u3001ICMP\u4e5f\u4e0d\u884c(\u56e0\u70ba\u4ed6\u662fnetwork\u5c64)\u3002 Firewall comparison Bastion host def: \u4e00\u500b\u88ab\u9632\u706b\u7246\u7ba1\u7406\u54e1\u8a8d\u53ef\u7684\u95dc\u9375\u7cfb\u7d71(x \u7ffb\u5f97\u597d\u721b) \u901a\u5e38\u662fapplication proxy\u6216circuit-level proxy\u7684\u5e73\u53f0 characteristics(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18) \u57f7\u884c\u5b89\u5168\u7684\u4f5c\u696d\u7cfb\u7d71 \u53ea\u6709\u7db2\u8def\u7ba1\u7406\u4eba\u8a8d\u70ba\u662f\u5fc5\u8981\u7684\u670d\u52d9\u624d\u6703\u88ab\u5b89\u88dd \u6703\u6709\u984d\u5916\u8a8d\u8b49\u7684\u529f\u80fd \u6bcf\u500bproxy\u90fd\u88ab\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u6a19\u6e96\u670d\u52d9\u7684\u4e00\u90e8\u4efd \u6bcf\u500bproxy\u90fd\u53ea\u80fd\u8b93\u7279\u5b9a\u7684\u4e3b\u6a5f\u5b58\u53d6 \u6bcf\u500bproxy\u90fd\u6703\u900f\u904e\u8a18\u9304\u6d41\u91cf \u9023\u7dda\u548c\u9023\u7dda\u7684\u6642\u9593\u9577\u77ed\u4f86\u7dad\u8b77\u6aa2\u67e5\u6240\u9700\u7684\u8cc7\u8a0a \u6bcf\u500bproxy\u90fd\u662f\u5c08\u9580\u70ba\u7db2\u8def\u5b89\u5168\u8a2d\u8a08\u7684\u5c0f\u5c0f\u8edf\u9ad4\u5957\u4ef6 \u6bcf\u500b\u5728bastion host\u4e0a\u7684proxy\u90fd\u662f\u7368\u7acb\u7684 - \u5c31\u7b97\u67d0\u500bproxy\u51fa\u554f\u984c\u4e5f\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6proxy(\u91cd\u8981\uff0c\u6211\u89ba\u5f97\u6703\u8003!) \u9664\u4e86\u4e00\u958b\u59cb\u555f\u52d5\u7684\u8a2d\u5b9a\u6a94\u5916\uff0c\u4e0d\u9700\u8981\u5b58\u53d6\u786c\u789f - \u5165\u4fb5\u8005\u7121\u6cd5\u5c07\u6709\u5371\u96aa\u7684\u6a94\u6848\u503c\u5165bastion host \u6bcf\u500bproxy\u90fd\u53ea\u6709\u4e00\u822c\u4f7f\u7528\u8005\u7684\u6b0a\u9650\uff0c\u4e14\u5728bastion host\u4e2d\u96b1\u5bc6\u4e14\u5b89\u5168\u7684\u76ee\u9304\u4e2d\u57f7\u884c Host-based firewall a software module used to secure an individual host (\u7528\u4f86\u6aa2\u9a57indivitual host\u7684\u8edf\u9ad4\u6a21\u7d44\uff0chost\u5728server\u6216\u662f\u500b\u4eba\u96fb\u8166\u90fd\u53ef) Filters and restricts the flow of packets Common location is a server \u512a\u9ede Filtering rules can be tailored to the host environment (\u904e\u6ffe\u7684\u898f\u5247\u53ef\u4ee5\u61c9\u7528\u65bchost environment) \u53ef\u7528\u65bc\u8207\u7368\u7acb\u7684\u9632\u706b\u7246\u7d50\u5408 - \u63d0\u4f9b\u5176\u4ed6layer\u7684\u4fdd\u8b77 \u5c64\u5c64\u7368\u7acb\uff0c\u4e92\u4e0d\u5f71\u97ff(independent topology) Personal firewall controls the traffic between a PC or workstation on one side and the Internet or enterprise network on the other side (\u63a7\u5236 \u500b\u4eba\u96fb\u8166\u6216\u5de5\u4f5c\u7ad9 \u5230 \u7db2\u8def\u6216\u4f01\u696d\u7db2\u8def \u7684\u6d41\u91cf) deny unauthorized remote access to the computer(\u963b\u6b62\u672a\u7d93\u6388\u6b0a\u7684\u9060\u7aef\u5b58\u53d6) can monitor outgoing activity in an attempt to detect and block worms and other malware(\u53ef\u4ee5\u76e3\u63a7\u5916\u754c\u7684\u6d3b\u52d5 - \u767c\u73fe\u4e26\u963b\u6b62\u8815\u87f2\u548c\u5176\u4ed6\u60e1\u610f\u8edf\u4ef6\uff0c\u6216\u8aaa\u53ef\u4ee5\u76e3\u63a7outgoing\uff0c\u5411\u5916\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u963b\u64cb\u8815\u87f2\u653b\u64ca(\u56e0\u70ba\u8815\u87f2\u7e41\u6b96\u5f8c\u6703\u5411\u5916\u8dd1\uff0c\u5c0b\u627e\u65b0\u7684\u76ee\u6a19)) is less complex DMZ def: \u4ecb\u65bc\u5167\u90e8\u7db2\u8def\u8207Internet\u9593\u7684\u5340\u57df(\u5b50\u7db2\u8def) \uff0c\u4f5c\u70ba\u5167\u5916\u7db2\u8def\u9593\u7684\u5b89\u5168\u6027\u7de9\u885d\u5730\u5e36\u3002 \u5728\u9632\u706b\u7246\u67b6\u69cb\u4e2d\uff0cDMZ\u5340\u57df\u662f\u63d0\u4f9bInternet\u4f7f\u7528\u8005\u5b58\u53d6\u7db2\u969b\u7db2\u8def\u4f3a\u670d\u5668\u7684\u7db2\u8def\u5340\u57df\uff0c\u5982Webserver\u6216DNS server \u3002 DMZ\u548c\u5167\u90e8\u7db2\u8def\u662f\u5206\u9694\u958b\u4f86\u7684\uff0c\u56e0\u6b64\u5373\u4f7f\u906d\u5230\u653b\u64ca\u4e5f\u4e0d\u6703\u5371\u53ca\u5167\u90e8\u7db2\u8def\u3002 Firewall locations and Topologies(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18) Host-resident firewall includes personal firewall software and firewall software on servers Screening router a single router between internal and external networks with stateless or full packet filtering(\u6709\u904e\u6ffe\u6a5f\u5236\u7684router\uff0c\u53ef\u4ee5\u5f9escreening\u9019\u500b\u540d\u8a5e\u770b\u51fa\uff0c\u5c31\u662f\u6709\u76e3\u63a7\u529f\u80fd4.) Single bastion nline a single firewall between an internal and external router(\u5167\u7db2\u8207\u5916\u7db2\u7684router\u4e2d\u9593\u7684\u9632\u706b\u7246) Single bastion T single bastion inline but has a third network interface on bastion to a DMZ(\u5728bastion\u548c\u9632\u706b\u7246\u4e4b\u9593\u9084\u6709\u4e00\u500b\u4ecb\u9762) Double bastion inline DMZ is sandwiched between bastion firewalls(DMZ\u593e\u5728\u5169\u500bbastion firewall\u4e4b\u9593) Double bastion T DMZ is on a separate network interface on the bastion firewall Distributed firewall configuration used by some large businesses and government organizations Final exam note 2012Final(Jan. 11 2013) (3) IPSec \u53ef\u4ee5\u7528\u6ed1\u52d5\u8996\u7a97\u4f86\u963b\u64cb\u91cd\u653e\u653b\u64ca\uff0c\u5177\u9ad4\u6d41\u7a0b\u5982\u4e0b\uff0c\u9996\u5148\u5728\u6ed1\u52d5\u8996\u7a97\u4e2d\uff0c\u5982\u679c\u6709\u4e00\u500b\u5c01\u5305\u7684\u5e8f\u5217\u865f\u5c0f\u65bc\u8996\u7a97\u6700\u5c0f\u7684(\u4e5f\u5c31\u662f\u4f4d\u65bc\u8996\u7a97\u7684\u5de6\u5074\uff0c\u5247\u662f\u70ba\u91cd\u653e\u653b\u64ca\uff0c\u56e0\u70ba\u90a3\u662f\u4e4b\u524d\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305)\uff0c\u5982\u679c\u5c01\u5305\u5e8f\u5217\u865f\u53ef\u4ee5\u843d\u5728\u8996\u7a97\u4e2d\uff0c\u800c\u4e14\u4e4b\u524d\u9084\u6c92\u6709\u88ab\u63a5\u6536\u904e\uff0c\u5247\u662f\u70ba\u65b0\u7684\u5c01\u5305\u63a5\u6536\u4ed6\uff0c\u5982\u679c\u5df2\u7d93\u6709mark\u70ba\u63a5\u6536\u904e\u5247\u4e5f\u662f\u87f2\u653e\u653b\u64ca\uff0c\u62cb\u68c4\u4ed6\uff0c\u5982\u679c\u5c01\u5305\u518d\u8996\u7a97\u7684\u53f3\u908a\uff0c\u53f3\u908a\u90fd\u662f\u9084\u6c92\u63a5\u6536\u904e\u7684\uff0c\u662f\u4e00\u500b\u5168\u65b0\u7684\u5c01\u5305\uff0c\u5247\u5c07\u5176\u63a5\u53d7\u5f8c\uff0c\u628a\u8996\u7a97\u5f80\u53f3\u6ed1\u52d5\u3002 (4) keyspace\u5927\u7684password\u6703\u6bd4\u8f03\u5b89\u5168\uff0c\u800c\u5df2\u7d93\u5efa\u7acb\u65bcdictionary\u7684\u662f\u6700\u4e0d\u5b89\u5168\u7684\u5bc6\u78bc (5) \u6aa2\u6e2c\u653b\u64ca\u8005\u7684\u5169\u7a2e\u65b9\u6cd5 statistical\u6aa2\u6e2c\uff0c\u63a1\u7528\u7684\u662f\u7528\u4e00\u4e9b\u7d71\u8a08\u8cc7\u8a0a(\u4f8b\u5982\u6d41\u91cf\u3001\u7aef\u53e3\u4f7f\u7528\u3001\u6642\u9593)\u7b49\u7b49\u627e\u51fa\u653b\u64ca\u884c\u70ba\u3002 rule\u6aa2\u6e2c\uff0c\u5229\u7528\u4e00\u4e9b\u5c08\u5bb6\u8a2d\u5b9a\u53ef\u80fd\u662f\u653b\u64ca\u3001\u5165\u4fb5\u8005\u7684\u898f\u5247\u4f86\u627e\u51fa\u3002 \u5dee\u5225\u5728\u65bc\u5f8c\u8005\u7684\u898f\u5247\u662f\u7d81\u6b7b\u7684\uff0c\u8f03\u4e0d\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u80fd\u8f03\u5feb(\u5957\u7528\u65e2\u6709\u898f\u5247)\uff1b\u524d\u8005\u662f\u52d5\u614b\u611f\u77e5\u7684\uff0c\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u6703\u6bd4\u8f03\u6162(\u4e00\u7a2etrade off) (6) \u76e3\u63a7\u8cc7\u6599\u4e2d\uff0c\u8cc7\u6599\u53ef\u80fd\u6703\u76f8\u7576\u9f90\u5927\uff0c\u6bcf\u4e00\u500b\u90fd\u770b\u7684\u8a71\u592a\u8017\u6642\u4e86\uff0c\u6240\u4ee5\u8981\u6709 \u9078\u64c7\u6027 (selectivity) (7) \u898b\u4e0a\u65b9\u7b46\u8a18\uff0c\u7c21\u55ae\u4f86\u8aaa\u871c\u7f50\u5c31\u662f\u4e00\u500b\u548c\u4e3b\u8981nerwork\u9694\u958b\u7684\u7cfb\u7d71\uff0c\u507d\u88dd\u8c50\u5bcc\u3001\u6709\u5229\u7528\u50f9\u503c\u7684\u8cc7\u8a0a \u5438\u5f15\u5370\u99ed\u5ba2\u5f80\u90a3\u88cf\u8d70 \uff0c\u5f9e\u800c \u4fdd\u8b77\u4e3b\u8981\u7db2\u8def\u88dd\u7f6e \uff0c\u4e26\u4e14\u871c\u7f50\u662f \u88ab\u76e3\u6e2c \u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u65bc \u6536\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u6599\u4ee5\u4fbf\u8cc7\u5b89\u5206\u6790 \u3002 (8) (9) \u653b\u64ca\u7684\u65b9\u6cd5\u8acb\u5efa\u4e0a\u65b9\u7b46\u8a18\uff0c\u5f71\u97ffpacket filter\u7684\u65b9\u6cd5\u5982\u4e0b IP spoofing: \u6709\u4e9b\u4f7f\u7528IP\u4f86\u6e90\u7684\u5c01\u5305\u904e\u6ffe\u5668\u53ef\u80fd\u6703\u88ab\u9a19(\u56e0\u70ba\u653b\u64ca\u8005\u53ef\u4ee5\u5c07\u5c01\u5305\u507d\u9020\u6210\u4e00\u500b\u53ef\u4fe1\u4efb\u7684IP\u5728\u4e0a\u982d\uff0c\u9032\u800c\u9054\u6210\u6b3a\u9a19\u7684\u76ee\u7684) src routing: \u81ea\u8a02routing\u65b9\u6cd5\u7684\u8a71\uff0c\u5047\u8a2d\u6211\u77e5\u9053\u90a3\u4e9brouter\u662f\u6c92\u6709\u597d\u7684\u5c01\u5305\u5b89\u5168\u6a5f\u5236\uff0c\u6211\u5c31\u53ef\u4ee5\u6545\u610f\u7d93\u904e\u4ed6\u4f86\u9054\u6210\u8eb2\u907f\u6aa2\u6e2c\u7684\u7b11\u904e tiny fragment: \u4f7f\u7528\u8a31\u591a\u5c0f\u5c01\u5305\u4f86DoS (10) stateful: \u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u6709\u7d00\u9304\u5c01\u5305\u72c0\u614b\u7684\u5c01\u5305\u904e\u6ffe\u5668\uff0c\u53ea\u6709\u7b26\u5408\u73fe\u6709\u5141\u8a31\u72c0\u614b\u7684\u5c01\u5305\u6750\u53ef\u4ee5\u8b93\u5b83\u904e\u53bb\uff0c\u5426\u5247\u5c31\u7981\u6b62\uff1b\u984c\u76ee\u7684TCP\u5c01\u5305\u70ba\u4f8b\uff0c\u5982\u679cfilter\u8b93\u73fe\u5728\u9019\u500bSYN\u7684\u5c01\u5305\u901a\u904e\uff0c\u5247\u53ef\u8a18\u9304\u6709\u95dc\u6b64\u5c01\u7684\u72c0\u614b\uff0c\u5c07\u4f86\u6709\u985e\u4f3c\u7684\u5c01\u5305\u4f86\uff0c\u7b26\u5408\u72c0\u614b\u4fbf\u53ef\u4f7f\u5176\u901a\u904e\u3002 stateless: \u53ea\u7528\u73fe\u6709\u5c01\u5305\u7684\u8cc7\u8a0a(\u5982 header\u7b49\u7b49)\u4f86\u6c7a\u5b9a\u662f\u5426\u901a\u904e\uff0c\u5982\u679c\u6709\u4eba\u507d\u9020\u4e86\u4e00\u500b\u4e00\u6a21\u4e00\u6a23header\u7684\u5c01\u5305\uff0c\u4fbf\u53ef\u4ee5\u6b3a\u9a19\u904e\u4ed6(\u56e0\u70ba\u6c92\u6709\u4e4b\u524d\u7684\u72c0\u614b\u53ef\u4f9b\u6bd4\u5c0d)\uff0c\u4fb5\u5165\u7cfb\u7d71\u3002 2015final(Dec. 29 2015) (1)firewall\u901a\u5e38\u7121\u6cd5\u5230\u9054application \u5c64\u904e\u6ffe\u61c9\u7528\u7a0b\u5f0f\u50b3\u9001\u7684\u8cc7\u6599 (2) (a) security association \u70ba\u55ae\u5411 (6) egress\u53ef\u4ee5\u7528\u4f86\u627e\u5230attack src (7) \u5b9a\u8b70\u984c\uff0c\u8acb\u898b\u4e0a\u9762\u7b46\u8a18\u3002 (9) \u898b\u4e0a\u9762\u8868\u683c\uff0c\u4e2d\u6587\u7684\u90a3\u500b (10) \u80cc\u8aa6\u984c\uff0c\u898b\u4e0a\u9762\u7b46\u8a18 (11) \u56e0\u70ba\u5bc6\u78bc\u6709\u52a0\u9e7d(\u96a8\u6a5fstr append)\u904e\u5f8c\u624dhash\uff0c\u6240\u4ee5\u6703\u4e0d\u4e00\u6a23 (12) statistical\u5075\u6e2c\u6cd5\u6bd4\u8f03\u80fd\u56e0\u61c9\u65b0\u7684\u653b\u64ca\uff0c\u539f\u56e0\u4e43\u662f\u4ed6\u6bd4\u8f03\u52d5\u614b\uff0c\u6703\u6aa2\u67e5\u4f7f\u7528\u8457\u7684\u8cc7\u6599\u7528\u91cf\u3001\u884c\u70ba\u3001\u7aef\u53e3\u3001\u7db2\u8def\u4f4d\u7f6e\u7b49\u7b49\uff1b\u7136\u800crule based\u7528\u5df2\u7d93\u5beb\u6b7b\u7684\u65e2\u6709\u898f\u5247\u4f86\u5075\u6e2c\uff0c\u56e0\u70ba\u5beb\u6b7b\u4e86\u6240\u4ee5\u5f88\u7cdf\uff0c\u7121\u6cd5\u5c0d\u65b0\u7684\u6709\u6240\u8b8a\u901a\uff0c\u6545stat\u65b9\u6cd5\u624d\u80fd\u5c0d\u6297\u3001\u65b0\u7a4e\u3001\u672a\u77e5\u7684\u5a01\u8105\u3002 \u4ee5\u4e0b\u6709\u7591\u554f\uff0c\u9084\u7169\u8acb\u52a9\u6559\u89e3\u7b54: (5) meta\u75c5\u6bd2\u548cpoly\u75c5\u6bd2\u7684\u5340\u5225? poly\u61c9\u8a72\u662f\u53ea\u6709\u6539\u8b8a\u81ea\u5df1\u7684signature\uff0c\u6216\u662f\u90e8\u5206\u7684code\uff1b\u4f46\u662fmeta\u662f\u6574\u500b\u7a81\u8b8a\u6210\u65b0\u7684\uff0c\u4e0d\u50c5signature\u8b8a\u4e86\uff0ccode\u4e5f\u5b8c\u5168\u4e0d\u540c\uff0c\u561b? TA: \u4f60\u7684\u7406\u89e3\u662f\u5c0d\u7684\u3002 (7) reflexive \u548c non-reflexive DDoS \u7684\u5340\u5225?\uff0creflexive\u597d\u50cf\u9084\u6703\u7d93\u7531\u7b2c\u4e09\u65b9\u4f86\u9593\u63a5\u767c\u9001DDoS\u5c01\u5305\uff0c\u4f7f\u4e3b\u8b00\u66f4\u96e3\u88ab\u67e5\u5230\uff0c\u9032\u800c\u96b1\u8eab\uff0c\u55ce? TA: \u6c92\u932f\uff0c\u5c31\u662f\u628a src \u507d\u9020\u6210\u5225\u4eba (13)\uff0chttp\u5c6c\u65bcweb\uff0c\u6240\u4ee5\u756b\u5728external\u5916? TA: HTTP Server \u8981\u63d0\u4f9b\u5c0d\u5916\u670d\u52d9\uff0c\u61c9\u8a72\u662f\u653e\u5728 external DMZ\uff0cEmail Server \u4e0d\u7528\u63d0\u4f9b\u5c0d\u5916\u670d\u52d9\u61c9\u8a72\u662f\u653e\u5728 Internel DMZ\u3002 2016final(Jan. 3 2017) exam paper(for TA) \u56e0\u70ba\u6c92\u6709\u6b63\u89e3\uff0c\u6240\u4ee5\u4ee5\u4e0b\u6709\u7591\u554f\u7684\u4e5f\u7169\u8acb\u52a9\u6559\u89e3\u7b54: (1) \u9023\u7dda\u516c\u53f8\u7684\u5206\u90e8\uff0c\u61c9\u8a72\u63a1\u7528tunnel mode\u5c31\u597d\uff0c\u5982\u9019\u5f35\u5716(cooperate network\u901a\u5e38\u6703\u7528tunnel mode)\uff0c\u56e0\u70ba\u9019\u6a23\u4e0d\u7528\u6bcf\u4e00\u500b\u5206\u90e8\u7684\u96fb\u8166\u90fd\u8981\u5177\u5099IPSEC\u529f\u80fd\uff0c\u6bd4\u8f03\u7c21\u55ae\uff0c\u800c\u5728\u52a0\u4e0a\u8981\u52a0\u5bc6\uff0c\u5247\u4f7f\u7528ESP in transport mode (\u61c9\u8a72\u662ftunnel) \u5c01\u5305\u5982\u9019\u500btunnel\u6700\u5f8c\u7684\u7d50\u679c (2) (a)yes, by using the sliding window with seq number, (b) drop it (3) (a)AH (b)ESP ESP with auth (4) (a)\u7a81\u8b8a(metamorphism) (b)\u591a\u578b\u614b(polymorphism) (\u88dc\u5145) Polymorphic code: The (same) code takes many forms (like encryptions) Oligomorphic code: The (same) code takes one of a few predefined forms (and thus can be possibly matched against signatures that can cover all cases) Metamorphic code: The code mutates, so the code itself is different in each execution (but the functionality the same) (5) (a) \u7d71\u8a08\u53ef\u4ee5\u800c\u898f\u5247\u4e0d\u884c: \u65b0\u7684\u5a01\u8105\uff0c\u56e0\u70ba\u65b0\u7684\u5a01\u8105\u4e0d\u6703\u7b26\u5408\u4efb\u4f55\u4e00\u500b\u898f\u5247\uff0c\u662f\u5fc5\u5f97\u7528\u8f03\u70ba\u52d5\u614b\u7684\u7d71\u8a08\u65b9\u5f0f\u5075\u6e2c\u3002 (b) \u898f\u5247\u53ef\u4ee5\u800c\u7d71\u8a08\u4e0d\u884c: \u5728\u7d71\u8a08\u6578\u64da\u4e0a\u8fa8\u8a8d\u4e0d\u51fa\u800c\u898f\u5247\u53ef\u4ee5\u7684(\u4f8b\u5982\u67d0\u500b\u4fb5\u5165\u6027\u653b\u64ca\u4e26\u4e0d\u6703\u89f8\u72af\u4efb\u4f55\u4e00\u500bthreshold\u7684\u8a2d\u5b9a)\uff0c\u56e0\u6b64\u4ed6\u662f\u4e00\u7a2e\u7d71\u8a08\u4f8b\u5916\uff0c\u9700\u8981\u7528\u898f\u5247\u6027\u6aa2\u6e2c\u4f86\u8655\u7406\u3002 (6) \u4f7f\u7528\u8005\u5e33\u6236\u5728\u8cc7\u6599\u5eab\u5efa\u7acb\u7684\u6642\u5019: \u6703\u5c07\u4f7f\u7528\u8005\u7684 \u5e33\u865f\uff0csalt\u7684\u96a8\u6a5f\u5b57\u4e32\uff0c\u4ee5\u53cahash(salt(password)) \u4e09\u5143\u7d44\u5b58\u5728db\u3002 \u4f7f\u7528\u8005\u8f38\u5165\u5bc6\u78bc\u767b\u5165\u7cfb\u7d71\u7684\u6642\u5019: \u4f7f\u7528\u8005\u8f38\u5165\u5e33\u865f\u5bc6\u78bc\u5f8c\uff0c\u5c0d\u61c9\u53bbquery\u90a3\u500bdb entry\uff0c\u4e26\u4e14\u5c07\u7576\u521d\u7684salt\u6578\u503c\u53d6\u51fa hash(salt(typein_password)) ?= hash(salt(stored_password)) \u4f86\u78ba\u8a8d\u662f\u4e0d\u662f\u4e00\u500b\u5408\u6cd5\u7684\u767b\u5165\u3002 (7) (a) IPS (Intrusion Protection System): \u9632\u60a3\u672a\u7136\uff0c\u9632\u60a3\u5165\u4fb5\u7684\u7cfb\u7d71(\u5728\u5165\u4fb5\u524d)\u3002 IDS (Intrusion Detecion System): \u5373\u6642\u8655\u7406\uff0c\u5728\u5165\u4fb5\u5f8c\u8d95\u7dca\u767c\u73fe\u4e26\u8655\u7406\uff0c\u4f7f\u640d\u5931\u964d\u81f3\u6700\u4f4e\u3002 role: \u904e\u6ffe\u8cc7\u8a0a\uff0c\u5c07\u53ef\u80fd\u9020\u6210\u653b\u64ca\u7684\u6d41\u91cf\u5148\u64cb\u4e0b\uff0c\u55ce? (b) tiny fragment\u80fd\u653b\u64ca\u6210\u529f\u7684\u539f\u56e0\u5982\u4e0b: \u9996\u5148\uff0c\u56e0\u70ba\u5c01\u5305\u5f88\u5c0f\uff0c\u7528\u4f86\u8fa8\u8b58\u60e1\u610f\u5c01\u5305\u7684pattern\u8fa8\u8a8d\u7cfb\u7d71\u53ef\u80fd\u7121\u6cd5\u5206\u8fa8(\u56e0\u70bapattern\u4e5f\u88ab\u5207\u5272\u4e86)\uff0c(\u6216\u7c21\u55ae\u8aaa\u5c31\u662f\u5c01\u5305\u592a\u5c0f\u5f97\u4ee5\u898f\u907f\u5b89\u5168\u6aa2\u6e2c)\uff0c\u518d\u4f86\uff0c\u5982\u679c\u7528\u5c01\u5305size \u5c0f\u4e5f\u53ef\u4ee5\u8eb2\u907fsize\u6aa2\u6e2c\u7684\u6a5f\u5236\u3002 (8) (a) rootkit (\u611f\u89ba\u633a\u5e38\u8003)\u4fb5\u5165\u7cfb\u7d71\u4e2d\u507d\u88dd\u6210root\u7684\u975e\u6cd5\u4f7f\u7528\u8005 (b) bot \u662f\u88ab\u60e1\u610f\u8edf\u9ad4\u6216\u653b\u64ca\u8005\u63a7\u5236\u7684\u7db2\u8def\u7cfb\u7d71\uff0c\u800c\u8a31\u591a\u500bbot\u5408\u4f5c\u4e00\u6a23\u7684\u4e8b\u60c5\u5c31\u662f\u6bad\u5c4d\u7db2\u8def(botnet\u3001zombie net) \u6703\u7528\u4f86\u767c\u52d5DDoS\u653b\u64ca \u56e0\u70ba\u76e3\u6e2c\u5411\u5916\u6d41\u51fa\u7684\u5c01\u5305\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4f86\u6e2c\u5230\u8815\u87f2\u8edf\u9ad4\u8981\u5f9e\u5167\u90e8\u5411\u5916\u7ac4\u51fa\u5c0b\u627e\u4e0b\u4e00\u500b\u76ee\u6a19 (\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54) (d) \u7528\u4ee5\u6aa2\u6e2c\u8815\u87f2\uff0c\u96a8\u6a5f\u78ba\u8a8d\u9023\u7dda\u662f\u5426\u9054\u67d0\u500b\u53ef\u80fd\u88ab\u5224\u5b9a\u70baworm\u4e8b\u4ef6\u7684\u6d41\u91cf (9) (a) \u5206\u6563\u5f0f\u963b\u65b7\u670d\u52d9\u653b\u64ca\uff0c\u85c9\u7531\u767c\u9001\u5927\u91cf\u6d41\u91cf\u4f86\u8b93\u76ee\u6a19\u7db2\u8def\u7cfb\u7d71\u75b2\u65bc\u61c9\u4ed8\uff0c\u751a\u81f3\u7671\u7613\uff0c\u800c\u9020\u6210\u5408\u6cd5\u4f7f\u7528\u8005\u7121\u6cd5\u5b58\u53d6\u8a72\u7db2\u8def\u7cfb\u7d71\u7684\u8cc7\u6e90\u3002 (b) \u6709\u900f\u904e\u7b2c\u4e09\u65b9\u7db2\u8def\u7cfb\u7d71\u3001\u9593\u63a5\u5f62\u5f0f\u7684DDoS\uff0c\u53ef\u4ee5\u8b93\u99ed\u5ba2\u7684IP\u6613\u65bc\u96b1\u533f\u3002 \u53c8\u7a31SYN Flood\uff0c\u4e00\u76f4\u9805\u7cfb\u7d71\u767c\u5e03SYN\u5c01\u5305\uff0c\u7cfb\u7d71\u4fbf\u6703\u56de\u61c9SYN-ACK\uff0c\u57fa\u65bcTCP\u4e09\u65b9\u4ea4\u63e1\u539f\u5247\uff0c(\u56e0\u70ba\u81ea\u5df1\u4e5f\u8981\u56de\u61c9\u4e00\u500bACK\u624d\u80fd\u5efa\u7acb\u9023\u7dda\uff0c\uff0c\u5426\u5247\u56e0\u70ba\u7cfb\u7d71\u4ee5\u70ba\u6211\u5011\u6c92\u6536\u5230\uff0c\u4ed6\u8b8a\u5f97\u91cd\u50b3\u5c01\u5305)\uff0c\u4e5f\u6b63\u56e0\u5982\u6b64\u6211\u5011\u5c31\u767c\u4e00\u5806SYN\u4f46\u4e0d\u56de\u61c9\u7cfb\u7d71\u7684SYN-ACK\uff0c\u8b93\u7cfb\u7d71\u75b2\u65bc\u91cd\u65b0\u50b3\u9001\u5c01\u5305\u800c\u7671\u7613\u5176\u8cc7\u6e90\u3002 (d) \u4e00\u76f4\u5411\u7cfb\u7d71\u767c\u5e03ICMP\u63a7\u5236\u5c01\u5305\uff0c\u800c\u8017\u76e1\u983b\u5bec (10) \u5c0b\u627e\u53ef\u80fd\u6709\u5f31\u9ede\u3001\u6f0f\u6d1e\u7684port\u4ee5\u9032\u884c\u653b\u64ca(\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54) TA: \u662f\u7684\u6c92\u932f\u3002 2017final (Jan. 2 2018) (1) (a) \u4e09\u500b\u539f\u56e0: \u60e1\u610f\u8edf\u9ad4\u592a\u591a\u7a2e\u3001\u9632\u6bd2\u8edf\u9ad4\u66f4\u65b0\u8cc7\u6599\u5eab\u7684\u901f\u5ea6\u611f\u4e0d\u4e0a\u60e1\u610f\u8edf\u9ad4\u63a8\u9673\u51fa\u65b0\u7684\u901f\u5ea6(\u9053\u9ad8\u4e00\u5c3a\u9b54\u9ad8\u4e00\u4e08?)\u3001 (b) \u4e09\u7a2e: polymorphism, metamorphism, stealthy malwares (2) \u4e0d\u77e5\u9053\u8036\uff0c\u4f46\u63a8\u6e2c\u61c9\u8a72\u662fcross-site scripting(\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54) def: \u662f\u4e00\u7a2e\u7db2\u7ad9\u61c9\u7528\u7a0b\u5f0f\u7684\u5b89\u5168\u6f0f\u6d1e\u653b\u64ca\uff0c\u662f\u4ee3\u78bc\u6ce8\u5165\u7684\u4e00\u7a2e\u3002\u5b83\u5141\u8a31\u60e1\u610f\u4f7f\u7528\u8005\u5c07\u7a0b\u5f0f\u78bc\u6ce8\u5165\u5230\u7db2\u9801\u4e0a\uff0c\u5176\u4ed6\u4f7f\u7528\u8005\u5728\u89c0\u770b\u7db2\u9801\u6642\u5c31\u6703\u53d7\u5230\u5f71\u97ff\u3002\u9019\u985e\u653b\u64ca\u901a\u5e38\u5305\u542b\u4e86HTML\u4ee5\u53ca\u4f7f\u7528\u8005\u7aef\u8173\u672c\u8a9e\u8a00\u3002 TA: \u6c92\u932f\u3002 (3) (b) \u5f9e\u88ab\u63a7\u5236\u7684zombie\u96fb\u8166\u767c\u9001\u591a\u500bICMP\u63a7\u5236\u5c01\u5305\uff0c\u7d93\u7531\u7b2c\u4e09\u65b9\u7684reflexive server\uff0c\u9593\u63a5\u7684\u653b\u64ca\u53d7\u5bb3\u8005\u4e3b\u6a5f (4) ingress(\u5427?)\uff0c\u56e0\u70baspoofing attack\u662f\u5916\u9762\u7684\u9020\u5047\u5c01\u5305\u50b3\u5165\u4f5c\u70ba\u653b\u64ca TA: \u61c9\u8a72\u662f both\u3002spoofing attack \u662f\u6307\u507d\u9020 source \u6216 destination IP\u3002\u6240\u4ee5 ingress \u8ddf egress \u90fd\u53ef\u80fd\u53ef\u4ee5\u9632\u6b62\u3002 (5) (\u9019\u4e5f\u4e0d\u662f\u5f88\u78ba\u5b9a\uff0c\u9084\u8acb\u52a9\u6559\u8a73\u7d30\u89e3\u7b54) (a) stateless \u53ef\u4ee5\u6210\u529f\u5efa\u7acb\u9023\u7dda\uff0c\u56e0\u70ba\u4ed6\u53ea\u6aa2\u67e5\u73fe\u6709\u7684\u5c01\u5305\u5167\u5bb9\u4f86\u5224\u65b7\u662f\u5426\u6709\u5a01\u8105 (b) stateful \u4e0d\u4e00\u5b9a\u80fd\u6210\u529f\u9023\u7dda\uff0c\u4f8b\u5982\u5f9e\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\uff0c\u5982\u679c\u67e5\u95b1\u5148\u524d\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\u5c0d\u61c9\u7684\u898f\u5247\u4e0d\u5141\u8a31\u901a\u904e\u7684\u8a71\uff0c\u5247\u4e0d\u5141\u8a31\u901a\u904e\uff0c\u800c\u7121\u6cd5\u9054\u6210TCP\u3002 TA: (a) stateless \u7121\u6cd5\u6210\u529f\u5efa\u7acb\u9023\u7dda\uff0c\u56e0\u70ba\u5b83\u4e0d\u77e5\u9053\u6b64\u6b21\u7684 handshake \u5c01\u5305\u4f86\u6e90\u662f\u5426\u5408\u6cd5(e.g., \u4efb\u610f IP \u76f4\u63a5\u9001\u4e86 SYN, ACK, FIN, RST \u5c01\u5305\u9020\u6210 DoS)\uff0c\u56e0\u6b64\u6703\u62d2\u7d55\u5c01\u5305\uff0c\u9020\u6210\u9023\u7dda\u5931\u6557\u3002 (b) stateful \u53ef\u4ee5\u6210\u529f\u9023\u7dda\uff0c\u56e0\u70ba\u6703\u8a18\u9304\u6b64\u4f86\u6e90 IP \u8655\u65bc handshake \u7684\u54ea\u500b\u968e\u6bb5\uff0c\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053\u6b64\u6b21\u7684 handshake \u662f\u5426\u5408\u6cd5\u6c7a\u5b9a\u63a5\u53d7\u6216\u62d2\u7d55\uff0c\u6210\u529f\u5efa\u7acb\u9023\u7dda\u3002 (6) \u4e0d\u6703\uff0c\u56e0\u70basalt\u662f\u96a8\u6a5f\u7522\u751f\u7684\u5b57\u4e32\uff0c\u5169\u8005salt\u503c\u4e0d\u540c\uff0c\u5247hash(salt(pass1)) != hash(salt(pass2)) (7) (8) (a) TRW: \u662f\u4e00\u7a2e\u5c0d\u4ed8\u8815\u87f2\u7684\u65b9\u6cd5\uff0c\u96a8\u6a5f\u6383\u63cf\u67d0\u500b\u6307\u5b9a\u7684\u9023\u7dda\u4f86\u770b\u662f\u5426\u6709\u53ef\u80fd\u542b\u6709\u8815\u87f2\u3002 (b) rate limiting: \u7576\u767c\u73fe\u53ef\u80fd\u6709\u8815\u87f2\u7684\u5c01\u5305\u6642\uff0c\u9650\u5236\u4f86\u81ea\u90a3\u500bsource\u7684\u5c01\u5305\u6d41\u91cf\u3002 (9) AH, ESP auth (10) \u4e0a\u9762\u6709\u4e86\u5c31\u4e0d\u91cd\u8907\u5beb\u56c9 (11) \u5169\u500b\u90fd\u662f\u6bd4\u8f03\u4f4e(\u78b0\u649e\u5c11\uff0c\u932f\u8aa4\u7387\u4f4e) \u5982\u5716: (12) \u5c0f\u5c01\u5305\u653b\u64ca\uff0c\u5b9a\u7fa9\u662f\u5c07\u5927\u7684\u5c01\u5305\u5207\u5272\u6210\u6578\u500b\u5c0f\u5c01\u5305\u4f86\u767c\u9001\uff0c\u85c9\u6b64\u898f\u907f\u5b89\u5168\u6aa2\u6e2c\uff0c\u4ee5\u9054\u6210\u653b\u64ca\u3002 \u80fd\u8eb2\u904e\u6aa2\u67e5\u539f\u56e0\u5728\u65bc\uff0c\u7b2c\u4e00\uff0c\u5c01\u5305\u5207\u5272\u5f8c\u8f03\u96e3\u770b\u51fa\u60e1\u610f\u7684pattern(\u56e0\u70bapattern \u4e5f\u88ab\u5207\u5272\u4e86)\uff1b\u7b2c\u4e8c\uff0c\u5207\u5272\u5f8csize\u660e\u986f\u6703\u964d\u4f4e\u8a31\u591a\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u5982\u5927\u5c0f\u6aa2\u67e5\u6a5f\u5236\u7684\u65b9\u6cd5\u3002 (13) (a) \u5728\u67e5\u8a62\u8cc7\u6599\u5eab\u7684\u6642\u5019\u6c92\u6709\u5728\u8f38\u5165\u6b04\u4f4d\u505a\u5b89\u5168\u6027\u6aa2\u6e2c\uff0c\u8b93\u99ed\u5ba2\u53ef\u4ee5\u593e\u5e36\u60e1\u610fSQL\u6307\u4ee4\u65bc\u5176\u4e2d\u3002 (b) \u53ef\u4ee5\u6488\u51fa\u8a31\u591a\u4f7f\u7528\u8005\u8cc7\u6599 host-based: \u901a\u5e38\u662f\u4fdd\u8b77\u500b\u4eba\u7684\u9632\u706b\u7246\uff1bnetwork-based: \u4fdd\u8b77\u6574\u500b\u7db2\u8def\u62d3\u6a38\u67b6\u69cb\u3001\u7cfb\u7d71\u7684\u9632\u706b\u7246 (14) \u4e0a\u4e00\u6b21\u7684\u7bc4\u570d\uff0c\u5c31\u6c92\u6709\u5beb\u4e86 (15) (a) \u4ee3\u8868\u843d\u5728\u7a97\u53e3\u7684\u5de6\u908a\uff0c\u662f\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305\uff0c\u6b64\u6642\u518d\u5ea6\u6536\u5230\u4ee3\u8868\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305 (b) \u6709\u5169\u7a2e\u60c5\u5f62 \u60c5\u6cc1\u4e00: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u800c\u4e14\u662f\u6c92\u6709\u5099\u63a5\u6536\u904e\u7684\uff0c\u5247\u63a5\u6536\u4ed6 \u60c5\u6cc1\u4e8c: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u7136\u800c\u662f\u88ab\u63a5\u6536\u904e\u7684\uff0c\u4ee3\u8868\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305 \u5168\u65b0\u7684\u5c01\u5305\uff0c\u7a97\u53e3\u5411\u53f3\u6ed1\u52d5\u4e00\u500b\u5c01\u5305\u55ae\u4f4d\u4ee5\u63a5\u6536\u9019\u500b\u5c01\u5305 (16) (a)size of args = 8bytes(char pointer is 8 bytes) (b)return address will store the value of where the instruction of main is stored for return purpose, which vlaue is 0x08048fe5 buf is 4 bytes, and there are 4 bytes more for $ebp, so total 8 bytes of data to overflow to the return address, payload is \"A\" * 8 + (\\95\\88\\04\\08) due to x86 little endian architecture. TA: buf \u7684\u4f4d\u7f6e\u5230 ebp \u7684\u4f4d\u7f6e\u6709 16 bytes\uff0c\u518d\u52a0\u4e0a ebp \u5230 return address \u6709 4 bytes\uff0c\u6240\u4ee5\u61c9\u8a72\u662f \"A\"*20 + (\\x95\\x88\\x04\\x08)\u3002 \u6211\u548cyilin\u8a0e\u8ad6\u7684\u7d50\u679c\uff0c\u56e0\u70bax/2wx $ebp\u8868\u793a\u5f9eebp\u5f80\u5f8c\u770b\u5169\u500bword(\u5f9e\u81ea\u5df1)\uff0c\u6240\u4ee50xbffec064\u4ee3\u8868ebp\u5b58\u4e0a\u4e00\u500bbase pointer \u7136\u5f8c\u5728\u66f4\u4e0a\u4e00\u500b\u5c31\u662freturn address\u7684\u4f4d\u5740\uff0c\u53c8buf\u4f4d\u57280xbffebfc8 \u6545 \u9700\u7528\u4f86\u6c96\u5230return addr\u7684\u9577\u5ea6\u70ba 0xbffebfd8 - 0xbffebfc8 + 4 = 0x14 = 20 , so payload (all) = \"A\"*20 +(\\x95\\x88\\x04\\x08)\u3002","title":"Junior 2nd sem. Network Security"},{"location":"univ_notes/network_security/network_security/#network-security","text":"Spring 2018 Lecturer: Shiuhpyng Shieh @CS, NCTU Taiwan","title":"Network Security"},{"location":"univ_notes/network_security/network_security/#ch1-introduction","text":"","title":"Ch1. Introduction."},{"location":"univ_notes/network_security/network_security/#ch2-symmetric-encryption-and-message-confidentiality","text":"","title":"Ch2. Symmetric Encryption and Message Confidentiality"},{"location":"univ_notes/network_security/network_security/#concept-correction-here","text":"Assymetric encryption is not necessarily and absolutely better than the symmetric encryption, they can work with each other.","title":"Concept correction here:"},{"location":"univ_notes/network_security/network_security/#common-type-of-the-cryptanalysis","text":"","title":"Common type of the cryptanalysis"},{"location":"univ_notes/network_security/network_security/#brute-force-attack","text":"On avg, half of the keys have to be tested.","title":"Brute force attack"},{"location":"univ_notes/network_security/network_security/#ciphertext-only-attack","text":"Known the encryption algorithm Want to collect all the ciphtertext to find out the plaintext or ultimately, find out what the key is.","title":"Ciphertext only attack"},{"location":"univ_notes/network_security/network_security/#known-plaintext-attack","text":"Use the known plaintext and the correspond ciphertext which encrypted by the encryption algorithm and ultimately find out what the key is.","title":"Known plaintext attack"},{"location":"univ_notes/network_security/network_security/#chosen-plaintext-attack","text":"Use the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is.","title":"Chosen plaintext attack"},{"location":"univ_notes/network_security/network_security/#difference-bw-known-plaintext-and-chosen-ciphertext","text":"See here","title":"Difference b/w known plaintext and chosen ciphertext"},{"location":"univ_notes/network_security/network_security/#chosen-ciphertext-attack","text":"As we've done in the course project 1, we use the dedicatedly and carefully crafted plaintext, figuring out the characteristics about the algorithm and ultimately find out what the key is.","title":"Chosen ciphertext attack"},{"location":"univ_notes/network_security/network_security/#feistel-cipher-architecture","text":"*","title":"Feistel cipher architecture"},{"location":"univ_notes/network_security/network_security/#model-of-symmetric-encryption","text":"Encrypt and decrypt with the same key, the key should be shared through a secure manner. security of symmetric encryption depends on the secrecy of the key, not the secrecy of the algorithm, which means we should keep the secret key as safe as possible.","title":"Model of symmetric encryption"},{"location":"univ_notes/network_security/network_security/#rsa-encryption-standard","text":"Asymmetric encryption standard. This encryption standard mainly focus on prime factorisation \u66f4\u591a\u8cc7\u8a0a\u53ef\u4ee5\u53c3\u8003 \u5916\u661f\u4eba\u7684\u7b46\u8a18","title":"RSA Encryption standard"},{"location":"univ_notes/network_security/network_security/#course-project1-chosen-cipher-attack","text":"Will post report after the session of this homework ends.","title":"Course project1. Chosen cipher attack"},{"location":"univ_notes/network_security/network_security/#des-encryption-standard","text":"An encryption algorithm use round, permutation shift and XOR operation to generate the ciphertext. Divide the plaintext into 64-bit-long in size for each if the block, and use the same length key for encryption(actually the key is not in the same length since there are 8 bits used for the parity-checking during the encryption) Image src DES Briefly introduction Prone to brute force attack since the key space is too small to guarantee the safe area, so the safer 3-DES algorithm is used nowadays. 16rounds are needed for the encryption process The encryption and decryption are run under the same algorithm but they are in the reverse order with each other This is a model based on the Fiestel model , namely for the encryption and decryption they use the same function but in the reversed order.","title":"DES Encryption standard"},{"location":"univ_notes/network_security/network_security/#from-des-to-3des","text":"DES is not so secure since the key is 56bits long, which is quite prone to BF cryptanalysis 3DES lengthens the key of DES (56 * 3 = 168), doing DES 3 times to make the encryption safer. Please feel free to refer to my classmate's note for more information For encryption procedure: P--E(K1)--A--D(K2)--B--E(K3) C C--D(K1)--B--E(K2)--A--D(K3) A Since the Fiestel architecture, the encryption and decryption method are just the reverse of each other. For decryption procedure:","title":"From DES to 3DES"},{"location":"univ_notes/network_security/network_security/#aes-encryption-standard","text":"Make a better encryption of 3DES, namely evolve from 3DES for a stronger and faster encryption algorithm. AES is still the same as the DES in the category of block cipher encryption, but the block size of AES is 128 bits, doubled of the DES encryption. 10 Rounds of encryption again and again is needed. Image source from textbook One grey-coloured box is the one \"round\" of the encryption in AES Each of the round we take the preceding round's output as the input of this round and do the encryption again, with the following 4 tasks to be done 1.The Substitution Bytes is to use the non-linear transform to let the input transformed with a \"Affine transformation\", making the encryption robust and hard to be cracked 2.The Shift Rows(Bit transposition) is shifting the data, to rearrange the text, for row i we shift i-1 times to the left. Image source from wikipedia 3.The Mix Columns is a linear transform under the mod multiplication 4.The Add Round Key is let the input XOR with the Key in the current state. (Rijndael key generator solution,which is a subkey in each round, which we can be seen from the image provided above that Key(16 bytes and expand to match for each round, divided into 10 subkeys for 10 operations in AES encryption)) 5.After the aforementioned four steps are done, go to the next encryption box. The operation is bytewise","title":"AES Encryption standard"},{"location":"univ_notes/network_security/network_security/#the-truly-random-number-and-pseudo-random-number","text":"Applications of the random number 1.RSA pub-key generation and other pub-key algorithms. 2.Session key for encryption in system such as Wi-Fi, e-mail Image source from wikipedia The following 2 criteria are used to validate a sequence is random. 1.Uniform distribution: The each element in the seed of random number must take the same proportion of being taken out. 2.Independence: A sequence cannot be inferred from the other sequence, strictly and absolutely.","title":"The truly random number and pseudo random number"},{"location":"univ_notes/network_security/network_security/#block-cipher-vs-stream-cipher","text":"","title":"Block cipher vs Stream cipher"},{"location":"univ_notes/network_security/network_security/#stream-cipher","text":"Change the encryption key from time to time, and each time the two part(sender-receiver) can generate the same random key s.t. they can encrypt and decrypt the same message. The key of such encryption algorithm should have a extremely large period and as random as possible, o.w. it is crack-prone. In order to guard the BF attack, the longer key is preferred (However there is a trade-off b/w speed and security.) As we can see the sender and receiver generate the same key for encryption and decryption. Image source from textbook RC4 Algorithm 1.An algorithm with changeable key length encryption. 2.SSL TLS WEP WPA use this encryption algorithm 3.Easy to implement in both HW ans SW, but terminated in 2015 due to attack RC4 Encryption procedure 1.Shuffle the key, make it randomised. for i from 0 to 255 S [ i ] := i endfor j : = 0 for ( i = 0 ; i 256 ; i ++ ) j : = ( j + S [ i ] + key [ i mod keylength ]) % 256 //randomly take the new j and swap, make a permutation swap values of S [ i ] and S [ j ] endfor 2.Get even more shuffle data, each time for a input byte, locate the i and j value by take the value in the key, XOR the inputByte with the key (since the reverse of XOR operation is itself, once we insert the ciphertext we'll get plaintext, and converse is true as well.) i : = 0 j : = 0 while GeneratingOutput : i : = ( i + 1 ) mod 256 //a j : = ( j + S [ i ]) mod 256 //b swap values of S [ i ] and S [ j ] //c k : = inputByte ^ S [( S [ i ] + S [ j ]) % 256 ] //XOR operation suit for this case. Reverse operation also works output K endwhile","title":"Stream cipher"},{"location":"univ_notes/network_security/network_security/#block-cipher","text":"Use the same key for the text, and divide the text into blocks, processing ONE BLOCK for each time. Processing procedure including shift position, substitute text to let the plaintext look similar, however, generating the totally different ciphertext for cryptographically secure. The AES(128 bits per block), DES(64 bits per block), 3DES(64 bits per block) are lie in this category. 5 Block modes for the block cipher, defined by NIST USA. Intended to use for the symmetric cipher. . 1.Electronic Code Book where Encryption: ciphertext[i] = code_book[plaintext[i]] just. Need a decryptor to do reversed tasks. 2.Cipher Block Chaining, take the step i's ciphertext XOR with next step's plaintext and encrypt again. If there is a bit error in the ciphertext, it will cause the decryption of plaintext i and plaintext i+1 error since they are chained together from step to step. 3.Cipher FeedBack , only the encryptor is needed, 2 times of encryption is equivalent to decryption (Reason: ). 4.CounTeR , use the counter directly for the key of encryption. Can be processed parallelly since each block can be processed with its counter and independent with other blocks, random access is suitable as well. And use the same key for decryption due to the properties of XOR operation, once the ciphertext XOR key --- plaintext is decrypted. The CTR mode is both HW and SW efficiency (parallelism are able to implemented in both CPU and compiler, OS ...etc). What's more, the preprocessing can be done as well, even without the presence of the plaintext, we can still generate the required key and the next task is just let plaintext XOR key --- ciphertext. 5.Output FeedBack similar too Cipher FeedBack, take the ciphertext from previous round and encrypt again Useful reference site ,MUST READ!!!","title":"Block cipher"},{"location":"univ_notes/network_security/network_security/#ch3-message-authencation-and-public-key-cryptography","text":"","title":"Ch3. Message Authencation and Public Key Cryptography"},{"location":"univ_notes/network_security/network_security/#message-authencation-code-mac","text":"Using some hash value of the data and encrypt that value at the end of data for validation (see the image below) Clarify!!: MAC cannot perform the data encryption, it can only be used for data authentication and validation. Such as parity checking is also a kind of message authentication. Image source from wikipedia","title":"Message Authencation Code (MAC)"},{"location":"univ_notes/network_security/network_security/#secure-hash-functions","text":"1.Collision and preimage-found resistant, making it unable to do the reverse of hash to forge the data.","title":"Secure Hash Functions"},{"location":"univ_notes/network_security/network_security/#hash-collision-strong-vs-weak","text":"","title":"Hash collision, strong vs weak"},{"location":"univ_notes/network_security/network_security/#strong","text":"Given an arbitrary x there exists no x' with x' != x so that h(x) = h(x') (\u66f4\u53b2\u5bb3\uff0c\u7121\u6cd5\u627e\u5230\u4efb\u53d6\u5169\u500b\u7522\u751f\u76f8\u540c\u96dc\u6e4a\u6578\u503c)","title":"Strong"},{"location":"univ_notes/network_security/network_security/#weak","text":"There exist no given x, and will be infeasible to find x' with x != x' so that h(x) = h(x') (\u4e00\u500b\u5df2\u77e5\u627e\u7121\u6cd5\u627e\u5230\u53e6\u4e00\u500b\u7522\u751f\u76f8\u540c\u6578\u503c\u7684\u96dc\u6e4a)","title":"Weak"},{"location":"univ_notes/network_security/network_security/#sha-note-not-an-encryption-standard","text":"Term explanation (waiting for the answer from OAlienO) 1.Message Digest Size: Message digest, MD(same as MD of MD5), of how much data amount we output, such as in the following SHA1 algorithm, we produce 160bits output (hex * 40 = 160). 2.Message Size: Message amount that we can process in one time(Maxium input). 3.Block Size: In block cipher, cut all the message into several blocks, in the block is how much message in a block to be processed 4.Word Size: A size of a given state. The following are the Message digest from the SHA512.","title":"SHA Note, NOT AN Encryption standard!"},{"location":"univ_notes/network_security/network_security/#hashing-why-and-how","text":"hash youtube Hash aims for reduce the huge amount of data to the small amount. Can be used for verify and prevent the errors in the communication. Evan a small change in the original plaintext (such as only a bit), it will cause the totally different hash value, this result is called Avalanche Effect. It ensures the security of hash algorithm. Hash has to be one-way and pre image, collision-resistant, otherwise , data will be forged. Hash is doomed to be broken or cracked, what matters is that we have to try out best to lengthen the time before being cracked","title":"Hashing, Why and How?"},{"location":"univ_notes/network_security/network_security/#hash-based-message-authentication-code-hmac","text":"Watch out the color correspondence for better understanding the procedure","title":"Hash-based message authentication code (HMAC)"},{"location":"univ_notes/network_security/network_security/#hmac-vs-cmac","text":"so hmac vs cmac * AS we can see from the picture for HMAC (aforementioned) and CMAC, although both of them use the key, but in","title":"HMAC vs CMAC??"},{"location":"univ_notes/network_security/network_security/#message-encryption-vs-message-digestionhashing-what-is-the-difference","text":"so encryption-vs-digest so how-is-an-md5-or-sha-x-hash-different-from-an-encryption hash ,encryption and more so why-should-i-use-authenticated-encryption-instead-of-just-encryption Encryption: Really make the message secret, hard to be cracked and aims for security. key difference between encryption and hashing is that encrypted strings can be reversed back into their original decrypted form if you have the right key ex. RSA AES DES ... Digestion (hashing): Digest the whole data, may be used for message authentication, producing an ID or FINGERPRINT of the input data. Hashing is great for usage in any instance where you want to compare a value with a stored value, but can't store its plain representation for security reasons . Other use cases could be checking the last few digits of a credit card match up with user input or comparing the hash of a file you have with the hash of it stored in a database to make sure that they're both the same. ex. MD5 SHA ... Furthermore, if the digested data is encrypted, than it can be used for DIGITAL SIGNATURE. 1.For example in SHA family \u80fd\u8a08\u7b97\u51fa\u4e00\u500b\u6578\u4f4d\u8a0a\u606f\u6240\u5c0d\u61c9\u5230\u7684\uff0c\u9577\u5ea6\u56fa\u5b9a\u7684\u5b57\u4e32\uff08\u53c8\u7a31\u8a0a\u606f\u6458\u8981\uff09\u7684\u6f14\u7b97\u6cd5\u3002\u4e14\u82e5\u8f38\u5165\u7684\u8a0a\u606f\u4e0d\u540c\uff0c\u5b83\u5011\u5c0d\u61c9\u5230\u4e0d\u540c\u5b57\u4e32\u7684\u6a5f\u7387\u5f88\u9ad8\u3002 OAlienO : SHA \u4e0d\u662f\u52a0\u5bc6\u56e0\u70ba\u4ed6\u6c92\u8fa6\u6cd5\u89e3\u56de\u539f\u672c\u7684 input","title":"Message encryption vs Message digestion(hashing), what is the difference?"},{"location":"univ_notes/network_security/network_security/#authenticated-encryption-hmac-x-cmac-x-ccm-cmac-aes-block-cipher-ctr-block-mode","text":"A term used to describe encryption systems that simultaneously protect confidentiality and authenticity of communications. Compared with traditional encryption, the authenticated encryption additionally provides authenticity, while plain encryption provides only confidentiality. Usually more complicated than confidentiality-only or authenticity-only schemes.","title":"Authenticated encryption (HMAC x CMAC x  CCM = CMAC + AES block cipher + CTR block mode)"},{"location":"univ_notes/network_security/network_security/#public-key-cryptography","text":"Encrypt with public key: Want to send someone a message that only they(certain of groups,...etc) will be able to read, encrypt it with that person's public key. Encrypt with private key: Want to publish some information and guarantee that you're the author (Reason is that the only person who encrypt with HIS PRIVATE KEY CAN ONLY BE THE ORGINAL AUTHOR, and everyone can use the public related to that private key to decrypt it) , and that it hasn't been tampered with, then you encrypt it with your private key.(We can as well use the authenticated encryption to ensure the authenticity. Just like the aforementioned Digital signature ) so What is we encrypt with private key??","title":"Public key cryptography"},{"location":"univ_notes/network_security/network_security/#private-key-vs-secret-key-what-is-the-difference","text":"Private key: Use in asymmetric encryption. Secret key: Use in symmetric encryption, but it is quite hard for us (or say unsafe) to exchange secret key, so the Diffie Hellman key exchange algorithm is invented.","title":"Private key vs Secret key, what is the difference?"},{"location":"univ_notes/network_security/network_security/#diffie-hellman-key-exchange","text":"A way to exchange the secret key via an unsafe path Math theory behind this algorithm SSL, TLS, SFTP use it. Like the AES implemetation AES is symmetric encryption and a shared-secret-key exchange is needed for end-to-end data encryption. Both of end to end does not need to know each other (or cant break) his / her private key but share a same secret key to do secret data exchange. In this algorithm, we should choose a very big a, b and p s.t. Bob is unable so solve 'a' of Alice's secret and neither is Alice. o.w. Eve will hack into it and solve the shared secret key. Aside from the RSA, why use Diffie Hellman key exchange? Since the process of RSA is quite burdensome (numbers in it are extremely huge) so if we can back to the traditional symmetric encryption such as AES (just now we need a \"secure pipe\" under the \"insecure pipe\") to perform key exchange. Than the end-to-end encryption can be achieved, what's more, this method is faster in which stream cipher are performed","title":"Diffie Hellman key exchange"},{"location":"univ_notes/network_security/network_security/#man-in-the-middle-attack-mitm","text":"The MITM forges the key of both side and deceives them, act as both fake Alice and Bob. And the wikipedia analogy ,note: sequence different from the image The core idea about this is still the mathematical expression, for example for the secret key K1, since Darth intercepts the message, then he can forge the key with his secret key XD2 ,due to the following mathematical theory about modulo exponential. So Alice is able to acquire the secret key via her own private key XA due to the upper math theory. BUT SHE DOES NOT KNOW THAT YD2 ACTUALLY COMES FROM DARTH and DARTH now share the same key with Alice, so Alice thinks that Darth is Bob!! and the same is true for Bob!! Originally the shared secret key should be lie on the mathematical expression like this Rather than this","title":"Man in the middle attack (MITM)"},{"location":"univ_notes/network_security/network_security/#ch4-key-distribution-and-user-authentication","text":"","title":"Ch.4 Key Distribution and User Authentication"},{"location":"univ_notes/network_security/network_security/#key-distribution","text":"Used in the symmetric key crypto system to exchange keys from one end point to another.","title":"Key distribution"},{"location":"univ_notes/network_security/network_security/#kerberos-and-its-components","text":"User password will not be transmitted but will be used as a shared secret for the authentication Centralised key distribution and authentication service b/w user and server(3 rd party) that relies on symmetric encryption (No public key in it) Generates a symmetric secret key b/w two end points. Distributed system makes computing power better. During the key's lifetime (embedded in the message), the key can be used again and again. Central idea relies on the trustworthy 3RD PARTY SERVER","title":"Kerberos and its components"},{"location":"univ_notes/network_security/network_security/#authencation-server-as","text":"Authenticate the user","title":"Authencation server (AS)"},{"location":"univ_notes/network_security/network_security/#ticket-granting-server-tgs","text":"Grant authenticated user permissions to act with the real server (SS, Service Server) wikipedia for detailed procedure Detailed explanation video","title":"Ticket granting server (TGS)"},{"location":"univ_notes/network_security/network_security/#timestamp-portocal-vs-challenge-response-portocal","text":"","title":"Timestamp portocal vs Challenge-Response Portocal"},{"location":"univ_notes/network_security/network_security/#timestamp-portocal","text":"Record the timestamp of each data transaction. Prone to replay attack(a kind of MITM attack) if the clocks b/w the client and server is not synchronised But how come will this happen?? If the system time is not synchronised, then suppose the end point EA is slower, then the MITM can intercept the message b/w two endpoint and resend the password again to hack and pretend to be the genuine user. What's more, since the time is slower in EA, then as the MITM intercepts data and resend, it does need some time to \"RETRANSMIT\" , but it is the slower time that allows the delay of retransmit time not be discovered if the time difference |T_received - T_send| epsilon is not so strict.","title":"Timestamp portocal"},{"location":"univ_notes/network_security/network_security/#challenge-response-portocal","text":"Reference this video first! The server and the receiver share a certain kind of \"shared secret\" that might be generated as the user registered in the system. Ensures the \"Mutual Authentication\" The procedure as follows: Server sends a unique challenge value sc to the client Client sends a unique challenge value cc to the server Server computes sr = hash(cc + secret) and sends to the client Client computes cr = hash(sc + secret) and sends to the server Server calculates the expected value of cr and ensures the client responded correctly Client calculates the expected value of sr and ensures the server responded correctly where sc is the server generated challenge cc is the client generated challenge cr is the client response sr is the server response Since the secret is shared b/w the server and client, then is is able to verify the genuine of both server and client A good challenge/response system will generate a new challenge for every transaction or session (and make sure that previous challenges are not reused!), so that session transcripts cannot be spliced together to create new fraudulent systems. (Maybe the challenge will be encrypted in both parties)","title":"Challenge-Response Portocal"},{"location":"univ_notes/network_security/network_security/#comparison-bw-kerberos-v4-and-kerberos-v5","text":"Reference here v4 is prone to MITM attack and v5 is not. Both of them provides mutual authentication","title":"Comparison b/w Kerberos v4 and Kerberos v5"},{"location":"univ_notes/network_security/network_security/#what-is-mutual-authentication-and-why-we-need-it","text":"\u7591\u554f\uff1aMutual authentication \u76f8\u8f03\u65bc one way \u4ed6\u7684\u597d\u8655\u662f \u53ef\u4ee5\u540c\u6642\u9a57\u8b49 \u4f3a\u670d\u5668\u65b9\u548c\u4f7f\u7528\u8005\u65b9\u561b\uff1f\uff1f \u5c31\u662f\u4f3a\u670d\u5668\u80fd\u78ba\u8a8d\u9019\u500buser \u800c\u4e14\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u78ba\u8a8d\u9019\u500bserver \u4f46\u662f\u539f\u672c\u53ea\u6709usr\u4f86\u78ba\u8a8dserver \u591a\u51fa\u9019\u500bserver\u4f86\u78ba\u8a8dusr \u6703\u6709\u4ec0\u9ebc\u512a\u9ede\u5462\uff1f \u89e3\u7b54\uff1a\u56e0\u70bauser\u548cserver\u90fd\u6709\u53ef\u80fd\u88ab\u4eff\u5192\uff0c\u56e0\u6b64\u9700\u8981\u96d9\u91cd\u8a8d\u8b49\u96d9\u65b9\u3002 Both the server and client may be inpersonated, so we need to verify their real identification.","title":"What is mutual authentication and why we need it??"},{"location":"univ_notes/network_security/network_security/#key-distribution-with-asymmetric-encryption-public-key-certificate","text":"The well known SSL use this method ,and the X.509 standard is used. Aimed to solve the problem that we want to verify the authentication of some authorities by the trusted certificated authority (CA) Step as follows Verify the signature that generated by CA to ensure the reality.","title":"Key distribution with asymmetric encryption (Public key certificate)"},{"location":"univ_notes/network_security/network_security/#what-is-the-difference-bw-the-digital-signature-and-public-key-authentication","text":"From stackoverflow: A digital signature is used to verify a message. It is basically an encrypted hash (encrypted by the private key of the sender) of the message. The recipient can check if the message was tampered with by hashing the received message and comparing this value with the decrypted signature (decrypted the signature with the public key from the sender). To decrypt the signature, the corresponding public key is required. A digital certificate is used to bind public keys to persons or other entities. If there were no certificates, the signature could be easily be forged, as the recipient could not check if the public key belongs to the sender. Original discussion thread Similar reference The \"Chain of Trust\" SSL certificate, root certificate are all related to this topic Actually the public key certification (certification distribution of authorize a genuine key) is the core concept of SSL/TLS portocal Chain of Trust YouTube video Private key of root CA should be absolutely inaccessible. Once the \"Chain of Trust\" is successfully formed, an secure communication path can be formed (TLS using SSL certificate to do such things)","title":"What is the difference b/w the digital signature and public key authentication."},{"location":"univ_notes/network_security/network_security/#so-a-question-comes-to-my-mind-what-is-the-differenct-bw-httpstls-and-ssl","text":"Answer as follows: 1.TLS is just the new name (or say acronym) of SSL Namely, SSL protocol got to version 3.0; TLS 1.0 is \"SSL 3.1\". TLS versions currently defined include TLS 1.1 and 1.2. Each new version adds a few features and modifies some internal details. We sometimes say \"SSL/TLS\". 2.HTTPS is the HTTP under the secured transmission protocol, i.e. HTTPS is HTTP-within-SSL/TLS. SSL (TLS) establishes a secured, bidirectional tunnel for arbitrary binary data between two hosts.","title":"So a question comes to my mind, What is the differenct b/w HTTPS,TLS and SSL?"},{"location":"univ_notes/network_security/network_security/#why-chain-of-trust","text":"Even though the asymmetric (Public-key cryptography RSA) can ensure the secret communication, digital signature can ensure the correctness of content , however, we are still not sure about whether the issuer of the digital certificate is the real \"good guy\" or the \"forged guy.\" wikipedia ref","title":"Why chain of trust??"},{"location":"univ_notes/network_security/network_security/#pki-ca-keyetc-great-explanation-video","text":"Here A public key infrastructure (PKI) is a set of roles, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption.","title":"PKI, CA, Key...etc great explanation video"},{"location":"univ_notes/network_security/network_security/#when-to-revoke-a-users-certification","text":"The user\u2019s private key is assumed to be compromised(\u5047\u5b9a\u88ab\u6d29\u6f0f\u51fa\u53bb\u4e86) The user is no longer certified by this CA; reasons for this include subject\u2019s name has changed, the certificate is superseded, or the certificate was not issued in conformance with the CA\u2019s policies The CA\u2019s certificate is assumed to be compromised","title":"When to revoke a user's certification??"},{"location":"univ_notes/network_security/network_security/#the-pki-architecture","text":"PKI YouTube video * PKI is a framework that some vendor and use...etc should follow, and PKI associates a public key with a verified person/system.","title":"The PKI architecture"},{"location":"univ_notes/network_security/network_security/#ch5-cloud-security","text":"","title":"Ch.5 Cloud Security"},{"location":"univ_notes/network_security/network_security/#8021x-eapa-framework","text":"Used to control the access of user to the internet. provides a generic transport service for the exchange of authentication information between a client system and an authentication server. The authentication server gives the instruction to the gate / authenticator such that it can give the client the internet resource he wants or not. , auth methods through the EAP layer to reach the data link layer. Procedure as follows 1.EAPOL(OL stands for data encapsulation)-Start, start the eap 2.EAPOL(OL stands for data encapsulation)-EAP(REQ/IDENTITY) auth server wants to know the identity / 3.EAPOL(OL stands for data encapsulation)-EAP(RESPONSE/AUTH) five the clinet response 4.EAPOL(OL stands for data encapsulation)-Logoff end the connection","title":"802.1X, EAP(A framework)"},{"location":"univ_notes/network_security/network_security/#cloud-couputing","text":"Definition: Focus on what service cloud should have rather than a \"how to\" design architecture. a tool for describing, discussing, and developing a system-specific architecture using a common framework of reference. SaaS provides software such as google drive, PaaS manages the computing platform such as the web(middleware components), and IaaS provides the hardware resources such as the network server and hosts...etc Roles in cloud computing. 1.Carrier: Provide the transport b/w cloud services and consumers 2.Auditor(\u7a3d\u67e5\u54e1): Assures that THE CP conforms to a certain cloud standards 3.Broker(\u7d93\u7d00\u4eba):Help the consumer to manage the cloud service when it is too complicated.","title":"Cloud Couputing"},{"location":"univ_notes/network_security/network_security/#data-protection-in-the-cloud","text":"Multi instance model: Am unique DBMS in each could subscriber(Risk distribution) Multi tenant model: Allows customers to share computing resources in a public or private cloud. Each tenant's data is isolated and remains invisible to other tenants. The rest of cloud computing will be read before the midterm 2","title":"Data protection in the cloud"},{"location":"univ_notes/network_security/network_security/#ch6-transport-level-security","text":"","title":"Ch.6 Transport-Level Security"},{"location":"univ_notes/network_security/network_security/#ssl-architecture","text":"SSL connection: each connection is transient , and associated with one session. SSL session: Association b/w the client and the server wikipedia NetAdmin","title":"SSL Architecture"},{"location":"univ_notes/network_security/network_security/#ssl-record-portocol","text":"Confidentiality with Handshake protocol to ensure that no one intercept in the pipeline, encrypt the data with secret key. Message integrity: With a shared secret key to ensure the MAC code such that we may check whether the data has been modified or not.","title":"SSL Record Portocol"},{"location":"univ_notes/network_security/network_security/#pre-master-master-secret-private-shared-session-key","text":"Pre master key: Allow for the uniform format of the master key.(Aim for the greater consistency) Master key is the agreement of both endpoint, master_secret = PRF(pre_master secret, \"master secret\"(aims for tag of current thing), Client ran + Server ran (or the Alice ran add up with the Bob ran)) Check here","title":"Pre master, master secret, private, shared / session key"},{"location":"univ_notes/network_security/network_security/#cryptographic-computations","text":"","title":"Cryptographic Computations"},{"location":"univ_notes/network_security/network_security/#tls-https-http-ssltls-http-under-a-secure-transport-layer","text":"Port 443 will be used since it invokes the SSL The normal HTTP close we just need HTTP close, while the HTTPS we need the TLS which involves the underlying TCP connection. TLS requires the two entity of TCP in both client and server side. TLS should agree and exchange the closure alerts before closing connection.","title":"TLS, HTTPS = HTTP + SSL/TLS HTTP under a secure transport layer"},{"location":"univ_notes/network_security/network_security/#ssh","text":"Cryptographic network protocol 3different protocol: User authentication, Connection and Transport Layer Protocol Using the asymmetric encryption for user authentication(identify the private key of the user ti ensure the user is really him). Authentication method Package spec","title":"SSH"},{"location":"univ_notes/network_security/network_security/#ssh-channel-types","text":"Including Session (Remotely execute a command such like ssh ), X11 , Forwarded TCPIP(Remote Port Forwarding) Direct(Local PF)","title":"SSH Channel types"},{"location":"univ_notes/network_security/network_security/#port-forwarding","text":"SSHPF Useful features of SSH Insecure TCP - SSH (Change the port from TCP to SSH) SSH force the traffic in the TCP change to the SSH layer. Local vs Remote PF Local vs Remote ?? 1.Local \u81ea\u5df1\u9023\u5411\u66f4\u9060\u7aef\u7684\u4f3a\u670d\u5668\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u81ea\u5df1\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u9060\u7aefremote server\u7684b\u57e0\uff0c\u85c9\u7531remote server\u50b3\u5230\u66f4\u9060\u7aef\u7684faraway host 2.Remote \u7576\u9060\u7aef\u4f3a\u670d\u5668\u60f3\u8981\u9023\u56de\u4f86\u6642\uff0c\u5f9e\u81ea\u5df1\u7684\u89d2\u5ea6\u770b\u5c07\u9060\u7aef\u7684a\u57e0\u7d93\u7531ssh\u96a7\u9053\u9023\u5411\uff08\u8f49\u767c\u5c0e\u5411\uff09\u6211\u9019\u7aeflocal server\u7684b\u57e0\uff0c\u85c9\u7531local server\u9023\u5411\u6211\u4e00\u65c1\u7684near host","title":"Port Forwarding"},{"location":"univ_notes/network_security/network_security/#ch7-wireless-security","text":"Wireless devices are tend to have higher security risks than others since the following factors: Channel, Mobility, Resources, Accessibility. Common Wireless Network Threats: Accidental association, Malicious association, AD-HOC Networks, Identity theft(MAC Spoofing), MITM attack, DoS, Network injection.","title":"Ch.7 Wireless Security"},{"location":"univ_notes/network_security/network_security/#protect-against-wireless-eavesdropping","text":"Signal hiding(not so practical) and encryption(kind of practical).","title":"Protect against wireless eavesdropping"},{"location":"univ_notes/network_security/network_security/#protect-the-access-point","text":"Main threat is the unauthorized access to the network. The 802.1X standard. provides the authentication for device wishing connecting to the LAN/WLAN.","title":"Protect the access point"},{"location":"univ_notes/network_security/network_security/#mobile-device-security","text":"Major security issues are: Lack of physical security controls Use of untrusted mobile devices Use of untrusted networks Use of untrusted content Use of applications created by unknownparties Interaction with other systems Use of location services","title":"Mobile device security"},{"location":"univ_notes/network_security/network_security/#80211i-wireless-protocol","text":"Controlled ports:PDU exchange within LAN b/w supplicant and other systems only if supplicant authorizes such an exchange Uncontrolled ports: Allows PDU exchange b/w supplicant and other RS regardless the authentication state. BSS, ESS? Here","title":"802.11i Wireless protocol"},{"location":"univ_notes/network_security/network_security/#wep-wpa-rsn","text":"WEP: Use RC4 for encryption, the level of security is unrelated with len of WEP key, \u56e0\u70baRC4\u662fstream cipher\u7684\u4e00\u7a2e\uff0c\u540c\u4e00\u500b\u9470\u5319\u7d55\u4e0d\u80fd\u4f7f\u7528\u4e8c\u6b21\uff0c\u6240\u4ee5\u4f7f\u7528\uff08\u96d6\u7136\u662f\u7528\u660e\u6587\u50b3\u9001\u7684\uff09IV\u7684\u76ee\u7684\u5c31\u662f\u8981\u907f\u514d\u91cd\u8907\uff1b\u7136\u800c24\u4f4d\u5143\u7684IV\u4e26\u6c92\u6709\u9577\u5230\u8db3\u4ee5\u64d4\u4fdd\u5728\u5fd9\u788c\u7684\u7db2\u8def\u4e0a\u4e0d\u6703\u91cd\u8907\uff0c\u800c\u4e14IV\u7684\u4f7f\u7528\u65b9\u5f0f\u4e5f\u4f7f\u5176\u53ef\u80fd\u906d\u53d7\u5230\u95dc\u9023\u5f0f\u9470\u5319\u653b\u64ca, so change to WPA or WPA2 is the safer method\u3002 WPA: Fixed the vulnerability of WEP.","title":"WEP, WPA, RSN"},{"location":"univ_notes/network_security/network_security/#80211i-fourway-handshake-auth","text":"Here MIC is the message integrity code to ensure the integrity of the message. What is the purpose of ANonce and SNonce? As we can see from the 2017mid2 , they are used to generated the PTK for both the STA and AP, also the back SNonce serves like a challenge-response protocol to ensure the freshness and the alive of STA that there is no MITM attack and the same is true for AP. The GTK is used for decrypting the data of multicast and broadcast traffic, all of the STAs share the same GTK. GTK is distributed after the pairwise keys that already established (Use PK generated before to enctypt the GTK key ) GTK Changed every time as device leaves network(yes TRANSIENT KEY!) TK with TKIP or CCMP are used for traffic key(encryption for data transfer phase) provides message integrity and data confidentiality. HMAC-SHA1 are used to generated nonce, expand pairwise keys and to generate GTK, PTK(transient key)","title":"802.11i Fourway handshake auth."},{"location":"univ_notes/network_security/network_security/#ch8-email-security","text":"","title":"Ch8. EMAIL Security"},{"location":"univ_notes/network_security/network_security/#pretty-good-privacy","text":"Provides a confidentiality and authentication service that can be used for electronic mail and file storage applications PGP also provides the message authentication and the message integrity. Services 1.Digital signature: DSS, RSA , SHA 2.Message encryption: CAST, IDEA, 3DES 3.Compression: zip 4.email compatibility: Base64 encryption","title":"(Pretty Good Privacy)"},{"location":"univ_notes/network_security/network_security/#pgp-authencation","text":"RSA ensures that only the mail sender signed with the digital sender, encrypt w his/her private key, can be decrypted with his/her public key, thus ensures the identity. SHA ensures that no one can generated the message with the same hash code","title":"PGP Authencation"},{"location":"univ_notes/network_security/network_security/#pgp-confidentiality-and-authentication","text":"64bits CFB is used, using the block cipher , symmetric encryption. In PGP, each symmetric key is used only once.(The session key is bound with the message and transmitted.) Encrypt the sesion key with the receiver's public key.","title":"PGP Confidentiality and Authentication"},{"location":"univ_notes/network_security/network_security/#pgp-compression","text":"PGP compresses the msg after signature but before encryption. If sign after the compression, then the version of compression will be constrained since different compression leads to different encoding thus different hash result even with the same source data.","title":"PGP Compression"},{"location":"univ_notes/network_security/network_security/#pgp-e-mail-compatibility","text":"Radix64(B64) encoding to convert them into printable ASCII chars. Append the CRC to protect the transmission error.","title":"PGP E-mail Compatibility"},{"location":"univ_notes/network_security/network_security/#smime","text":"Security enhancement for the MIME Another standard besides PGP","title":"S/MIME"},{"location":"univ_notes/network_security/network_security/#mime","text":"MIME improve from SMTP 5 Headers are defined, to fully describe the email, MIME-ver, content type, content-transfer encoding, content-ID, content description.","title":"MIME"},{"location":"univ_notes/network_security/network_security/#smime-functionality","text":"Enveloped data: encrypted content of any type and encrypted content encryption keys for one or more recipients. Signed data, message digest of content and digital signature with the private key of the signer. Recipient without S/MIME compatibility are unable to view the data Clear-signed data: Only the digital signature is encoded using base64 recipients without S/MIME capability can view the message content, although they cannot verify the signature","title":"S/MIME  Functionality"},{"location":"univ_notes/network_security/network_security/#cryptographic-algorithms-used-in-smime","text":"Smime secures the MIME with a signature ,encryption, or both Clear signing does not involve transforming the message to be signed.","title":"Cryptographic algorithms used in S/MIME"},{"location":"univ_notes/network_security/network_security/#smime-certificate-processing","text":"Managers and/or users must configure each client with a list of trusted keys and with certificate revocation lists. Local wil maintaining the certs needed to verify incoming signatures and to encrypt outgoing messages.(MACV\u4eba\u7684\u8b49\u66f8\u4f86\u6aa2\u9a57\u5225\u4eba\u7684\u6578\u4f4d\u7c3d\u6709\u4ee5\u53ca\u8981\u7528\u81ea\u5df1\u7684\u8b49\u66f8\u4f86\u70ba \u81ea\u5df1\u7684\u8a0a\u606f\u52a0\u5bc6\uff0c\u4ee5\u53ca\u7c3d\u7f72\u3002)","title":"S/MIME Certificate Processing"},{"location":"univ_notes/network_security/network_security/#dkim","text":"cryptographically signing e-mail messages, permitting a signing domain t()o claim responsibility for a message in the mail stream YouTube","title":"DKIM"},{"location":"univ_notes/network_security/network_security/#2nd-midterm-note","text":"","title":"2nd midterm note"},{"location":"univ_notes/network_security/network_security/#2014mid2","text":"\u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X \u5728\u6bcf\u4e00\u500bSSL session\u548ccinnection\u4e2d \u4ed6\u5011\u7684\u53c3\u6578\u6703\u5f7c\u6b64\u4e92\u76f8\u5206\u4eab\uff0c\u4f8b\u5982\u52a0\u5bc6\u65b9\u6cd5\u8207\u79d8\u9470\u5319\u9577\u5ea6\uff0csession \u548cconenction\u4ed6\u5011\u7684\u5dee\u5225\u5728\u65bc:SSL session\u8207SSL connection\u662f\u4e0d\u540c\u7684\u6982\u5ff5\u3002 SSL session\u6307\u7684\u662f\u901a\u904e\u63e1\u624b\u800c\u7522\u751f\u7684\u4e00\u4e9b\u53c3\u6578\u548c\u52a0\u5bc6\u79d8\u9470\u7684\u96c6\u5408\uff1b\u7136\u800cSSL connection\u662f\u6307\u5229\u7528\u67d0\u500bsession\u5efa\u7acb\u8d77\u4f86\u7684\u6d3b\u52d5\u7684\u6703\u8a71\u3002\u63db\u53e5\u8a71\u4f86\u8aaa\uff0cconnection\u662f\u6703\u8a71\u7684\u9032\u7a0b\uff0c\u800csession\u662f\u5efa\u7acb\u9019\u500b\u6703\u8a71\u6240\u9700\u8981\u7684\u4e00\u4e9b\u53c3\u6578\u3002 (\u4fee\u6b63\u904e!)SSL\u4e2d \u52a0\u5bc6\u3001MAC\u3001\u58d3\u7e2e\u53ef\u80fd\u7684\u9806\u5e8f\u6709\u516d\u7a2e\uff0c\u4f46\u5176\u4e2d\u5408\u7406\u7684\u53ef\u80fd \u53ea\u6709\u52a0\u5bc6\u5728\u58d3\u7e2e\u4e4b\u5f8c!(\u58d3\u7e2e\u524d\u5c31\u52a0\u5bc6\uff0c\u56e0\u70ba\u8cc7\u6599\u5df2\u7d93\u8b8a\u6210\u7955\u6587\uff0c\u6709\u53ef\u80fd\u58d3\u7e2e\u6703ERROR) WEP\u7684\u7f3a\u9ede\u5c31\u662f \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587\uff0c\u52a0\u4e0aRC4\u662f\u4e00\u7a2estream cipher\u6a21\u5f0f\uff0c\u9700\u8981\u5920\u9577\u7684key\uff0c\u4f46WEP\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907) PMK PTK(\u66ab\u614b) KCK(EAP confirmation\uff0c\u7528\u4f86\u4fdd\u969c\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u5354\u5b9a\u9470\u5319\u4ea4\u63db\u7684\u5b8c\u6574\u6027)+KEK(EAP encryption, \u7528\u4f86\u4fdd\u8b49\u56db\u6b21\u63e1\u624b\u4ea4\u63db\u4e2dGTK\u3001RSN IE \u7684\u6a5f\u5bc6\u6027\uff0c\u5c31\u662f\u78ba\u4fdd\u9019\u500b\u9470\u5319\u4e0d\u4e0d\u6703\u88ab\u76dc\u7528)+TK(traffic encryption, user traffic \u7684\u6a5f\u5bc6\u6027\u8207\u5b8c\u6574\u6027\uff0c\u5728\u7528\u6236\u548c\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u8cc7\u6599\u52a0\u5bc6) WPA\u52a0\u5bc6\u76844\u8def\u4ea4\u4e92\u5354\u5b9a\uff0c\u56e0\u70ba\u6709 SNonce \u548c ANonce \u7528\u4f86\u7d44\u6210TK\uff0c\u6545\u80fd\u78ba\u4fddfreshness \u66f4\u8a73\u7d30\u8acb\u9ede\u6b64 2014\u6700\u5f8c\u4e00\u984c\uff0c\u5982\u679c\u662f\u7528\u90f5\u4ef6\u7684\u672c\u8eab\u5167\u5bb9\u4f86\u52a0\u5bc6\uff0c\u800c\u4e26\u975e\u90f5\u4ef6\u7684\u96dc\u6e4a\u6578\u503c\u52a0\u5bc6\u4f9d\u7136\u53ef\u7a31\u4f5c\u7c3d\u7ae0\uff0c\u4f46\u662f\u6548\u679c\u76f8\u7576\u5dee\uff0c\u56e0\u70ba\u662f\u6574\u4efd\u90f5\u4ef6\uff0c\u8a08\u7b97\u91cf\u592a\u5927\u4e86\uff0c\u52a0\u4e0a\u56e0\u70ba\u662f\u7528\u5bc4\u4ef6\u4eba\u7684\u79c1\u9470\u52a0\u5bc6\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u7528\u5bc4\u4ef6\u4eba\u7684\u516c\u9470\u6253\u958b\uff0c\u518d\u52a0\u4e0a\u96a8\u4fbf\u4e82\u8aaa\u89e3\u5bc6\u524d\u7684\u6771\u897f\u5c31\u662f\u7c3d\u7ae0\u4fbf\u6703\u9020\u6210\u98a8\u96aa","title":"2014mid2"},{"location":"univ_notes/network_security/network_security/#2015mid2","text":"EAP\u652f\u6301\u7684\u65b9\u6cd5\u6709EAP-TLS, MD5, POTP, PSK , PWD, TTLS, IKEV2, FAST, SIM, AKA, GTC EKE \u5ba2\u6236\u7aef\u5728\u9032\u884cEAP\u62d3\u5c55\u8a8d\u8b49\u5354\u8b70\u7684\u6642\u5019\u662f\u900f\u904euncontrolled port\u548c\u8a8d\u8b49\u4f3a\u670d\u5668\u6e9d\u901a\uff0c\u539f\u56e0\u5728\u65bcuncontrolled\u7684\u7aef\u672b\u53ef\u8b93AS\u548cSTATION\u6e9d\u901a\uff0c\u4e0d\u8ad6\u72c0\u614b\uff0c\u4f46\u662fcontrolled\u9700\u8981\u8a8d\u8b49\u904e\u5f8c\u624d\u884c\uff0c\u56e0\u6b64\u5728\u4e00\u525b\u958b\u59cb\u7684\u6642\u5019\u4e26\u4e0d\u9069\u7528(\u4e00\u525b\u958b\u59cb\u4e00\u5b9a\u662f\u9084\u6c92\u6709\u8a8d\u8b49\u904e\u7684\u72c0\u614b)\uff0c\u9019\u500b\u5354\u8b70\u7684\u6a19\u6e96\u5236\u5b9a\u5728802.1X WEP by RC4, WPA by RC4 and TKIP, RSN by AES CCM CCMP ch8 12\u7684\u5716\u8981\u591a\u770b!","title":"2015mid2"},{"location":"univ_notes/network_security/network_security/#2016mid2","text":"WEP WPA TKIP all use RC4","title":"2016mid2"},{"location":"univ_notes/network_security/network_security/#_1","text":"11 A(O)SNonce ANonce B(X)\u61c9\u8a72\u662fTK(?) C(O)\u7528Nonce D(O) E(X)\u61c9\u70baAP TA: B: (O) \u662f\u5229\u7528 PMK \u4f86\u52a0\u5bc6\u3002 (\u61c9\u8a72\u9084\u662fTK \u52a9\u6559\u53ef\u80fd\u7d66\u932f) handshake \u4e26\u6c92\u6709\u63d0\u4f9b authentication \u7684\u529f\u80fd\uff0c\u6240\u4ee5 D\u3001E \u61c9\u8a72\u90fd\u662f\u932f\u7684\u3002\u4f60\u7684\u5176\u4ed6\u7b54\u6848\u90fd\u662f\u5c0d\u7684\u3002 12 A:\u5c0d\uff0c\u56e0\u70ba\u6709Nonce\u7d44\u6210TK\uff0c B:\u61c9\u8a72\u5c0d\uff0c\u5427? \u4f46\u662fGROUP KEY\u63d0\u5230\u5982\u679c\u6709\u4e00\u500b\u88dd\u7f6e\u96e2\u958b\u4e86\uff0c\u5c31\u6703\u8b8a\u66f4\uff0c C:\u6c92\u6709\uff0c\u5427? \u56e0\u70ba\u4ed6\u662f\u63a1\u7528RC4stream cipher\uff0cKEY\u6703\u4e00\u76f4\u8b8a D: TKIP\u4e5f\u662f\u63a1\u7528RC4\u7684stream cipher \u6240\u4ee5KEY\u6703\u4e00\u76f4\u8b8a TA: WEP key \u90fd\u662f\u56fa\u5b9a\uff0cIV \u624d\u6703\u4e00\u76f4\u6539\u8b8a\u3002 A: No. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab B: Yes. WEP key \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u4eba\u5171\u4eab C: No. data packet \u662f\u7528 RC4(IV,WEP key) \u7522\u751f\u7684 key \u52a0\u5bc6\uff0cIV\u6703\u4e00\u76f4\u6539\u8b8a\u56e0\u6b64\u7522\u751f\u7684 key \u4e5f\u6703\u4e00\u76f4\u8b8a\u3002 D: No. \u7406\u7531\u540c\u4e0a\u3002 13 A: a--noncea b b--nonceb a one way 2times, 2 way four times?? C: both\u5427?, replay attack\u6c92\u6709\u7528\u56e0\u70ba\u6703\u6709nonce\u78ba\u4fdd\u4fe1\u606f\u662f\u6700\u65b0\u7684 TA: A: one way 2 times, two way 3 times C: both","title":"\u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee"},{"location":"univ_notes/network_security/network_security/#2017mid2","text":"","title":"2017mid2"},{"location":"univ_notes/network_security/network_security/#_2","text":"5 \u5168\u90e8 TA: \u4f60\u662f\u5c0d\u7684 6 a,b,c,d,e,f,g,h TA: \u4f60\u662f\u5c0d\u7684 7 (i) \u7528\u4f86\u7522\u751fPTK (ii)\u56e0\u70ba\u9031\u671f\u6027\u7684\u8a2d\u5b9a\u70ba0\uff0c\u90a3\u9ebc\u540c\u6a23\u70ba0\u7684\u5169\u500bnonce\u6709\u53ef\u80fd\u4ee3\u8868\u4e0d\u540c\u7684\u6642\u9593\u9ede\uff0c\u6240\u4ee5\u5bb9\u6613\u906d\u53d7replay attack TA: \u4f60\u662f\u5c0d\u7684 8 (i) WEP key\u53ea\u670924bits\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u91cd\u8907(stream cipher\u662f\u5e0c\u671bkey\u4e0d\u8981\u91cd\u8907\uff0c\u56e0\u6b642^24\u592a\u5c0f\uff0c\u5bb9\u6613\u91cd\u8907) (ii) \u56e0\u70baC1 = P1 XOR RC4(IV, K). \u5982\u679c\u8490\u96c6\u5920\u591a\u7684\u8cc7\u6599\u5247\u5f88\u5bb9\u6613\u627e\u51fa\u8a31\u591a\u7684Ci Pi\u5c0d\uff0c\u9019\u6a23\u5c31\u5bb9\u6613\u627e\u51fa\u4e4b\u4e2d\u7684RC4\u52a0\u5bc6\u95dc\u4fc2\uff0c\u9032\u800c\u7834\u89e3\u79d8\u6587 TA: (i) \u6b63\u78ba\u4f86\u8aaa WEP key \u662f\u56fa\u5b9a\u7684\uff0cIV \u662f 24bits \u4e26\u4e14\u6703\u96a8\u6642\u6539\u8b8a\u3002\u5f31\u9ede\u7684\u78ba\u662f\u5bb9\u6613\u91cd\u8907\u3002 (ii) \u56e0\u6b64\u7576\u627e\u5230 IV \u91cd\u8907\u7684\u60c5\u6cc1\u6642\uff0c\u5169\u500b\u52a0\u5bc6\u7684\u5c01\u5305(C1,C2)\u6703\u9020\u6210 = C1 xor C2 = P1 xor P2, \u4e4b\u5f8c\u4fbf\u53ef\u7528frequency analysis \u7834\u89e3\u51fa\u660e\u6587\u3002","title":"\u4ee5\u4e0b\u6709\u8a0e\u8ad6\u7684\u984c\u76ee"},{"location":"univ_notes/network_security/network_security/#ch9-ip-security","text":"","title":"Ch9. IP Security"},{"location":"univ_notes/network_security/network_security/#_3","text":"\u5728\u7db2\u8def\u5c64(OSI \u7b2c\u4e09\u5c64\uff0c\u4ecb\u65bcDATA LINK\u5c64\u548c\u50b3\u8f38\u5c64\u4e4b\u9593)\u7684\u5b89\u5168\u6a5f\u5236 \u9700\u8981\u80fd\u78ba\u4fdd\u5169\u4ef6\u4e8b \u7db2\u8def\u88dd\u7f6e\u80fd\u9060\u96e2\u672a\u6388\u6b0a\u7684\u88dd\u7f6e\u8207\u63a7\u5236\u7db2\u8def\u6d41\u91cf end to end user \u6d41\u91cf\u8ffd\u8e64\u5c07\u4f7f\u7528\u8a8d\u8b49\u8207\u52a0\u5bc6\u6a5f\u5236\u4f86\u78ba\u4fdd\u5b89\u5168","title":"\u6982\u5ff5"},{"location":"univ_notes/network_security/network_security/#ipsec","text":"\u78ba\u4fdd\u5728LAN\uff0c\u516c\u53f8\u5b89\u5168 \u5728\u7db2\u8def\u4e0a\u9060\u7aef\u9023\u7d50\u7684\u5b89\u5168 \u5efa\u7acb\u8207\u5925\u4f34\u7684\u5167\u5916\u7db2\u9023\u7d50\u6a5f\u5236 \u5efa\u7acb\u96fb\u5b50\u5546\u52d9\u76f8\u95dc\u7684\u5b89\u5168\u6a5f\u5236 \u80fd\u78ba\u4fdd\u5728IP\u5c64\u7684\u6d41\u91cf\u5b89\u5168\uff0c\u53ca\u8a8d\u8b49( can encrypt and/or authenticate all traffic at the IP level) \u597d\u8655: \u5982\u679c\u5c07IPSEC\u653e\u5728\u9632\u706b\u7246\uff0c\u90a3\u9ebc\u6240\u6709\u6d41\u904e\u4ed6\u7684\u6d41\u91cf\u90fd\u53ef\u4ee5\u88ab\u5b89\u5168\u7684\u4fdd\u8b77\uff0c\u4e14\u516c\u53f8\u6216\u5de5\u4f5c\u7fa4\u7d44\u5167\u7684\u6d41\u91cf\u4e5f\u4e0d\u6703\u56e0\u6b64\u800c\u7522\u751f\u8ca0\u64d4 \u5982\u679c\u6240\u6709\u7684\u5916\u4f86\u8a0a\u606f\u90fd\u5fc5\u9808\u4f7f\u7528IP\uff0c\u800c\u9632\u706b\u7246\u662f\u7db2\u969b\u7db2\u8def\u9032\u5165\u5167\u90e8\u7684\u552f\u4e00\u7ba1\u9053\u6642\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\u6703\u6709\u7e5e\u904e\u9632\u706b\u7246IPSec\u7684\u9014\u5f91(IPSec\u4e00\u5b9a\u6703\u64cb\u4e0b\u4f86) IPSEC\u5c0d\u65bc\u4e0a\u5c64\u662f\u770b\u4e0d\u5230\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u8005\u4e0d\u9700\u8981\u91cd\u65b0\u8abf\u6574\u8a2d\u5b9a\u3002 \u53ef\u4ee5\u63d0\u4f9b\u7d66\u500b\u4eba\u5b89\u5168\uff0c\u6216\u662f\u7279\u5b9a\u4f7f\u7528\u8005(\u56e0\u70ba\u4f7f\u7528\u8005\u6703\u6709\u81ea\u5df1\u7684IP\uff0c\u56e0\u6b64\u6211\u5011\u80fd\u900f\u904e\u5206\u914d\u7279\u5b9a\u7684IP\u5230\u7279\u5b9a\u7684IPSEC\u7d66\u4ed6\u5b89\u5168\u6a5f\u5236) \u4f8b\u5982\u6709\u500b\u4eba\u7684\u865b\u64ec\u7db2\u8def\u6216\u662f\u5728\u5927\u4f01\u696d\u5e95\u4e0b\u7684\u5b50\u7db2\u8def\u5c31\u80fd\u6d3e\u4e0a\u7528\u5834\u3002","title":"IPSEC\u7684\u61c9\u7528"},{"location":"univ_notes/network_security/network_security/#_4","text":"IPSEC \u80fd\u78ba\u4fdd\u4ee5\u4e0b\u56db\u9805 \u8def\u7531\u5ee3\u64ad\u4f86\u81ea\u6388\u6b0a\u904e\u7684\u8def\u7531\u5668(from authorized router) A router seeking to establish or maintain a neighbor relationship with a router in another routing domain is an authorized router(\u4fdd\u8b49\u76f8\u9130\u7684\u8def\u7531\u5668\u4e5f\u662f\u7d93\u904e\u6388\u6b0a\u7684) \u80fd\u627e\u5230\u6700\u521d\u59cb\u767cIP\u5c01\u5305\u7684router (A redirect message comes from the router to which the initial IP packet was sent ) \u8def\u7531\u66f4\u65b0(routing update)\u4e0d\u6703\u88ab\u507d\u9020","title":"\u8def\u7531\u65b9\u9762\u7684\u61c9\u7528"},{"location":"univ_notes/network_security/network_security/#ipsec_1","text":"\u592a\u591a\u4e86 \u81ea\u5df1\u770b","title":"IPSEC\u4e2d\u7684\u8cc7\u6599"},{"location":"univ_notes/network_security/network_security/#ipsec_2","text":"\u8981\u80fd\u78ba\u4fdd\u4ee5\u4e0b\u529f\u80fd\u53ef\u4ee5\u88ab\u5be6\u65bd\uff0c\u8b6c\u5982 \u5b58\u53d6\u63a7\u5236(Access Control) \u7121\u9023\u7dda\u5b8c\u6574\u6027(Connection-LESS integrity) \u8cc7\u6599\u4f86\u6e90\u8a8d\u8b49(Data origin authentication)\uff0c\u8a8d\u8b49IP\u5c01\u5305\uff0c\u78ba\u4fdd\u771f\u7684\u662f\u7531\u4ed6\u50b3\u904e\u4f86\u7684\uff0c\u4ee5\u53ca\u662f\u5426\u88ab\u4fee\u6539\u904e \u62d2\u7d55\u91cd\u64ad\u653b\u64ca(\u53ef\u4ee5\u7528sequenct number\u4f86\u9810\u9632 \u4e4b\u5f8c\u6703\u63d0\u5230) \u9650\u5236\u6d41\u91cf\u7684\u6a5f\u5bc6\u6027(Limited traffic flow confidentiality)","title":"IPSEC\u6240\u63d0\u4f9b\u7684\u670d\u52d9"},{"location":"univ_notes/network_security/network_security/#transport-mode-tunnel-mode","text":"\u5176\u5dee\u5225\u5728\u65bc\u8cc7\u6599\u5c01\u88dd\u7684\u4e0d\u540c(\u5c01\u88dd\u6a5f\u5236\u7684\u4e0d\u540c) \u5dee\u7570\u9805\u76ee transport mode tunnel mode \u4fdd\u8b77\u9805\u76ee upper layer protocols entier IP packet \u4fdd\u8b77\u5c0d\u8c61 host-to-host encapsulation(Encryption), authentication(Auth Header) gateway-to-gateway(or host) \u6a5f\u5236 \u5728\u539f\u6709\u7684IP\u982d\u4e2d\u63d2\u5165\u9069\u7576\u7684IPSEC Header\uff0c\u8cc7\u6599\u64f4\u5145\u91cf\u8f03\u70ba\u5c11\uff0c\u4f46\u662f\u6bcf\u4e00\u500b\u4e3b\u6a5f\u90fd\u8981\u6642\u505aIPSEC\u624d\u53ef\u4ee5\uff0c\u6bd4\u8f03\u5c0d\u65bc\u7528\u6236\u4e0d\u65b9\u4fbf \u76f4\u63a5\u5728\u5916\u5305\u4e00\u500b\u65b0\u7684IP\u982d(src \u81ea\u5df1\u3001dst \u9060\u7aef\uff0c\u8b02\u4e4bnew ip header)\u4ee5\u53ca\u7aef\u53e3\uff0c\u4f46\u5728\u500b\u4eba\u96fb\u8166\u8edf\u9ad4\u4e0d\u9700\u8981\u65b0\u7a31\u6642\u505aIPSEC\uff0c\u53ea\u8981\u5728\u8def\u7531\u5668\u4e0a\u9762\u6709\u5373\u53ef\uff0c\u4f7f\u4e0d\u540c\u7684\u5340\u57df\u7db2\u8def\u9023\u7dda\u9593\u7528IPSEC\uff0c\u5373\u6709\u5b89\u5168\u7684VPN\u9023\u7dda","title":"\u5169\u7a2e\u6a21\u5f0f transport mode \u6216\u662f tunnel mode"},{"location":"univ_notes/network_security/network_security/#security-association","text":"def: \u5728\u5169\u500b\u7db2\u8def\u5be6\u9ad4\u4e4b\u9593\uff0c\u6240\u5efa\u7acb\u8d77\u7684\u5171\u4eab\u7db2\u8def\u5b89\u5168\u5c6c\u6027\u3002(\u4ecb\u65bc\u767c\u9001\u8005\u8207\u63a5\u6536\u8005\u4e4b\u9593\u7684\u55ae\u5411\u95dc\u4fc2) ex: \u5728IP\u5c01\u5305\u4e2d\uff0c\u4ee5\u9418\u9ede\u5730\u5740\u7684IPV4 V6\u5c01\u5305\u4e2d\u7684SPI\u8cc7\u8a0a\u4f5c\u70ba\u5b89\u5168\u95dc\u806f\u7684\u5b9a\u7fa9(SPI \u5b89\u5168\u53c3\u6578 in the enclosed extension header) \u5169\u500b\u91cd\u8981\u7684\u6771\u897f\u4f86\u78ba\u4fdd\u5b89\u5168\u95dc\u806f\u7684\u904b\u4f5c \u5b89\u5168\u95dc\u806f\u8cc7\u6599\u5eab(SAD): \u5b9a\u7fa9\u6bcf\u4e00\u500bSA\u7684\u53c3\u6578(\u4ea6\u5373IPSEC\u6a19\u982d(AH\u6216\u662fESP)\u4e2dSPI\u7684\u6578\u503c)\uff0c\u8209\u51e1\u53c3\u6578\u865f\uff0c\u5e8f\u865f(seq number counter \u9632\u6b62\u91cd\u653e\u653b\u64ca), \u5e8f\u865f\u6ea2\u51fa\u6a19\u793a(seq number counter overflow), \u9632\u91cd\u653e\u653b\u64ca\u8996\u7a97(anti replay window), AH\u3001ESP information, \u6709\u6548\u6642\u9593(SA lifetime), \u5354\u8b70\u6a21\u5f0f(IPSEC protocol mode), \u9019\u689d\u8def\u4e0a\u6700\u5927\u50b3\u8f38\u55ae\u5143(path MTU) \u5b89\u5168\u653f\u7b56\u8cc7\u6599\u5eab(SPD): \u5b58\u653eIPSEC\u7684\u898f\u5247\uff0c\u7528\u4f86\u5b9a\u7fa9\u54ea\u500b\u6d41\u91cf\u8981\u8d70\u54ea\u4e00\u500bIPSEC\uff08a table\uff09 Ipsec \u7684SPD\u548cSAD\u8be6\u89e3 - CSDN\u535a\u5ba2 \u8207\u642d\u914d\u8ab2\u672c\u7684\u5716\u8868\u4e00\u8d77\u770b\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u5728SPD\u4e2d\u67e5\u5230\u6709\u76f8\u7b26\u7684\u4f86\u6e90\u8207\u76ee\u7684\u4ee5\u53ca\u7aef\u53e3\u5f8c\uff0c\u5c31\u53ef\u4ee5\u5957\u7528\u5176\u4e2dSPD\u7684\u898f\u5247\uff0c\u4e5f\u5c31\u662f\u7db2\u5740\u4e2d\u7684\u57f7\u884c\u5354\u8b70\u6216\u662fpdf\u4e2d\u7684action\u3002 \u82f1\u6587\u55ae\u5b57: outbound: \u9001\u53bb\u5916\u9762\u3001\u5411\u5916\u767c\u9001\u7684\uff1binbound: \u9001\u53bb\u88e1\u9762\uff0c\u5411\u5167\u9001\u7684 \u4ee5\u4e0b\u70ba\u6d41\u7a0b\u5716\u5169\u5f35 ESP\u8a73\u7d30\u89e3\u91cb \u5728tunnel mode\u4e2d\u6703\u6709\u4e00\u500b\u65b0\u7684ip header(new ip header)","title":"\u5b89\u5168\u95dc\u806f(Security Association)"},{"location":"univ_notes/network_security/network_security/#_5","text":"\u5229\u7528\u8996\u7a97\u7684\u6a5f\u5236\uff0c\u5c31\u50cf\u5728\u8a08\u7b97\u6a5f\u7db2\u8def\u6982\u8ad6\u6240\u5b78\u5230\u7684\uff0c\u7576\u6536\u5230\u4e00\u500b\u5c01\u5305\u5f8c\u5c31\u5c07\u8996\u7a97\u5411\u524d\u79fb\uff0c\u7528bool\u8868\u793a\u6709\u6c92\u6709\u6536\u5230\uff0c\u6536\u5230\u524d\u4e00\u5f8c\u525b\u624d\u7684\u5730\u65b9\u5c31\u4e0d\u80fd\u518d\u5ea6\u63a5\u6536\u4e86(\u56e0\u70ba\u8996\u7a97\u5df2\u7d93\u96e2\u958b\u4e86\u90a3\u500b\u7bc4\u570d) \u56e0\u6b64\u80fd\u9632\u6b62\u91cd\u653e\u653b\u64ca","title":"\u9632\u6b62\u91cd\u653e\u653b\u64ca"},{"location":"univ_notes/network_security/network_security/#sa","text":"\u55ae\u4e00\u7684SA\u53ea\u80fdAH\u6216\u662fESP\u4f46\u4e0d\u80fd\u540c\u6642\u6709\u6578\u7a2e \u540d\u8a5e\u89e3\u91cb: security assocation bundle(SA\u6346\u5305(?))\uff0c\u4e00\u9023\u4e32\u7684SA\u4f7f\u6d41\u91cf\u901a\u904e\u4f86\u9054\u6210\u60f3\u8981\u7684IPSEC\u670d\u52d9\u3002 \u4e0d\u540c\u7684SA\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u7aef\u9ede\u7d50\u675f\uff0c\u4e5f\u53ef\u4ee5\u5728\u540c\u500b\u3002 \u6709\u5169\u7a2e\u65b9\u6cd5 \u50b3\u8f38\u76f8\u9130(transport adjacency) : \u4ee5\u4e0d\u7528\u5230\u96a7\u9053\u7684\u65b9\u5f0f(?)\u4f86\u5be6\u4f5c\u6bd4\u4e00\u5c64\u6a5f\u5236\u9084\u591a\u7684\u4fdd\u8b77\u5c64\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u5c64\u7684\u5b89\u5168\u6a5f\u5236\u7684\u7d50\u5408(allow only for one level of combination)\u3002 \u8fed\u4ee3\u96a7\u9053(iterated tunneling) : \u4f7f\u7528\u96a7\u9053\u4f86\u6642\u505a\u591a\u5c64\u4fdd\u8b77\u6a5f\u5236\u4f86\u4fdd\u8b77IP\u5c01\u5305\uff0c\u53ef\u4ee5\u6709\u5de2\u72c0\u7684\u5b89\u5168\u6a5f\u5236\u7d50\u5408\u3002","title":"\u7d50\u5408\u6578\u500bSA"},{"location":"univ_notes/network_security/network_security/#esp-wiht-authentication","text":"transport mode: \u8a8d\u8b49\u5728\u6574\u500bIP payload(\u6307IP\u5c01\u5305\u50b3\u8f38\u771f\u6b63\u7684\u5167\u5bb9\u3001\u8cc7\u6599\u672c\u8eab)\uff0c\u4f46\u662fIP\u7684\u982d\u4e26\u6c92\u6709\u88ab\u4fdd\u8b77\u3002 tunnel mode: auth\u5728\u76ee\u7684\u5730\u624d\u6709\uff0c\u6574\u500bIP\u5c01\u5305\u90fd\u88ab\u4fdd\u8b77 \u5169\u500b\u6a21\u5f0f\u90fd\u662f\u5c0d\u7955\u6587\u8a8d\u8b49\uff0c\u4e26\u975e\u660e\u6587","title":"ESP wiht authentication\u5728\u5169\u7a2e\u6a21\u5f0f\u4e0b\u7684\u60c5\u6cc1"},{"location":"univ_notes/network_security/network_security/#transport-adjacency","text":"def: \u5167ESP SA\u5916AH SA\u7684\u8907\u5408\u578b\u8a8d\u8b49\u6a5f\u5236\u3002 \u6b64\u8655\u7684ESP\u6c92\u6709\u8a8d\u8b49 \u52a0\u5bc6IP\u7684\u8cc7\u6599(payload) AH\u5247\u662f\u7528\u5728\u50b3\u8f38\u6a21\u5f0f(transport mode)\uff0c (\u53ef\u80fd\u8003):\u512a\u02c7\u9ede\u5c31\u662f\uff0c\u8a8d\u8b49\u8f03\u591a\u7684field\uff1b\u7f3a\u9ede\u5c31\u662f\uff0c\u6709\u5169\u500bSA\u53ef\u80fdoverhead\u591a\u4e86\u4e9b\uff0c\u6548\u80fd\u964d\u4f4e\uff0c\u9019\u4e5f\u662f\u4e00\u500btrade off \u5148\u52a0\u5bc6(\u5167ESP)\u518d\u8a8d\u8b49(\u5916AH)(\u4e0b\u9762\u90a3\u500b\u4e8b\u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u539f\u56e0\u4e4b\u5f8c\u8a73\u8ff0)","title":"\u50b3\u8f38\u76f8\u9130(transport adjacency)"},{"location":"univ_notes/network_security/network_security/#transport-tunnel-bundle","text":"def: \u5148\u8a8d\u8b49\u518d\u52a0\u5bc6\uff0c\u63a1\u7528\u5167AH transport SA, \u5916ESP tunnel SA\uff0c\u6709\u4e9b\u539f\u56e0\u5982\u4e0b \u7ac4\u6539\u8cc7\u6599\u7d93\u7531\u9a57\u8b49\u4e00\u5b9a\u6703\u767c\u73fe\uff0c\u6545\u4e0d\u53ef\u80fd\uff0c\u6240\u4ee5\u4e5f\u4e0d\u9700\u8981\u5148\u52a0\u5bc6\uff0c\u5148\u8a8d\u8b49\u5c31\u597d\u4e86(\u5982\u679c\u6709\u4eba\u6514\u622a\u4e26\u4fee\u6539\u9a57\u8b49\u7684\u8cc7\u6599\u4e00\u5b9a\u6703\u88ab\u767c\u73fe) \u5148\u8a8d\u8b49\u5f8c\u5c31\u53ef\u4ee5\u628a\u8a8d\u8b49\u8cc7\u8a0a\u5b58\u5728\u76ee\u7684\u7aef(destination)\uff0c\u63d0\u4f9b\u5c07\u4f86\u8b58\u5225\u7528 C * \u7d50\u679c\u5c31\u662f\u6574\u500b\u8a8d\u8b49\u7684inner packet\u90fd\u88ab\u52a0\u5bc6\u4e86\uff0c\u800c\u4e14\u9084\u9644\u4e0a\u4e86\u65b0\u7684ItP\u982d C","title":"\u50b3\u8f38\u8207\u96a7\u9053\u8907\u5408(transport-tunnel bundle)"},{"location":"univ_notes/network_security/network_security/#internet-key-exchange-ike","text":"\u6709IPSEC SA\u4e5f\u6709 IKE SA \u5169\u500b\u662f\u4e0d\u4e00\u6a23\u7684\u6771\u897f\uff0c\u5169\u968e\u6bb5\u5354\u5546\uff0c\u5148\u5354\u5546\u51fa\u4e00\u500bIKESA \u63a5\u8457\u518d\u524d\u5f80IPSEC SA \u95dc\u9375\u7684\u5169\u500b\u8981\u7d20: \u9470\u5319\u6c7a\u8b70(key determination) \u548c \u9470\u5319\u5206\u767c(key distribution)\u901a\u5e38 \u56db\u500b\u9470\u5319\u5728\u5169\u500b\u61c9\u7528\u7a0b\u5f0f\u7684\u6e9d\u901a\u9593 \u5354\u5546\u5167\u5bb9 \u52a0\u5bc6\u7b97\u6cd5 hash\u7b97\u6cd5 \u8a8d\u8b49\u65b9\u5f0f PRF\u7b97\u6cd5(\u7528\u4ee5\u7522\u751f\u52a0\u89e3\u5bc6\u5bc6\u8981) DH \u9470\u5319\u4ea4\u63db\u7b97\u6cd5\u6848\u53c3\u6578 \u9470\u5319\u9577\u5ea6 \u5169\u7a2e\u9470\u5319\u7ba1\u7406\u8fa6\u6cd5 \u624b\u52d5: \u624b\u52d5\u5c07\u9470\u5319\u914d\u7f6e\uff0c\u9069\u7528\u65bc\u5c0f\u578b\u4e14\u8b8a\u63db\u8f03\u5c11(small and static)\u7684\u74b0\u5883(\u56e0\u70ba\u5982\u679c\u8b8a\u5316\u5f88\u5927\u8981\u4e00\u76f4\u624b\u52d5\u91cd\u65b0\u914d\u7f6e\u76f8\u7576\u9ebb\u7169) \u81ea\u52d5: \u53ca\u6642\u4f9b\u61c9\u9700\u6c42(on-demand)\u7684\u9470\u5319\u5efa\u7acb(\u9700\u8981\u7684\u6642\u5019\u624d\u62ff)","title":"\u7db2\u8def\u9470\u5319\u4ea4\u63db(internet key exchange, IKE)"},{"location":"univ_notes/network_security/network_security/#isakmpoakley","text":"IPSEC\u7684\u9810\u8a2d\u9470\u5319\u7ba1\u7406\u6a5f\u5236 ISAKMP: \u63d0\u4f9b\u4e00\u500b\u67b6\u69cb(framework)\u4f86\u5efa\u7acb\u5b89\u5168\u95dc\u806f(SA)\u548c\u52a0\u5bc6\u91d1\u9470 OAKLEY: \u4f7fDH\u9470\u5319\u4ea4\u63db\u540c\u6642\u53c8\u80fd\u4fdd\u969c\u5b89\u5168(Oakley\u53ef\u8996\u70ba\u662fDiffie-Hellman\u91d1\u9470\u4ea4\u63db\u6cd5\u7684\u52a0\u5f37\u7248\uff0c\u539f\u7406\u76f8\u540c\u4f46\u63d0\u4f9b\u8f03\u9ad8\u7684\u5b89\u5168\u6027\u3002)\uff0c\u4e5f\u4e0d\u9650\u5236\u7279\u5b9a\u683c\u5f0f( does not dictate specific formats)\uff0c\u63d0\u4f9bprotocal, format\u4f86\u5546\u91cf(negotiate)\u5b89\u5168\u5c6c\u6027(security attribute)\uff0c\u5305\u542b\u4e00\u4e9b\u80fd\u6709\u5404\u5f0f\u5404\u6a23\u7684key exchange algo\u7684\u8a0a\u606f\u96c6\u5408(message set) \u5728\u9019\u4e9b\u6a5f\u5236\u4e2d\u6703\u6709Nonce\u4f86\u78ba\u4fdd\u91cd\u653e\u653b\u64ca All the pics , images credits to the original author, I only use it for the education purpose, please DO NOT distribute","title":"ISAKMP/OAKLEY"},{"location":"univ_notes/network_security/network_security/#ch10-malicious-software","text":"","title":"Ch.10 Malicious Software"},{"location":"univ_notes/network_security/network_security/#_6","text":"\u5148\u4ee5\u5982\u4f55\u50b3\u64ad\u5206\u985e\uff0c\u518d\u4ee5\u50b3\u64ad\u5230\u76ee\u6a19\u5f8c\u505a\u4ec0\u9ebc\u4f86\u5206\u985e \u6216\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5206\u985e \u9700\u4e0d\u9700\u8981\u5bc4\u751f\u65bchost program(\u5bbf\u4e3b)\uff0c\u4f8b\u5982\u75c5\u6bd2\uff1b\u6216\u662f\u53ef\u4ee5\u81ea\u7531\u884c\u52d5\u7684\u5982\u7279\u6d1b\u4f0a\u6728\u99ac\u6216bot\u7a0b\u5f0f \u4e0d\u6703\u81ea\u6211\u8907\u88fd\uff0c\u4f8b\u5982\u6728\u99ac\u548c\u5783\u573e\u90f5\u4ef6\uff1b\u6703\u81ea\u6211\u5fa9\u81ea\u4f8b\u5982\u8815\u87f2\u548c\u75c5\u6bd2 \u62b5\u9054\u653b\u64ca\u76ee\u6a19\u505a\u4ec0\u9ebc \u70b8\u6389\u7cfb\u7d71 \u63a7\u5236\u6a5f\u5668\u4f7f\u5176\u6210\u70ba\u6bad\u5c4d\u96fb\u8166 \u7aca\u53d6\u8cc7\u6599 \u92b7\u8072\u533f\u8de1\uff0c\u4ee5\u514d\u88ab\u8ffd\u8e64\u767c\u73fe \u8907\u5408\u653b\u64ca\u6a21\u5f0f","title":"\u7c97\u7565\u5206\u985e"},{"location":"univ_notes/network_security/network_security/#_7","text":"\u4ee5\u524d\u958b\u767c\u60e1\u610f\u8edf\u9ad4\u7684\u96e3\u5ea6\u9817\u9ad8\uff0c\u4f46\u96a8\u8457\u958b\u767c\u5957\u4ef6\u7684\u666e\u53ca\uff0c\u73fe\u4eca\u5bb9\u6613\u591a\u4e86\uff0c\u5c31\u9023\u4e00\u822c\u7684\u78bc\u8fb2\u4e5f\u90fd\u505a\u5f97\u5230 \u8fd1\u5e74\u4f86\u99ed\u5ba2\u5f9e\u500b\u4eba\u8b8a\u6210\u7d44\u7e54\u7b49\u7d1a\u72af\u7f6a","title":"\u767c\u5c55\u53f2"},{"location":"univ_notes/network_security/network_security/#_8","text":"\u4ecb\u7d39 \u4e00\u7a2e\u5bc4\u751f\u6027(parasitic)\u7684\u7a0b\u5f0f\uff0c\u81ea\u6211\u57f7\u884c \u53ef\u4ee5\u611f\u67d3\u5176\u4ed6\u7a0b\u5f0f\u3001\u57f7\u884c\u6a94\u7b49\u7b49\uff0c\u4e26\u4e14\u6709\u53ef\u80fd\u7ac4\u6539\u4ed6 \u67b6\u69cb \u611f\u67d3\u6a5f\u5236: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u611f\u67d3\u3001\u50b3\u64ad\uff0c\u6709\u6642\u4e5f\u53eb\u505ainfction vector \u89f8\u767c: \u8aaa\u660e\u75c5\u6bd2\u5982\u4f55\u88ab\u6253\u958b\uff0c\u6709\u6642\u4e5f\u53eb\u505alogic bomb payload: \u75c5\u6bd2\u505a\u4e86\u4ec0\u9ebc \u968e\u6bb5 \u4f11\u7720(dormant): idle\u4e2d\uff0c \u4e0d\u662f\u6240\u6709\u75c5\u6bd2\u90fd\u6709\u9019\u500b\u968e\u6bb5 \u50b3\u64ad(propagation): \u8907\u88fd\u5230\u5176\u4ed6\u7a0b\u5f0f\u3001\u78c1\u5340\u4e2d \u6fc0\u767c(triggering): \u75c5\u6bd2\u88ab\u555f\u52d5\u4e86 \u57f7\u884c(execution): \u505a\u58de\u4e8b \u58d3\u7e2e\u75c5\u6bd2(compression virus): \u5c07\u81ea\u5df1\u89e3\u58d3\u7e2e\u9644\u52a0(prepend)\u5230\u5176\u4ed6\u57f7\u884c\u6a94\u4e4b\u4e2d\uff0c\u53ef\u4ee5\u7528\u4f86\u898f\u907fsize checking\u7684\u6383\u6bd2\u65b9\u5f0f","title":"\u96fb\u8166\u75c5\u6bd2"},{"location":"univ_notes/network_security/network_security/#_9","text":"\u611f\u67d3\u958b\u6a5f\u78c1\u5340: \u4f8b\u5982MBR \u611f\u67d3\u6a94\u6848: \u611f\u67d3OS\u3001shell\u7b49\u91cd\u8981\u6a94\u6848 \u5de8\u96c6: \u611f\u67d3\u61c9\u7528\u7a0b\u5f0f\u9700\u8981\u7684macro\uff0c\u5f71\u97ff\u6587\u4ef6\u7684\u4f7f\u7528 \u591a\u89d2\u5ea6: \u591a\u7a2e\u611f\u67d3\u6a21\u5f0f","title":"\u4ee5\u653b\u64ca\u7684\u76ee\u6a19\u5206\u985e\u75c5\u6bd2"},{"location":"univ_notes/network_security/network_security/#_10","text":"\u52a0\u5bc6(encryption): \u75c5\u6bd2\u7684\u67d0\u90e8\u5206\u7522\u751f\u52a0\u5bc6\u7684\u9470\u5319\uff0c\u4e26\u52a0\u5bc6\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u800c\u7576\u611f\u67d3\u6210\u529f\u8981\u57f7\u884c\u7684\u6642\u5019\u5c31\u6703\u4f7f\u7528\u7576\u521d\u7684\u9470\u5319\u4f86\u89e3\u5bc6\u75c5\u6bd2\u4e26\u4e14\u57f7\u884c\u4ed6\uff0c\u6b64\u5916\u6bcf\u7576 \u75c5\u6bd2\u7e41\u6b96\u7684\u6642\u5019\u9019\u500b\u52a0\u5bc6\u7684\u9470\u5319\u5c31\u6703\u6539\u8b8a\uff0c\u662f\u6545\u52a0\u5bc6\u7684\u7d50\u679c\u4e5f\u6703\u4e0d\u4e00\u6a23\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u75c5\u6bd2\u7279\u5075\u78bc\u6aa2\u6e2c(no constant bit pattern value) \u96b1\u533f(stealth): \u4f7f\u9632\u6bd2\u8edf\u9ad4\u7121\u6cd5\u5075\u6e2c\uff0c\u6574\u500b\u505a\u7684\u4e8b\u60c5(payload)\u4ee5\u53ca\u75c5\u6bd2\u672c\u8eab\u90fd\u96b1\u85cf\u3002 \u591a\u578b\u614b(polymorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u56e0\u6b64\u96e3\u4ee5\u7528\u75c5\u6bd2\u7279\u5fb5\u78bc\u4f86\u6aa2\u67e5\u3002 \u7a81\u8b8a(metamorphic): \u6bcf\u6b21\u611f\u67d3\u5f8c\uff0c\u75c5\u6bd2\u5c31\u7a81\u8b8a\u4e00\u6b21\uff0c\u6709\u53ef\u80fd\u5c07\u81ea\u5df1\u5168\u90e8\u91cd\u65b0\u6539\u5beb\uff0c\u5305\u542b\u884c\u70ba\u4ee5\u53ca\u6a23\u8c8c\uff0c\u4f7f\u5f97\u96e3\u4ee5\u5075\u6e2c\u3002","title":"\u4ee5\u75c5\u6bd2\u5982\u4f55\u898f\u907f\u5075\u6e2c\u4f86\u5206\u985e"},{"location":"univ_notes/network_security/network_security/#_11","text":"\u5de8\u96c6\u75c5\u6bd2\u53ef\u4ee5 \u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\u7a0b\u5f0f\u78bc \u56b4\u91cd\u5371\u5bb3\u7684\u539f\u56e0 \u5e73\u53f0\u7121\u95dc\u6027(platform- INDEPENDENT )(\u75c5\u6bd2\u53ef\u4ee5\u8de8\u5e73\u53f0) \u611f\u67d3\u6587\u4ef6(\u611f\u67d3\u652f\u6301\u6587\u4ef6\u7684\u8173\u672c\uff0c\u4f7f\u6587\u4ef6\u7121\u6cd5\u9806\u5229\u904b\u884c)\uff0c\u800c\u975e\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc \u9019\u4e9b\u6587\u4ef6\u90fd\u5f88\u5e38\u898b\uff0c\u4f8b\u5982word(\u593e\u5e36\u65bc\u5176\u4e2d)\uff0c\u4f7f\u5176\u6563\u64ad\u5bb9\u6613 \u56e0\u70ba\u662f\u611f\u67d3\u6587\u4ef6\u800c\u975e\u7cfb\u7d71\uff0c\u56e0\u6b64\u8f03\u96e3\u4ee5\u963b\u6b62\u6563\u64ad","title":"\u5de8\u96c6\u4ee5\u53ca\u8173\u672c\u75c5\u6bd2"},{"location":"univ_notes/network_security/network_security/#_12","text":"\u4e00\u500b\u6703\u81ea\u5df1\u627e\u6a5f\u5668\u4f86\u611f\u67d3\u7684\u7a0b\u5f0f \u70ba\u4e86\u8907\u88fd\uff0c\u53ef\u80fd\u6703\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4f86\u63a5\u5230\u9060\u7aef\u6a5f\u5668 \u96fb\u90f5\u3001\u6a94\u6848\u50b3\u8f38 \u9060\u7aef\u57f7\u884c \u9060\u7aef\u6a94\u6848\u63a5\u89f8(remote file access) \u9060\u7aef\u767b\u5165(remote login) \u8815\u87f2\u7684\u904b\u4f5c\u968e\u6bb5\u548c\u75c5\u6bd2\u4e00\u6a23\uff0c\u770b\u4e0a\u65b9\u63d0\u904e\u7684\u5373\u53ef \u8207\u96fb\u8166\u75c5\u6bd2\u4e0d\u540c\u7684\u662f\uff0c\u96fb\u8166\u8815\u87f2\u4e0d\u9700\u8981\u9644\u5728\u5225\u7684\u7a0b\u5f0f\u5167\uff0c\u53ef\u80fd\u4e0d\u7528\u4f7f\u7528\u8005\u4ecb\u5165\u64cd\u4f5c\u4e5f\u80fd\u81ea\u6211\u8907\u88fd\u6216\u57f7\u884c \u8815\u87f2\u5982\u4f55\u767c\u73fe\u76ee\u6a19 \u96a8\u6a5f: \u96a8\u6a5f\u611f\u67d3\u4e0d\u540cIP\uff0c\u6703\u9020\u6210\u5f88\u5927\u7684\u7db2\u8def\u6d41\u91cf\uff0c\u5c31\u7b97\u5728\u653b\u64ca\u5c55\u958b\u524d(\u56e0\u70ba\u8981\u4e00\u76f4\u96a8\u6a5f\u627e\u76ee\u6a19\uff0c\u8f03\u70ba\u6df7\u4e82\uff0c\u9817\u5403\u7db2\u8def\u6d41\u91cf\u8cc7\u6e90)\uff0c\u4e5f\u53ef\u4ee5\u6aa2\u6e2c\u51fa \u76ee\u6a19\u5217\u8868(hit list): \u653b\u64ca\u8005\u5df2\u7d93\u6709\u653b\u64ca\u5217\u8868\uff0c\u63a5\u8457\u6309\u8868\u64cd\u8ab2\uff0c\u56e0\u70ba\u5df2\u7d93\u5148\u5efa\u597d\u653b\u64ca\u5217\u8868\uff0c\u5728scan\u6a5f\u5668\u7684\u6642\u5019\u5c31\u5f88\u5feb\uff0c\u5f88\u96e3\u6293\u51fa\u611f\u67d3\u7279\u5fb5 \u62d3\u6a38\u7684(topological): \u7528\u5df2\u7d93\u611f\u67d3\u7684\u6a5f\u5668\u4f86\u627e\u51fa\u5176\u4ed6\u53ef\u653b\u64ca\u76ee\u6a19 \u5340\u57df\u5b50\u7db2(local subnet):\u5982\u679chost\u662f\u5728\u9632\u706b\u7246\u5f8c\u88ab\u611f\u67d3\u7684\uff0c\u8815\u87f2\u6703\u5229\u7528\u5b50\u7db2\u8def\u7684\u67b6\u69cb\u627e\u4ed6\u7684\u5b50\u7db2\u8def\u7576\u76ee\u6a19 \u8815\u87f2\u7684\u6280\u8853(worm technology) \u8de8\u5e73\u53f0 \u591a\u653b\u64ca(multi-exploit): \u4ee5\u591a\u7a2e\u7ba1\u9053\u6ef2\u5165\u7cfb\u7d71 \u5feb\u901f\u50b3\u64ad(ultrafast spreading): \u5229\u7528\u5404\u7a2e\u65b9\u6cd5\u52a0\u5feb\u50b3\u64ad\u901f\u5ea6\uff0c\u4f86\u611f\u67d3\u6108\u591a\u4e3b\u6a5f\u6108\u597d \u591a\u5f62: \u70ba\u4e86\u898f\u907f\u76e3\u6e2c\uff0c\u6bcf\u4e00\u500b\u8907\u88fd\u904e\u7684\u8815\u87f2\u90fd\u6703\u6709\u529f\u80fd\u4e00\u81f4\u4f46\u662f\u65b0\u7684\u7a0b\u5f0f\u78bc\u5167\u5bb9 \u7a81\u8b8a: \u6539\u8b8a\u5916\u89c0\uff0c\u6216\u662f\u5728\u751f\u614b\u968e\u6bb5\u6709\u4e0d\u540c\u7684\u7279\u5fb5 \u4ea4\u901a\u5de5\u5177(transport vehicle): \u56e0\u70ba\u8815\u87f2\u5bb9\u6613\u5927\u91cf\u611f\u67d3\u6a5f\u5668\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u4f5c\u70ba\u60e1\u610fpayload\u7684\u6563\u4f48\u5de5\u5177","title":"\u96fb\u8166\u8815\u87f2"},{"location":"univ_notes/network_security/network_security/#mobile-code","text":"def: (QQ \u597d\u96e3\u7ffb\u8b6f\uff0c\u76f4\u63a5\u786c\u80cc\u5b9a\u7fa9\u5427): Refers to programs that can be shipped unchanged to a heterogeneous collection of platforms and execute with identical semantics\uff0c\u8de8\u5e73\u53f0\u4f46\u662f\u529f\u80fd\u76f8\u540c\u3002(\u8b93\u7a0b\u5f0f\u53ef\u4ee5\u88dd\u8f09\u5230\u5404\u7a2e\u4e0d\u540c\u7684\u5e73\u53f0\u800c\u4e14\u57f7\u884c\u7684\u76ee\u7684\u901a\u80fd\u76f8\u540c) \u53ef\u4f5c\u70ba\u6728\u99ac\u3001\u8815\u87f2\u3001\u75c5\u6bd2\u7684\u50b3\u64ad\u6a5f\u5236 \u5e38\u898b\u7684\u653b\u64ca\u624b\u6cd5 cross-site scripting: \u5229\u7528\u7db2\u9801\u7684\u5b89\u5168\u6f0f\u6d1e\u5c07\u60e1\u610f\u8173\u672c\u6ce8\u5165\u5230\u7db2\u9801\u4e2d\u3002 \u4e92\u52d5\u5f0f\u7db2\u9801(interactive, dynamic web) email \u9644\u4ef6 \u5f9e\u5947\u602a\u7684\u5730\u65b9\u4e0b\u5947\u602a\u7684\u6587\u4ef6(\u4f8b\u5982\u91d1\u5c71\u6bd2X\uff0c36X\u9632\u6bd2)","title":"\u884c\u52d5\u7684\u7a0b\u5f0f\u78bc(mobile code)"},{"location":"univ_notes/network_security/network_security/#driven-by-downloads","text":"\u653b\u64ca\u8005\u5229\u7528\u7db2\u9801\u7684\u6f0f\u6d1e\uff0c\u8b93\u4f7f\u7528\u8005\u700f\u89bd\u53d7\u63a7\u5236\u7684\u7db2\u9801\u5f8c\uff0c\u4fbf\u53ef\u4ee5\u5e6b\u4f7f\u7528\u8005\u5b89\u88dd\u60e1\u610f\u8edf\u9ad4(\u4f8b\u5982\u90a3\u7a2e\u4e00\u6253\u958b\u5c31\u8df3\u51fa\u6771\u897f\u5e6b\u4f60\u5b89\u88ddhao123\u7684\u7db2\u7ad9)","title":"\u4e0b\u8f09\u611f\u67d3(driven-by-downloads)"},{"location":"univ_notes/network_security/network_security/#_13","text":"\u6700\u8fd1\u7684\u5783\u573e\u96fb\u90f5\u5e38\u5e38\u7531\u6bad\u5c4d\u7db2\u8def\u767c\u9001 \u5783\u573e\u90f5\u7c21\u4e5f\u9069\u5408\u4e58\u8f09\u60e1\u610f\u8edf\u9ad4 \u4e5f\u53ef\u4ee5\u91e3\u9b5a\uff0c\u7db2\u8def\u91e3\u9b5a","title":"\u5783\u573e\u90f5\u4ef6"},{"location":"univ_notes/network_security/network_security/#_14","text":"def(wikipedia): \u7279\u5fb5\u8207\u7279\u6d1b\u4f0a\u6728\u99ac\u4e00\u6a23\u5177\u6709\u507d\u88dd\u6027\uff0c\u8868\u9762\u4e0a\u6c92\u6709\u5371\u5bb3\u3001\u751a\u81f3\u9084\u9644\u6709\u4f7f\u7528\u8005\u9700\u8981\u7684\u529f\u80fd\uff0c\u537b\u6703\u5728\u4f7f\u7528\u8005\u4e0d\u7d93\u610f\u9593\uff0c\u5c0d\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u7522\u751f\u7834\u58de\u6216\u7aca\u53d6\u8cc7\u6599\uff0c\u7279\u5225\u662f\u4f7f\u7528\u8005\u7684\u5404\u7a2e\u5e33\u6236\u53ca\u53e3\u4ee4\u7b49\u91cd\u8981\u4e14\u9700\u8981\u4fdd\u5bc6\u7684\u8cc7\u8a0a\uff0c\u751a\u81f3\u63a7\u5236\u4f7f\u7528\u8005\u7684\u96fb\u8166\u7cfb\u7d71\u3002 \u85cf\u6709 \u6211\u96b1\u85cf\u7684\u653b\u64ca\u7a0b\u5f0f\u78bc(\u5c31\u50cf\u6728\u99ac\u88e1\u9762\u7684\u58eb\u5175) \u7121\u6cd5\u81ea\u52d5\u64cd\u8f1f\uff0c\u8981\u6709\u9060\u7aefserver\u4f86\u57f7\u884c \u53ef\u4ee5\u9593\u63a5\u5730\u9054\u6210\u653b\u64ca(\u5c31\u50cf\u8981\u7d93\u7531\u6728\u99ac\u9032\u5230\u7279\u6d1b\u4f0a\u57ce) \u600e\u9ebc\u500b\u9593\u63a5?? \u7dad\u57fa\u767e\u79d1\u7684\u8aaa\u660e: \u904b\u884c\u4e86\u6728\u99ac\u7a0b\u5f0f\u7684\u670d\u52d9\u7aef\u4ee5\u5f8c\uff0c\u6703\u7522\u751f\u4e00\u500b\u6709\u8457\u5bb9\u6613\u8ff7\u60d1\u7528\u6236\u7684\u540d\u7a31\u7684\u9032\u7a0b\uff0c\u6697\u4e2d\u6253\u958b\u57e0\uff0c\u5411\u6307\u5b9a\u5730\u9ede\u767c\u9001\u8cc7\u6599\uff08\u5982\u7db2\u8def\u904a\u6232\u7684\u5bc6\u78bc\uff0c\u5373\u6642\u901a\u8a0a\u8edf\u9ad4\u5bc6\u78bc\u548c\u7528\u6236\u4e0a\u7db2\u5bc6\u78bc\u7b49\uff09\uff0c\u99ed\u5ba2\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u9019\u4e9b\u6253\u958b\u7684\u57e0\u9032\u5165\u96fb\u8166\u7cfb\u7d71\u3002 \u6709\u4ee5\u4e0b\u4e09\u7a2e\u6a21\u5f0f: \u8b93\u539f\u6709\u7684\u7a0b\u5f0f\u7e7c\u7e8c\u6b63\u5e38\u57f7\u884c\uff0c\u4f46\u662f\u4e5f \u984d\u5916\u5730 \u57f7\u884c\u60e1\u610f\u653b\u64ca \u57f7\u884c\u539f\u6709\u7684\u7a0b\u5f0f\uff0c\u4f46\u537b\u4fee\u6539\u4ed6 \u7528\u4f86\u6b3a\u9a19\u7cfb\u7d71 (\u507d\u88dd\u5728\u6b63\u5e38\u7684\u7a0b\u5f0f\u4e4b\u4e0b) \u76f4\u63a5\u53d6\u4ee3\u6389\u539f\u6709\u7684\u7a0b\u5f0f\u641e\u7834\u58de","title":"\u6728\u78bc\u8edf\u9ad4"},{"location":"univ_notes/network_security/network_security/#payload","text":"system corruption: (\u81ea\u5df1\u770bXD) attack agent: \u60e1\u610f\u7a0b\u5f0f\u4f54\u64da(\u597d\u50cf\u53db\u8ecd\u4e00\u6a23)\u4e86\u7db2\u9801\u6216\u662f\u670d\u52d9\uff0c\u5728\u7528\u88ab\u5360\u64da\u7684\u7db2\u9801\u6216\u662f\u670d\u52d9\u4f86\u767c\u52d5\u653b\u64ca\uff0c\u56e0\u70ba\u662f\u4f54\u64da\u4ed6\u4eba\u7684\u5730\u76e4\u6240\u4ee5\u96e3\u4ee5\u6eaf\u6e90 attack agent ex: zombie, botnet information theft:\u7aca\u53d6\u500b\u8cc7\uff0c\u4f8b\u5982 \u7db2\u8def\u91e3\u9b5a(phishing): \u5167\u5bb9\u4ee5\u5047\u4e82\u771f\u4f7f\u53d7\u5bb3\u8005\u4e0a\u7576 \u9b5a\u53c9\u91e3\u9b5a(spear-phishing) wiki \uff0c\u901a\u5e38\u6536\u96c6\u7684\u8cc7\u6599\u6703\u6bd4\u4e00\u822c\u8cc7\u6599\u66f4\u654f\u611f\u6a5f\u5bc6\u3002 \u9375\u76e4\u5074\u9304: \u6d41\u51fa\u8cc7\u6599 \u9593\u8adc\u8edf\u9ad4(spyware): \u5077\u5077\u76e3\u63a7 \u5077\u5077\u9032\u5165\u7cfb\u7d71(stealthing) \u5f8c\u9580 def : \u9867\u540d\u601d\u7fa9\uff0c\u8d70\u5f8c\u9580\uff0c\u5c31\u662f\u53ef\u4ee5\u4e0d\u7528\u904e\u8edf\u9ad4\u5e38\u898f\u7684\u5b89\u5168\u6027\u6a5f\u5236\u4f86\u53d6\u5f97\u7cfb\u7d71\u63a7\u5236\u3002 \u900f\u904e\u4e00\u4e9b\u975e\u6a19\u6e96\u7684\u7aef\u53e3(nonstandard port)\u4f86\u7aca\u807d\u4ee5\u53ca\u6f5b\u5165\u3002 (rootkit) def : \u4e00\u5957\u8edf\u4ef6\u5de5\u5177\uff0c\u4f7f\u672a\u7d93\u6388\u6b0a\u7684\u7528\u6236\u80fd\u5920\u5728\u672a\u88ab\u6aa2\u6e2c\u5230\u7684\u60c5\u6cc1\u4e0b\u7372\u5f97\u8a08\u7b97\u6a5f\u7cfb\u7d71\u7684\u63a7\u5236\u6b0a\u3002 \u5077\u5077\u5730(in a stealthy way)\u7834\u58de\u6216\u4fee\u6539\u4f7f\u7528\u8005\u7684\u6b63\u5e38\u529f\u80fd \u653b\u64ca\u8005\u80fd\u53d6\u5f97\u96fb\u8166\u7684\u63a7\u5236\u6b0a: \u5305\u542b\u76e3\u63a7\u7e69\u7e8c\u3001\u6539\u8b8a\u7a0b\u5f0f\u6216\u6a94\u6848\u3001\u6536\u767c\u7db2\u8def\u6d41\u91cf\u3001\u53d6\u5f8c\u9580\u7a0b\u5f0f\u63a7\u5236\u6b0a\u3002 \u5206\u70ba\u4ee5\u4e0b\u5e7e\u7a2e \u4e00\u81f4\u7684(persistent) \u53ea\u5b58\u5728\u8a18\u61b6\u9ad4(memory based): \u958b\u6a5f\u5f8c\u5c31\u6c92\u7528\u4e86 \u4f7f\u7528\u8005\u6a21\u5f0f(user mode): \u53ef\u4ee5\u547c\u53ebAPI\u4e26\u4e14\u4fee\u6539\u4ed6\u7684\u7d50\u679c \u6838\u5fc3\u6a21\u5f0f(kernal mode): \u53ef\u4ee5\u963b\u65b7\u547c\u53ebOS API \u865b\u64ec\u6a5f\u70ba\u4e3b(virtual machine based): \u81ea\u884c\u5b89\u88dd\u4e00\u500bVM\u518d\u628a\u4f7f\u7528\u8005\u7684OS\u5305\u5728\u88e1\u9762\u6aa2\u6e2c\u3002 \u5916\u90e8\u6a21\u5f0f(external mode): \u5b58\u53d6\u6216\u7ac4\u6539\u786c\u9ad4\u8cc7\u6e90(\u5982BIOS)","title":"\u60e1\u610f\u8edf\u9ad4\u6703\u505a\u7684\u50b7\u5bb3(payload)"},{"location":"univ_notes/network_security/network_security/#use-of-bots","text":"DDoS(\u63a7\u5236\u591a\u53f0\u4e00\u8d77\u6d88\u8017\u6d41\u91cf\uff0c\u767c\u52d5\u653b\u64ca) spamming \u7aba\u63a2\u6d41\u91cf(sniffing traffic) \u9375\u76e4\u5074\u9304(key logging) \u88dd\u7db2\u9801\u63d2\u4ef6(hao123) \u653b\u64caIRC\u7db2\u8def \u64cd\u5f04\u7db2\u9801\u904a\u6232\u6216\u6295\u7968","title":"\u6bad\u5c4d\u7db2\u8def\u7684\u4f7f\u7528(use of bots)"},{"location":"univ_notes/network_security/network_security/#_15","text":"\u78ba\u4fdd\u96fb\u8166\u7cfb\u7d71\u662f\u6700\u65b0\u7684\uff0c\u56e0\u70ba\u53ef\u80fd\u6703\u6709\u5f88\u591a\u66f4\u65b0\u6703\u88dc\u8db3\u6f0f\u6d1e \u78ba\u8a8d\u6a94\u6848\u7684\u5b58\u53d6\u6b0a\u9650\uff0c\u4ee5\u63a7\u5236\u5728\u88e1\u9762\u7684\u8cc7\u6599\uff0c\u5426\u5247\u4efb\u610f\u4eba\u90fd\u53ef\u4ee5\u5f97\u5230\u8cc7\u6599\u7684\u8a71\u592a\u5371\u96aa","title":"\u5c0d\u65bc\u60e1\u610f\u8edf\u9ad4\u7684\u5c0d\u7b56"},{"location":"univ_notes/network_security/network_security/#_16","text":"host-based scanner \u4ee5\u4e3b\u6a5f\u70ba\u4e3b\u7684 \u7b2c\u4e00\u4ee3: \u6700\u7c21\u55ae\u7684\u6383\u63cf\u65b9\u5f0f\uff0c\u9700\u8981\u75c5\u6bd2\u7c3d\u540d(\u7279\u5fb5) \u7b2c\u4e8c\u4ee3: \u555f\u767c\u5f0f(heuristic)\uff0c\u627e\u5c0b\u53ef\u80fd\u7684\u60e1\u610f\u8edf\u9ad4\uff0cintegrity checking \u7b2c\u4e09\u4ee3: \u6aa2\u67e5\u6d3b\u52d5\uff0c\u4ee5\u6d3b\u52d5\u4f86\u5075\u6e2c\u60e1\u610f\u8edf\u9ad4\u800c\u975e\u4ee5\u7d50\u69cb(\u56e0\u70ba\u4ed6\u5011\u53ef\u80fd\u7a81\u8b8a\uff0c\u7d50\u69cb\u592a\u4e94\u82b1\u516b\u9580\u4e86) \u7b2c\u56db\u4ee3: \u5168\u9762\u9632\u79a6(XD??) host-based + behavor-blocking def : \u548cOS\u7d50\u5408\uff0c\u5373\u6642\u6aa2\u6e2c \u627e\u51fa\u6f5b\u5728\u7684\u60e1\u610f\u8edf\u9ad4\uff0c\u5728\u767c\u4f5c\u524d\u5c31\u5148\u64cb\u4e0b(\u9632\u60a3\u672a\u7136) \u9650\u5236: (\u53ef\u80fd\u8003) \u56e0\u70ba\u60e1\u610f\u7a0b\u5f0f\u78bc\u5fc5\u9808\u8981\u76ee\u6a19\u6a5f\u5668\u57f7\u884c(\u81f3\u5c11\u8981\u6709\u57f7\u884c) \u6700\u4f4e\u9650\u5ea6\u4e00\u5b9a\u8981\u4e00\u9ede\u9ede\u5148\u8dd1\u904e\uff0c\u56e0\u6b64\u5728\u88ab\u6aa2\u6e2c\u51fa\u4f86\u7684\u6642\u5019\u53ef\u80fd\u5df2\u7d93\u9020\u6210\u4e86\u90e8\u5206\u640d\u5bb3","title":"\u6383\u6bd2\u8edf\u9ad4\u7684\u6f14\u9032"},{"location":"univ_notes/network_security/network_security/#perimeter-scanning","text":"\u901a\u5e38\u6703\u5728\u9632\u706b\u7246\u4e0a\u57f7\u884c\uff0c\u4f8b\u5982\u5728email web proxy\u4e0a \u5169\u7a2e\u76e3\u6e2c\u65b9\u5f0f \u5165\u53e3\u76e3\u6e2c(ingress): \u5728\u4f01\u696d\u7db2\u8def\u8207\u5916\u7db2\u7684\u4ea4\u754c\uff0c\u4f8b\u5982border router\u3001external firewall\u7684\u4e00\u90e8\u5206 \u51fa\u53e3\u76e3\u6e2c(egress): \u4e5f\u662f\u5728\u4ea4\u754c\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u6aa2\u6e2c\u51fa\u767c\u7684\u6d41\u91cf\uff0c\u770b\u770b\u6709\u6c92\u6709\u7570\u5e38 \u53ef\u4ee5\u627e\u5230\u653b\u64ca\u7684\u4f86\u6e90","title":"perimeter-scanning"},{"location":"univ_notes/network_security/network_security/#_17","text":"A\u7b49\u7d1a: \u7279\u5fb5\u70ba\u4e3b(signature-based) B\u7b49\u7d1a: \u904e\u6ffe\u70ba\u4e3b(filter-based): \u548cA\u985e\u4f3c\u4f46\u662f\u9760\u8815\u87f2\u7684\u5167\u5bb9\u800c\u975esignature C\u7b49\u7d1a: \u6709\u6548 \u8f09\u8377 \u70ba\u4e3b(payload): \u770b\u770b\u767c\u51fa\u7684 \u5c01\u5305 \u662f\u5426\u6709worm D\u7b49\u7d1a: threshold random walk(TRW): \u96a8\u6a5f\u6307\u5b9a\u76e3\u6e2c\uff0c\u96a8\u6a5f\u6307\u5b9a\u67d0\u500b\u9023\u7dda\u4f86\u6aa2\u67e5\u5979 E\u7b49\u7d1a: \u983b\u7387\u9650\u5236(rate limiting): \u56e0\u70ba\u8815\u87f2\u8981\u6383\u63cf\u76ee\u6a19\uff0c\u6240\u4ee5\u53ef\u4ee5\u9650\u5236scan\u985e\u578b(scan like)(\u6216\u662f\u5230\u67d0\u6a5f\u5668)\u7684\u6d41\u91cf\u4f86\u907f\u514d\u8815\u87f2\u7e7c\u7e8c\u64f4\u6563 F\u7b49\u7d1a: \u983b\u7387\u505c\u6b62(rate halting): \u7576\u8d85\u904e\u67d0\u4e00\u500b\u80fd\u5224\u65b7\u5230\u8815\u87f2\u7279\u5fb5\u7684\u95be\u503c\uff0c\u76f4\u63a5\u5207\u65b7\u6d41\u91cf","title":"\u5c0d\u6297\u8815\u87f2"},{"location":"univ_notes/network_security/network_security/#ddos","text":"def: \u4ea6\u7a31\u6d2a\u6c34\u653b\u64ca\uff0c\u662f\u4e00\u7a2e\u7db2\u8def\u653b\u64ca\u624b\u6cd5\uff0c\u5176\u76ee\u7684\u5728\u65bc\u4f7f\u76ee\u6a19\u96fb\u8166\u7684\u7db2\u8def\u6216\u7cfb\u7d71\u8cc7\u6e90\u8017\u76e1\uff0c\u4f7f\u670d\u52d9\u66ab\u6642\u4e2d\u65b7\u6216\u505c\u6b62\uff0c\u5c0e\u81f4\u5176\u6b63\u5e38\u7528\u6236\u7121\u6cd5\u5b58\u53d6\u3002 \u53ef\u4ee5\u7531\u8cc7\u6e90\u7684\u7528\u91cf\u770b\u51fa(\u56e0\u70baDDoS\u672c\u8eab\u5c31\u6703\u7528\u5f88\u591a\u7684\u8cc7\u6e90) \u5206\u70ba\u5169\u7a2e \u983b\u5bec\u6d88\u8017\u653b\u64ca: \u70ba\u4e86\u7528\u7f44\u53d7\u5bb3\u8005\u983b\u5bec\uff1b\u5835\u4f4f\u4ed6\uff0c\u4f8b\u5982ICMP\u6d2a\u6c34\u653b\u64ca\uff0c\u901a\u904e\u5411\u672a\u826f\u597d\u8a2d\u5b9a\u7684\u8def\u7531\u5668\u50b3\u9001\u5ee3\u64ad\u8cc7\u8a0a\u5360\u7528\u7cfb\u7d71\u8cc7\u6e90\u7684\u505a\u6cd5(\u4e00\u76f4\u671d\u4e3b\u6a5f\u767c\u9001\u8acb\u6c42\uff0c\u8b93\u4e00\u822c\u4eba\u7121\u6cd5\u767c\u9001\u8acb\u6c42)\u3002 \u8cc7\u6e90\u6d88\u8017\u653b\u64ca: \u7528\u7f44\u53d7\u5bb3\u8005\u7684\u8cc7\u6e90\uff0c\u4f8b\u5982TCP\u4e2d\u7684SYN\u653b\u64ca\uff0c\u653b\u64ca\u8005\u4e00\u76f4\u767c\u9001SYN\u4f86\u8acb\u6c42\uff0c\u4f46\u662f\u5b8c\u5168\u4e0d\u56de\u61c9\u4f3a\u670d\u5668\u50b3\u4f86\u7684SYN/ACK(\u7167\u7406\u4f86\u8aaa\u6211\u6536\u5230\u4f3a\u670d\u5668\u7684\u8cc7\u6599\u6211\u8981\u8aaaACK\uff0c\u4ee5\u78ba\u8a8d3way handshaking)\uff0c\u4f3a\u670d\u5668\u5c31\u6703\u4ee5\u70ba\u6211\u6c92\u6536\u5230\uff0c\u518d\u5ea6\u9001\u8cc7\u6599\u4f86\uff0c\u5c31\u9019\u6a23\u9023\u7e8c\u767c\u5c01\u5305\u7d66server\u4f46\u4e0d\u56de\u61c9\u4ed6\uff0cserver\u8cc7\u6e90\u5c31\u88ab\u7528\u7f44 wiki: SYN flood SYN flood\u597d\u61c2\u7684\u5f71\u7247 \u5c0d\u7b56(\u61c9\u8a72\u5f88\u597d\u61c2)\u5c31\u4e0d\u8aaa\u4e86 \u4e8b\u767c\u524d: \u8b93\u4ed6\u5011\u7684buffer\u80fd\u5927\u4e00\u9ede\uff0c\u5373\u4f7f\u88abDDoS\u4e5f\u6490\u5f97\u4f4f \u4e8b\u767c\u7576\u4e0b: \u5229\u78bc\u5075\u6e2c\uff0c\u6e1b\u5c11\u640d\u5931 \u4e8b\u767c\u5f8c: \u6eaf\u6e90\uff0c\u627e\u8ab0\u653b\u64ca\u7684(\u4e0d\u592a\u5be6\u969b)","title":"DDoS"},{"location":"univ_notes/network_security/network_security/#ch11-intruder","text":"","title":"Ch11. Intruder"},{"location":"univ_notes/network_security/network_security/#thee-classes-of-intruder","text":"Masquerader : \u672a\u7d93\u6388\u6b0a\u7684\u4f7f\u7528\u8005\u4fb5\u5165 Misfeasor : \u8a2a\u554f\u672a\u7372\u6388\u6b0a\u8a2a\u554f\u7684\u6578\u64da\uff0c\u7a0b\u5e8f\u6216\u8cc7\u6e90\u7684\u5408\u6cd5\u7528\u6236 Clandestine user : \u4e00\u500b\u4eba\u5c0d\u7cfb\u7d71\u9032\u884c\u76e3\u7763\u63a7\u5236\uff0c\u4e26\u4f7f\u7528\u6b64\u63a7\u5236\u8ff4\u907fauditing control\u548caccess control\uff0c\u6216\u8005\u58d3\u5236audit collection (\u596a\u53d6\u7cfb\u7d71\u7ba1\u7406\u54e1\u63a7\u5236\u6b0a\u9650\u7684\u4eba)","title":"thee classes of intruder"},{"location":"univ_notes/network_security/network_security/#hackers","text":"\u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71(IDS) \u5165\u4fb5\u9810\u9632\u7cfb\u7d71(IPS) Computer emergency response team(CERT) : expert group that handles computer security incidents.","title":"\u5c0d\u6297hackers\u7684\u7cfb\u7d71"},{"location":"univ_notes/network_security/network_security/#insider-attack","text":"most difficult to detect and prevent \u5c0d\u61c9\u653f\u7b56: \u4f7f\u7528\u8005\u9700\u8981\u591a\u5c11\u8cc7\u6e90\u8b93\u4ed6\u5011\u505a\u4e8b\u5c31\u6388\u6b0a\u591a\u5c11(\u4e0d\u7528\u4e00\u6b21\u7d66\u5168\u90e8\u7684\u6b0a\u9650) \u7528log\u7d00\u9304\u54ea\u4e9buser\u9032\u4f86\u4e86\u4e26\u4f7f\u7528\u4e86\u54ea\u4e9b\u6307\u4ee4 \u7528\u6bd4\u8f03\u6709\u4fdd\u8b77\u6027\u7684\u6388\u6b0a\u65b9\u5f0f\u4fdd\u8b77\u91cd\u8981\u8cc7\u6e90 \u4f7f\u7528\u7d50\u675f\u5f8c\u522a\u9664\u4f7f\u7528\u8005\u96fb\u8166\u8207\u7db2\u8def\u7684\u806f\u7e6b \u4f7f\u7528\u7d50\u675f\u5f8c\u4fdd\u7559\u5099\u4efd(\u4f5c\u70ba\u6c92\u4e82\u7528\u6b0a\u9650\u7684\u8b49\u64da)","title":"insider attack"},{"location":"univ_notes/network_security/network_security/#way-to-protect-password-file","text":"one-way function: \u53ea\u5132\u5b58\u5bc6\u78bc\u7d93\u904e\u55ae\u5411\u51fd\u6578\u904b\u7b97\u5f8c\u7684\u8cc7\u6599(\u4f8b\u5982\u96dc\u6e4a\u6578\u503c\uff0c\u800c\u975e\u5bc6\u78bc\u672c\u8eab)(The system stores only the value of a function based on the user\u2019s password) access control: \u9650\u5b9a\u53ea\u6709\u4e00\u500b\u6216\u5c11\u6578\u5e7e\u500b\u5e33\u6236\u53ef\u4ee5\u5b58\u53d6\u5bc6\u78bc\u6a94(Access to the password file is limited to one or a very few accounts)","title":"way to protect password file"},{"location":"univ_notes/network_security/network_security/#intrusion-detection","text":"\u7cfb\u7d71\u7684\u7b2c\u4e8c\u9053\u9632\u7dda(system\u2019s second line of defense )\uff0c\u56e0\u70ba\u5df2\u7d93\u6709\u4eba\u7a81\u7834\u67f5\u6b04\u9032\u4f86\u4e86\uff0c\u73fe\u5728\u5c31\u662f\u8981\u76e3\u6e2c\u90a3\u500b\u9032\u4f86\u7684\u4eba\u3002 Profiles of Behavior of Intruders and Authorized Users(\u90a3\u5f35\u5716)\u8aaa\u660e : the nature of the task confronting the designer of an intrusion detection system. Although the typical behavior of an intruder differs from the typical behavior of an authorized user, there is an overlap in these behaviors. Thus, a loose interpretation of intruder behavior, which will catch more intruders, will also lead to a number of \"false positives,\" or authorized users identified as intruders. On the other hand, an attempt to limit false positives by a tight interpretation of intruder behavior will lead to an increase in false negatives, or intruders not identified as intruders. Thus, there is an element of compromise and art in the practice of intrusion detection. audit record Fundamental tool for intrusion detection \u5229\u7528\u7279\u5b9a\u7684\u7d00\u9304\u7b46\u4f86\u5206\u6790\u70ba\u6b04\u4f4d\u4f7f\u7528\u7684\u60c5\u5f62\uff0c\u4f7f\u7528\u6307\u4ee4\u5075\u6e2c\u7cfb\u7d71\u5c07\u78b0\u649e\u627e\u51fa Threshold detection : \u8a08\u7b97\u67d0\u4e00\u4e8b\u4ef6\u767c\u751f\u7684\u6b21\u6578\uff0c\u5982\u679c\u6b21\u6578\u8d85\u904e\u4e00\u500b\u7279\u5b9a\u6578\u5b57\u5c31\u4ee3\u8868\u6709\u53ef\u80fd\u906d\u53d7\u5165\u4fb5(\u7c21\u964b\u4e14\u6c92\u6548\u7387\u7684\u65b9\u6cd5) Profile-based : \u4ee5\u904e\u53bb\u7684\u884c\u70ba\u548c\u73fe\u5728\u7684\u6bd4\u8f03\u5f8c\uff0c\u5982\u679c\u6709\u91cd\u5927\u504f\u5dee(detecting significant deviations)\u4ee3\u8868\u53ef\u80fd\u906d\u53d7\u653b\u64ca Rule-Based Intrusion Dectection : \u5617\u8a66\u8a02\u5b9a\u4e00\u4e9b\u898f\u5247\u898f\u77e9\uff0c\u5c08\u9580\u7528\u4f86\u6aa2\u67e5\u51fa\u7cfb\u7d71\u662f\u5426\u6709\u4e0d\u7576\u7684\u5165\u4fb5\u7684\u65b9\u6cd5 Rule-based anomaly detection Rule-based penetration identification USTAT \u5206\u6563\u5f0f\u5165\u4fb5\u8005\u6aa2\u6e2c(distributed intrusion detection) def: \u5c0d\u65bc\u4e00\u6574\u500b\u7d44\u7e54\u9700\u8981\u61c9\u4ed8\u5c0d\u65bc\u6574\u500b\u7db2\u8def\u62d3\u6a38\u652f\u6490\u8d77\u4f86\u7684\u4e3b\u6a5f\u67b6\u69cb\uff0c\u5e0c\u671b\u80fd\u5c07\u6578\u500b\u4e3b\u6a5f\u7684\u5165\u4fb5\u6aa2\u6e2c\u7cfb\u7d71\u806f\u5408\u8d77\u4f86\u7528 \u4f46\u53ef\u80fd\u6703\u6709\u4ee5\u4e0b\u56f0\u5883: \u4e0d\u540c\u4e3b\u6a5f\u7684audit record\u53ef\u80fd\u4e0d\u4e00\u6a23\uff0c\u9700\u8981\u8655\u7406\u683c\u5f0f\u554f\u984c","title":"intrusion detection"},{"location":"univ_notes/network_security/network_security/#honeypot","text":"\u662f\u4e00\u500b\u96fb\u8166\u8853\u8a9e\uff0c\u5c08\u6307\u7528\u4f86\u5075\u6e2c\u6216\u62b5\u79a6\u672a\u7d93\u6388\u6b0a\u64cd\u4f5c\u6216\u8005\u662f\u99ed\u5ba2\u653b\u64ca\u7684\u9677\u9631 \u8a73\u7d30def: \u871c\u7f50\u901a\u5e38\u507d\u88dd\u6210\u770b\u4f3c\u6709\u5229\u7528\u50f9\u503c\u7684\u7db2\u8def\u3001\u8cc7\u6599\u3001\u96fb\u8166\u7cfb\u7d71\uff0c\u4e26\u6545\u610f\u8a2d\u7f6e\u4e86bug\uff0c\u7528\u4f86\u5438\u5f15\u99ed\u5ba2\u653b\u64ca\u3002\u7531\u65bc\u871c\u7f50\u4e8b\u5be6\u4e0a\u4e26\u672a\u5c0d\u7db2\u8def\u63d0\u4f9b\u4efb\u4f55\u6709\u50f9\u503c\u7684\u670d\u52d9\uff0c\u6240\u4ee5\u4efb\u4f55\u5c0d\u871c\u7f50\u7684\u5617\u8a66\u90fd\u662f\u53ef\u7591\u7684\u3002\u871c\u7f50\u4e2d\u9084\u53ef\u80fd\u88dd\u6709\u76e3\u63a7\u8edf\u9ad4\uff0c\u7528\u4ee5\u76e3\u8996\u99ed\u5ba2\u5165\u4fb5\u5f8c\u7684\u8209\u52d5\u3002 \u53ef\u4ee5\u5c07\u99ed\u5ba2\u5f9e\u771f\u6b63\u91cd\u8981\u7684\u7cfb\u7d71\u5f15\u958b\u5230\u871c\u7f50(\u871c\u7f50\u505a\u70ba\u8a98\u990c)\uff0c\u871c\u7f50\u548c\u771f\u5be6\u7cfb\u7d71\u662fisolated\u7684 \u4e5f\u80fd\u5229\u7528\u871c\u7f50\u4f86\u85c9\u6a5f\u8490\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u8a0a(\u871c\u7f50\u662f\u88abmonitored\u7684)","title":"honeypot"},{"location":"univ_notes/network_security/network_security/#pdf-p29-30","text":"","title":"pdf p29 30(\u8003\u524d\u4e00\u5929\u770b\uff0c\u5167\u5bb9\u504f\u6b7b\u8a18)"},{"location":"univ_notes/network_security/network_security/#password-management","text":"Front line of defense against intruders implementation Crypt(3) : \u721b \u7528\u4f86\u5687\u963b\u5bc6\u78bc\u731c\u6e2c\u653b\u64ca \u4f46\u662f\u56e0\u70ba\u6700\u65e9\u4f7f\u7528\uff0c\u6240\u4ee5\u76f8\u5bb9\u6027\u8f03\u597d\u3002\u800c\u4eca\u4ecd\u7136\u88ab\u5ee3\u6cdb\u4f7f\u7528 MD5 secure hash algorithm : \u4e2d \u529f\u80fd\u597d\uff0c\u4f46\u662f\u6bd4Crypt(3)\u6162(trade off) Bcrypt : \u597d UNIX\u7cfb\u7d71\u4e2d\u6700\u5b89\u5168\u7684\u52a0\u9e7d+\u96dc\u6e4a\u65b9\u6cd5 \u529f\u80fd\u66f4\u597d\uff0c\u4f46\u662f\u53c8\u66f4\u6162\u4e86(trade off)","title":"password management"},{"location":"univ_notes/network_security/network_security/#ch12-firewalls","text":"","title":"Ch12. Firewalls"},{"location":"univ_notes/network_security/network_security/#firewall-characteristics","text":"\u57fa\u672c\u4e0a\uff0c\u9632\u706b\u7246\u7684\u7528\u9014\u5c31\u662f\u9694\u96e2\u7db2\u8def(\u9694\u96e2\u6210\u6578\u500bZONE)\u3002","title":"Firewall characteristics"},{"location":"univ_notes/network_security/network_security/#design-goals-for-a-firewall","text":"all traffic inside to outside, and vice versa, must pass through the firewall (\u6240\u6709\u5167\u5230\u5916\u6216\u662f\u5916\u5230\u5167\u7684\u6d41\u91cf\u90fd\u5fc5\u9808\u8981\u7d93\u904e\u9632\u706b\u7246) only authorized traffic will be allowd to pass (\u53ea\u6709\u7d93\u904e\u6388\u6b0a\u7684\u6d41\u91cf\u624d\u53ef\u4ee5\u88ab\u5141\u8a31\u901a\u904e EX. \u5340\u57df\u5b89\u5168\u653f\u7b56\u7684\u8a2d\u5b9a) the firewall is immune to penetration (\u9632\u706b\u7246\u672c\u8eab\u5c0d\u4fb5\u5165\u5177\u6709\u514d\u75ab\u529b)","title":"design goals for a firewall"},{"location":"univ_notes/network_security/network_security/#techniques-that-firewalls-use-to-control-access-and-enforce-the-sites-security-policy","text":"service control \u6c7a\u5b9a\u4f55\u7a2e\u5167\u90e8\u6216\u5916\u90e8\u7684\u670d\u52d9\u53ef\u4ee5\u88ab\u4f7f\u7528 direction control \u5c0d\u65bc\u7279\u5b9a\u670d\u52d9\u53ef\u4ee5\u6c7a\u5b9a\u54ea\u500b\u65b9\u5411\u7684\u6d41\u91cf\u53ef\u4ee5\u88ab\u901a\u904e user control \u6839\u64da\u4f7f\u7528\u8005\u6c7a\u5b9a\u662f\u5426\u80fd\u8b93\u4ed6\u6709\u5b58\u53d6\u6b0a(\u4f7f\u7528\u6b0a) behavior control \u76e3\u63a7\u7279\u5b9a\u670d\u52d9\u7684\u4f7f\u7528\u60c5\u6cc1","title":"techniques that firewalls use to control access and enforce the site's security policy"},{"location":"univ_notes/network_security/network_security/#firewall-expectations","text":"\u662f\u4e00\u500bcheck point\uff0c\u53ef\u4ee5\u628a\u672a\u6388\u6b0a\u7684user\u64cb\u5728\u53d7\u4fdd\u8b77\u7684\u7db2\u8def\u5916\u3001\u53ef\u4ee5\u7981\u6b62\u6709\u6f5b\u5728\u5371\u96aa\u7684\u670d\u52d9\u3001\u53ef\u4ee5\u9632\u6b62IP spoofing(IP\u5047\u9020)\u53carouting attack \u662f\u4e00\u500b\u76e3\u6e2c\u8ddf\u5b89\u5168\u6709\u95dc\u7684\u4e8b\u4ef6\u7684\u5e73\u53f0 \u53ef\u4ee5\u662f\u63d0\u4f9b\u4e00\u4e9b\u8ddf\u5b89\u5168\u7121\u95dc\u7684Internet functions\u7684\u5e73\u53f0 (ex. NAT) \u53ef\u4ee5\u662f\u63d0\u4f9bIPsec\u7684\u5e73\u53f0","title":"firewall expectations"},{"location":"univ_notes/network_security/network_security/#firewall-limitations","text":"\u7121\u6cd5\u62b5\u64cb\u7e5e\u904e\u9632\u706b\u7246\u7684\u653b\u64ca(\u4f8b\u5982\u7b46\u96fb\u5728\u5916\u88ab\u611f\u67d3\uff0c\u7136\u5f8c\u5e36\u56de\u516c\u53f8\u5167\u7db2\u8b93\u5927\u5bb6\u90fd\u611f\u67d3) \u7121\u6cd5\u9632\u7bc4\u5728\u9632\u706b\u7246\u5167\u7684wireless communication between local systems (\u56e0\u70ba\u6839\u672c\u6c92\u6709reach\u5230\u9632\u706b\u7246) \u5c0d\u65bcinternal threat\u7121\u6cd5\u9632\u7bc4","title":"firewall limitations"},{"location":"univ_notes/network_security/network_security/#types-of-firewalls","text":"Packet filtering firewall (\u8a2d\u5b9a\u898f\u5247\u6aa2\u67e5IP\u5c01\u5305) \u53ef\u4ee5\u8a2d\u5b9a\u4e00\u9023\u4e32\u7684rules\u4f86\u6c7a\u5b9a\u6b64packet\u53ef\u4e0d\u53ef\u4ee5\u901a\u904e \u7f3a\u9ede \u56e0\u70ba\u4e0d\u6703\u6aa2\u67e5upper layer data\uff0c\u6240\u4ee5\u7121\u6cd5\u9632\u6b62\u7279\u5b9a\u61c9\u7528\u7a0b\u5f0f\u7684\u6f0f\u6d1e\u653b\u64ca(\u4ed6\u8dd1\u5728\u50b3\u8f38\u5c64) \u56e0\u70ba\u6b64\u985e\u9632\u706b\u7246\u53ef\u4ee5\u5b58\u53d6\u7684\u8cc7\u6e90\u6709\u9650\uff0c\u6240\u4ee5\u529f\u80fd\u4e5f\u883b\u6709\u9650\u7684 \u4e0d\u652f\u63f4\u9032\u968e\u7684\u4f7f\u7528\u8005\u8a8d\u8b49(advanced user auth) \u5229\u7528TCP/IP protocol\u7684\u554f\u984c\u80fd\u653b\u64ca\u6b64\u985e\u578b\u7684\u9632\u706b\u7246(\u56e0\u70ba\u9019\u500b\u9632\u706b\u7246\u67b6\u8a2d\u5728\u50b3\u8f38\u5c64) \u56e0\u70ba\u6c7a\u5b9aaccess control\u7684\u8b8a\u6578\u4e0d\u591a\uff0c\u82e5\u4e00\u4e0d\u5c0f\u5fc3\u932f\u8aa4\u8a2d\u5b9a\u67d0\u4e9b\u8b8a\u6578\uff0c\u5247\u5f88\u6709\u53ef\u80fd\u8b93\u4e0d\u5b89\u5168\u7684\u5c01\u5305\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u901a\u904e\u4e86 \u512a\u9ede \u5f88\u7c21\u55ae \u5c0duser\u4f86\u8aaa\u5f88\u5bb9\u6613\u61c2\u3001\u800c\u4e14\u5f88\u5feb\u901f \u7f3a\u9ede \u2013 \u96e3\u4ee5\u8a2d\u8a08\u51fa\u4e00\u7d44\u9577\u671f\u6709\u6548\u53c8\u6b63\u78ba\u7684\u7121\u8aa4\u904e\u6ffe\u898f\u5247\u3002 \u2013 \u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\uff0c\u6240\u4ee5\u5c0d\u65bc\u5c01\u5305\u8cc7\u6599\u6bb5\u6216\u7279\u5b9a\u61c9\u7528\u670d\u52d9\u5f31\u9ede\u7684\u653b\u64ca\u65b9\u5f0f\u7121\u80fd\u70ba\u529b\u3002 \u2013 \u7f3a\u4e4f\u9a57\u8b49\u80fd\u529b\u3002 \u2013 \u5b89\u5168\u6027\u8f03\u5dee\u3002 Attacks And Countermeasures IP address spoofing(\u507d\u9020IP\u4f4d\u5740) hacker\u628a\u5916\u90e8pkt\u7684source IP address\u8a2d\u6210\u5167\u90e8\u67d0\u4e00IP address\uff0c\u7136\u5f8c\u8a66\u5716\u5f9e\u5916\u9762\u50b3\u5230\u5167\u90e8(\u8b93\u4eba\u8aa4\u4ee5\u70ba\u662f\u5167\u90e8\u7684\u800c\u6389\u4ee5\u8f15\u5fc3) solution : \u4e1f\u68c4\u6389\u5f9e\u5916\u90e8\u9032\u4f86\u4f46\u662fsource IP address\u662f\u5167\u90e8\u4f4d\u5740\u7684pkt Source routing attacks(\u4f86\u6e90\u8def\u7531\u653b\u64ca) the source station specifies route that a pkt should take, and it hopes that it will bypass the security measures that do not analyze the source routing information(\u4f86\u6e90\u7aef\u53ef\u4ee5\u6307\u5b9a\u5c01\u5305\u884c\u7d93\u7db2\u969b\u7db2\u8def\u7684\u8def\u7531\uff0c\u5e0c\u671b\u7528\u9019\u500b\u8cc7\u8a0a\u4f86\u8eb2\u907f\u53ef\u80fd\u6709\u5e7e\u500b\u6c92\u6709\u505a\u5b89\u5168\u6aa2\u67e5\u7684\u8def\u7531\u5668) solution : \u4e1f\u68c4\u6389\u6240\u6709\u542b\u6709routing information\u7684pkt Tiny fragment attacks(\u6975\u5c0f\u5c01\u5305\u653b\u64ca) \u5165\u4fb5\u8005\u5c07pkt\u5206\u5272\u6210\u591a\u500bfragment\uff0c\u4f7f\u5f97TCP header\u8cc7\u8a0a\u88ab\u5206\u6563\u5230\u5f88\u591a\u500bfragment(\u800c\u4e14\u8981\u7528pattern\u4f86\u770b\u7684\u8a71\u4e5f\u4e0d\u5bb9\u6613\u770b\uff0c\u56e0\u70bapattern\u4e5f\u6703\u88ab\u5207\u5272\uff0c \u8da8\u52e2\u79d1\u6280\u8aaa: \u5c0f\u578b\u7247\u6bb5\u5c01\u5305\u53ef\u80fd\u88ab\u7528\u65bc\u963b\u7d55\u670d\u52d9\u7a0b\u5f0f\u653b\u64ca\uff0c\u6216\u7528\u65bc\u898f\u907f\u5b89\u5168\u6a5f\u5236\u6216\u5075\u6e2c\u3002 ) solution : enforce a rule that the first fragment of a pkt must contain a predefined minimum amount of the transport header(\u524d\u9762\u4e00\u5b9a\u8981\u6709\u5b8c\u6574\u7684\u5c01\u5305\u6a19\u982dheader\uff0c\u4ee5\u78ba\u4fdd\u8cc7\u6599\u7684\u5b8c\u6574\u6027\u78ba\u8a8d\u8cc7\u6599\u662f\u4e0d\u88ab\u5207\u5272\u7684) Stateful inspection firewall stateful: \u512a\u9ede: \u53ef\u4ee5\u5206\u8fa8\u4e0d\u540c\u7684\u9023\u7dda\u72c0\u614b(\u56e0\u70ba\u9023\u7dda\u72c0\u614b\u53ef\u4ee5\u7531srcIP dstIP UDP\u3001TCP port\u5224\u65b7)\uff0c\u53ef\u4ee5\u5224\u65b7\u5c01\u5305\u662f\u5426\u5c6c\u65bc\u73fe\u5b58\u7684\u9023\u7dda\uff0c\u662f\u4e14\u5141\u8a31\u7684\u8a71\u5c31\u8b93\u5979\u5feb\u901f\u901a\u904e\uff0c\u4e0d\u662f\u5c31\u984d\u5916\u8655\u7406 \u7f3a\u9ede: \u9700\u8981\u984d\u5916\u786c\u9ad4(trade off)\uff0c\u6548\u80fd\u8f03\u5c01\u5305\u904e\u6ffe\u5dee\u3001\u4e5f\u6c92\u8fa6\u6cd5\u8655\u7406\u4e0a\u5c64\u7684\u5354\u5b9a\uff0c\u56e0\u70ba\uff0c\u5982\u5716\uff0c\u4ed6\u5efa\u7acb\u5728\u50b3\u8f38\u5c64\u800c\u8ddf\u4e0a\u5c64\u7684\u61c9\u7528\u5c64\u7121\u95dc\u3002 stateless: \u512a\u9ede: \u7c21\u55ae\u4f9d\u64da\u73fe\u6709\u7684\u5c01\u5305\u8cc7\u8a0a\u904e\u6ffe\u3001\u4e0d\u9808\u984d\u5916\u786c\u9ad4 \u7f3a\u9ede: \u53ef\u80fd\u8f03\u5bb9\u6613\u53d7\u653b\u64ca\uff0c\u4f8b\u5982IP Spoofing\u53ef\u4ee5\u507d\u9020IP\u8b93\u9632\u706b\u7246\u4ee5\u70ba\u53ef\u4ee5\uff0c(\u7528stateful\u56e0\u70ba\u8b58\u5225\u7684\u6a19\u7c64\u5f88\u591a\uff0c\u53ef\u4ee5\u5340\u5206\u507d\u9020IP\u7684\u5c01\u5305\u548c\u5be6\u969bIP\u7684\u5c01\u5305(\u56e0\u70ba\u4e5f\u8a31\u53ef\u4ee5\u7528\u5176\u4ed6header\u78ba\u8a8d\uff0c\u4f86\u8aaa\u662f\u4e0d\u662f\u8ddf\u73fe\u6709\u5141\u8a31\u7684\u4e00\u6a23)\uff0c\u4f46\u662fstateless\u5c31\u6c92\u6709\u9019\u500b\u529f\u80fd) PROXY \u6982\u5ff5 def: \u5f37\u8abf\u7528\u6236\u7aef\u7a0b\u5f0f\u5fc5\u9700\u8207\u4ee3\u7406\u4f3a\u670d\u5668\u63a5\u6d3d\uff0c\u518d\u900f\u904e\u5b83\u4f86\u8207\u76ee\u7684\u6a5f\u5668\u9023\u901a\uff0c\u800c\u975e\u76f4\u63a5\u8b93\u7528\u6236\u7aef\u9023\u63a5\u771f\u6b63\u7684\u76ee\u7684\u5730\u3002 Application proxy firewall \u82e5gateway\u6c92\u6709\u70ba\u7279\u5b9a\u61c9\u7528(\u56e0\u70ba\u73fe\u5728\u5728\u61c9\u7528\u5c64)\u505aproxy\u5247\u8a72\u985e\u7684\u670d\u52d9\u5c31\u4e0d\u88ab\u652f\u63f4\uff0c\u56e0\u6b64\u4e5f\u4e0d\u80fd\u901a\u904e\u9632\u706b\u7246 gateway\u4e5f\u53ef\u4ee5\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u3001\u63a5\u53d7\u67d0\u4e9b\u7279\u5b9a\u7684feature\uff0c\u4f7f\u5f97\u8a72\u670d\u52d9\u53ef\u4ee5\u88ab\u63a5\u53d7\uff0c\u800c\u62d2\u7d55\u5176\u4ed6\u670d\u52d9\u7684\u8981\u6c42 \u512a\u9ede: \u6bd4packet filtering firewall\u66f4\u5b89\u5168(\u56e0\u70ba\u76f4\u63a5\u904e\u6ffe\u4e86\u5c01\u5305\u5167\u5bb9(pkt contents)\u8207\u547d\u4ee4\uff0c\u4ee5\u78ba\u4fdd\u67d0\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u5167\u5bb9\u5b89\u5168(\u4f8b HTTP, FTP, EMAIL) \u7f3a\u9ede: additional processing overhead on each connection(\u8981\u984d\u5916\u8655\u7406\u6bcf\u500b\u9023\u7dda - \u9020\u6210\u8ca0\u64d4)\uff0c\u9084\u8981\u91dd\u5c0d\u4e0d\u540c\u61c9\u7528\u7a0b\u5f0f\u985e\u71df\u5beb\u4e0d\u540c\u7684\u4ee3\u7406\u65b9\u6cd5\uff0c\u6210\u672c\u9ad8\u3002 Circuit-level proxy firewall not permit end-to-end TCP connections = \u800c\u662f\u5efa\u7acb\u5169\u689dTCP connections \u6703\u5efa\u7acb\u4e8c\u500bTCP\u9023\u7dda\u8655\u7406\uff0c \u4e00\u689d\u662f\u5167\u90e8\u8207circuit-level proxy\u3001\u53e6\u5916\u4e00\u689d\u662fcircuit-level proxy\u8207\u5916\u90e8 (\u900f\u904eproxy firewall\u505a\u70ba\u4e2d\u7e7c\u7ad9\uff0c\u4e5f\u5c31\u662f \u5167\u90e8--proxy--\u5916\u90e8\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u96b1\u85cf\u5167\u90e8IP\u4f4d\u5740\u3002) security function consists of determining which connections will be allowed \u3001\u76f4\u63a5\u7528\u9023\u7dda\u7b49\u7d1a\u7684\u65b9\u5f0f\u5b9a\u7fa9\u8aaa\u54ea\u5e7e\u689d\u9023\u7dda\u662f\u5141\u8a31\u7684\u3002 \u512a\u9ede: \u8f03\u61c9\u7528\u5c64\u4ee3\u7406\u5feb\u901f\u3001\u4e00\u822c\u76ee\u7684\u5171\u7528\u4ee3\u7406\u670d\u52d9\uff0c\u53ef\u652f\u63f4\u8a31\u591a\u61c9\u7528\u5c64\u5354\u5b9a\u7684\u4ee3\u7406\u5b58\u53d6\u529f\u80fd\u3002 \u7f3a\u9ede: \u9700\u8981\u4fee\u6539\u7528\u6236\u7aef\u61c9\u7528\u7a0b\u5f0f\u6216TCP/IP\u5354\u5b9a\u5806\u758a\uff0c\u7121\u6cd5\u8655\u7406\u61c9\u7528\u5c64\u5354\u5b9a\u3001ICMP\u4e5f\u4e0d\u884c(\u56e0\u70ba\u4ed6\u662fnetwork\u5c64)\u3002","title":"Types of Firewalls"},{"location":"univ_notes/network_security/network_security/#firewall-comparison","text":"","title":"Firewall comparison"},{"location":"univ_notes/network_security/network_security/#bastion-host","text":"def: \u4e00\u500b\u88ab\u9632\u706b\u7246\u7ba1\u7406\u54e1\u8a8d\u53ef\u7684\u95dc\u9375\u7cfb\u7d71(x \u7ffb\u5f97\u597d\u721b) \u901a\u5e38\u662fapplication proxy\u6216circuit-level proxy\u7684\u5e73\u53f0 characteristics(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18) \u57f7\u884c\u5b89\u5168\u7684\u4f5c\u696d\u7cfb\u7d71 \u53ea\u6709\u7db2\u8def\u7ba1\u7406\u4eba\u8a8d\u70ba\u662f\u5fc5\u8981\u7684\u670d\u52d9\u624d\u6703\u88ab\u5b89\u88dd \u6703\u6709\u984d\u5916\u8a8d\u8b49\u7684\u529f\u80fd \u6bcf\u500bproxy\u90fd\u88ab\u8a2d\u5b9a\u6210\u53ea\u652f\u63f4\u6a19\u6e96\u670d\u52d9\u7684\u4e00\u90e8\u4efd \u6bcf\u500bproxy\u90fd\u53ea\u80fd\u8b93\u7279\u5b9a\u7684\u4e3b\u6a5f\u5b58\u53d6 \u6bcf\u500bproxy\u90fd\u6703\u900f\u904e\u8a18\u9304\u6d41\u91cf \u9023\u7dda\u548c\u9023\u7dda\u7684\u6642\u9593\u9577\u77ed\u4f86\u7dad\u8b77\u6aa2\u67e5\u6240\u9700\u7684\u8cc7\u8a0a \u6bcf\u500bproxy\u90fd\u662f\u5c08\u9580\u70ba\u7db2\u8def\u5b89\u5168\u8a2d\u8a08\u7684\u5c0f\u5c0f\u8edf\u9ad4\u5957\u4ef6 \u6bcf\u500b\u5728bastion host\u4e0a\u7684proxy\u90fd\u662f\u7368\u7acb\u7684 - \u5c31\u7b97\u67d0\u500bproxy\u51fa\u554f\u984c\u4e5f\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6proxy(\u91cd\u8981\uff0c\u6211\u89ba\u5f97\u6703\u8003!) \u9664\u4e86\u4e00\u958b\u59cb\u555f\u52d5\u7684\u8a2d\u5b9a\u6a94\u5916\uff0c\u4e0d\u9700\u8981\u5b58\u53d6\u786c\u789f - \u5165\u4fb5\u8005\u7121\u6cd5\u5c07\u6709\u5371\u96aa\u7684\u6a94\u6848\u503c\u5165bastion host \u6bcf\u500bproxy\u90fd\u53ea\u6709\u4e00\u822c\u4f7f\u7528\u8005\u7684\u6b0a\u9650\uff0c\u4e14\u5728bastion host\u4e2d\u96b1\u5bc6\u4e14\u5b89\u5168\u7684\u76ee\u9304\u4e2d\u57f7\u884c","title":"Bastion host"},{"location":"univ_notes/network_security/network_security/#host-based-firewall","text":"a software module used to secure an individual host (\u7528\u4f86\u6aa2\u9a57indivitual host\u7684\u8edf\u9ad4\u6a21\u7d44\uff0chost\u5728server\u6216\u662f\u500b\u4eba\u96fb\u8166\u90fd\u53ef) Filters and restricts the flow of packets Common location is a server \u512a\u9ede Filtering rules can be tailored to the host environment (\u904e\u6ffe\u7684\u898f\u5247\u53ef\u4ee5\u61c9\u7528\u65bchost environment) \u53ef\u7528\u65bc\u8207\u7368\u7acb\u7684\u9632\u706b\u7246\u7d50\u5408 - \u63d0\u4f9b\u5176\u4ed6layer\u7684\u4fdd\u8b77 \u5c64\u5c64\u7368\u7acb\uff0c\u4e92\u4e0d\u5f71\u97ff(independent topology)","title":"Host-based firewall"},{"location":"univ_notes/network_security/network_security/#personal-firewall","text":"controls the traffic between a PC or workstation on one side and the Internet or enterprise network on the other side (\u63a7\u5236 \u500b\u4eba\u96fb\u8166\u6216\u5de5\u4f5c\u7ad9 \u5230 \u7db2\u8def\u6216\u4f01\u696d\u7db2\u8def \u7684\u6d41\u91cf) deny unauthorized remote access to the computer(\u963b\u6b62\u672a\u7d93\u6388\u6b0a\u7684\u9060\u7aef\u5b58\u53d6) can monitor outgoing activity in an attempt to detect and block worms and other malware(\u53ef\u4ee5\u76e3\u63a7\u5916\u754c\u7684\u6d3b\u52d5 - \u767c\u73fe\u4e26\u963b\u6b62\u8815\u87f2\u548c\u5176\u4ed6\u60e1\u610f\u8edf\u4ef6\uff0c\u6216\u8aaa\u53ef\u4ee5\u76e3\u63a7outgoing\uff0c\u5411\u5916\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u963b\u64cb\u8815\u87f2\u653b\u64ca(\u56e0\u70ba\u8815\u87f2\u7e41\u6b96\u5f8c\u6703\u5411\u5916\u8dd1\uff0c\u5c0b\u627e\u65b0\u7684\u76ee\u6a19)) is less complex","title":"Personal firewall"},{"location":"univ_notes/network_security/network_security/#dmz","text":"def: \u4ecb\u65bc\u5167\u90e8\u7db2\u8def\u8207Internet\u9593\u7684\u5340\u57df(\u5b50\u7db2\u8def) \uff0c\u4f5c\u70ba\u5167\u5916\u7db2\u8def\u9593\u7684\u5b89\u5168\u6027\u7de9\u885d\u5730\u5e36\u3002 \u5728\u9632\u706b\u7246\u67b6\u69cb\u4e2d\uff0cDMZ\u5340\u57df\u662f\u63d0\u4f9bInternet\u4f7f\u7528\u8005\u5b58\u53d6\u7db2\u969b\u7db2\u8def\u4f3a\u670d\u5668\u7684\u7db2\u8def\u5340\u57df\uff0c\u5982Webserver\u6216DNS server \u3002 DMZ\u548c\u5167\u90e8\u7db2\u8def\u662f\u5206\u9694\u958b\u4f86\u7684\uff0c\u56e0\u6b64\u5373\u4f7f\u906d\u5230\u653b\u64ca\u4e5f\u4e0d\u6703\u5371\u53ca\u5167\u90e8\u7db2\u8def\u3002","title":"DMZ"},{"location":"univ_notes/network_security/network_security/#firewall-locations-and-topologies","text":"Host-resident firewall includes personal firewall software and firewall software on servers Screening router a single router between internal and external networks with stateless or full packet filtering(\u6709\u904e\u6ffe\u6a5f\u5236\u7684router\uff0c\u53ef\u4ee5\u5f9escreening\u9019\u500b\u540d\u8a5e\u770b\u51fa\uff0c\u5c31\u662f\u6709\u76e3\u63a7\u529f\u80fd4.) Single bastion nline a single firewall between an internal and external router(\u5167\u7db2\u8207\u5916\u7db2\u7684router\u4e2d\u9593\u7684\u9632\u706b\u7246) Single bastion T single bastion inline but has a third network interface on bastion to a DMZ(\u5728bastion\u548c\u9632\u706b\u7246\u4e4b\u9593\u9084\u6709\u4e00\u500b\u4ecb\u9762) Double bastion inline DMZ is sandwiched between bastion firewalls(DMZ\u593e\u5728\u5169\u500bbastion firewall\u4e4b\u9593) Double bastion T DMZ is on a separate network interface on the bastion firewall Distributed firewall configuration used by some large businesses and government organizations","title":"Firewall locations and Topologies(\u5efa\u8b70\u8003\u524d\u4e00\u5929\u770b\uff0c\u504f\u6b7b\u8a18)"},{"location":"univ_notes/network_security/network_security/#final-exam-note","text":"","title":"Final exam note"},{"location":"univ_notes/network_security/network_security/#2012finaljan-11-2013","text":"(3) IPSec \u53ef\u4ee5\u7528\u6ed1\u52d5\u8996\u7a97\u4f86\u963b\u64cb\u91cd\u653e\u653b\u64ca\uff0c\u5177\u9ad4\u6d41\u7a0b\u5982\u4e0b\uff0c\u9996\u5148\u5728\u6ed1\u52d5\u8996\u7a97\u4e2d\uff0c\u5982\u679c\u6709\u4e00\u500b\u5c01\u5305\u7684\u5e8f\u5217\u865f\u5c0f\u65bc\u8996\u7a97\u6700\u5c0f\u7684(\u4e5f\u5c31\u662f\u4f4d\u65bc\u8996\u7a97\u7684\u5de6\u5074\uff0c\u5247\u662f\u70ba\u91cd\u653e\u653b\u64ca\uff0c\u56e0\u70ba\u90a3\u662f\u4e4b\u524d\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305)\uff0c\u5982\u679c\u5c01\u5305\u5e8f\u5217\u865f\u53ef\u4ee5\u843d\u5728\u8996\u7a97\u4e2d\uff0c\u800c\u4e14\u4e4b\u524d\u9084\u6c92\u6709\u88ab\u63a5\u6536\u904e\uff0c\u5247\u662f\u70ba\u65b0\u7684\u5c01\u5305\u63a5\u6536\u4ed6\uff0c\u5982\u679c\u5df2\u7d93\u6709mark\u70ba\u63a5\u6536\u904e\u5247\u4e5f\u662f\u87f2\u653e\u653b\u64ca\uff0c\u62cb\u68c4\u4ed6\uff0c\u5982\u679c\u5c01\u5305\u518d\u8996\u7a97\u7684\u53f3\u908a\uff0c\u53f3\u908a\u90fd\u662f\u9084\u6c92\u63a5\u6536\u904e\u7684\uff0c\u662f\u4e00\u500b\u5168\u65b0\u7684\u5c01\u5305\uff0c\u5247\u5c07\u5176\u63a5\u53d7\u5f8c\uff0c\u628a\u8996\u7a97\u5f80\u53f3\u6ed1\u52d5\u3002 (4) keyspace\u5927\u7684password\u6703\u6bd4\u8f03\u5b89\u5168\uff0c\u800c\u5df2\u7d93\u5efa\u7acb\u65bcdictionary\u7684\u662f\u6700\u4e0d\u5b89\u5168\u7684\u5bc6\u78bc (5) \u6aa2\u6e2c\u653b\u64ca\u8005\u7684\u5169\u7a2e\u65b9\u6cd5 statistical\u6aa2\u6e2c\uff0c\u63a1\u7528\u7684\u662f\u7528\u4e00\u4e9b\u7d71\u8a08\u8cc7\u8a0a(\u4f8b\u5982\u6d41\u91cf\u3001\u7aef\u53e3\u4f7f\u7528\u3001\u6642\u9593)\u7b49\u7b49\u627e\u51fa\u653b\u64ca\u884c\u70ba\u3002 rule\u6aa2\u6e2c\uff0c\u5229\u7528\u4e00\u4e9b\u5c08\u5bb6\u8a2d\u5b9a\u53ef\u80fd\u662f\u653b\u64ca\u3001\u5165\u4fb5\u8005\u7684\u898f\u5247\u4f86\u627e\u51fa\u3002 \u5dee\u5225\u5728\u65bc\u5f8c\u8005\u7684\u898f\u5247\u662f\u7d81\u6b7b\u7684\uff0c\u8f03\u4e0d\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u80fd\u8f03\u5feb(\u5957\u7528\u65e2\u6709\u898f\u5247)\uff1b\u524d\u8005\u662f\u52d5\u614b\u611f\u77e5\u7684\uff0c\u80fd\u61c9\u8b8a\u65b0\u7684\uff0c\u4f46\u662f\u6703\u6bd4\u8f03\u6162(\u4e00\u7a2etrade off) (6) \u76e3\u63a7\u8cc7\u6599\u4e2d\uff0c\u8cc7\u6599\u53ef\u80fd\u6703\u76f8\u7576\u9f90\u5927\uff0c\u6bcf\u4e00\u500b\u90fd\u770b\u7684\u8a71\u592a\u8017\u6642\u4e86\uff0c\u6240\u4ee5\u8981\u6709 \u9078\u64c7\u6027 (selectivity) (7) \u898b\u4e0a\u65b9\u7b46\u8a18\uff0c\u7c21\u55ae\u4f86\u8aaa\u871c\u7f50\u5c31\u662f\u4e00\u500b\u548c\u4e3b\u8981nerwork\u9694\u958b\u7684\u7cfb\u7d71\uff0c\u507d\u88dd\u8c50\u5bcc\u3001\u6709\u5229\u7528\u50f9\u503c\u7684\u8cc7\u8a0a \u5438\u5f15\u5370\u99ed\u5ba2\u5f80\u90a3\u88cf\u8d70 \uff0c\u5f9e\u800c \u4fdd\u8b77\u4e3b\u8981\u7db2\u8def\u88dd\u7f6e \uff0c\u4e26\u4e14\u871c\u7f50\u662f \u88ab\u76e3\u6e2c \u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u65bc \u6536\u96c6\u653b\u64ca\u8005\u7684\u8cc7\u6599\u4ee5\u4fbf\u8cc7\u5b89\u5206\u6790 \u3002 (8) (9) \u653b\u64ca\u7684\u65b9\u6cd5\u8acb\u5efa\u4e0a\u65b9\u7b46\u8a18\uff0c\u5f71\u97ffpacket filter\u7684\u65b9\u6cd5\u5982\u4e0b IP spoofing: \u6709\u4e9b\u4f7f\u7528IP\u4f86\u6e90\u7684\u5c01\u5305\u904e\u6ffe\u5668\u53ef\u80fd\u6703\u88ab\u9a19(\u56e0\u70ba\u653b\u64ca\u8005\u53ef\u4ee5\u5c07\u5c01\u5305\u507d\u9020\u6210\u4e00\u500b\u53ef\u4fe1\u4efb\u7684IP\u5728\u4e0a\u982d\uff0c\u9032\u800c\u9054\u6210\u6b3a\u9a19\u7684\u76ee\u7684) src routing: \u81ea\u8a02routing\u65b9\u6cd5\u7684\u8a71\uff0c\u5047\u8a2d\u6211\u77e5\u9053\u90a3\u4e9brouter\u662f\u6c92\u6709\u597d\u7684\u5c01\u5305\u5b89\u5168\u6a5f\u5236\uff0c\u6211\u5c31\u53ef\u4ee5\u6545\u610f\u7d93\u904e\u4ed6\u4f86\u9054\u6210\u8eb2\u907f\u6aa2\u6e2c\u7684\u7b11\u904e tiny fragment: \u4f7f\u7528\u8a31\u591a\u5c0f\u5c01\u5305\u4f86DoS (10) stateful: \u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u6709\u7d00\u9304\u5c01\u5305\u72c0\u614b\u7684\u5c01\u5305\u904e\u6ffe\u5668\uff0c\u53ea\u6709\u7b26\u5408\u73fe\u6709\u5141\u8a31\u72c0\u614b\u7684\u5c01\u5305\u6750\u53ef\u4ee5\u8b93\u5b83\u904e\u53bb\uff0c\u5426\u5247\u5c31\u7981\u6b62\uff1b\u984c\u76ee\u7684TCP\u5c01\u5305\u70ba\u4f8b\uff0c\u5982\u679cfilter\u8b93\u73fe\u5728\u9019\u500bSYN\u7684\u5c01\u5305\u901a\u904e\uff0c\u5247\u53ef\u8a18\u9304\u6709\u95dc\u6b64\u5c01\u7684\u72c0\u614b\uff0c\u5c07\u4f86\u6709\u985e\u4f3c\u7684\u5c01\u5305\u4f86\uff0c\u7b26\u5408\u72c0\u614b\u4fbf\u53ef\u4f7f\u5176\u901a\u904e\u3002 stateless: \u53ea\u7528\u73fe\u6709\u5c01\u5305\u7684\u8cc7\u8a0a(\u5982 header\u7b49\u7b49)\u4f86\u6c7a\u5b9a\u662f\u5426\u901a\u904e\uff0c\u5982\u679c\u6709\u4eba\u507d\u9020\u4e86\u4e00\u500b\u4e00\u6a21\u4e00\u6a23header\u7684\u5c01\u5305\uff0c\u4fbf\u53ef\u4ee5\u6b3a\u9a19\u904e\u4ed6(\u56e0\u70ba\u6c92\u6709\u4e4b\u524d\u7684\u72c0\u614b\u53ef\u4f9b\u6bd4\u5c0d)\uff0c\u4fb5\u5165\u7cfb\u7d71\u3002","title":"2012Final(Jan. 11 2013)"},{"location":"univ_notes/network_security/network_security/#2015finaldec-29-2015","text":"(1)firewall\u901a\u5e38\u7121\u6cd5\u5230\u9054application \u5c64\u904e\u6ffe\u61c9\u7528\u7a0b\u5f0f\u50b3\u9001\u7684\u8cc7\u6599 (2) (a) security association \u70ba\u55ae\u5411 (6) egress\u53ef\u4ee5\u7528\u4f86\u627e\u5230attack src (7) \u5b9a\u8b70\u984c\uff0c\u8acb\u898b\u4e0a\u9762\u7b46\u8a18\u3002 (9) \u898b\u4e0a\u9762\u8868\u683c\uff0c\u4e2d\u6587\u7684\u90a3\u500b (10) \u80cc\u8aa6\u984c\uff0c\u898b\u4e0a\u9762\u7b46\u8a18 (11) \u56e0\u70ba\u5bc6\u78bc\u6709\u52a0\u9e7d(\u96a8\u6a5fstr append)\u904e\u5f8c\u624dhash\uff0c\u6240\u4ee5\u6703\u4e0d\u4e00\u6a23 (12) statistical\u5075\u6e2c\u6cd5\u6bd4\u8f03\u80fd\u56e0\u61c9\u65b0\u7684\u653b\u64ca\uff0c\u539f\u56e0\u4e43\u662f\u4ed6\u6bd4\u8f03\u52d5\u614b\uff0c\u6703\u6aa2\u67e5\u4f7f\u7528\u8457\u7684\u8cc7\u6599\u7528\u91cf\u3001\u884c\u70ba\u3001\u7aef\u53e3\u3001\u7db2\u8def\u4f4d\u7f6e\u7b49\u7b49\uff1b\u7136\u800crule based\u7528\u5df2\u7d93\u5beb\u6b7b\u7684\u65e2\u6709\u898f\u5247\u4f86\u5075\u6e2c\uff0c\u56e0\u70ba\u5beb\u6b7b\u4e86\u6240\u4ee5\u5f88\u7cdf\uff0c\u7121\u6cd5\u5c0d\u65b0\u7684\u6709\u6240\u8b8a\u901a\uff0c\u6545stat\u65b9\u6cd5\u624d\u80fd\u5c0d\u6297\u3001\u65b0\u7a4e\u3001\u672a\u77e5\u7684\u5a01\u8105\u3002","title":"2015final(Dec. 29 2015)"},{"location":"univ_notes/network_security/network_security/#_18","text":"(5) meta\u75c5\u6bd2\u548cpoly\u75c5\u6bd2\u7684\u5340\u5225? poly\u61c9\u8a72\u662f\u53ea\u6709\u6539\u8b8a\u81ea\u5df1\u7684signature\uff0c\u6216\u662f\u90e8\u5206\u7684code\uff1b\u4f46\u662fmeta\u662f\u6574\u500b\u7a81\u8b8a\u6210\u65b0\u7684\uff0c\u4e0d\u50c5signature\u8b8a\u4e86\uff0ccode\u4e5f\u5b8c\u5168\u4e0d\u540c\uff0c\u561b? TA: \u4f60\u7684\u7406\u89e3\u662f\u5c0d\u7684\u3002 (7) reflexive \u548c non-reflexive DDoS \u7684\u5340\u5225?\uff0creflexive\u597d\u50cf\u9084\u6703\u7d93\u7531\u7b2c\u4e09\u65b9\u4f86\u9593\u63a5\u767c\u9001DDoS\u5c01\u5305\uff0c\u4f7f\u4e3b\u8b00\u66f4\u96e3\u88ab\u67e5\u5230\uff0c\u9032\u800c\u96b1\u8eab\uff0c\u55ce? TA: \u6c92\u932f\uff0c\u5c31\u662f\u628a src \u507d\u9020\u6210\u5225\u4eba (13)\uff0chttp\u5c6c\u65bcweb\uff0c\u6240\u4ee5\u756b\u5728external\u5916? TA: HTTP Server \u8981\u63d0\u4f9b\u5c0d\u5916\u670d\u52d9\uff0c\u61c9\u8a72\u662f\u653e\u5728 external DMZ\uff0cEmail Server \u4e0d\u7528\u63d0\u4f9b\u5c0d\u5916\u670d\u52d9\u61c9\u8a72\u662f\u653e\u5728 Internel DMZ\u3002","title":"\u4ee5\u4e0b\u6709\u7591\u554f\uff0c\u9084\u7169\u8acb\u52a9\u6559\u89e3\u7b54:"},{"location":"univ_notes/network_security/network_security/#2016finaljan-3-2017","text":"exam paper(for TA)","title":"2016final(Jan. 3 2017)"},{"location":"univ_notes/network_security/network_security/#_19","text":"(1) \u9023\u7dda\u516c\u53f8\u7684\u5206\u90e8\uff0c\u61c9\u8a72\u63a1\u7528tunnel mode\u5c31\u597d\uff0c\u5982\u9019\u5f35\u5716(cooperate network\u901a\u5e38\u6703\u7528tunnel mode)\uff0c\u56e0\u70ba\u9019\u6a23\u4e0d\u7528\u6bcf\u4e00\u500b\u5206\u90e8\u7684\u96fb\u8166\u90fd\u8981\u5177\u5099IPSEC\u529f\u80fd\uff0c\u6bd4\u8f03\u7c21\u55ae\uff0c\u800c\u5728\u52a0\u4e0a\u8981\u52a0\u5bc6\uff0c\u5247\u4f7f\u7528ESP in transport mode (\u61c9\u8a72\u662ftunnel) \u5c01\u5305\u5982\u9019\u500btunnel\u6700\u5f8c\u7684\u7d50\u679c (2) (a)yes, by using the sliding window with seq number, (b) drop it (3) (a)AH (b)ESP ESP with auth (4) (a)\u7a81\u8b8a(metamorphism) (b)\u591a\u578b\u614b(polymorphism) (\u88dc\u5145) Polymorphic code: The (same) code takes many forms (like encryptions) Oligomorphic code: The (same) code takes one of a few predefined forms (and thus can be possibly matched against signatures that can cover all cases) Metamorphic code: The code mutates, so the code itself is different in each execution (but the functionality the same) (5) (a) \u7d71\u8a08\u53ef\u4ee5\u800c\u898f\u5247\u4e0d\u884c: \u65b0\u7684\u5a01\u8105\uff0c\u56e0\u70ba\u65b0\u7684\u5a01\u8105\u4e0d\u6703\u7b26\u5408\u4efb\u4f55\u4e00\u500b\u898f\u5247\uff0c\u662f\u5fc5\u5f97\u7528\u8f03\u70ba\u52d5\u614b\u7684\u7d71\u8a08\u65b9\u5f0f\u5075\u6e2c\u3002 (b) \u898f\u5247\u53ef\u4ee5\u800c\u7d71\u8a08\u4e0d\u884c: \u5728\u7d71\u8a08\u6578\u64da\u4e0a\u8fa8\u8a8d\u4e0d\u51fa\u800c\u898f\u5247\u53ef\u4ee5\u7684(\u4f8b\u5982\u67d0\u500b\u4fb5\u5165\u6027\u653b\u64ca\u4e26\u4e0d\u6703\u89f8\u72af\u4efb\u4f55\u4e00\u500bthreshold\u7684\u8a2d\u5b9a)\uff0c\u56e0\u6b64\u4ed6\u662f\u4e00\u7a2e\u7d71\u8a08\u4f8b\u5916\uff0c\u9700\u8981\u7528\u898f\u5247\u6027\u6aa2\u6e2c\u4f86\u8655\u7406\u3002 (6) \u4f7f\u7528\u8005\u5e33\u6236\u5728\u8cc7\u6599\u5eab\u5efa\u7acb\u7684\u6642\u5019: \u6703\u5c07\u4f7f\u7528\u8005\u7684 \u5e33\u865f\uff0csalt\u7684\u96a8\u6a5f\u5b57\u4e32\uff0c\u4ee5\u53cahash(salt(password)) \u4e09\u5143\u7d44\u5b58\u5728db\u3002 \u4f7f\u7528\u8005\u8f38\u5165\u5bc6\u78bc\u767b\u5165\u7cfb\u7d71\u7684\u6642\u5019: \u4f7f\u7528\u8005\u8f38\u5165\u5e33\u865f\u5bc6\u78bc\u5f8c\uff0c\u5c0d\u61c9\u53bbquery\u90a3\u500bdb entry\uff0c\u4e26\u4e14\u5c07\u7576\u521d\u7684salt\u6578\u503c\u53d6\u51fa hash(salt(typein_password)) ?= hash(salt(stored_password)) \u4f86\u78ba\u8a8d\u662f\u4e0d\u662f\u4e00\u500b\u5408\u6cd5\u7684\u767b\u5165\u3002 (7) (a) IPS (Intrusion Protection System): \u9632\u60a3\u672a\u7136\uff0c\u9632\u60a3\u5165\u4fb5\u7684\u7cfb\u7d71(\u5728\u5165\u4fb5\u524d)\u3002 IDS (Intrusion Detecion System): \u5373\u6642\u8655\u7406\uff0c\u5728\u5165\u4fb5\u5f8c\u8d95\u7dca\u767c\u73fe\u4e26\u8655\u7406\uff0c\u4f7f\u640d\u5931\u964d\u81f3\u6700\u4f4e\u3002 role: \u904e\u6ffe\u8cc7\u8a0a\uff0c\u5c07\u53ef\u80fd\u9020\u6210\u653b\u64ca\u7684\u6d41\u91cf\u5148\u64cb\u4e0b\uff0c\u55ce? (b) tiny fragment\u80fd\u653b\u64ca\u6210\u529f\u7684\u539f\u56e0\u5982\u4e0b: \u9996\u5148\uff0c\u56e0\u70ba\u5c01\u5305\u5f88\u5c0f\uff0c\u7528\u4f86\u8fa8\u8b58\u60e1\u610f\u5c01\u5305\u7684pattern\u8fa8\u8a8d\u7cfb\u7d71\u53ef\u80fd\u7121\u6cd5\u5206\u8fa8(\u56e0\u70bapattern\u4e5f\u88ab\u5207\u5272\u4e86)\uff0c(\u6216\u7c21\u55ae\u8aaa\u5c31\u662f\u5c01\u5305\u592a\u5c0f\u5f97\u4ee5\u898f\u907f\u5b89\u5168\u6aa2\u6e2c)\uff0c\u518d\u4f86\uff0c\u5982\u679c\u7528\u5c01\u5305size \u5c0f\u4e5f\u53ef\u4ee5\u8eb2\u907fsize\u6aa2\u6e2c\u7684\u6a5f\u5236\u3002 (8) (a) rootkit (\u611f\u89ba\u633a\u5e38\u8003)\u4fb5\u5165\u7cfb\u7d71\u4e2d\u507d\u88dd\u6210root\u7684\u975e\u6cd5\u4f7f\u7528\u8005 (b) bot \u662f\u88ab\u60e1\u610f\u8edf\u9ad4\u6216\u653b\u64ca\u8005\u63a7\u5236\u7684\u7db2\u8def\u7cfb\u7d71\uff0c\u800c\u8a31\u591a\u500bbot\u5408\u4f5c\u4e00\u6a23\u7684\u4e8b\u60c5\u5c31\u662f\u6bad\u5c4d\u7db2\u8def(botnet\u3001zombie net) \u6703\u7528\u4f86\u767c\u52d5DDoS\u653b\u64ca \u56e0\u70ba\u76e3\u6e2c\u5411\u5916\u6d41\u51fa\u7684\u5c01\u5305\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4f86\u6e2c\u5230\u8815\u87f2\u8edf\u9ad4\u8981\u5f9e\u5167\u90e8\u5411\u5916\u7ac4\u51fa\u5c0b\u627e\u4e0b\u4e00\u500b\u76ee\u6a19 (\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54) (d) \u7528\u4ee5\u6aa2\u6e2c\u8815\u87f2\uff0c\u96a8\u6a5f\u78ba\u8a8d\u9023\u7dda\u662f\u5426\u9054\u67d0\u500b\u53ef\u80fd\u88ab\u5224\u5b9a\u70baworm\u4e8b\u4ef6\u7684\u6d41\u91cf (9) (a) \u5206\u6563\u5f0f\u963b\u65b7\u670d\u52d9\u653b\u64ca\uff0c\u85c9\u7531\u767c\u9001\u5927\u91cf\u6d41\u91cf\u4f86\u8b93\u76ee\u6a19\u7db2\u8def\u7cfb\u7d71\u75b2\u65bc\u61c9\u4ed8\uff0c\u751a\u81f3\u7671\u7613\uff0c\u800c\u9020\u6210\u5408\u6cd5\u4f7f\u7528\u8005\u7121\u6cd5\u5b58\u53d6\u8a72\u7db2\u8def\u7cfb\u7d71\u7684\u8cc7\u6e90\u3002 (b) \u6709\u900f\u904e\u7b2c\u4e09\u65b9\u7db2\u8def\u7cfb\u7d71\u3001\u9593\u63a5\u5f62\u5f0f\u7684DDoS\uff0c\u53ef\u4ee5\u8b93\u99ed\u5ba2\u7684IP\u6613\u65bc\u96b1\u533f\u3002 \u53c8\u7a31SYN Flood\uff0c\u4e00\u76f4\u9805\u7cfb\u7d71\u767c\u5e03SYN\u5c01\u5305\uff0c\u7cfb\u7d71\u4fbf\u6703\u56de\u61c9SYN-ACK\uff0c\u57fa\u65bcTCP\u4e09\u65b9\u4ea4\u63e1\u539f\u5247\uff0c(\u56e0\u70ba\u81ea\u5df1\u4e5f\u8981\u56de\u61c9\u4e00\u500bACK\u624d\u80fd\u5efa\u7acb\u9023\u7dda\uff0c\uff0c\u5426\u5247\u56e0\u70ba\u7cfb\u7d71\u4ee5\u70ba\u6211\u5011\u6c92\u6536\u5230\uff0c\u4ed6\u8b8a\u5f97\u91cd\u50b3\u5c01\u5305)\uff0c\u4e5f\u6b63\u56e0\u5982\u6b64\u6211\u5011\u5c31\u767c\u4e00\u5806SYN\u4f46\u4e0d\u56de\u61c9\u7cfb\u7d71\u7684SYN-ACK\uff0c\u8b93\u7cfb\u7d71\u75b2\u65bc\u91cd\u65b0\u50b3\u9001\u5c01\u5305\u800c\u7671\u7613\u5176\u8cc7\u6e90\u3002 (d) \u4e00\u76f4\u5411\u7cfb\u7d71\u767c\u5e03ICMP\u63a7\u5236\u5c01\u5305\uff0c\u800c\u8017\u76e1\u983b\u5bec (10) \u5c0b\u627e\u53ef\u80fd\u6709\u5f31\u9ede\u3001\u6f0f\u6d1e\u7684port\u4ee5\u9032\u884c\u653b\u64ca(\u4e0d\u77e5\u9053\u9019\u6a23\u89e3\u91cb\u662f\u5426\u6b63\u78ba\uff0c\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54) TA: \u662f\u7684\u6c92\u932f\u3002","title":"\u56e0\u70ba\u6c92\u6709\u6b63\u89e3\uff0c\u6240\u4ee5\u4ee5\u4e0b\u6709\u7591\u554f\u7684\u4e5f\u7169\u8acb\u52a9\u6559\u89e3\u7b54:"},{"location":"univ_notes/network_security/network_security/#2017final-jan-2-2018","text":"(1) (a) \u4e09\u500b\u539f\u56e0: \u60e1\u610f\u8edf\u9ad4\u592a\u591a\u7a2e\u3001\u9632\u6bd2\u8edf\u9ad4\u66f4\u65b0\u8cc7\u6599\u5eab\u7684\u901f\u5ea6\u611f\u4e0d\u4e0a\u60e1\u610f\u8edf\u9ad4\u63a8\u9673\u51fa\u65b0\u7684\u901f\u5ea6(\u9053\u9ad8\u4e00\u5c3a\u9b54\u9ad8\u4e00\u4e08?)\u3001 (b) \u4e09\u7a2e: polymorphism, metamorphism, stealthy malwares (2) \u4e0d\u77e5\u9053\u8036\uff0c\u4f46\u63a8\u6e2c\u61c9\u8a72\u662fcross-site scripting(\u9084\u5e0c\u671b\u52a9\u6559\u89e3\u7b54) def: \u662f\u4e00\u7a2e\u7db2\u7ad9\u61c9\u7528\u7a0b\u5f0f\u7684\u5b89\u5168\u6f0f\u6d1e\u653b\u64ca\uff0c\u662f\u4ee3\u78bc\u6ce8\u5165\u7684\u4e00\u7a2e\u3002\u5b83\u5141\u8a31\u60e1\u610f\u4f7f\u7528\u8005\u5c07\u7a0b\u5f0f\u78bc\u6ce8\u5165\u5230\u7db2\u9801\u4e0a\uff0c\u5176\u4ed6\u4f7f\u7528\u8005\u5728\u89c0\u770b\u7db2\u9801\u6642\u5c31\u6703\u53d7\u5230\u5f71\u97ff\u3002\u9019\u985e\u653b\u64ca\u901a\u5e38\u5305\u542b\u4e86HTML\u4ee5\u53ca\u4f7f\u7528\u8005\u7aef\u8173\u672c\u8a9e\u8a00\u3002 TA: \u6c92\u932f\u3002 (3) (b) \u5f9e\u88ab\u63a7\u5236\u7684zombie\u96fb\u8166\u767c\u9001\u591a\u500bICMP\u63a7\u5236\u5c01\u5305\uff0c\u7d93\u7531\u7b2c\u4e09\u65b9\u7684reflexive server\uff0c\u9593\u63a5\u7684\u653b\u64ca\u53d7\u5bb3\u8005\u4e3b\u6a5f (4) ingress(\u5427?)\uff0c\u56e0\u70baspoofing attack\u662f\u5916\u9762\u7684\u9020\u5047\u5c01\u5305\u50b3\u5165\u4f5c\u70ba\u653b\u64ca TA: \u61c9\u8a72\u662f both\u3002spoofing attack \u662f\u6307\u507d\u9020 source \u6216 destination IP\u3002\u6240\u4ee5 ingress \u8ddf egress \u90fd\u53ef\u80fd\u53ef\u4ee5\u9632\u6b62\u3002 (5) (\u9019\u4e5f\u4e0d\u662f\u5f88\u78ba\u5b9a\uff0c\u9084\u8acb\u52a9\u6559\u8a73\u7d30\u89e3\u7b54) (a) stateless \u53ef\u4ee5\u6210\u529f\u5efa\u7acb\u9023\u7dda\uff0c\u56e0\u70ba\u4ed6\u53ea\u6aa2\u67e5\u73fe\u6709\u7684\u5c01\u5305\u5167\u5bb9\u4f86\u5224\u65b7\u662f\u5426\u6709\u5a01\u8105 (b) stateful \u4e0d\u4e00\u5b9a\u80fd\u6210\u529f\u9023\u7dda\uff0c\u4f8b\u5982\u5f9e\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\uff0c\u5982\u679c\u67e5\u95b1\u5148\u524d\u4f3a\u670d\u5668\u56de\u61c9\u7684\u5c01\u5305\u5c0d\u61c9\u7684\u898f\u5247\u4e0d\u5141\u8a31\u901a\u904e\u7684\u8a71\uff0c\u5247\u4e0d\u5141\u8a31\u901a\u904e\uff0c\u800c\u7121\u6cd5\u9054\u6210TCP\u3002 TA: (a) stateless \u7121\u6cd5\u6210\u529f\u5efa\u7acb\u9023\u7dda\uff0c\u56e0\u70ba\u5b83\u4e0d\u77e5\u9053\u6b64\u6b21\u7684 handshake \u5c01\u5305\u4f86\u6e90\u662f\u5426\u5408\u6cd5(e.g., \u4efb\u610f IP \u76f4\u63a5\u9001\u4e86 SYN, ACK, FIN, RST \u5c01\u5305\u9020\u6210 DoS)\uff0c\u56e0\u6b64\u6703\u62d2\u7d55\u5c01\u5305\uff0c\u9020\u6210\u9023\u7dda\u5931\u6557\u3002 (b) stateful \u53ef\u4ee5\u6210\u529f\u9023\u7dda\uff0c\u56e0\u70ba\u6703\u8a18\u9304\u6b64\u4f86\u6e90 IP \u8655\u65bc handshake \u7684\u54ea\u500b\u968e\u6bb5\uff0c\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053\u6b64\u6b21\u7684 handshake \u662f\u5426\u5408\u6cd5\u6c7a\u5b9a\u63a5\u53d7\u6216\u62d2\u7d55\uff0c\u6210\u529f\u5efa\u7acb\u9023\u7dda\u3002 (6) \u4e0d\u6703\uff0c\u56e0\u70basalt\u662f\u96a8\u6a5f\u7522\u751f\u7684\u5b57\u4e32\uff0c\u5169\u8005salt\u503c\u4e0d\u540c\uff0c\u5247hash(salt(pass1)) != hash(salt(pass2)) (7) (8) (a) TRW: \u662f\u4e00\u7a2e\u5c0d\u4ed8\u8815\u87f2\u7684\u65b9\u6cd5\uff0c\u96a8\u6a5f\u6383\u63cf\u67d0\u500b\u6307\u5b9a\u7684\u9023\u7dda\u4f86\u770b\u662f\u5426\u6709\u53ef\u80fd\u542b\u6709\u8815\u87f2\u3002 (b) rate limiting: \u7576\u767c\u73fe\u53ef\u80fd\u6709\u8815\u87f2\u7684\u5c01\u5305\u6642\uff0c\u9650\u5236\u4f86\u81ea\u90a3\u500bsource\u7684\u5c01\u5305\u6d41\u91cf\u3002 (9) AH, ESP auth (10) \u4e0a\u9762\u6709\u4e86\u5c31\u4e0d\u91cd\u8907\u5beb\u56c9 (11) \u5169\u500b\u90fd\u662f\u6bd4\u8f03\u4f4e(\u78b0\u649e\u5c11\uff0c\u932f\u8aa4\u7387\u4f4e) \u5982\u5716: (12) \u5c0f\u5c01\u5305\u653b\u64ca\uff0c\u5b9a\u7fa9\u662f\u5c07\u5927\u7684\u5c01\u5305\u5207\u5272\u6210\u6578\u500b\u5c0f\u5c01\u5305\u4f86\u767c\u9001\uff0c\u85c9\u6b64\u898f\u907f\u5b89\u5168\u6aa2\u6e2c\uff0c\u4ee5\u9054\u6210\u653b\u64ca\u3002 \u80fd\u8eb2\u904e\u6aa2\u67e5\u539f\u56e0\u5728\u65bc\uff0c\u7b2c\u4e00\uff0c\u5c01\u5305\u5207\u5272\u5f8c\u8f03\u96e3\u770b\u51fa\u60e1\u610f\u7684pattern(\u56e0\u70bapattern \u4e5f\u88ab\u5207\u5272\u4e86)\uff1b\u7b2c\u4e8c\uff0c\u5207\u5272\u5f8csize\u660e\u986f\u6703\u964d\u4f4e\u8a31\u591a\uff0c\u56e0\u6b64\u80fd\u898f\u907f\u5982\u5927\u5c0f\u6aa2\u67e5\u6a5f\u5236\u7684\u65b9\u6cd5\u3002 (13) (a) \u5728\u67e5\u8a62\u8cc7\u6599\u5eab\u7684\u6642\u5019\u6c92\u6709\u5728\u8f38\u5165\u6b04\u4f4d\u505a\u5b89\u5168\u6027\u6aa2\u6e2c\uff0c\u8b93\u99ed\u5ba2\u53ef\u4ee5\u593e\u5e36\u60e1\u610fSQL\u6307\u4ee4\u65bc\u5176\u4e2d\u3002 (b) \u53ef\u4ee5\u6488\u51fa\u8a31\u591a\u4f7f\u7528\u8005\u8cc7\u6599 host-based: \u901a\u5e38\u662f\u4fdd\u8b77\u500b\u4eba\u7684\u9632\u706b\u7246\uff1bnetwork-based: \u4fdd\u8b77\u6574\u500b\u7db2\u8def\u62d3\u6a38\u67b6\u69cb\u3001\u7cfb\u7d71\u7684\u9632\u706b\u7246 (14) \u4e0a\u4e00\u6b21\u7684\u7bc4\u570d\uff0c\u5c31\u6c92\u6709\u5beb\u4e86 (15) (a) \u4ee3\u8868\u843d\u5728\u7a97\u53e3\u7684\u5de6\u908a\uff0c\u662f\u5df2\u7d93\u63a5\u6536\u904e\u7684\u5c01\u5305\uff0c\u6b64\u6642\u518d\u5ea6\u6536\u5230\u4ee3\u8868\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305 (b) \u6709\u5169\u7a2e\u60c5\u5f62 \u60c5\u6cc1\u4e00: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u800c\u4e14\u662f\u6c92\u6709\u5099\u63a5\u6536\u904e\u7684\uff0c\u5247\u63a5\u6536\u4ed6 \u60c5\u6cc1\u4e8c: \u5c01\u5305\u843d\u65bc\u63a5\u6536\u7a97\u53e3\u5167\uff0c\u7136\u800c\u662f\u88ab\u63a5\u6536\u904e\u7684\uff0c\u4ee3\u8868\u91cd\u653e\u653b\u64ca\uff0c\u6368\u68c4\u8a72\u5c01\u5305 \u5168\u65b0\u7684\u5c01\u5305\uff0c\u7a97\u53e3\u5411\u53f3\u6ed1\u52d5\u4e00\u500b\u5c01\u5305\u55ae\u4f4d\u4ee5\u63a5\u6536\u9019\u500b\u5c01\u5305 (16) (a)size of args = 8bytes(char pointer is 8 bytes) (b)return address will store the value of where the instruction of main is stored for return purpose, which vlaue is 0x08048fe5 buf is 4 bytes, and there are 4 bytes more for $ebp, so total 8 bytes of data to overflow to the return address, payload is \"A\" * 8 + (\\95\\88\\04\\08) due to x86 little endian architecture. TA: buf \u7684\u4f4d\u7f6e\u5230 ebp \u7684\u4f4d\u7f6e\u6709 16 bytes\uff0c\u518d\u52a0\u4e0a ebp \u5230 return address \u6709 4 bytes\uff0c\u6240\u4ee5\u61c9\u8a72\u662f \"A\"*20 + (\\x95\\x88\\x04\\x08)\u3002 \u6211\u548cyilin\u8a0e\u8ad6\u7684\u7d50\u679c\uff0c\u56e0\u70bax/2wx $ebp\u8868\u793a\u5f9eebp\u5f80\u5f8c\u770b\u5169\u500bword(\u5f9e\u81ea\u5df1)\uff0c\u6240\u4ee50xbffec064\u4ee3\u8868ebp\u5b58\u4e0a\u4e00\u500bbase pointer \u7136\u5f8c\u5728\u66f4\u4e0a\u4e00\u500b\u5c31\u662freturn address\u7684\u4f4d\u5740\uff0c\u53c8buf\u4f4d\u57280xbffebfc8 \u6545 \u9700\u7528\u4f86\u6c96\u5230return addr\u7684\u9577\u5ea6\u70ba 0xbffebfd8 - 0xbffebfc8 + 4 = 0x14 = 20 , so payload (all) = \"A\"*20 +(\\x95\\x88\\x04\\x08)\u3002","title":"2017final (Jan. 2 2018)"},{"location":"univ_notes/pp/pp/","text":"Parallel Programming Fall 2018 Lecturer: Yiping You @CS, NCTU Taiwan GitHub for this course Here Final project: Gaussin Blur, Different Parallel Platforms Comparison Achieved 935 times faster Gaussian Blur on NVIDIA GTX 1070 compared to Intel Core i5 7500 (4C 4T 3.4GHzs) with error 1% Presentation pptx Report , First time writing the ACM SGI style report, not so well-written, feel free to mail me Source code","title":"Senior 1st sem. Parallel Programming"},{"location":"univ_notes/pp/pp/#parallel-programming","text":"Fall 2018 Lecturer: Yiping You @CS, NCTU Taiwan","title":"Parallel Programming"},{"location":"univ_notes/pp/pp/#github-for-this-course","text":"Here","title":"GitHub for this course"},{"location":"univ_notes/pp/pp/#final-project-gaussin-blur-different-parallel-platforms-comparison","text":"Achieved 935 times faster Gaussian Blur on NVIDIA GTX 1070 compared to Intel Core i5 7500 (4C 4T 3.4GHzs) with error 1% Presentation pptx Report , First time writing the ACM SGI style report, not so well-written, feel free to mail me Source code","title":"Final project: Gaussin Blur, Different Parallel Platforms Comparison"},{"location":"univ_notes/sa/sa/","text":"Computer System Administration Fall 2018 Lecturer: Tzehan Lin and TA in Computer Center @CS, NCTU Taiwan GitHub for this course Here , including writeups for certain homeworks to help students in the future who study this course will do their homework easier and faster :)","title":"Senior 1st sem. System Administration"},{"location":"univ_notes/sa/sa/#computer-system-administration","text":"Fall 2018 Lecturer: Tzehan Lin and TA in Computer Center @CS, NCTU Taiwan","title":"Computer System Administration"},{"location":"univ_notes/sa/sa/#github-for-this-course","text":"Here , including writeups for certain homeworks to help students in the future who study this course will do their homework easier and faster :)","title":"GitHub for this course"},{"location":"univ_notes/uav_autopilot/uav_autopilot/","text":"UAV Drone autopilot, computer vision and image processing. Spring 2018 Lecturer: K.W. Chen @CS, NCTU Taiwan Lab1. Introduction to Open CV and installation Mar 01, 2018 Lab1 pdf Install Open CV In the Ubuntu 16.04 64bit Required dependencies are the followings 1.Git 2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) 3.CMake 2.6 or higher 4.GCC 4.4.x or later sudo apt-get install libopencv-dev python-opencv Once installed pkg-config --modversion opencv If the version is shown, then we're good to rock with opencv. Build your opencv_file.cpp with CMake or g++ standards 1.With CMake (Don't forget to add CMakeLists.txt) cmake_minimum_required(VERSION 2.8) project( project_name ) find_package( OpenCV REQUIRED ) add_executable( project_name project_name .cpp ) target_link_libraries( project_name ${OpenCV_LIBS} ) 2.With g++ and flags for opencv libraries g++ lab1-2.cpp `pkg-config --cflags --libs opencv` Today's course contents Basic understanding of image processing and image data format. Course week1 pdf Bilinear Interpolation Basically ,this is an algorithm aimed for image transformation in this lab. The interpolated value of a point is a reversely-weighted average of the neighboring points, such method is quite useful in the image transformation. Lab2. Image processing in spacial domain, linear and non-linear transformation Mar 08, 2018 Spacial-domain image processing. Histogram equalization and mask processing Edge detection algorithm: Sobel filter, Laplician smoothing (W.J.Tsai OS Fall2017 HW3) ,sharpening and dege detection. Computer vision 1.Low level measurement such as brightness,Enhancements,Region segments,Features Today's course contents Course pdf Today's lab, Spacial Domain histogram equalization. Problem1 Histogram equalization 1.We may use the vector to implement the map for statistical data. 2.Accumulate using another vector 3.Count and mapping to the relative proportion * max_value, then that's all NOTE!!!! THE DEFAULT IMG MAT IS 3-CHANNEL TYPE, NOT ONE CHANNEL GREY-SCALE, SO IF WE DONT DO THE GREY SCALE CONVERSION, ONLY OF THE IMAGE WILL BE PROCESSED, THUS THE FOLLOWING CODE IS NEEDED Mat input_img = imread ( argv [ 1 ]); //since the bgr channel is used for default action, then the BGR 3 channel image must be converted to GREY channel cvtColor ( input_img , input_img , CV_BGR2GRAY ); Mat output_img = input_img . clone (); histogram_equal ( input_img , output_img ); void histogram_equal ( Mat input , Mat output ) { vector int hash_distribution ; vector double intensity_cdf ; hash_distribution . resize ( 256 ); intensity_cdf . resize ( 256 ); for ( int i = 0 ; i input . rows ; i ++ ) { for ( int j = 0 ; j input . cols ; j ++ ) { hash_distribution [( int ) input . at uchar ( i , j )] ++ ; } } //search the maxium value int max_value = 0 , cnt = 0 ; double cumulative_cnt = 0.0f ; for ( int i = 0 ; i hash_distribution . size (); i ++ ) { if ( hash_distribution [ i ] != 0 ) { max_value = max ( max_value , i ); cumulative_cnt += ( double ) hash_distribution [ i ] / ( double )( input . rows * input . cols ); cnt += hash_distribution [ i ]; intensity_cdf [ i ] = cumulative_cnt ; cout cnt cnt at i Cumulate to cumulative_cnt where intensity is now intensity_cdf [ i ] endl ; } } for ( int i = 0 ; i input . rows ; i ++ ) { for ( int j = 0 ; j input . cols ; j ++ ) { output . at uchar ( i , j ) = ( intensity_cdf [ input . at uchar ( i , j )] * max_value ); } } } Lab3. Brief introduction to Computer Vision Mar 15, 2018 Binary Machine Vision Today's lab, connected component labeling Check here Lab4. Camera Calibration Mar 29, 2018 Course pdf Camera Calibration (From official openCV document)Basically, you need to take snapshots of these patterns with your camera and let OpenCV find them. Each found pattern results in a new equation. To solve the equation you need at least a predetermined number of pattern snapshots to form a well-posed equation system. This number is higher for the chessboard pattern and less for the circle ones. For example, in theory the chessboard pattern requires at least two snapshots. However, in practice we have a good amount of noise present in our input images, so for good results you will probably need at least 10 good snapshots of the input pattern in different positions. First, download , measure the size of those square Take many photos (approx 50 images ) of this grid and save it as jpg file Iterate all the point on the Today's lab, camera calibration and wraping Lab4.pdf","title":"Junior 2nd sem. UAV Autopilot and Image Processing"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#uav-drone-autopilot-computer-vision-and-image-processing","text":"Spring 2018 Lecturer: K.W. Chen @CS, NCTU Taiwan","title":"UAV Drone autopilot, computer vision and image processing."},{"location":"univ_notes/uav_autopilot/uav_autopilot/#lab1-introduction-to-open-cv-and-installation-mar-01-2018","text":"Lab1 pdf","title":"Lab1. Introduction to Open CV and installation Mar 01, 2018"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#install-open-cv","text":"In the Ubuntu 16.04 64bit Required dependencies are the followings 1.Git 2.Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) 3.CMake 2.6 or higher 4.GCC 4.4.x or later sudo apt-get install libopencv-dev python-opencv Once installed pkg-config --modversion opencv If the version is shown, then we're good to rock with opencv. Build your opencv_file.cpp with CMake or g++ standards 1.With CMake (Don't forget to add CMakeLists.txt) cmake_minimum_required(VERSION 2.8) project( project_name ) find_package( OpenCV REQUIRED ) add_executable( project_name project_name .cpp ) target_link_libraries( project_name ${OpenCV_LIBS} ) 2.With g++ and flags for opencv libraries g++ lab1-2.cpp `pkg-config --cflags --libs opencv`","title":"Install Open CV"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#todays-course-contents","text":"Basic understanding of image processing and image data format. Course week1 pdf Bilinear Interpolation Basically ,this is an algorithm aimed for image transformation in this lab. The interpolated value of a point is a reversely-weighted average of the neighboring points, such method is quite useful in the image transformation.","title":"Today's course contents"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#lab2-image-processing-in-spacial-domain-linear-and-non-linear-transformation-mar-08-2018","text":"Spacial-domain image processing. Histogram equalization and mask processing Edge detection algorithm: Sobel filter, Laplician smoothing (W.J.Tsai OS Fall2017 HW3) ,sharpening and dege detection. Computer vision 1.Low level measurement such as brightness,Enhancements,Region segments,Features","title":"Lab2. Image processing in spacial domain, linear and non-linear transformation Mar 08, 2018"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#todays-course-contents_1","text":"Course pdf","title":"Today's course contents"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#todays-lab-spacial-domain-histogram-equalization","text":"Problem1 Histogram equalization 1.We may use the vector to implement the map for statistical data. 2.Accumulate using another vector 3.Count and mapping to the relative proportion * max_value, then that's all NOTE!!!! THE DEFAULT IMG MAT IS 3-CHANNEL TYPE, NOT ONE CHANNEL GREY-SCALE, SO IF WE DONT DO THE GREY SCALE CONVERSION, ONLY OF THE IMAGE WILL BE PROCESSED, THUS THE FOLLOWING CODE IS NEEDED Mat input_img = imread ( argv [ 1 ]); //since the bgr channel is used for default action, then the BGR 3 channel image must be converted to GREY channel cvtColor ( input_img , input_img , CV_BGR2GRAY ); Mat output_img = input_img . clone (); histogram_equal ( input_img , output_img ); void histogram_equal ( Mat input , Mat output ) { vector int hash_distribution ; vector double intensity_cdf ; hash_distribution . resize ( 256 ); intensity_cdf . resize ( 256 ); for ( int i = 0 ; i input . rows ; i ++ ) { for ( int j = 0 ; j input . cols ; j ++ ) { hash_distribution [( int ) input . at uchar ( i , j )] ++ ; } } //search the maxium value int max_value = 0 , cnt = 0 ; double cumulative_cnt = 0.0f ; for ( int i = 0 ; i hash_distribution . size (); i ++ ) { if ( hash_distribution [ i ] != 0 ) { max_value = max ( max_value , i ); cumulative_cnt += ( double ) hash_distribution [ i ] / ( double )( input . rows * input . cols ); cnt += hash_distribution [ i ]; intensity_cdf [ i ] = cumulative_cnt ; cout cnt cnt at i Cumulate to cumulative_cnt where intensity is now intensity_cdf [ i ] endl ; } } for ( int i = 0 ; i input . rows ; i ++ ) { for ( int j = 0 ; j input . cols ; j ++ ) { output . at uchar ( i , j ) = ( intensity_cdf [ input . at uchar ( i , j )] * max_value ); } } }","title":"Today's lab, Spacial Domain histogram equalization."},{"location":"univ_notes/uav_autopilot/uav_autopilot/#lab3-brief-introduction-to-computer-vision-mar-15-2018","text":"","title":"Lab3. Brief introduction to Computer Vision  Mar 15, 2018"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#binary-machine-vision","text":"","title":"Binary Machine Vision"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#todays-lab-connected-component-labeling","text":"Check here","title":"Today's lab, connected component labeling"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#lab4-camera-calibration-mar-29-2018","text":"Course pdf","title":"Lab4. Camera Calibration Mar 29, 2018"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#camera-calibration","text":"(From official openCV document)Basically, you need to take snapshots of these patterns with your camera and let OpenCV find them. Each found pattern results in a new equation. To solve the equation you need at least a predetermined number of pattern snapshots to form a well-posed equation system. This number is higher for the chessboard pattern and less for the circle ones. For example, in theory the chessboard pattern requires at least two snapshots. However, in practice we have a good amount of noise present in our input images, so for good results you will probably need at least 10 good snapshots of the input pattern in different positions. First, download , measure the size of those square Take many photos (approx 50 images ) of this grid and save it as jpg file Iterate all the point on the","title":"Camera Calibration"},{"location":"univ_notes/uav_autopilot/uav_autopilot/#todays-lab-camera-calibration-and-wraping","text":"Lab4.pdf","title":"Today's lab, camera calibration and wraping"}]}